// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.2 (lin64) Build 2258646 Thu Jun 14 20:02:38 MDT 2018
// Date        : Sun Apr  7 11:46:07 2019
// Host        : ubeluga running 64-bit Ubuntu 18.04.4 LTS
// Command     : write_verilog -force -mode funcsim -rename_top ps_emio_eth_1g_AXIS_LMAC_0_1 -prefix
//               ps_emio_eth_1g_AXIS_LMAC_0_1_ ps_emio_eth_1g_AXIS_LMAC_0_1_sim_netlist.v
// Design      : ps_emio_eth_1g_AXIS_LMAC_0_1
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xczu9eg-ffvb1156-2-e
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

module ps_emio_eth_1g_AXIS_LMAC_0_1_DFIFO_BRIDGE_RX
   (m_axis_tvalid,
    m_axis_tlast,
    rx_mac_rd,
    cs_fifo_rd_en,
    m_axis_tdata,
    m_axis_tkeep,
    my_mac_hit1,
    lclk,
    dclk,
    rst_,
    rx_mac_data,
    m_axis_tready,
    ipcs_fifo_dout,
    rx_mac_empty,
    cs_fifo_empty);
  output m_axis_tvalid;
  output m_axis_tlast;
  output rx_mac_rd;
  output cs_fifo_rd_en;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tkeep;
  input my_mac_hit1;
  input lclk;
  input dclk;
  input rst_;
  input [63:0]rx_mac_data;
  input m_axis_tready;
  input [15:0]ipcs_fifo_dout;
  input rx_mac_empty;
  input cs_fifo_empty;

  wire bcnt_data;
  wire \bcnt_data[15]_i_1_n_0 ;
  wire \bcnt_data_reg_n_0_[0] ;
  wire \bcnt_data_reg_n_0_[10] ;
  wire \bcnt_data_reg_n_0_[11] ;
  wire \bcnt_data_reg_n_0_[12] ;
  wire \bcnt_data_reg_n_0_[13] ;
  wire \bcnt_data_reg_n_0_[14] ;
  wire \bcnt_data_reg_n_0_[15] ;
  wire \bcnt_data_reg_n_0_[1] ;
  wire \bcnt_data_reg_n_0_[2] ;
  wire \bcnt_data_reg_n_0_[3] ;
  wire \bcnt_data_reg_n_0_[4] ;
  wire \bcnt_data_reg_n_0_[5] ;
  wire \bcnt_data_reg_n_0_[6] ;
  wire \bcnt_data_reg_n_0_[7] ;
  wire \bcnt_data_reg_n_0_[8] ;
  wire \bcnt_data_reg_n_0_[9] ;
  wire [15:0]bcnt_dout;
  wire bcnt_empty;
  wire bcnt_full;
  wire bcnt_rdreq_i_1_n_0;
  wire bcnt_rdreq_reg_n_0;
  wire bcnt_wrreq_i_1_n_0;
  wire bcnt_wrreq_reg_n_0;
  wire continue_data1__21;
  wire continue_data_i_1_n_0;
  wire continue_data_reg_n_0;
  wire cs_fifo_empty;
  wire cs_fifo_rd_en;
  wire cs_fifo_rd_en_i_1_n_0;
  wire dclk;
  wire flag_i_1_n_0;
  wire flag_reg_n_0;
  wire [15:0]ipcs_fifo_dout;
  wire lclk;
  wire [31:0]m_axis_tdata;
  wire \m_axis_tdata[0]_i_1_n_0 ;
  wire \m_axis_tdata[10]_i_1_n_0 ;
  wire \m_axis_tdata[11]_i_1_n_0 ;
  wire \m_axis_tdata[12]_i_1_n_0 ;
  wire \m_axis_tdata[13]_i_1_n_0 ;
  wire \m_axis_tdata[14]_i_1_n_0 ;
  wire \m_axis_tdata[15]_i_1_n_0 ;
  wire \m_axis_tdata[16]_i_1_n_0 ;
  wire \m_axis_tdata[17]_i_1_n_0 ;
  wire \m_axis_tdata[18]_i_1_n_0 ;
  wire \m_axis_tdata[19]_i_1_n_0 ;
  wire \m_axis_tdata[1]_i_1_n_0 ;
  wire \m_axis_tdata[20]_i_1_n_0 ;
  wire \m_axis_tdata[21]_i_1_n_0 ;
  wire \m_axis_tdata[22]_i_1_n_0 ;
  wire \m_axis_tdata[23]_i_1_n_0 ;
  wire \m_axis_tdata[24]_i_1_n_0 ;
  wire \m_axis_tdata[25]_i_1_n_0 ;
  wire \m_axis_tdata[26]_i_1_n_0 ;
  wire \m_axis_tdata[27]_i_1_n_0 ;
  wire \m_axis_tdata[28]_i_1_n_0 ;
  wire \m_axis_tdata[29]_i_1_n_0 ;
  wire \m_axis_tdata[2]_i_1_n_0 ;
  wire \m_axis_tdata[30]_i_1_n_0 ;
  wire \m_axis_tdata[31]_i_1_n_0 ;
  wire \m_axis_tdata[31]_i_3_n_0 ;
  wire \m_axis_tdata[3]_i_1_n_0 ;
  wire \m_axis_tdata[4]_i_1_n_0 ;
  wire \m_axis_tdata[5]_i_1_n_0 ;
  wire \m_axis_tdata[6]_i_1_n_0 ;
  wire \m_axis_tdata[7]_i_1_n_0 ;
  wire \m_axis_tdata[8]_i_1_n_0 ;
  wire \m_axis_tdata[9]_i_1_n_0 ;
  wire [3:0]m_axis_tkeep;
  wire \m_axis_tkeep[0]_i_1_n_0 ;
  wire \m_axis_tkeep[1]_i_1_n_0 ;
  wire \m_axis_tkeep[2]_i_1_n_0 ;
  wire \m_axis_tkeep[3]_i_1_n_0 ;
  wire \m_axis_tkeep[3]_i_2_n_0 ;
  wire \m_axis_tkeep[3]_i_3_n_0 ;
  wire \m_axis_tkeep[3]_i_4_n_0 ;
  wire \m_axis_tkeep[3]_i_5_n_0 ;
  wire \m_axis_tkeep[3]_i_6_n_0 ;
  wire \m_axis_tkeep[3]_i_7_n_0 ;
  wire \m_axis_tkeep[3]_i_8_n_0 ;
  wire \m_axis_tkeep[3]_i_9_n_0 ;
  wire m_axis_tlast;
  wire m_axis_tlast_i_1_n_0;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire m_axis_tvalid9_out;
  wire m_axis_tvalid_i_2_n_0;
  wire my_mac_hit1;
  wire p_33_in;
  wire [31:1]rd_bcnt_reg1;
  wire rd_bcnt_reg1_carry__0_i_1_n_0;
  wire rd_bcnt_reg1_carry__0_i_2_n_0;
  wire rd_bcnt_reg1_carry__0_i_3_n_0;
  wire rd_bcnt_reg1_carry__0_i_4_n_0;
  wire rd_bcnt_reg1_carry__0_i_5_n_0;
  wire rd_bcnt_reg1_carry__0_i_6_n_0;
  wire rd_bcnt_reg1_carry__0_i_7_n_0;
  wire rd_bcnt_reg1_carry__0_i_8_n_0;
  wire rd_bcnt_reg1_carry__0_n_0;
  wire rd_bcnt_reg1_carry__0_n_1;
  wire rd_bcnt_reg1_carry__0_n_2;
  wire rd_bcnt_reg1_carry__0_n_3;
  wire rd_bcnt_reg1_carry__0_n_5;
  wire rd_bcnt_reg1_carry__0_n_6;
  wire rd_bcnt_reg1_carry__0_n_7;
  wire rd_bcnt_reg1_carry__1_i_1_n_0;
  wire rd_bcnt_reg1_carry__1_i_2_n_0;
  wire rd_bcnt_reg1_carry__1_i_3_n_0;
  wire rd_bcnt_reg1_carry__1_i_4_n_0;
  wire rd_bcnt_reg1_carry__1_i_5_n_0;
  wire rd_bcnt_reg1_carry__1_i_6_n_0;
  wire rd_bcnt_reg1_carry__1_i_7_n_0;
  wire rd_bcnt_reg1_carry__1_i_8_n_0;
  wire rd_bcnt_reg1_carry__1_n_0;
  wire rd_bcnt_reg1_carry__1_n_1;
  wire rd_bcnt_reg1_carry__1_n_2;
  wire rd_bcnt_reg1_carry__1_n_3;
  wire rd_bcnt_reg1_carry__1_n_5;
  wire rd_bcnt_reg1_carry__1_n_6;
  wire rd_bcnt_reg1_carry__1_n_7;
  wire rd_bcnt_reg1_carry__2_i_1_n_0;
  wire rd_bcnt_reg1_carry__2_i_2_n_0;
  wire rd_bcnt_reg1_carry__2_i_3_n_0;
  wire rd_bcnt_reg1_carry__2_i_4_n_0;
  wire rd_bcnt_reg1_carry__2_i_5_n_0;
  wire rd_bcnt_reg1_carry__2_i_6_n_0;
  wire rd_bcnt_reg1_carry__2_i_7_n_0;
  wire rd_bcnt_reg1_carry__2_n_2;
  wire rd_bcnt_reg1_carry__2_n_3;
  wire rd_bcnt_reg1_carry__2_n_5;
  wire rd_bcnt_reg1_carry__2_n_6;
  wire rd_bcnt_reg1_carry__2_n_7;
  wire rd_bcnt_reg1_carry_i_1_n_0;
  wire rd_bcnt_reg1_carry_i_2_n_0;
  wire rd_bcnt_reg1_carry_i_3_n_0;
  wire rd_bcnt_reg1_carry_i_4_n_0;
  wire rd_bcnt_reg1_carry_i_5_n_0;
  wire rd_bcnt_reg1_carry_i_6_n_0;
  wire rd_bcnt_reg1_carry_i_7_n_0;
  wire rd_bcnt_reg1_carry_n_0;
  wire rd_bcnt_reg1_carry_n_1;
  wire rd_bcnt_reg1_carry_n_2;
  wire rd_bcnt_reg1_carry_n_3;
  wire rd_bcnt_reg1_carry_n_5;
  wire rd_bcnt_reg1_carry_n_6;
  wire rd_bcnt_reg1_carry_n_7;
  wire \rd_bcnt_reg[0]_i_1_n_0 ;
  wire \rd_bcnt_reg[10]_i_1_n_0 ;
  wire \rd_bcnt_reg[11]_i_1_n_0 ;
  wire \rd_bcnt_reg[12]_i_1_n_0 ;
  wire \rd_bcnt_reg[13]_i_1_n_0 ;
  wire \rd_bcnt_reg[14]_i_1_n_0 ;
  wire \rd_bcnt_reg[15]_i_1__0_n_0 ;
  wire \rd_bcnt_reg[15]_i_2__0_n_0 ;
  wire \rd_bcnt_reg[1]_i_1_n_0 ;
  wire \rd_bcnt_reg[2]_i_1_n_0 ;
  wire \rd_bcnt_reg[31]_i_1_n_0 ;
  wire \rd_bcnt_reg[31]_i_2_n_0 ;
  wire \rd_bcnt_reg[31]_i_4_n_0 ;
  wire \rd_bcnt_reg[31]_i_5_n_0 ;
  wire \rd_bcnt_reg[31]_i_6_n_0 ;
  wire \rd_bcnt_reg[31]_i_7_n_0 ;
  wire \rd_bcnt_reg[31]_i_8_n_0 ;
  wire \rd_bcnt_reg[3]_i_1_n_0 ;
  wire \rd_bcnt_reg[4]_i_1_n_0 ;
  wire \rd_bcnt_reg[5]_i_1_n_0 ;
  wire \rd_bcnt_reg[6]_i_1_n_0 ;
  wire \rd_bcnt_reg[7]_i_1_n_0 ;
  wire \rd_bcnt_reg[8]_i_1_n_0 ;
  wire \rd_bcnt_reg[9]_i_1_n_0 ;
  wire \rd_bcnt_reg_reg_n_0_[0] ;
  wire \rd_bcnt_reg_reg_n_0_[10] ;
  wire \rd_bcnt_reg_reg_n_0_[11] ;
  wire \rd_bcnt_reg_reg_n_0_[12] ;
  wire \rd_bcnt_reg_reg_n_0_[13] ;
  wire \rd_bcnt_reg_reg_n_0_[14] ;
  wire \rd_bcnt_reg_reg_n_0_[15] ;
  wire \rd_bcnt_reg_reg_n_0_[16] ;
  wire \rd_bcnt_reg_reg_n_0_[17] ;
  wire \rd_bcnt_reg_reg_n_0_[18] ;
  wire \rd_bcnt_reg_reg_n_0_[19] ;
  wire \rd_bcnt_reg_reg_n_0_[1] ;
  wire \rd_bcnt_reg_reg_n_0_[20] ;
  wire \rd_bcnt_reg_reg_n_0_[21] ;
  wire \rd_bcnt_reg_reg_n_0_[22] ;
  wire \rd_bcnt_reg_reg_n_0_[23] ;
  wire \rd_bcnt_reg_reg_n_0_[24] ;
  wire \rd_bcnt_reg_reg_n_0_[25] ;
  wire \rd_bcnt_reg_reg_n_0_[26] ;
  wire \rd_bcnt_reg_reg_n_0_[27] ;
  wire \rd_bcnt_reg_reg_n_0_[28] ;
  wire \rd_bcnt_reg_reg_n_0_[29] ;
  wire \rd_bcnt_reg_reg_n_0_[2] ;
  wire \rd_bcnt_reg_reg_n_0_[30] ;
  wire \rd_bcnt_reg_reg_n_0_[31] ;
  wire \rd_bcnt_reg_reg_n_0_[3] ;
  wire \rd_bcnt_reg_reg_n_0_[4] ;
  wire \rd_bcnt_reg_reg_n_0_[5] ;
  wire \rd_bcnt_reg_reg_n_0_[6] ;
  wire \rd_bcnt_reg_reg_n_0_[7] ;
  wire \rd_bcnt_reg_reg_n_0_[8] ;
  wire \rd_bcnt_reg_reg_n_0_[9] ;
  wire rst_;
  wire [31:0]rx_dout;
  wire rx_empty;
  wire [63:0]rx_mac_data;
  wire rx_mac_empty;
  wire rx_mac_rd;
  wire rx_mac_rd_i_1_n_0;
  wire rx_mac_rd_i_2_n_0;
  wire rx_mac_rd_i_3_n_0;
  wire rx_mac_rd_i_4_n_0;
  wire rx_mac_rd_i_5_n_0;
  wire rx_mac_rd_i_6_n_0;
  wire rx_mac_rd_i_7_n_0;
  wire rx_rd_bcnt_st;
  wire rx_rd_fifo_st;
  wire rx_rd_lsb_fifo_st;
  wire rx_rd_msb_fifo_st;
  wire rx_rd_state229_out__4;
  wire rx_rd_state22_out;
  wire rx_rd_state2__2;
  wire rx_rd_state3__15;
  wire \rx_rd_state[0]_i_1_n_0 ;
  wire \rx_rd_state[0]_i_2_n_0 ;
  wire \rx_rd_state[0]_i_3_n_0 ;
  wire \rx_rd_state[1]_i_1_n_0 ;
  wire \rx_rd_state[2]_i_1_n_0 ;
  wire \rx_rd_state[3]_i_1_n_0 ;
  wire \rx_rd_state[3]_i_2_n_0 ;
  wire \rx_rd_state[3]_i_3_n_0 ;
  wire \rx_rd_state[3]_i_4_n_0 ;
  wire \rx_rd_state[3]_i_5_n_0 ;
  wire \rx_rd_state[3]_i_6_n_0 ;
  wire \rx_rd_state[3]_i_7_n_0 ;
  wire \rx_rd_state[3]_i_8_n_0 ;
  wire \rx_rd_state[4]_i_1_n_0 ;
  wire \rx_rd_state[4]_i_2_n_0 ;
  wire \rx_rd_state[4]_i_3_n_0 ;
  wire \rx_rd_state[4]_i_4_n_0 ;
  wire \rx_rd_state[4]_i_5_n_0 ;
  wire \rx_rd_state[4]_i_6_n_0 ;
  wire \rx_rd_state[4]_i_7_n_0 ;
  wire \rx_rd_state[4]_i_8_n_0 ;
  wire \rx_rd_state_reg_n_0_[0] ;
  wire rx_rdreq22_out__0;
  wire rx_rdreq_i_1_n_0;
  wire rx_rdreq_i_3__0_n_0;
  wire rx_rdreq_i_4__0_n_0;
  wire rx_rdreq_i_5__0_n_0;
  wire rx_rdreq_i_6_n_0;
  wire rx_rdreq_reg_n_0;
  wire rx_read_bcnt_st;
  wire rx_wr_bcnt_st;
  wire rx_wr_data_st;
  wire rx_wr_fifo_st;
  wire rx_wr_state4__28;
  wire \rx_wr_state[0]_i_1_n_0 ;
  wire \rx_wr_state[0]_i_2_n_0 ;
  wire \rx_wr_state[1]_i_1_n_0 ;
  wire \rx_wr_state[2]_i_1_n_0 ;
  wire \rx_wr_state[3]_i_1_n_0 ;
  wire \rx_wr_state[4]_i_1_n_0 ;
  wire \rx_wr_state_reg_n_0_[0] ;
  wire [31:1]tx_bcnt1;
  wire tx_bcnt1_carry__0_i_1_n_0;
  wire tx_bcnt1_carry__0_i_2_n_0;
  wire tx_bcnt1_carry__0_i_3_n_0;
  wire tx_bcnt1_carry__0_i_4_n_0;
  wire tx_bcnt1_carry__0_i_5_n_0;
  wire tx_bcnt1_carry__0_i_6_n_0;
  wire tx_bcnt1_carry__0_i_7_n_0;
  wire tx_bcnt1_carry__0_i_8_n_0;
  wire tx_bcnt1_carry__0_n_0;
  wire tx_bcnt1_carry__0_n_1;
  wire tx_bcnt1_carry__0_n_2;
  wire tx_bcnt1_carry__0_n_3;
  wire tx_bcnt1_carry__0_n_5;
  wire tx_bcnt1_carry__0_n_6;
  wire tx_bcnt1_carry__0_n_7;
  wire tx_bcnt1_carry__1_i_1_n_0;
  wire tx_bcnt1_carry__1_i_2_n_0;
  wire tx_bcnt1_carry__1_i_3_n_0;
  wire tx_bcnt1_carry__1_i_4_n_0;
  wire tx_bcnt1_carry__1_i_5_n_0;
  wire tx_bcnt1_carry__1_i_6_n_0;
  wire tx_bcnt1_carry__1_i_7_n_0;
  wire tx_bcnt1_carry__1_i_8_n_0;
  wire tx_bcnt1_carry__1_n_0;
  wire tx_bcnt1_carry__1_n_1;
  wire tx_bcnt1_carry__1_n_2;
  wire tx_bcnt1_carry__1_n_3;
  wire tx_bcnt1_carry__1_n_5;
  wire tx_bcnt1_carry__1_n_6;
  wire tx_bcnt1_carry__1_n_7;
  wire tx_bcnt1_carry__2_i_1_n_0;
  wire tx_bcnt1_carry__2_i_2_n_0;
  wire tx_bcnt1_carry__2_i_3_n_0;
  wire tx_bcnt1_carry__2_i_4_n_0;
  wire tx_bcnt1_carry__2_i_5_n_0;
  wire tx_bcnt1_carry__2_i_6_n_0;
  wire tx_bcnt1_carry__2_i_7_n_0;
  wire tx_bcnt1_carry__2_n_2;
  wire tx_bcnt1_carry__2_n_3;
  wire tx_bcnt1_carry__2_n_5;
  wire tx_bcnt1_carry__2_n_6;
  wire tx_bcnt1_carry__2_n_7;
  wire tx_bcnt1_carry_i_1_n_0;
  wire tx_bcnt1_carry_i_2_n_0;
  wire tx_bcnt1_carry_i_3_n_0;
  wire tx_bcnt1_carry_i_4_n_0;
  wire tx_bcnt1_carry_i_5_n_0;
  wire tx_bcnt1_carry_i_6_n_0;
  wire tx_bcnt1_carry_i_7_n_0;
  wire tx_bcnt1_carry_n_0;
  wire tx_bcnt1_carry_n_1;
  wire tx_bcnt1_carry_n_2;
  wire tx_bcnt1_carry_n_3;
  wire tx_bcnt1_carry_n_5;
  wire tx_bcnt1_carry_n_6;
  wire tx_bcnt1_carry_n_7;
  wire \tx_bcnt[0]_i_1_n_0 ;
  wire \tx_bcnt[10]_i_1_n_0 ;
  wire \tx_bcnt[11]_i_1_n_0 ;
  wire \tx_bcnt[12]_i_1_n_0 ;
  wire \tx_bcnt[13]_i_1_n_0 ;
  wire \tx_bcnt[14]_i_1_n_0 ;
  wire \tx_bcnt[15]_i_1__0_n_0 ;
  wire \tx_bcnt[15]_i_2_n_0 ;
  wire \tx_bcnt[1]_i_1_n_0 ;
  wire \tx_bcnt[2]_i_1_n_0 ;
  wire \tx_bcnt[31]_i_1_n_0 ;
  wire \tx_bcnt[31]_i_2_n_0 ;
  wire \tx_bcnt[3]_i_1_n_0 ;
  wire \tx_bcnt[4]_i_1_n_0 ;
  wire \tx_bcnt[5]_i_1_n_0 ;
  wire \tx_bcnt[6]_i_1_n_0 ;
  wire \tx_bcnt[7]_i_1_n_0 ;
  wire \tx_bcnt[8]_i_1_n_0 ;
  wire \tx_bcnt[9]_i_1_n_0 ;
  wire \tx_bcnt_reg_n_0_[0] ;
  wire \tx_bcnt_reg_n_0_[10] ;
  wire \tx_bcnt_reg_n_0_[11] ;
  wire \tx_bcnt_reg_n_0_[12] ;
  wire \tx_bcnt_reg_n_0_[13] ;
  wire \tx_bcnt_reg_n_0_[14] ;
  wire \tx_bcnt_reg_n_0_[15] ;
  wire \tx_bcnt_reg_n_0_[16] ;
  wire \tx_bcnt_reg_n_0_[17] ;
  wire \tx_bcnt_reg_n_0_[18] ;
  wire \tx_bcnt_reg_n_0_[19] ;
  wire \tx_bcnt_reg_n_0_[1] ;
  wire \tx_bcnt_reg_n_0_[20] ;
  wire \tx_bcnt_reg_n_0_[21] ;
  wire \tx_bcnt_reg_n_0_[22] ;
  wire \tx_bcnt_reg_n_0_[23] ;
  wire \tx_bcnt_reg_n_0_[24] ;
  wire \tx_bcnt_reg_n_0_[25] ;
  wire \tx_bcnt_reg_n_0_[26] ;
  wire \tx_bcnt_reg_n_0_[27] ;
  wire \tx_bcnt_reg_n_0_[28] ;
  wire \tx_bcnt_reg_n_0_[29] ;
  wire \tx_bcnt_reg_n_0_[2] ;
  wire \tx_bcnt_reg_n_0_[30] ;
  wire \tx_bcnt_reg_n_0_[31] ;
  wire \tx_bcnt_reg_n_0_[3] ;
  wire \tx_bcnt_reg_n_0_[4] ;
  wire \tx_bcnt_reg_n_0_[5] ;
  wire \tx_bcnt_reg_n_0_[6] ;
  wire \tx_bcnt_reg_n_0_[7] ;
  wire \tx_bcnt_reg_n_0_[8] ;
  wire \tx_bcnt_reg_n_0_[9] ;
  wire \tx_data[0]_i_1_n_0 ;
  wire \tx_data[10]_i_1_n_0 ;
  wire \tx_data[11]_i_1_n_0 ;
  wire \tx_data[12]_i_1_n_0 ;
  wire \tx_data[13]_i_1_n_0 ;
  wire \tx_data[14]_i_1_n_0 ;
  wire \tx_data[15]_i_1_n_0 ;
  wire \tx_data[16]_i_1_n_0 ;
  wire \tx_data[17]_i_1_n_0 ;
  wire \tx_data[18]_i_1_n_0 ;
  wire \tx_data[19]_i_1_n_0 ;
  wire \tx_data[1]_i_1_n_0 ;
  wire \tx_data[20]_i_1_n_0 ;
  wire \tx_data[21]_i_1_n_0 ;
  wire \tx_data[22]_i_1_n_0 ;
  wire \tx_data[23]_i_1_n_0 ;
  wire \tx_data[24]_i_1_n_0 ;
  wire \tx_data[25]_i_1_n_0 ;
  wire \tx_data[26]_i_1_n_0 ;
  wire \tx_data[27]_i_1_n_0 ;
  wire \tx_data[28]_i_1_n_0 ;
  wire \tx_data[29]_i_1_n_0 ;
  wire \tx_data[2]_i_1_n_0 ;
  wire \tx_data[30]_i_1_n_0 ;
  wire \tx_data[31]_i_1_n_0 ;
  wire \tx_data[31]_i_2__0_n_0 ;
  wire \tx_data[31]_i_4_n_0 ;
  wire \tx_data[31]_i_5_n_0 ;
  wire \tx_data[31]_i_6_n_0 ;
  wire \tx_data[3]_i_1_n_0 ;
  wire \tx_data[4]_i_1_n_0 ;
  wire \tx_data[5]_i_1_n_0 ;
  wire \tx_data[6]_i_1_n_0 ;
  wire \tx_data[7]_i_1_n_0 ;
  wire \tx_data[8]_i_1_n_0 ;
  wire \tx_data[9]_i_1_n_0 ;
  wire \tx_data_reg_n_0_[0] ;
  wire \tx_data_reg_n_0_[10] ;
  wire \tx_data_reg_n_0_[11] ;
  wire \tx_data_reg_n_0_[12] ;
  wire \tx_data_reg_n_0_[13] ;
  wire \tx_data_reg_n_0_[14] ;
  wire \tx_data_reg_n_0_[15] ;
  wire \tx_data_reg_n_0_[16] ;
  wire \tx_data_reg_n_0_[17] ;
  wire \tx_data_reg_n_0_[18] ;
  wire \tx_data_reg_n_0_[19] ;
  wire \tx_data_reg_n_0_[1] ;
  wire \tx_data_reg_n_0_[20] ;
  wire \tx_data_reg_n_0_[21] ;
  wire \tx_data_reg_n_0_[22] ;
  wire \tx_data_reg_n_0_[23] ;
  wire \tx_data_reg_n_0_[24] ;
  wire \tx_data_reg_n_0_[25] ;
  wire \tx_data_reg_n_0_[26] ;
  wire \tx_data_reg_n_0_[27] ;
  wire \tx_data_reg_n_0_[28] ;
  wire \tx_data_reg_n_0_[29] ;
  wire \tx_data_reg_n_0_[2] ;
  wire \tx_data_reg_n_0_[30] ;
  wire \tx_data_reg_n_0_[31] ;
  wire \tx_data_reg_n_0_[3] ;
  wire \tx_data_reg_n_0_[4] ;
  wire \tx_data_reg_n_0_[5] ;
  wire \tx_data_reg_n_0_[6] ;
  wire \tx_data_reg_n_0_[7] ;
  wire \tx_data_reg_n_0_[8] ;
  wire \tx_data_reg_n_0_[9] ;
  wire [63:0]tx_data_temp;
  wire \tx_data_temp[0]_i_1_n_0 ;
  wire \tx_data_temp[10]_i_1_n_0 ;
  wire \tx_data_temp[11]_i_1_n_0 ;
  wire \tx_data_temp[12]_i_1_n_0 ;
  wire \tx_data_temp[13]_i_1_n_0 ;
  wire \tx_data_temp[14]_i_1_n_0 ;
  wire \tx_data_temp[15]_i_1_n_0 ;
  wire \tx_data_temp[16]_i_1_n_0 ;
  wire \tx_data_temp[17]_i_1_n_0 ;
  wire \tx_data_temp[18]_i_1_n_0 ;
  wire \tx_data_temp[19]_i_1_n_0 ;
  wire \tx_data_temp[1]_i_1_n_0 ;
  wire \tx_data_temp[20]_i_1_n_0 ;
  wire \tx_data_temp[21]_i_1_n_0 ;
  wire \tx_data_temp[22]_i_1_n_0 ;
  wire \tx_data_temp[23]_i_1_n_0 ;
  wire \tx_data_temp[24]_i_1_n_0 ;
  wire \tx_data_temp[25]_i_1_n_0 ;
  wire \tx_data_temp[26]_i_1_n_0 ;
  wire \tx_data_temp[27]_i_1_n_0 ;
  wire \tx_data_temp[28]_i_1_n_0 ;
  wire \tx_data_temp[29]_i_1_n_0 ;
  wire \tx_data_temp[2]_i_1_n_0 ;
  wire \tx_data_temp[30]_i_1_n_0 ;
  wire \tx_data_temp[31]_i_1_n_0 ;
  wire \tx_data_temp[32]_i_1_n_0 ;
  wire \tx_data_temp[33]_i_1_n_0 ;
  wire \tx_data_temp[34]_i_1_n_0 ;
  wire \tx_data_temp[35]_i_1_n_0 ;
  wire \tx_data_temp[36]_i_1_n_0 ;
  wire \tx_data_temp[37]_i_1_n_0 ;
  wire \tx_data_temp[38]_i_1_n_0 ;
  wire \tx_data_temp[39]_i_1_n_0 ;
  wire \tx_data_temp[3]_i_1_n_0 ;
  wire \tx_data_temp[40]_i_1_n_0 ;
  wire \tx_data_temp[41]_i_1_n_0 ;
  wire \tx_data_temp[42]_i_1_n_0 ;
  wire \tx_data_temp[43]_i_1_n_0 ;
  wire \tx_data_temp[44]_i_1_n_0 ;
  wire \tx_data_temp[45]_i_1_n_0 ;
  wire \tx_data_temp[46]_i_1_n_0 ;
  wire \tx_data_temp[47]_i_1_n_0 ;
  wire \tx_data_temp[48]_i_1_n_0 ;
  wire \tx_data_temp[49]_i_1_n_0 ;
  wire \tx_data_temp[4]_i_1_n_0 ;
  wire \tx_data_temp[50]_i_1_n_0 ;
  wire \tx_data_temp[51]_i_1_n_0 ;
  wire \tx_data_temp[52]_i_1_n_0 ;
  wire \tx_data_temp[53]_i_1_n_0 ;
  wire \tx_data_temp[54]_i_1_n_0 ;
  wire \tx_data_temp[55]_i_1_n_0 ;
  wire \tx_data_temp[56]_i_1_n_0 ;
  wire \tx_data_temp[57]_i_1_n_0 ;
  wire \tx_data_temp[58]_i_1_n_0 ;
  wire \tx_data_temp[59]_i_1_n_0 ;
  wire \tx_data_temp[5]_i_1_n_0 ;
  wire \tx_data_temp[60]_i_1_n_0 ;
  wire \tx_data_temp[61]_i_1_n_0 ;
  wire \tx_data_temp[62]_i_1_n_0 ;
  wire \tx_data_temp[63]_i_1_n_0 ;
  wire \tx_data_temp[63]_i_2_n_0 ;
  wire \tx_data_temp[63]_i_3_n_0 ;
  wire \tx_data_temp[63]_i_4_n_0 ;
  wire \tx_data_temp[63]_i_5_n_0 ;
  wire \tx_data_temp[6]_i_1_n_0 ;
  wire \tx_data_temp[7]_i_1_n_0 ;
  wire \tx_data_temp[8]_i_1_n_0 ;
  wire \tx_data_temp[9]_i_1_n_0 ;
  wire tx_full;
  wire [5:0]tx_wr_data_count;
  wire tx_wrreq_i_1_n_0;
  wire tx_wrreq_i_2_n_0;
  wire tx_wrreq_i_3_n_0;
  wire tx_wrreq_i_4_n_0;
  wire tx_wrreq_reg_n_0;
  wire NLW_RX_DFIFO_32x64_rd_rst_busy_UNCONNECTED;
  wire NLW_RX_DFIFO_32x64_wr_rst_busy_UNCONNECTED;
  wire [5:0]NLW_RX_DFIFO_32x64_rd_data_count_UNCONNECTED;
  wire NLW_RX_DFIFO_BCNT_16x16_rd_rst_busy_UNCONNECTED;
  wire NLW_RX_DFIFO_BCNT_16x16_wr_rst_busy_UNCONNECTED;
  wire [3:3]NLW_rd_bcnt_reg1_carry_CO_UNCONNECTED;
  wire [3:3]NLW_rd_bcnt_reg1_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_rd_bcnt_reg1_carry__1_CO_UNCONNECTED;
  wire [7:3]NLW_rd_bcnt_reg1_carry__2_CO_UNCONNECTED;
  wire [7:7]NLW_rd_bcnt_reg1_carry__2_O_UNCONNECTED;
  wire [3:3]NLW_tx_bcnt1_carry_CO_UNCONNECTED;
  wire [3:3]NLW_tx_bcnt1_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_tx_bcnt1_carry__1_CO_UNCONNECTED;
  wire [7:3]NLW_tx_bcnt1_carry__2_CO_UNCONNECTED;
  wire [7:7]NLW_tx_bcnt1_carry__2_O_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "RX_DFIFO,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_RX_DFIFO RX_DFIFO_32x64
       (.din({\tx_data_reg_n_0_[31] ,\tx_data_reg_n_0_[30] ,\tx_data_reg_n_0_[29] ,\tx_data_reg_n_0_[28] ,\tx_data_reg_n_0_[27] ,\tx_data_reg_n_0_[26] ,\tx_data_reg_n_0_[25] ,\tx_data_reg_n_0_[24] ,\tx_data_reg_n_0_[23] ,\tx_data_reg_n_0_[22] ,\tx_data_reg_n_0_[21] ,\tx_data_reg_n_0_[20] ,\tx_data_reg_n_0_[19] ,\tx_data_reg_n_0_[18] ,\tx_data_reg_n_0_[17] ,\tx_data_reg_n_0_[16] ,\tx_data_reg_n_0_[15] ,\tx_data_reg_n_0_[14] ,\tx_data_reg_n_0_[13] ,\tx_data_reg_n_0_[12] ,\tx_data_reg_n_0_[11] ,\tx_data_reg_n_0_[10] ,\tx_data_reg_n_0_[9] ,\tx_data_reg_n_0_[8] ,\tx_data_reg_n_0_[7] ,\tx_data_reg_n_0_[6] ,\tx_data_reg_n_0_[5] ,\tx_data_reg_n_0_[4] ,\tx_data_reg_n_0_[3] ,\tx_data_reg_n_0_[2] ,\tx_data_reg_n_0_[1] ,\tx_data_reg_n_0_[0] }),
        .dout(rx_dout),
        .empty(rx_empty),
        .full(tx_full),
        .rd_clk(dclk),
        .rd_data_count(NLW_RX_DFIFO_32x64_rd_data_count_UNCONNECTED[5:0]),
        .rd_en(rx_rdreq_reg_n_0),
        .rd_rst_busy(NLW_RX_DFIFO_32x64_rd_rst_busy_UNCONNECTED),
        .rst(my_mac_hit1),
        .wr_clk(lclk),
        .wr_data_count(tx_wr_data_count),
        .wr_en(tx_wrreq_reg_n_0),
        .wr_rst_busy(NLW_RX_DFIFO_32x64_wr_rst_busy_UNCONNECTED));
  (* CHECK_LICENSE_TYPE = "RX_DFIFO_BCNT,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_RX_DFIFO_BCNT RX_DFIFO_BCNT_16x16
       (.din({\bcnt_data_reg_n_0_[15] ,\bcnt_data_reg_n_0_[14] ,\bcnt_data_reg_n_0_[13] ,\bcnt_data_reg_n_0_[12] ,\bcnt_data_reg_n_0_[11] ,\bcnt_data_reg_n_0_[10] ,\bcnt_data_reg_n_0_[9] ,\bcnt_data_reg_n_0_[8] ,\bcnt_data_reg_n_0_[7] ,\bcnt_data_reg_n_0_[6] ,\bcnt_data_reg_n_0_[5] ,\bcnt_data_reg_n_0_[4] ,\bcnt_data_reg_n_0_[3] ,\bcnt_data_reg_n_0_[2] ,\bcnt_data_reg_n_0_[1] ,\bcnt_data_reg_n_0_[0] }),
        .dout(bcnt_dout),
        .empty(bcnt_empty),
        .full(bcnt_full),
        .rd_clk(dclk),
        .rd_en(bcnt_rdreq_reg_n_0),
        .rd_rst_busy(NLW_RX_DFIFO_BCNT_16x16_rd_rst_busy_UNCONNECTED),
        .rst(my_mac_hit1),
        .wr_clk(lclk),
        .wr_en(bcnt_wrreq_reg_n_0),
        .wr_rst_busy(NLW_RX_DFIFO_BCNT_16x16_wr_rst_busy_UNCONNECTED));
  LUT5 #(
    .INIT(32'h0200FFFF)) 
    \bcnt_data[15]_i_1 
       (.I0(bcnt_full),
        .I1(\rx_rd_state_reg_n_0_[0] ),
        .I2(rx_rd_bcnt_st),
        .I3(rx_rd_fifo_st),
        .I4(rst_),
        .O(\bcnt_data[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \bcnt_data[15]_i_2 
       (.I0(rx_rd_fifo_st),
        .I1(rx_rd_bcnt_st),
        .I2(\rx_rd_state_reg_n_0_[0] ),
        .I3(continue_data_reg_n_0),
        .O(bcnt_data));
  FDRE \bcnt_data_reg[0] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[0]),
        .Q(\bcnt_data_reg_n_0_[0] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[10] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[10]),
        .Q(\bcnt_data_reg_n_0_[10] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[11] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[11]),
        .Q(\bcnt_data_reg_n_0_[11] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[12] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[12]),
        .Q(\bcnt_data_reg_n_0_[12] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[13] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[13]),
        .Q(\bcnt_data_reg_n_0_[13] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[14] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[14]),
        .Q(\bcnt_data_reg_n_0_[14] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[15] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[15]),
        .Q(\bcnt_data_reg_n_0_[15] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[1] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[1]),
        .Q(\bcnt_data_reg_n_0_[1] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[2] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[2]),
        .Q(\bcnt_data_reg_n_0_[2] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[3] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[3]),
        .Q(\bcnt_data_reg_n_0_[3] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[4] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[4]),
        .Q(\bcnt_data_reg_n_0_[4] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[5] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[5]),
        .Q(\bcnt_data_reg_n_0_[5] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[6] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[6]),
        .Q(\bcnt_data_reg_n_0_[6] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[7] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[7]),
        .Q(\bcnt_data_reg_n_0_[7] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[8] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[8]),
        .Q(\bcnt_data_reg_n_0_[8] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  FDRE \bcnt_data_reg[9] 
       (.C(lclk),
        .CE(bcnt_data),
        .D(ipcs_fifo_dout[9]),
        .Q(\bcnt_data_reg_n_0_[9] ),
        .R(\bcnt_data[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h300030000000AA00)) 
    bcnt_rdreq_i_1
       (.I0(bcnt_rdreq_reg_n_0),
        .I1(bcnt_empty),
        .I2(m_axis_tready),
        .I3(rst_),
        .I4(rx_read_bcnt_st),
        .I5(\rx_wr_state_reg_n_0_[0] ),
        .O(bcnt_rdreq_i_1_n_0));
  FDRE bcnt_rdreq_reg
       (.C(dclk),
        .CE(1'b1),
        .D(bcnt_rdreq_i_1_n_0),
        .Q(bcnt_rdreq_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00020A0A0F020A0A)) 
    bcnt_wrreq_i_1
       (.I0(bcnt_wrreq_reg_n_0),
        .I1(rx_rd_lsb_fifo_st),
        .I2(\bcnt_data[15]_i_1_n_0 ),
        .I3(rx_rd_fifo_st),
        .I4(\rd_bcnt_reg[31]_i_4_n_0 ),
        .I5(continue_data_reg_n_0),
        .O(bcnt_wrreq_i_1_n_0));
  FDRE bcnt_wrreq_reg
       (.C(lclk),
        .CE(1'b1),
        .D(bcnt_wrreq_i_1_n_0),
        .Q(bcnt_wrreq_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000E2220000)) 
    continue_data_i_1
       (.I0(continue_data_reg_n_0),
        .I1(\tx_data_temp[63]_i_1_n_0 ),
        .I2(continue_data1__21),
        .I3(rx_rd_state2__2),
        .I4(rst_),
        .I5(\rx_rd_state[0]_i_2_n_0 ),
        .O(continue_data_i_1_n_0));
  FDRE continue_data_reg
       (.C(lclk),
        .CE(1'b1),
        .D(continue_data_i_1_n_0),
        .Q(continue_data_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'hC0C000A0)) 
    cs_fifo_rd_en_i_1
       (.I0(cs_fifo_rd_en),
        .I1(rx_rd_state22_out),
        .I2(rst_),
        .I3(rx_rd_bcnt_st),
        .I4(\rx_rd_state_reg_n_0_[0] ),
        .O(cs_fifo_rd_en_i_1_n_0));
  FDRE cs_fifo_rd_en_reg
       (.C(lclk),
        .CE(1'b1),
        .D(cs_fifo_rd_en_i_1_n_0),
        .Q(cs_fifo_rd_en),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFF1FFFFF00100000)) 
    flag_i_1
       (.I0(m_axis_tready),
        .I1(rx_empty),
        .I2(m_axis_tvalid9_out),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .I5(flag_reg_n_0),
        .O(flag_i_1_n_0));
  FDRE flag_reg
       (.C(dclk),
        .CE(1'b1),
        .D(flag_i_1_n_0),
        .Q(flag_reg_n_0),
        .R(my_mac_hit1));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[0]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[0]),
        .O(\m_axis_tdata[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[10]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[10]),
        .O(\m_axis_tdata[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[11]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[11]),
        .O(\m_axis_tdata[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[12]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[12]),
        .O(\m_axis_tdata[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[13]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[13]),
        .O(\m_axis_tdata[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[14]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[14]),
        .O(\m_axis_tdata[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[15]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[15]),
        .O(\m_axis_tdata[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[16]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[16]),
        .O(\m_axis_tdata[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[17]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[17]),
        .O(\m_axis_tdata[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[18]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[18]),
        .O(\m_axis_tdata[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[19]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[19]),
        .O(\m_axis_tdata[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[1]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[1]),
        .O(\m_axis_tdata[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[20]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[20]),
        .O(\m_axis_tdata[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[21]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[21]),
        .O(\m_axis_tdata[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[22]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[22]),
        .O(\m_axis_tdata[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[23]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[23]),
        .O(\m_axis_tdata[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[24]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[24]),
        .O(\m_axis_tdata[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[25]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[25]),
        .O(\m_axis_tdata[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[26]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[26]),
        .O(\m_axis_tdata[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[27]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[27]),
        .O(\m_axis_tdata[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[28]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[28]),
        .O(\m_axis_tdata[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[29]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[29]),
        .O(\m_axis_tdata[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[2]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[2]),
        .O(\m_axis_tdata[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[30]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[30]),
        .O(\m_axis_tdata[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0010FFFF)) 
    \m_axis_tdata[31]_i_1 
       (.I0(\rx_wr_state_reg_n_0_[0] ),
        .I1(rx_read_bcnt_st),
        .I2(rx_wr_bcnt_st),
        .I3(flag_reg_n_0),
        .I4(rst_),
        .O(\m_axis_tdata[31]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \m_axis_tdata[31]_i_2 
       (.I0(\rx_wr_state_reg_n_0_[0] ),
        .I1(rx_read_bcnt_st),
        .O(m_axis_tvalid9_out));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[31]_i_3 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[31]),
        .O(\m_axis_tdata[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[3]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[3]),
        .O(\m_axis_tdata[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[4]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[4]),
        .O(\m_axis_tdata[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[5]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[5]),
        .O(\m_axis_tdata[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[6]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[6]),
        .O(\m_axis_tdata[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[7]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[7]),
        .O(\m_axis_tdata[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[8]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[8]),
        .O(\m_axis_tdata[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \m_axis_tdata[9]_i_1 
       (.I0(rx_wr_fifo_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_bcnt_st),
        .I3(rx_dout[9]),
        .O(\m_axis_tdata[9]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[0] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[0]_i_1_n_0 ),
        .Q(m_axis_tdata[0]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[10] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[10]_i_1_n_0 ),
        .Q(m_axis_tdata[10]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[11] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[11]_i_1_n_0 ),
        .Q(m_axis_tdata[11]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[12] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[12]_i_1_n_0 ),
        .Q(m_axis_tdata[12]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[13] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[13]_i_1_n_0 ),
        .Q(m_axis_tdata[13]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[14] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[14]_i_1_n_0 ),
        .Q(m_axis_tdata[14]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[15] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[15]_i_1_n_0 ),
        .Q(m_axis_tdata[15]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[16] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[16]_i_1_n_0 ),
        .Q(m_axis_tdata[16]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[17] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[17]_i_1_n_0 ),
        .Q(m_axis_tdata[17]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[18] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[18]_i_1_n_0 ),
        .Q(m_axis_tdata[18]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[19] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[19]_i_1_n_0 ),
        .Q(m_axis_tdata[19]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[1] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[1]_i_1_n_0 ),
        .Q(m_axis_tdata[1]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[20] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[20]_i_1_n_0 ),
        .Q(m_axis_tdata[20]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[21] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[21]_i_1_n_0 ),
        .Q(m_axis_tdata[21]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[22] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[22]_i_1_n_0 ),
        .Q(m_axis_tdata[22]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[23] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[23]_i_1_n_0 ),
        .Q(m_axis_tdata[23]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[24] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[24]_i_1_n_0 ),
        .Q(m_axis_tdata[24]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[25] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[25]_i_1_n_0 ),
        .Q(m_axis_tdata[25]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[26] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[26]_i_1_n_0 ),
        .Q(m_axis_tdata[26]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[27] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[27]_i_1_n_0 ),
        .Q(m_axis_tdata[27]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[28] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[28]_i_1_n_0 ),
        .Q(m_axis_tdata[28]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[29] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[29]_i_1_n_0 ),
        .Q(m_axis_tdata[29]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[2] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[2]_i_1_n_0 ),
        .Q(m_axis_tdata[2]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[30] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[30]_i_1_n_0 ),
        .Q(m_axis_tdata[30]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[31] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[31]_i_3_n_0 ),
        .Q(m_axis_tdata[31]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[3] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[3]_i_1_n_0 ),
        .Q(m_axis_tdata[3]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[4] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[4]_i_1_n_0 ),
        .Q(m_axis_tdata[4]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[5] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[5]_i_1_n_0 ),
        .Q(m_axis_tdata[5]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[6] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[6]_i_1_n_0 ),
        .Q(m_axis_tdata[6]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[7] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[7]_i_1_n_0 ),
        .Q(m_axis_tdata[7]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[8] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[8]_i_1_n_0 ),
        .Q(m_axis_tdata[8]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  FDRE \m_axis_tdata_reg[9] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tdata[9]_i_1_n_0 ),
        .Q(m_axis_tdata[9]),
        .R(\m_axis_tdata[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \m_axis_tkeep[0]_i_1 
       (.I0(\tx_bcnt_reg_n_0_[3] ),
        .I1(\m_axis_tkeep[3]_i_3_n_0 ),
        .I2(\m_axis_tkeep[3]_i_4_n_0 ),
        .I3(\tx_bcnt_reg_n_0_[2] ),
        .I4(\tx_bcnt_reg_n_0_[1] ),
        .I5(\tx_bcnt_reg_n_0_[0] ),
        .O(\m_axis_tkeep[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \m_axis_tkeep[1]_i_1 
       (.I0(\tx_bcnt_reg_n_0_[3] ),
        .I1(\m_axis_tkeep[3]_i_3_n_0 ),
        .I2(\m_axis_tkeep[3]_i_4_n_0 ),
        .I3(\tx_bcnt_reg_n_0_[2] ),
        .I4(\tx_bcnt_reg_n_0_[1] ),
        .O(\m_axis_tkeep[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFFFE)) 
    \m_axis_tkeep[2]_i_1 
       (.I0(\tx_bcnt_reg_n_0_[3] ),
        .I1(\m_axis_tkeep[3]_i_3_n_0 ),
        .I2(\m_axis_tkeep[3]_i_4_n_0 ),
        .I3(\tx_bcnt_reg_n_0_[2] ),
        .I4(\tx_bcnt_reg_n_0_[1] ),
        .I5(\tx_bcnt_reg_n_0_[0] ),
        .O(\m_axis_tkeep[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000047FFFFFFFF)) 
    \m_axis_tkeep[3]_i_1 
       (.I0(flag_reg_n_0),
        .I1(rx_wr_bcnt_st),
        .I2(rx_wr_data_st),
        .I3(\rx_wr_state_reg_n_0_[0] ),
        .I4(rx_read_bcnt_st),
        .I5(rst_),
        .O(\m_axis_tkeep[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \m_axis_tkeep[3]_i_2 
       (.I0(\tx_bcnt_reg_n_0_[3] ),
        .I1(\m_axis_tkeep[3]_i_3_n_0 ),
        .I2(\m_axis_tkeep[3]_i_4_n_0 ),
        .I3(\tx_bcnt_reg_n_0_[2] ),
        .O(\m_axis_tkeep[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \m_axis_tkeep[3]_i_3 
       (.I0(\m_axis_tkeep[3]_i_5_n_0 ),
        .I1(\tx_bcnt_reg_n_0_[18] ),
        .I2(\tx_bcnt_reg_n_0_[19] ),
        .O(\m_axis_tkeep[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \m_axis_tkeep[3]_i_4 
       (.I0(\m_axis_tkeep[3]_i_6_n_0 ),
        .I1(\tx_bcnt_reg_n_0_[14] ),
        .I2(\tx_bcnt_reg_n_0_[15] ),
        .I3(\tx_bcnt_reg_n_0_[12] ),
        .I4(\tx_bcnt_reg_n_0_[13] ),
        .I5(\m_axis_tkeep[3]_i_7_n_0 ),
        .O(\m_axis_tkeep[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \m_axis_tkeep[3]_i_5 
       (.I0(\m_axis_tkeep[3]_i_8_n_0 ),
        .I1(\tx_bcnt_reg_n_0_[26] ),
        .I2(\tx_bcnt_reg_n_0_[27] ),
        .I3(\tx_bcnt_reg_n_0_[24] ),
        .I4(\tx_bcnt_reg_n_0_[25] ),
        .I5(\m_axis_tkeep[3]_i_9_n_0 ),
        .O(\m_axis_tkeep[3]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \m_axis_tkeep[3]_i_6 
       (.I0(\tx_bcnt_reg_n_0_[10] ),
        .I1(\tx_bcnt_reg_n_0_[11] ),
        .I2(\tx_bcnt_reg_n_0_[8] ),
        .I3(\tx_bcnt_reg_n_0_[9] ),
        .O(\m_axis_tkeep[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \m_axis_tkeep[3]_i_7 
       (.I0(\tx_bcnt_reg_n_0_[5] ),
        .I1(\tx_bcnt_reg_n_0_[4] ),
        .I2(\tx_bcnt_reg_n_0_[7] ),
        .I3(\tx_bcnt_reg_n_0_[6] ),
        .I4(\tx_bcnt_reg_n_0_[16] ),
        .I5(\tx_bcnt_reg_n_0_[17] ),
        .O(\m_axis_tkeep[3]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \m_axis_tkeep[3]_i_8 
       (.I0(\tx_bcnt_reg_n_0_[22] ),
        .I1(\tx_bcnt_reg_n_0_[23] ),
        .I2(\tx_bcnt_reg_n_0_[20] ),
        .I3(\tx_bcnt_reg_n_0_[21] ),
        .O(\m_axis_tkeep[3]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \m_axis_tkeep[3]_i_9 
       (.I0(\tx_bcnt_reg_n_0_[30] ),
        .I1(\tx_bcnt_reg_n_0_[31] ),
        .I2(\tx_bcnt_reg_n_0_[28] ),
        .I3(\tx_bcnt_reg_n_0_[29] ),
        .O(\m_axis_tkeep[3]_i_9_n_0 ));
  FDRE \m_axis_tkeep_reg[0] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tkeep[0]_i_1_n_0 ),
        .Q(m_axis_tkeep[0]),
        .R(\m_axis_tkeep[3]_i_1_n_0 ));
  FDRE \m_axis_tkeep_reg[1] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tkeep[1]_i_1_n_0 ),
        .Q(m_axis_tkeep[1]),
        .R(\m_axis_tkeep[3]_i_1_n_0 ));
  FDRE \m_axis_tkeep_reg[2] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tkeep[2]_i_1_n_0 ),
        .Q(m_axis_tkeep[2]),
        .R(\m_axis_tkeep[3]_i_1_n_0 ));
  FDRE \m_axis_tkeep_reg[3] 
       (.C(dclk),
        .CE(m_axis_tvalid9_out),
        .D(\m_axis_tkeep[3]_i_2_n_0 ),
        .Q(m_axis_tkeep[3]),
        .R(\m_axis_tkeep[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8800888888C08888)) 
    m_axis_tlast_i_1
       (.I0(m_axis_tlast),
        .I1(rst_),
        .I2(rx_wr_data_st),
        .I3(rx_wr_bcnt_st),
        .I4(m_axis_tvalid9_out),
        .I5(rx_wr_state4__28),
        .O(m_axis_tlast_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFA8)) 
    m_axis_tlast_i_2
       (.I0(\tx_bcnt_reg_n_0_[2] ),
        .I1(\tx_bcnt_reg_n_0_[1] ),
        .I2(\tx_bcnt_reg_n_0_[0] ),
        .I3(\m_axis_tkeep[3]_i_3_n_0 ),
        .I4(\m_axis_tkeep[3]_i_4_n_0 ),
        .I5(\tx_bcnt_reg_n_0_[3] ),
        .O(rx_wr_state4__28));
  FDRE m_axis_tlast_reg
       (.C(dclk),
        .CE(1'b1),
        .D(m_axis_tlast_i_1_n_0),
        .Q(m_axis_tlast),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFB8000000B8)) 
    m_axis_tvalid_i_2
       (.I0(flag_reg_n_0),
        .I1(rx_wr_bcnt_st),
        .I2(rx_wr_data_st),
        .I3(\rx_wr_state_reg_n_0_[0] ),
        .I4(rx_read_bcnt_st),
        .I5(m_axis_tvalid),
        .O(m_axis_tvalid_i_2_n_0));
  FDRE m_axis_tvalid_reg
       (.C(dclk),
        .CE(1'b1),
        .D(m_axis_tvalid_i_2_n_0),
        .Q(m_axis_tvalid),
        .R(my_mac_hit1));
  CARRY8 rd_bcnt_reg1_carry
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({rd_bcnt_reg1_carry_n_0,rd_bcnt_reg1_carry_n_1,rd_bcnt_reg1_carry_n_2,rd_bcnt_reg1_carry_n_3,NLW_rd_bcnt_reg1_carry_CO_UNCONNECTED[3],rd_bcnt_reg1_carry_n_5,rd_bcnt_reg1_carry_n_6,rd_bcnt_reg1_carry_n_7}),
        .DI({\rd_bcnt_reg_reg_n_0_[8] ,\rd_bcnt_reg_reg_n_0_[7] ,\rd_bcnt_reg_reg_n_0_[6] ,\rd_bcnt_reg_reg_n_0_[5] ,\rd_bcnt_reg_reg_n_0_[4] ,\rd_bcnt_reg_reg_n_0_[3] ,\rd_bcnt_reg_reg_n_0_[2] ,1'b0}),
        .O(rd_bcnt_reg1[8:1]),
        .S({rd_bcnt_reg1_carry_i_1_n_0,rd_bcnt_reg1_carry_i_2_n_0,rd_bcnt_reg1_carry_i_3_n_0,rd_bcnt_reg1_carry_i_4_n_0,rd_bcnt_reg1_carry_i_5_n_0,rd_bcnt_reg1_carry_i_6_n_0,rd_bcnt_reg1_carry_i_7_n_0,\rd_bcnt_reg_reg_n_0_[1] }));
  CARRY8 rd_bcnt_reg1_carry__0
       (.CI(rd_bcnt_reg1_carry_n_0),
        .CI_TOP(1'b0),
        .CO({rd_bcnt_reg1_carry__0_n_0,rd_bcnt_reg1_carry__0_n_1,rd_bcnt_reg1_carry__0_n_2,rd_bcnt_reg1_carry__0_n_3,NLW_rd_bcnt_reg1_carry__0_CO_UNCONNECTED[3],rd_bcnt_reg1_carry__0_n_5,rd_bcnt_reg1_carry__0_n_6,rd_bcnt_reg1_carry__0_n_7}),
        .DI({\rd_bcnt_reg_reg_n_0_[16] ,\rd_bcnt_reg_reg_n_0_[15] ,\rd_bcnt_reg_reg_n_0_[14] ,\rd_bcnt_reg_reg_n_0_[13] ,\rd_bcnt_reg_reg_n_0_[12] ,\rd_bcnt_reg_reg_n_0_[11] ,\rd_bcnt_reg_reg_n_0_[10] ,\rd_bcnt_reg_reg_n_0_[9] }),
        .O(rd_bcnt_reg1[16:9]),
        .S({rd_bcnt_reg1_carry__0_i_1_n_0,rd_bcnt_reg1_carry__0_i_2_n_0,rd_bcnt_reg1_carry__0_i_3_n_0,rd_bcnt_reg1_carry__0_i_4_n_0,rd_bcnt_reg1_carry__0_i_5_n_0,rd_bcnt_reg1_carry__0_i_6_n_0,rd_bcnt_reg1_carry__0_i_7_n_0,rd_bcnt_reg1_carry__0_i_8_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_1
       (.I0(\rd_bcnt_reg_reg_n_0_[16] ),
        .O(rd_bcnt_reg1_carry__0_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_2
       (.I0(\rd_bcnt_reg_reg_n_0_[15] ),
        .O(rd_bcnt_reg1_carry__0_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_3
       (.I0(\rd_bcnt_reg_reg_n_0_[14] ),
        .O(rd_bcnt_reg1_carry__0_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_4
       (.I0(\rd_bcnt_reg_reg_n_0_[13] ),
        .O(rd_bcnt_reg1_carry__0_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_5
       (.I0(\rd_bcnt_reg_reg_n_0_[12] ),
        .O(rd_bcnt_reg1_carry__0_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_6
       (.I0(\rd_bcnt_reg_reg_n_0_[11] ),
        .O(rd_bcnt_reg1_carry__0_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_7
       (.I0(\rd_bcnt_reg_reg_n_0_[10] ),
        .O(rd_bcnt_reg1_carry__0_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__0_i_8
       (.I0(\rd_bcnt_reg_reg_n_0_[9] ),
        .O(rd_bcnt_reg1_carry__0_i_8_n_0));
  CARRY8 rd_bcnt_reg1_carry__1
       (.CI(rd_bcnt_reg1_carry__0_n_0),
        .CI_TOP(1'b0),
        .CO({rd_bcnt_reg1_carry__1_n_0,rd_bcnt_reg1_carry__1_n_1,rd_bcnt_reg1_carry__1_n_2,rd_bcnt_reg1_carry__1_n_3,NLW_rd_bcnt_reg1_carry__1_CO_UNCONNECTED[3],rd_bcnt_reg1_carry__1_n_5,rd_bcnt_reg1_carry__1_n_6,rd_bcnt_reg1_carry__1_n_7}),
        .DI({\rd_bcnt_reg_reg_n_0_[24] ,\rd_bcnt_reg_reg_n_0_[23] ,\rd_bcnt_reg_reg_n_0_[22] ,\rd_bcnt_reg_reg_n_0_[21] ,\rd_bcnt_reg_reg_n_0_[20] ,\rd_bcnt_reg_reg_n_0_[19] ,\rd_bcnt_reg_reg_n_0_[18] ,\rd_bcnt_reg_reg_n_0_[17] }),
        .O(rd_bcnt_reg1[24:17]),
        .S({rd_bcnt_reg1_carry__1_i_1_n_0,rd_bcnt_reg1_carry__1_i_2_n_0,rd_bcnt_reg1_carry__1_i_3_n_0,rd_bcnt_reg1_carry__1_i_4_n_0,rd_bcnt_reg1_carry__1_i_5_n_0,rd_bcnt_reg1_carry__1_i_6_n_0,rd_bcnt_reg1_carry__1_i_7_n_0,rd_bcnt_reg1_carry__1_i_8_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_1
       (.I0(\rd_bcnt_reg_reg_n_0_[24] ),
        .O(rd_bcnt_reg1_carry__1_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_2
       (.I0(\rd_bcnt_reg_reg_n_0_[23] ),
        .O(rd_bcnt_reg1_carry__1_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_3
       (.I0(\rd_bcnt_reg_reg_n_0_[22] ),
        .O(rd_bcnt_reg1_carry__1_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_4
       (.I0(\rd_bcnt_reg_reg_n_0_[21] ),
        .O(rd_bcnt_reg1_carry__1_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_5
       (.I0(\rd_bcnt_reg_reg_n_0_[20] ),
        .O(rd_bcnt_reg1_carry__1_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_6
       (.I0(\rd_bcnt_reg_reg_n_0_[19] ),
        .O(rd_bcnt_reg1_carry__1_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_7
       (.I0(\rd_bcnt_reg_reg_n_0_[18] ),
        .O(rd_bcnt_reg1_carry__1_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__1_i_8
       (.I0(\rd_bcnt_reg_reg_n_0_[17] ),
        .O(rd_bcnt_reg1_carry__1_i_8_n_0));
  CARRY8 rd_bcnt_reg1_carry__2
       (.CI(rd_bcnt_reg1_carry__1_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_rd_bcnt_reg1_carry__2_CO_UNCONNECTED[7:6],rd_bcnt_reg1_carry__2_n_2,rd_bcnt_reg1_carry__2_n_3,NLW_rd_bcnt_reg1_carry__2_CO_UNCONNECTED[3],rd_bcnt_reg1_carry__2_n_5,rd_bcnt_reg1_carry__2_n_6,rd_bcnt_reg1_carry__2_n_7}),
        .DI({1'b0,1'b0,\rd_bcnt_reg_reg_n_0_[30] ,\rd_bcnt_reg_reg_n_0_[29] ,\rd_bcnt_reg_reg_n_0_[28] ,\rd_bcnt_reg_reg_n_0_[27] ,\rd_bcnt_reg_reg_n_0_[26] ,\rd_bcnt_reg_reg_n_0_[25] }),
        .O({NLW_rd_bcnt_reg1_carry__2_O_UNCONNECTED[7],rd_bcnt_reg1[31:25]}),
        .S({1'b0,rd_bcnt_reg1_carry__2_i_1_n_0,rd_bcnt_reg1_carry__2_i_2_n_0,rd_bcnt_reg1_carry__2_i_3_n_0,rd_bcnt_reg1_carry__2_i_4_n_0,rd_bcnt_reg1_carry__2_i_5_n_0,rd_bcnt_reg1_carry__2_i_6_n_0,rd_bcnt_reg1_carry__2_i_7_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_1
       (.I0(\rd_bcnt_reg_reg_n_0_[31] ),
        .O(rd_bcnt_reg1_carry__2_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_2
       (.I0(\rd_bcnt_reg_reg_n_0_[30] ),
        .O(rd_bcnt_reg1_carry__2_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_3
       (.I0(\rd_bcnt_reg_reg_n_0_[29] ),
        .O(rd_bcnt_reg1_carry__2_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_4
       (.I0(\rd_bcnt_reg_reg_n_0_[28] ),
        .O(rd_bcnt_reg1_carry__2_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_5
       (.I0(\rd_bcnt_reg_reg_n_0_[27] ),
        .O(rd_bcnt_reg1_carry__2_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_6
       (.I0(\rd_bcnt_reg_reg_n_0_[26] ),
        .O(rd_bcnt_reg1_carry__2_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry__2_i_7
       (.I0(\rd_bcnt_reg_reg_n_0_[25] ),
        .O(rd_bcnt_reg1_carry__2_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_1
       (.I0(\rd_bcnt_reg_reg_n_0_[8] ),
        .O(rd_bcnt_reg1_carry_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_2
       (.I0(\rd_bcnt_reg_reg_n_0_[7] ),
        .O(rd_bcnt_reg1_carry_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_3
       (.I0(\rd_bcnt_reg_reg_n_0_[6] ),
        .O(rd_bcnt_reg1_carry_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_4
       (.I0(\rd_bcnt_reg_reg_n_0_[5] ),
        .O(rd_bcnt_reg1_carry_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_5
       (.I0(\rd_bcnt_reg_reg_n_0_[4] ),
        .O(rd_bcnt_reg1_carry_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_6
       (.I0(\rd_bcnt_reg_reg_n_0_[3] ),
        .O(rd_bcnt_reg1_carry_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    rd_bcnt_reg1_carry_i_7
       (.I0(\rd_bcnt_reg_reg_n_0_[2] ),
        .O(rd_bcnt_reg1_carry_i_7_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[0]_i_1 
       (.I0(ipcs_fifo_dout[0]),
        .I1(\rd_bcnt_reg_reg_n_0_[0] ),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[10]_i_1 
       (.I0(ipcs_fifo_dout[10]),
        .I1(rd_bcnt_reg1[10]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[11]_i_1 
       (.I0(ipcs_fifo_dout[11]),
        .I1(rd_bcnt_reg1[11]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[12]_i_1 
       (.I0(ipcs_fifo_dout[12]),
        .I1(rd_bcnt_reg1[12]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[13]_i_1 
       (.I0(ipcs_fifo_dout[13]),
        .I1(rd_bcnt_reg1[13]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[14]_i_1 
       (.I0(ipcs_fifo_dout[14]),
        .I1(rd_bcnt_reg1[14]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[14]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \rd_bcnt_reg[15]_i_1__0 
       (.I0(\rd_bcnt_reg[31]_i_2_n_0 ),
        .I1(rst_),
        .O(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[15]_i_2__0 
       (.I0(ipcs_fifo_dout[15]),
        .I1(rd_bcnt_reg1[15]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[15]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[1]_i_1 
       (.I0(ipcs_fifo_dout[1]),
        .I1(rd_bcnt_reg1[1]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[2]_i_1 
       (.I0(ipcs_fifo_dout[2]),
        .I1(rd_bcnt_reg1[2]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA22A2AAA2)) 
    \rd_bcnt_reg[31]_i_1 
       (.I0(\rd_bcnt_reg[31]_i_2_n_0 ),
        .I1(rst_),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h75757575F5F5F555)) 
    \rd_bcnt_reg[31]_i_2 
       (.I0(rst_),
        .I1(continue_data_reg_n_0),
        .I2(\rd_bcnt_reg[31]_i_4_n_0 ),
        .I3(rx_rd_msb_fifo_st),
        .I4(rx_rd_lsb_fifo_st),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hA8FFFFFF)) 
    \rd_bcnt_reg[31]_i_3 
       (.I0(\rd_bcnt_reg_reg_n_0_[2] ),
        .I1(\rd_bcnt_reg_reg_n_0_[1] ),
        .I2(\rd_bcnt_reg_reg_n_0_[0] ),
        .I3(\rd_bcnt_reg[31]_i_5_n_0 ),
        .I4(\rd_bcnt_reg[31]_i_6_n_0 ),
        .O(continue_data1__21));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \rd_bcnt_reg[31]_i_4 
       (.I0(rx_rd_bcnt_st),
        .I1(\rx_rd_state_reg_n_0_[0] ),
        .O(\rd_bcnt_reg[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \rd_bcnt_reg[31]_i_5 
       (.I0(\rx_rd_state[3]_i_4_n_0 ),
        .I1(\rd_bcnt_reg_reg_n_0_[19] ),
        .I2(\rd_bcnt_reg_reg_n_0_[18] ),
        .I3(\rd_bcnt_reg_reg_n_0_[24] ),
        .I4(\rx_rd_state[4]_i_4_n_0 ),
        .O(\rd_bcnt_reg[31]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h00010000)) 
    \rd_bcnt_reg[31]_i_6 
       (.I0(\rx_rd_state[4]_i_7_n_0 ),
        .I1(\rd_bcnt_reg_reg_n_0_[9] ),
        .I2(\rd_bcnt_reg_reg_n_0_[8] ),
        .I3(\rd_bcnt_reg_reg_n_0_[3] ),
        .I4(\rd_bcnt_reg[31]_i_7_n_0 ),
        .O(\rd_bcnt_reg[31]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \rd_bcnt_reg[31]_i_7 
       (.I0(\rd_bcnt_reg_reg_n_0_[13] ),
        .I1(\rd_bcnt_reg_reg_n_0_[12] ),
        .I2(\tx_data_temp[63]_i_5_n_0 ),
        .I3(\rd_bcnt_reg[31]_i_8_n_0 ),
        .I4(\rd_bcnt_reg_reg_n_0_[14] ),
        .I5(\rd_bcnt_reg_reg_n_0_[15] ),
        .O(\rd_bcnt_reg[31]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \rd_bcnt_reg[31]_i_8 
       (.I0(\rd_bcnt_reg_reg_n_0_[10] ),
        .I1(\rd_bcnt_reg_reg_n_0_[11] ),
        .O(\rd_bcnt_reg[31]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[3]_i_1 
       (.I0(ipcs_fifo_dout[3]),
        .I1(rd_bcnt_reg1[3]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[4]_i_1 
       (.I0(ipcs_fifo_dout[4]),
        .I1(rd_bcnt_reg1[4]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[5]_i_1 
       (.I0(ipcs_fifo_dout[5]),
        .I1(rd_bcnt_reg1[5]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[6]_i_1 
       (.I0(ipcs_fifo_dout[6]),
        .I1(rd_bcnt_reg1[6]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[7]_i_1 
       (.I0(ipcs_fifo_dout[7]),
        .I1(rd_bcnt_reg1[7]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[8]_i_1 
       (.I0(ipcs_fifo_dout[8]),
        .I1(rd_bcnt_reg1[8]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAACC0C000C)) 
    \rd_bcnt_reg[9]_i_1 
       (.I0(ipcs_fifo_dout[9]),
        .I1(rd_bcnt_reg1[9]),
        .I2(\rx_rd_state[4]_i_2_n_0 ),
        .I3(rx_rd_lsb_fifo_st),
        .I4(continue_data1__21),
        .I5(rx_rd_fifo_st),
        .O(\rd_bcnt_reg[9]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[0] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[0]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[0] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[10] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[10]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[10] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[11] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[11]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[11] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[12] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[12]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[12] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[13] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[13]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[13] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[14] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[14]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[14] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[15] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[15]_i_2__0_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[15] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[16] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[16]),
        .Q(\rd_bcnt_reg_reg_n_0_[16] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[17] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[17]),
        .Q(\rd_bcnt_reg_reg_n_0_[17] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[18] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[18]),
        .Q(\rd_bcnt_reg_reg_n_0_[18] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[19] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[19]),
        .Q(\rd_bcnt_reg_reg_n_0_[19] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[1] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[1]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[1] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[20] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[20]),
        .Q(\rd_bcnt_reg_reg_n_0_[20] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[21] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[21]),
        .Q(\rd_bcnt_reg_reg_n_0_[21] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[22] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[22]),
        .Q(\rd_bcnt_reg_reg_n_0_[22] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[23] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[23]),
        .Q(\rd_bcnt_reg_reg_n_0_[23] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[24] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[24]),
        .Q(\rd_bcnt_reg_reg_n_0_[24] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[25] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[25]),
        .Q(\rd_bcnt_reg_reg_n_0_[25] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[26] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[26]),
        .Q(\rd_bcnt_reg_reg_n_0_[26] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[27] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[27]),
        .Q(\rd_bcnt_reg_reg_n_0_[27] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[28] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[28]),
        .Q(\rd_bcnt_reg_reg_n_0_[28] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[29] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[29]),
        .Q(\rd_bcnt_reg_reg_n_0_[29] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[2] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[2]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[2] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[30] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[30]),
        .Q(\rd_bcnt_reg_reg_n_0_[30] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[31] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(rd_bcnt_reg1[31]),
        .Q(\rd_bcnt_reg_reg_n_0_[31] ),
        .R(\rd_bcnt_reg[31]_i_1_n_0 ));
  FDRE \rd_bcnt_reg_reg[3] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[3]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[3] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[4] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[4]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[4] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[5] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[5]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[5] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[6] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[6]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[6] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[7] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[7]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[7] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[8] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[8]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[8] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  FDRE \rd_bcnt_reg_reg[9] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[31]_i_2_n_0 ),
        .D(\rd_bcnt_reg[9]_i_1_n_0 ),
        .Q(\rd_bcnt_reg_reg_n_0_[9] ),
        .R(\rd_bcnt_reg[15]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h04040F00)) 
    rx_mac_rd_i_1
       (.I0(rx_mac_empty),
        .I1(rx_rd_state229_out__4),
        .I2(rx_mac_rd_i_2_n_0),
        .I3(rx_rd_lsb_fifo_st),
        .I4(rx_rd_bcnt_st),
        .O(rx_mac_rd_i_1_n_0));
  LUT5 #(
    .INIT(32'hDFDFDFDD)) 
    rx_mac_rd_i_2
       (.I0(rst_),
        .I1(\rx_rd_state_reg_n_0_[0] ),
        .I2(rx_rd_bcnt_st),
        .I3(rx_mac_rd_i_3_n_0),
        .I4(rx_mac_rd_i_4_n_0),
        .O(rx_mac_rd_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF80000000)) 
    rx_mac_rd_i_3
       (.I0(tx_wr_data_count[2]),
        .I1(tx_wr_data_count[5]),
        .I2(tx_wr_data_count[4]),
        .I3(tx_wr_data_count[3]),
        .I4(rx_rd_lsb_fifo_st),
        .I5(rx_rd_fifo_st),
        .O(rx_mac_rd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    rx_mac_rd_i_4
       (.I0(rx_mac_rd_i_5_n_0),
        .I1(\rx_rd_state[3]_i_4_n_0 ),
        .I2(rx_mac_rd_i_6_n_0),
        .I3(\rx_rd_state[3]_i_3_n_0 ),
        .I4(\rx_rd_state[4]_i_8_n_0 ),
        .I5(rx_mac_rd_i_7_n_0),
        .O(rx_mac_rd_i_4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    rx_mac_rd_i_5
       (.I0(\rd_bcnt_reg_reg_n_0_[27] ),
        .I1(\rd_bcnt_reg_reg_n_0_[25] ),
        .I2(\rd_bcnt_reg_reg_n_0_[26] ),
        .I3(\rd_bcnt_reg_reg_n_0_[24] ),
        .O(rx_mac_rd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    rx_mac_rd_i_6
       (.I0(\rd_bcnt_reg_reg_n_0_[16] ),
        .I1(\rd_bcnt_reg_reg_n_0_[17] ),
        .I2(\rd_bcnt_reg_reg_n_0_[19] ),
        .I3(\rd_bcnt_reg_reg_n_0_[18] ),
        .I4(rx_rd_lsb_fifo_st),
        .I5(\rx_rd_state[3]_i_7_n_0 ),
        .O(rx_mac_rd_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'h00005557)) 
    rx_mac_rd_i_7
       (.I0(\rd_bcnt_reg_reg_n_0_[3] ),
        .I1(\rd_bcnt_reg_reg_n_0_[2] ),
        .I2(\rd_bcnt_reg_reg_n_0_[1] ),
        .I3(\rd_bcnt_reg_reg_n_0_[0] ),
        .I4(\rx_rd_state[4]_i_7_n_0 ),
        .O(rx_mac_rd_i_7_n_0));
  FDRE rx_mac_rd_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rx_mac_rd_i_1_n_0),
        .Q(rx_mac_rd),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAFFFFAEAAAEAA)) 
    \rx_rd_state[0]_i_1 
       (.I0(\rx_rd_state[0]_i_2_n_0 ),
        .I1(\rx_rd_state[0]_i_3_n_0 ),
        .I2(rx_rd_bcnt_st),
        .I3(rx_rd_state2__2),
        .I4(rx_rd_state22_out),
        .I5(\rx_rd_state_reg_n_0_[0] ),
        .O(\rx_rd_state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \rx_rd_state[0]_i_2 
       (.I0(rx_rd_fifo_st),
        .I1(rx_rd_lsb_fifo_st),
        .I2(rx_rd_msb_fifo_st),
        .I3(\rx_rd_state_reg_n_0_[0] ),
        .I4(rx_rd_bcnt_st),
        .O(\rx_rd_state[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \rx_rd_state[0]_i_3 
       (.I0(rx_rd_lsb_fifo_st),
        .I1(rx_rd_fifo_st),
        .O(\rx_rd_state[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \rx_rd_state[0]_i_4 
       (.I0(tx_wr_data_count[2]),
        .I1(tx_wr_data_count[5]),
        .I2(tx_wr_data_count[4]),
        .I3(tx_wr_data_count[3]),
        .O(rx_rd_state2__2));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hD0)) 
    \rx_rd_state[0]_i_5 
       (.I0(cs_fifo_empty),
        .I1(continue_data_reg_n_0),
        .I2(rx_rd_state229_out__4),
        .O(rx_rd_state22_out));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'hD0D00F00)) 
    \rx_rd_state[1]_i_1 
       (.I0(cs_fifo_empty),
        .I1(continue_data_reg_n_0),
        .I2(rx_rd_state229_out__4),
        .I3(rx_rd_bcnt_st),
        .I4(\rx_rd_state_reg_n_0_[0] ),
        .O(\rx_rd_state[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rx_rd_state[2]_i_1 
       (.I0(\rx_rd_state_reg_n_0_[0] ),
        .I1(rx_rd_bcnt_st),
        .I2(rx_rd_state229_out__4),
        .O(\rx_rd_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000007FFFFFFF)) 
    \rx_rd_state[2]_i_2 
       (.I0(tx_wr_data_count[2]),
        .I1(tx_wr_data_count[5]),
        .I2(tx_wr_data_count[4]),
        .I3(tx_wr_data_count[3]),
        .I4(tx_wr_data_count[1]),
        .I5(tx_full),
        .O(rx_rd_state229_out__4));
  LUT6 #(
    .INIT(64'h000000000000FF20)) 
    \rx_rd_state[3]_i_1 
       (.I0(\rx_rd_state[3]_i_2_n_0 ),
        .I1(rx_rd_lsb_fifo_st),
        .I2(rx_rd_msb_fifo_st),
        .I3(rx_rd_fifo_st),
        .I4(rx_rd_bcnt_st),
        .I5(\rx_rd_state_reg_n_0_[0] ),
        .O(\rx_rd_state[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEF)) 
    \rx_rd_state[3]_i_2 
       (.I0(\rx_rd_state[3]_i_3_n_0 ),
        .I1(\rx_rd_state[3]_i_4_n_0 ),
        .I2(\rx_rd_state[3]_i_5_n_0 ),
        .I3(\rx_rd_state[3]_i_6_n_0 ),
        .I4(\rx_rd_state[3]_i_7_n_0 ),
        .I5(\rx_rd_state[3]_i_8_n_0 ),
        .O(\rx_rd_state[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_rd_state[3]_i_3 
       (.I0(\rd_bcnt_reg_reg_n_0_[12] ),
        .I1(\rd_bcnt_reg_reg_n_0_[13] ),
        .I2(\rd_bcnt_reg_reg_n_0_[15] ),
        .I3(\rd_bcnt_reg_reg_n_0_[14] ),
        .O(\rx_rd_state[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_rd_state[3]_i_4 
       (.I0(\rd_bcnt_reg_reg_n_0_[21] ),
        .I1(\rd_bcnt_reg_reg_n_0_[20] ),
        .I2(\rd_bcnt_reg_reg_n_0_[23] ),
        .I3(\rd_bcnt_reg_reg_n_0_[22] ),
        .O(\rx_rd_state[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \rx_rd_state[3]_i_5 
       (.I0(\rx_rd_state[4]_i_7_n_0 ),
        .I1(\rd_bcnt_reg_reg_n_0_[0] ),
        .I2(\rd_bcnt_reg_reg_n_0_[1] ),
        .I3(\rd_bcnt_reg_reg_n_0_[2] ),
        .I4(\rd_bcnt_reg_reg_n_0_[3] ),
        .O(\rx_rd_state[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rx_rd_state[3]_i_6 
       (.I0(\rx_rd_state[4]_i_8_n_0 ),
        .I1(\rd_bcnt_reg_reg_n_0_[24] ),
        .I2(\rd_bcnt_reg_reg_n_0_[26] ),
        .I3(\rd_bcnt_reg_reg_n_0_[25] ),
        .I4(\rd_bcnt_reg_reg_n_0_[27] ),
        .O(\rx_rd_state[3]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_rd_state[3]_i_7 
       (.I0(\rd_bcnt_reg_reg_n_0_[9] ),
        .I1(\rd_bcnt_reg_reg_n_0_[8] ),
        .I2(\rd_bcnt_reg_reg_n_0_[11] ),
        .I3(\rd_bcnt_reg_reg_n_0_[10] ),
        .O(\rx_rd_state[3]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_rd_state[3]_i_8 
       (.I0(\rd_bcnt_reg_reg_n_0_[16] ),
        .I1(\rd_bcnt_reg_reg_n_0_[17] ),
        .I2(\rd_bcnt_reg_reg_n_0_[19] ),
        .I3(\rd_bcnt_reg_reg_n_0_[18] ),
        .O(\rx_rd_state[3]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h000000007FFF0000)) 
    \rx_rd_state[4]_i_1 
       (.I0(tx_wr_data_count[2]),
        .I1(tx_wr_data_count[5]),
        .I2(tx_wr_data_count[4]),
        .I3(tx_wr_data_count[3]),
        .I4(\tx_data_temp[63]_i_1_n_0 ),
        .I5(\rx_rd_state[4]_i_2_n_0 ),
        .O(\rx_rd_state[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    \rx_rd_state[4]_i_2 
       (.I0(\rx_rd_state[4]_i_3_n_0 ),
        .I1(\rx_rd_state[4]_i_4_n_0 ),
        .I2(\rx_rd_state[4]_i_5_n_0 ),
        .I3(\rd_bcnt_reg_reg_n_0_[20] ),
        .I4(\rd_bcnt_reg_reg_n_0_[21] ),
        .I5(\rx_rd_state[4]_i_6_n_0 ),
        .O(\rx_rd_state[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \rx_rd_state[4]_i_3 
       (.I0(\rx_rd_state[3]_i_3_n_0 ),
        .I1(\rx_rd_state[3]_i_7_n_0 ),
        .I2(\rx_rd_state[4]_i_7_n_0 ),
        .I3(\rd_bcnt_reg_reg_n_0_[3] ),
        .I4(\rd_bcnt_reg_reg_n_0_[2] ),
        .I5(\rd_bcnt_reg_reg_n_0_[16] ),
        .O(\rx_rd_state[4]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \rx_rd_state[4]_i_4 
       (.I0(\rx_rd_state[4]_i_8_n_0 ),
        .I1(\rd_bcnt_reg_reg_n_0_[27] ),
        .I2(\rd_bcnt_reg_reg_n_0_[25] ),
        .I3(\rd_bcnt_reg_reg_n_0_[26] ),
        .O(\rx_rd_state[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \rx_rd_state[4]_i_5 
       (.I0(\rd_bcnt_reg_reg_n_0_[18] ),
        .I1(\rd_bcnt_reg_reg_n_0_[19] ),
        .O(\rx_rd_state[4]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \rx_rd_state[4]_i_6 
       (.I0(\rd_bcnt_reg_reg_n_0_[22] ),
        .I1(\rd_bcnt_reg_reg_n_0_[17] ),
        .I2(\rd_bcnt_reg_reg_n_0_[24] ),
        .I3(\rd_bcnt_reg_reg_n_0_[23] ),
        .O(\rx_rd_state[4]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_rd_state[4]_i_7 
       (.I0(\rd_bcnt_reg_reg_n_0_[6] ),
        .I1(\rd_bcnt_reg_reg_n_0_[5] ),
        .I2(\rd_bcnt_reg_reg_n_0_[7] ),
        .I3(\rd_bcnt_reg_reg_n_0_[4] ),
        .O(\rx_rd_state[4]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_rd_state[4]_i_8 
       (.I0(\rd_bcnt_reg_reg_n_0_[30] ),
        .I1(\rd_bcnt_reg_reg_n_0_[28] ),
        .I2(\rd_bcnt_reg_reg_n_0_[31] ),
        .I3(\rd_bcnt_reg_reg_n_0_[29] ),
        .O(\rx_rd_state[4]_i_8_n_0 ));
  FDSE \rx_rd_state_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\rx_rd_state[0]_i_1_n_0 ),
        .Q(\rx_rd_state_reg_n_0_[0] ),
        .S(my_mac_hit1));
  FDRE \rx_rd_state_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\rx_rd_state[1]_i_1_n_0 ),
        .Q(rx_rd_bcnt_st),
        .R(my_mac_hit1));
  FDRE \rx_rd_state_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\rx_rd_state[2]_i_1_n_0 ),
        .Q(rx_rd_fifo_st),
        .R(my_mac_hit1));
  FDRE \rx_rd_state_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\rx_rd_state[3]_i_1_n_0 ),
        .Q(rx_rd_lsb_fifo_st),
        .R(my_mac_hit1));
  FDRE \rx_rd_state_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\rx_rd_state[4]_i_1_n_0 ),
        .Q(rx_rd_msb_fifo_st),
        .R(my_mac_hit1));
  LUT6 #(
    .INIT(64'h00000000AFAEA0A2)) 
    rx_rdreq_i_1
       (.I0(rx_rdreq_reg_n_0),
        .I1(rx_read_bcnt_st),
        .I2(\rx_wr_state_reg_n_0_[0] ),
        .I3(rx_rdreq22_out__0),
        .I4(rx_rdreq_i_3__0_n_0),
        .I5(rx_rdreq_i_4__0_n_0),
        .O(rx_rdreq_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h2)) 
    rx_rdreq_i_2__0
       (.I0(rx_wr_data_st),
        .I1(rx_wr_bcnt_st),
        .O(rx_rdreq22_out__0));
  LUT6 #(
    .INIT(64'hFEFEFEEE00000000)) 
    rx_rdreq_i_3__0
       (.I0(rx_read_bcnt_st),
        .I1(rx_rdreq_i_5__0_n_0),
        .I2(\tx_bcnt_reg_n_0_[3] ),
        .I3(\tx_bcnt_reg_n_0_[2] ),
        .I4(rx_rdreq_i_6_n_0),
        .I5(p_33_in),
        .O(rx_rdreq_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h00000010FFFFFFFF)) 
    rx_rdreq_i_4__0
       (.I0(\rx_wr_state_reg_n_0_[0] ),
        .I1(rx_read_bcnt_st),
        .I2(rx_wr_fifo_st),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .I5(rst_),
        .O(rx_rdreq_i_4__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    rx_rdreq_i_5__0
       (.I0(\tx_bcnt_reg_n_0_[19] ),
        .I1(\tx_bcnt_reg_n_0_[18] ),
        .I2(\m_axis_tkeep[3]_i_4_n_0 ),
        .I3(\m_axis_tkeep[3]_i_5_n_0 ),
        .O(rx_rdreq_i_5__0_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    rx_rdreq_i_6
       (.I0(\tx_bcnt_reg_n_0_[0] ),
        .I1(\tx_bcnt_reg_n_0_[1] ),
        .O(rx_rdreq_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h2)) 
    rx_rdreq_i_7
       (.I0(m_axis_tready),
        .I1(rx_empty),
        .O(p_33_in));
  FDRE rx_rdreq_reg
       (.C(dclk),
        .CE(1'b1),
        .D(rx_rdreq_i_1_n_0),
        .Q(rx_rdreq_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8F8F00008F8F00FF)) 
    \rx_wr_state[0]_i_1 
       (.I0(rx_empty),
        .I1(bcnt_empty),
        .I2(m_axis_tready),
        .I3(\rx_wr_state[0]_i_2_n_0 ),
        .I4(\rx_wr_state_reg_n_0_[0] ),
        .I5(rx_read_bcnt_st),
        .O(\rx_wr_state[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \rx_wr_state[0]_i_2 
       (.I0(rx_wr_bcnt_st),
        .I1(rx_wr_data_st),
        .I2(rx_wr_fifo_st),
        .O(\rx_wr_state[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h0888)) 
    \rx_wr_state[1]_i_1 
       (.I0(\rx_wr_state_reg_n_0_[0] ),
        .I1(m_axis_tready),
        .I2(bcnt_empty),
        .I3(rx_empty),
        .O(\rx_wr_state[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0F02)) 
    \rx_wr_state[2]_i_1 
       (.I0(rx_wr_bcnt_st),
        .I1(m_axis_tready),
        .I2(\rx_wr_state_reg_n_0_[0] ),
        .I3(rx_read_bcnt_st),
        .O(\rx_wr_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0200000000000)) 
    \rx_wr_state[3]_i_1 
       (.I0(rx_wr_state4__28),
        .I1(rx_empty),
        .I2(m_axis_tready),
        .I3(rx_wr_data_st),
        .I4(rx_wr_bcnt_st),
        .I5(m_axis_tvalid9_out),
        .O(\rx_wr_state[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4040000040404000)) 
    \rx_wr_state[4]_i_1 
       (.I0(rx_wr_bcnt_st),
        .I1(rx_wr_data_st),
        .I2(m_axis_tvalid9_out),
        .I3(m_axis_tready),
        .I4(rx_empty),
        .I5(rx_wr_state4__28),
        .O(\rx_wr_state[4]_i_1_n_0 ));
  FDSE \rx_wr_state_reg[0] 
       (.C(dclk),
        .CE(1'b1),
        .D(\rx_wr_state[0]_i_1_n_0 ),
        .Q(\rx_wr_state_reg_n_0_[0] ),
        .S(my_mac_hit1));
  FDRE \rx_wr_state_reg[1] 
       (.C(dclk),
        .CE(1'b1),
        .D(\rx_wr_state[1]_i_1_n_0 ),
        .Q(rx_read_bcnt_st),
        .R(my_mac_hit1));
  FDRE \rx_wr_state_reg[2] 
       (.C(dclk),
        .CE(1'b1),
        .D(\rx_wr_state[2]_i_1_n_0 ),
        .Q(rx_wr_bcnt_st),
        .R(my_mac_hit1));
  FDRE \rx_wr_state_reg[3] 
       (.C(dclk),
        .CE(1'b1),
        .D(\rx_wr_state[3]_i_1_n_0 ),
        .Q(rx_wr_data_st),
        .R(my_mac_hit1));
  FDRE \rx_wr_state_reg[4] 
       (.C(dclk),
        .CE(1'b1),
        .D(\rx_wr_state[4]_i_1_n_0 ),
        .Q(rx_wr_fifo_st),
        .R(my_mac_hit1));
  CARRY8 tx_bcnt1_carry
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({tx_bcnt1_carry_n_0,tx_bcnt1_carry_n_1,tx_bcnt1_carry_n_2,tx_bcnt1_carry_n_3,NLW_tx_bcnt1_carry_CO_UNCONNECTED[3],tx_bcnt1_carry_n_5,tx_bcnt1_carry_n_6,tx_bcnt1_carry_n_7}),
        .DI({\tx_bcnt_reg_n_0_[8] ,\tx_bcnt_reg_n_0_[7] ,\tx_bcnt_reg_n_0_[6] ,\tx_bcnt_reg_n_0_[5] ,\tx_bcnt_reg_n_0_[4] ,\tx_bcnt_reg_n_0_[3] ,\tx_bcnt_reg_n_0_[2] ,1'b0}),
        .O(tx_bcnt1[8:1]),
        .S({tx_bcnt1_carry_i_1_n_0,tx_bcnt1_carry_i_2_n_0,tx_bcnt1_carry_i_3_n_0,tx_bcnt1_carry_i_4_n_0,tx_bcnt1_carry_i_5_n_0,tx_bcnt1_carry_i_6_n_0,tx_bcnt1_carry_i_7_n_0,\tx_bcnt_reg_n_0_[1] }));
  CARRY8 tx_bcnt1_carry__0
       (.CI(tx_bcnt1_carry_n_0),
        .CI_TOP(1'b0),
        .CO({tx_bcnt1_carry__0_n_0,tx_bcnt1_carry__0_n_1,tx_bcnt1_carry__0_n_2,tx_bcnt1_carry__0_n_3,NLW_tx_bcnt1_carry__0_CO_UNCONNECTED[3],tx_bcnt1_carry__0_n_5,tx_bcnt1_carry__0_n_6,tx_bcnt1_carry__0_n_7}),
        .DI({\tx_bcnt_reg_n_0_[16] ,\tx_bcnt_reg_n_0_[15] ,\tx_bcnt_reg_n_0_[14] ,\tx_bcnt_reg_n_0_[13] ,\tx_bcnt_reg_n_0_[12] ,\tx_bcnt_reg_n_0_[11] ,\tx_bcnt_reg_n_0_[10] ,\tx_bcnt_reg_n_0_[9] }),
        .O(tx_bcnt1[16:9]),
        .S({tx_bcnt1_carry__0_i_1_n_0,tx_bcnt1_carry__0_i_2_n_0,tx_bcnt1_carry__0_i_3_n_0,tx_bcnt1_carry__0_i_4_n_0,tx_bcnt1_carry__0_i_5_n_0,tx_bcnt1_carry__0_i_6_n_0,tx_bcnt1_carry__0_i_7_n_0,tx_bcnt1_carry__0_i_8_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_1
       (.I0(\tx_bcnt_reg_n_0_[16] ),
        .O(tx_bcnt1_carry__0_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_2
       (.I0(\tx_bcnt_reg_n_0_[15] ),
        .O(tx_bcnt1_carry__0_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_3
       (.I0(\tx_bcnt_reg_n_0_[14] ),
        .O(tx_bcnt1_carry__0_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_4
       (.I0(\tx_bcnt_reg_n_0_[13] ),
        .O(tx_bcnt1_carry__0_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_5
       (.I0(\tx_bcnt_reg_n_0_[12] ),
        .O(tx_bcnt1_carry__0_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_6
       (.I0(\tx_bcnt_reg_n_0_[11] ),
        .O(tx_bcnt1_carry__0_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_7
       (.I0(\tx_bcnt_reg_n_0_[10] ),
        .O(tx_bcnt1_carry__0_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__0_i_8
       (.I0(\tx_bcnt_reg_n_0_[9] ),
        .O(tx_bcnt1_carry__0_i_8_n_0));
  CARRY8 tx_bcnt1_carry__1
       (.CI(tx_bcnt1_carry__0_n_0),
        .CI_TOP(1'b0),
        .CO({tx_bcnt1_carry__1_n_0,tx_bcnt1_carry__1_n_1,tx_bcnt1_carry__1_n_2,tx_bcnt1_carry__1_n_3,NLW_tx_bcnt1_carry__1_CO_UNCONNECTED[3],tx_bcnt1_carry__1_n_5,tx_bcnt1_carry__1_n_6,tx_bcnt1_carry__1_n_7}),
        .DI({\tx_bcnt_reg_n_0_[24] ,\tx_bcnt_reg_n_0_[23] ,\tx_bcnt_reg_n_0_[22] ,\tx_bcnt_reg_n_0_[21] ,\tx_bcnt_reg_n_0_[20] ,\tx_bcnt_reg_n_0_[19] ,\tx_bcnt_reg_n_0_[18] ,\tx_bcnt_reg_n_0_[17] }),
        .O(tx_bcnt1[24:17]),
        .S({tx_bcnt1_carry__1_i_1_n_0,tx_bcnt1_carry__1_i_2_n_0,tx_bcnt1_carry__1_i_3_n_0,tx_bcnt1_carry__1_i_4_n_0,tx_bcnt1_carry__1_i_5_n_0,tx_bcnt1_carry__1_i_6_n_0,tx_bcnt1_carry__1_i_7_n_0,tx_bcnt1_carry__1_i_8_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_1
       (.I0(\tx_bcnt_reg_n_0_[24] ),
        .O(tx_bcnt1_carry__1_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_2
       (.I0(\tx_bcnt_reg_n_0_[23] ),
        .O(tx_bcnt1_carry__1_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_3
       (.I0(\tx_bcnt_reg_n_0_[22] ),
        .O(tx_bcnt1_carry__1_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_4
       (.I0(\tx_bcnt_reg_n_0_[21] ),
        .O(tx_bcnt1_carry__1_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_5
       (.I0(\tx_bcnt_reg_n_0_[20] ),
        .O(tx_bcnt1_carry__1_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_6
       (.I0(\tx_bcnt_reg_n_0_[19] ),
        .O(tx_bcnt1_carry__1_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_7
       (.I0(\tx_bcnt_reg_n_0_[18] ),
        .O(tx_bcnt1_carry__1_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__1_i_8
       (.I0(\tx_bcnt_reg_n_0_[17] ),
        .O(tx_bcnt1_carry__1_i_8_n_0));
  CARRY8 tx_bcnt1_carry__2
       (.CI(tx_bcnt1_carry__1_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_tx_bcnt1_carry__2_CO_UNCONNECTED[7:6],tx_bcnt1_carry__2_n_2,tx_bcnt1_carry__2_n_3,NLW_tx_bcnt1_carry__2_CO_UNCONNECTED[3],tx_bcnt1_carry__2_n_5,tx_bcnt1_carry__2_n_6,tx_bcnt1_carry__2_n_7}),
        .DI({1'b0,1'b0,\tx_bcnt_reg_n_0_[30] ,\tx_bcnt_reg_n_0_[29] ,\tx_bcnt_reg_n_0_[28] ,\tx_bcnt_reg_n_0_[27] ,\tx_bcnt_reg_n_0_[26] ,\tx_bcnt_reg_n_0_[25] }),
        .O({NLW_tx_bcnt1_carry__2_O_UNCONNECTED[7],tx_bcnt1[31:25]}),
        .S({1'b0,tx_bcnt1_carry__2_i_1_n_0,tx_bcnt1_carry__2_i_2_n_0,tx_bcnt1_carry__2_i_3_n_0,tx_bcnt1_carry__2_i_4_n_0,tx_bcnt1_carry__2_i_5_n_0,tx_bcnt1_carry__2_i_6_n_0,tx_bcnt1_carry__2_i_7_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_1
       (.I0(\tx_bcnt_reg_n_0_[31] ),
        .O(tx_bcnt1_carry__2_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_2
       (.I0(\tx_bcnt_reg_n_0_[30] ),
        .O(tx_bcnt1_carry__2_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_3
       (.I0(\tx_bcnt_reg_n_0_[29] ),
        .O(tx_bcnt1_carry__2_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_4
       (.I0(\tx_bcnt_reg_n_0_[28] ),
        .O(tx_bcnt1_carry__2_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_5
       (.I0(\tx_bcnt_reg_n_0_[27] ),
        .O(tx_bcnt1_carry__2_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_6
       (.I0(\tx_bcnt_reg_n_0_[26] ),
        .O(tx_bcnt1_carry__2_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry__2_i_7
       (.I0(\tx_bcnt_reg_n_0_[25] ),
        .O(tx_bcnt1_carry__2_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_1
       (.I0(\tx_bcnt_reg_n_0_[8] ),
        .O(tx_bcnt1_carry_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_2
       (.I0(\tx_bcnt_reg_n_0_[7] ),
        .O(tx_bcnt1_carry_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_3
       (.I0(\tx_bcnt_reg_n_0_[6] ),
        .O(tx_bcnt1_carry_i_3_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_4
       (.I0(\tx_bcnt_reg_n_0_[5] ),
        .O(tx_bcnt1_carry_i_4_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_5
       (.I0(\tx_bcnt_reg_n_0_[4] ),
        .O(tx_bcnt1_carry_i_5_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_6
       (.I0(\tx_bcnt_reg_n_0_[3] ),
        .O(tx_bcnt1_carry_i_6_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    tx_bcnt1_carry_i_7
       (.I0(\tx_bcnt_reg_n_0_[2] ),
        .O(tx_bcnt1_carry_i_7_n_0));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[0]_i_1 
       (.I0(bcnt_dout[0]),
        .I1(\tx_bcnt_reg_n_0_[0] ),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[10]_i_1 
       (.I0(bcnt_dout[10]),
        .I1(tx_bcnt1[10]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[11]_i_1 
       (.I0(bcnt_dout[11]),
        .I1(tx_bcnt1[11]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[12]_i_1 
       (.I0(bcnt_dout[12]),
        .I1(tx_bcnt1[12]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[13]_i_1 
       (.I0(bcnt_dout[13]),
        .I1(tx_bcnt1[13]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[14]_i_1 
       (.I0(bcnt_dout[14]),
        .I1(tx_bcnt1[14]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h10FF)) 
    \tx_bcnt[15]_i_1__0 
       (.I0(\rx_wr_state_reg_n_0_[0] ),
        .I1(flag_reg_n_0),
        .I2(rx_read_bcnt_st),
        .I3(rst_),
        .O(\tx_bcnt[15]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[15]_i_2 
       (.I0(bcnt_dout[15]),
        .I1(tx_bcnt1[15]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[1]_i_1 
       (.I0(bcnt_dout[1]),
        .I1(tx_bcnt1[1]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[2]_i_1 
       (.I0(bcnt_dout[2]),
        .I1(tx_bcnt1[2]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA202AAAAA)) 
    \tx_bcnt[31]_i_1 
       (.I0(\tx_bcnt[31]_i_2_n_0 ),
        .I1(flag_reg_n_0),
        .I2(rx_wr_bcnt_st),
        .I3(rx_wr_data_st),
        .I4(rst_),
        .I5(rx_read_bcnt_st),
        .O(\tx_bcnt[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h557755F5)) 
    \tx_bcnt[31]_i_2 
       (.I0(rst_),
        .I1(flag_reg_n_0),
        .I2(\rx_wr_state[0]_i_2_n_0 ),
        .I3(\rx_wr_state_reg_n_0_[0] ),
        .I4(rx_read_bcnt_st),
        .O(\tx_bcnt[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[3]_i_1 
       (.I0(bcnt_dout[3]),
        .I1(tx_bcnt1[3]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[4]_i_1 
       (.I0(bcnt_dout[4]),
        .I1(tx_bcnt1[4]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[5]_i_1 
       (.I0(bcnt_dout[5]),
        .I1(tx_bcnt1[5]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[6]_i_1 
       (.I0(bcnt_dout[6]),
        .I1(tx_bcnt1[6]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[7]_i_1 
       (.I0(bcnt_dout[7]),
        .I1(tx_bcnt1[7]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[8]_i_1 
       (.I0(bcnt_dout[8]),
        .I1(tx_bcnt1[8]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hCACCCA00)) 
    \tx_bcnt[9]_i_1 
       (.I0(bcnt_dout[9]),
        .I1(tx_bcnt1[9]),
        .I2(flag_reg_n_0),
        .I3(rx_wr_bcnt_st),
        .I4(rx_wr_data_st),
        .O(\tx_bcnt[9]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[0] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[0]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[0] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[10] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[10]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[10] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[11] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[11]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[11] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[12] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[12]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[12] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[13] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[13]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[13] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[14] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[14]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[14] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[15] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[15]_i_2_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[15] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[16] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[16]),
        .Q(\tx_bcnt_reg_n_0_[16] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[17] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[17]),
        .Q(\tx_bcnt_reg_n_0_[17] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[18] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[18]),
        .Q(\tx_bcnt_reg_n_0_[18] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[19] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[19]),
        .Q(\tx_bcnt_reg_n_0_[19] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[1] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[1]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[1] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[20] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[20]),
        .Q(\tx_bcnt_reg_n_0_[20] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[21] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[21]),
        .Q(\tx_bcnt_reg_n_0_[21] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[22] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[22]),
        .Q(\tx_bcnt_reg_n_0_[22] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[23] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[23]),
        .Q(\tx_bcnt_reg_n_0_[23] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[24] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[24]),
        .Q(\tx_bcnt_reg_n_0_[24] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[25] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[25]),
        .Q(\tx_bcnt_reg_n_0_[25] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[26] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[26]),
        .Q(\tx_bcnt_reg_n_0_[26] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[27] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[27]),
        .Q(\tx_bcnt_reg_n_0_[27] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[28] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[28]),
        .Q(\tx_bcnt_reg_n_0_[28] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[29] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[29]),
        .Q(\tx_bcnt_reg_n_0_[29] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[2] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[2]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[2] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[30] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[30]),
        .Q(\tx_bcnt_reg_n_0_[30] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[31] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(tx_bcnt1[31]),
        .Q(\tx_bcnt_reg_n_0_[31] ),
        .R(\tx_bcnt[31]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[3] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[3]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[3] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[4] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[4]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[4] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[5] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[5]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[5] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[6] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[6]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[6] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[7] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[7]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[7] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[8] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[8]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[8] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  FDRE \tx_bcnt_reg[9] 
       (.C(dclk),
        .CE(\tx_bcnt[31]_i_2_n_0 ),
        .D(\tx_bcnt[9]_i_1_n_0 ),
        .Q(\tx_bcnt_reg_n_0_[9] ),
        .R(\tx_bcnt[15]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[0]_i_1 
       (.I0(tx_data_temp[0]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[0]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[32]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[10]_i_1 
       (.I0(tx_data_temp[10]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[10]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[42]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[11]_i_1 
       (.I0(tx_data_temp[11]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[11]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[43]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[12]_i_1 
       (.I0(tx_data_temp[12]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[12]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[44]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[13]_i_1 
       (.I0(tx_data_temp[13]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[13]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[45]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[14]_i_1 
       (.I0(tx_data_temp[14]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[14]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[46]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[15]_i_1 
       (.I0(tx_data_temp[15]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[15]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[47]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[16]_i_1 
       (.I0(tx_data_temp[16]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[16]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[48]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[17]_i_1 
       (.I0(tx_data_temp[17]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[17]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[49]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[18]_i_1 
       (.I0(tx_data_temp[18]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[18]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[50]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[19]_i_1 
       (.I0(tx_data_temp[19]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[19]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[51]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[1]_i_1 
       (.I0(tx_data_temp[1]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[1]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[33]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[20]_i_1 
       (.I0(tx_data_temp[20]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[20]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[52]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[21]_i_1 
       (.I0(tx_data_temp[21]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[21]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[53]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[22]_i_1 
       (.I0(tx_data_temp[22]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[22]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[54]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[23]_i_1 
       (.I0(tx_data_temp[23]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[23]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[55]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[24]_i_1 
       (.I0(tx_data_temp[24]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[24]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[56]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[25]_i_1 
       (.I0(tx_data_temp[25]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[25]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[57]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[26]_i_1 
       (.I0(tx_data_temp[26]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[26]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[58]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[27]_i_1 
       (.I0(tx_data_temp[27]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[27]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[59]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[28]_i_1 
       (.I0(tx_data_temp[28]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[28]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[60]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[29]_i_1 
       (.I0(tx_data_temp[29]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[29]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[61]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[2]_i_1 
       (.I0(tx_data_temp[2]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[2]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[34]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[30]_i_1 
       (.I0(tx_data_temp[30]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[30]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[62]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFE000E)) 
    \tx_data[31]_i_1 
       (.I0(rx_rd_msb_fifo_st),
        .I1(rx_rd_lsb_fifo_st),
        .I2(rx_rd_fifo_st),
        .I3(rx_rd_bcnt_st),
        .I4(rx_rd_state3__15),
        .I5(\rx_rd_state_reg_n_0_[0] ),
        .O(\tx_data[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[31]_i_2__0 
       (.I0(tx_data_temp[31]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[31]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[63]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[31]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_data[31]_i_3 
       (.I0(rx_rd_state229_out__4),
        .I1(continue_data_reg_n_0),
        .O(rx_rd_state3__15));
  LUT4 #(
    .INIT(16'h0444)) 
    \tx_data[31]_i_4 
       (.I0(rx_rd_fifo_st),
        .I1(rx_rd_lsb_fifo_st),
        .I2(\tx_data_temp[63]_i_4_n_0 ),
        .I3(\tx_data_temp[63]_i_3_n_0 ),
        .O(\tx_data[31]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0111)) 
    \tx_data[31]_i_5 
       (.I0(rx_rd_lsb_fifo_st),
        .I1(\tx_data[31]_i_6_n_0 ),
        .I2(\tx_data_temp[63]_i_4_n_0 ),
        .I3(\tx_data_temp[63]_i_3_n_0 ),
        .I4(rx_rd_fifo_st),
        .O(\tx_data[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8000800080000000)) 
    \tx_data[31]_i_6 
       (.I0(tx_wr_data_count[5]),
        .I1(tx_wr_data_count[4]),
        .I2(tx_wr_data_count[3]),
        .I3(tx_wr_data_count[2]),
        .I4(tx_wr_data_count[0]),
        .I5(tx_wr_data_count[1]),
        .O(\tx_data[31]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[3]_i_1 
       (.I0(tx_data_temp[3]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[3]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[35]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[4]_i_1 
       (.I0(tx_data_temp[4]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[4]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[36]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[5]_i_1 
       (.I0(tx_data_temp[5]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[5]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[37]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[6]_i_1 
       (.I0(tx_data_temp[6]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[6]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[38]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[7]_i_1 
       (.I0(tx_data_temp[7]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[7]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[39]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[8]_i_1 
       (.I0(tx_data_temp[8]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[8]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[40]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBB888B888B888)) 
    \tx_data[9]_i_1 
       (.I0(tx_data_temp[9]),
        .I1(rx_rd_bcnt_st),
        .I2(rx_mac_data[9]),
        .I3(\tx_data[31]_i_4_n_0 ),
        .I4(tx_data_temp[41]),
        .I5(\tx_data[31]_i_5_n_0 ),
        .O(\tx_data[9]_i_1_n_0 ));
  FDRE \tx_data_reg[0] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[0]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[0] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[10] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[10]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[10] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[11] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[11]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[11] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[12] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[12]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[12] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[13] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[13]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[13] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[14] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[14]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[14] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[15] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[15]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[15] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[16] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[16]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[16] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[17] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[17]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[17] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[18] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[18]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[18] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[19] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[19]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[19] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[1] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[1]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[1] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[20] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[20]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[20] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[21] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[21]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[21] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[22] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[22]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[22] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[23] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[23]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[23] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[24] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[24]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[24] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[25] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[25]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[25] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[26] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[26]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[26] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[27] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[27]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[27] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[28] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[28]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[28] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[29] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[29]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[29] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[2] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[2]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[2] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[30] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[30]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[30] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[31] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[31]_i_2__0_n_0 ),
        .Q(\tx_data_reg_n_0_[31] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[3] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[3]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[3] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[4] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[4]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[4] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[5] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[5]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[5] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[6] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[6]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[6] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[7] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[7]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[7] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[8] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[8]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[8] ),
        .R(my_mac_hit1));
  FDRE \tx_data_reg[9] 
       (.C(lclk),
        .CE(\tx_data[31]_i_1_n_0 ),
        .D(\tx_data[9]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[9] ),
        .R(my_mac_hit1));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[0]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[0]),
        .O(\tx_data_temp[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[10]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[10]),
        .O(\tx_data_temp[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[11]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[11]),
        .O(\tx_data_temp[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[12]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[12]),
        .O(\tx_data_temp[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[13]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[13]),
        .O(\tx_data_temp[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[14]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[14]),
        .O(\tx_data_temp[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[15]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[15]),
        .O(\tx_data_temp[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[16]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[16]),
        .O(\tx_data_temp[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[17]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[17]),
        .O(\tx_data_temp[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[18]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[18]),
        .O(\tx_data_temp[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[19]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[19]),
        .O(\tx_data_temp[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[1]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[1]),
        .O(\tx_data_temp[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[20]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[20]),
        .O(\tx_data_temp[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[21]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[21]),
        .O(\tx_data_temp[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[22]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[22]),
        .O(\tx_data_temp[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[23]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[23]),
        .O(\tx_data_temp[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[24]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[24]),
        .O(\tx_data_temp[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[25]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[25]),
        .O(\tx_data_temp[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[26]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[26]),
        .O(\tx_data_temp[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[27]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[27]),
        .O(\tx_data_temp[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[28]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[28]),
        .O(\tx_data_temp[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[29]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[29]),
        .O(\tx_data_temp[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[2]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[2]),
        .O(\tx_data_temp[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[30]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[30]),
        .O(\tx_data_temp[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[31]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[31]),
        .O(\tx_data_temp[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[32]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[32]),
        .O(\tx_data_temp[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[33]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[33]),
        .O(\tx_data_temp[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[34]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[34]),
        .O(\tx_data_temp[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[35]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[35]),
        .O(\tx_data_temp[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[36]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[36]),
        .O(\tx_data_temp[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[37]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[37]),
        .O(\tx_data_temp[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[38]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[38]),
        .O(\tx_data_temp[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[39]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[39]),
        .O(\tx_data_temp[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[3]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[3]),
        .O(\tx_data_temp[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[40]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[40]),
        .O(\tx_data_temp[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[41]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[41]),
        .O(\tx_data_temp[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[42]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[42]),
        .O(\tx_data_temp[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[43]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[43]),
        .O(\tx_data_temp[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[44]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[44]),
        .O(\tx_data_temp[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[45]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[45]),
        .O(\tx_data_temp[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[46]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[46]),
        .O(\tx_data_temp[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[47]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[47]),
        .O(\tx_data_temp[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[48]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[48]),
        .O(\tx_data_temp[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[49]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[49]),
        .O(\tx_data_temp[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[4]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[4]),
        .O(\tx_data_temp[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[50]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[50]),
        .O(\tx_data_temp[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[51]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[51]),
        .O(\tx_data_temp[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[52]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[52]),
        .O(\tx_data_temp[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[53]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[53]),
        .O(\tx_data_temp[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[54]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[54]),
        .O(\tx_data_temp[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[55]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[55]),
        .O(\tx_data_temp[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[56]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[56]),
        .O(\tx_data_temp[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[57]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[57]),
        .O(\tx_data_temp[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[58]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[58]),
        .O(\tx_data_temp[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[59]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[59]),
        .O(\tx_data_temp[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[5]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[5]),
        .O(\tx_data_temp[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[60]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[60]),
        .O(\tx_data_temp[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[61]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[61]),
        .O(\tx_data_temp[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[62]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[62]),
        .O(\tx_data_temp[62]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \tx_data_temp[63]_i_1 
       (.I0(rx_rd_fifo_st),
        .I1(rx_rd_lsb_fifo_st),
        .I2(\rx_rd_state_reg_n_0_[0] ),
        .I3(rx_rd_bcnt_st),
        .O(\tx_data_temp[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[63]_i_2 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[63]),
        .O(\tx_data_temp[63]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \tx_data_temp[63]_i_3 
       (.I0(\rx_rd_state[3]_i_5_n_0 ),
        .I1(\rx_rd_state[3]_i_7_n_0 ),
        .I2(\rd_bcnt_reg_reg_n_0_[12] ),
        .I3(\rd_bcnt_reg_reg_n_0_[13] ),
        .I4(\rd_bcnt_reg_reg_n_0_[15] ),
        .I5(\rd_bcnt_reg_reg_n_0_[14] ),
        .O(\tx_data_temp[63]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \tx_data_temp[63]_i_4 
       (.I0(\rx_rd_state[3]_i_4_n_0 ),
        .I1(\rx_rd_state[4]_i_4_n_0 ),
        .I2(\tx_data_temp[63]_i_5_n_0 ),
        .I3(\rd_bcnt_reg_reg_n_0_[19] ),
        .I4(\rd_bcnt_reg_reg_n_0_[18] ),
        .I5(\rd_bcnt_reg_reg_n_0_[24] ),
        .O(\tx_data_temp[63]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \tx_data_temp[63]_i_5 
       (.I0(\rd_bcnt_reg_reg_n_0_[17] ),
        .I1(\rd_bcnt_reg_reg_n_0_[16] ),
        .O(\tx_data_temp[63]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[6]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[6]),
        .O(\tx_data_temp[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[7]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[7]),
        .O(\tx_data_temp[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[8]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[8]),
        .O(\tx_data_temp[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \tx_data_temp[9]_i_1 
       (.I0(\tx_data_temp[63]_i_3_n_0 ),
        .I1(\tx_data_temp[63]_i_4_n_0 ),
        .I2(rx_mac_data[9]),
        .O(\tx_data_temp[9]_i_1_n_0 ));
  FDRE \tx_data_temp_reg[0] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[0]_i_1_n_0 ),
        .Q(tx_data_temp[0]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[10] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[10]_i_1_n_0 ),
        .Q(tx_data_temp[10]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[11] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[11]_i_1_n_0 ),
        .Q(tx_data_temp[11]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[12] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[12]_i_1_n_0 ),
        .Q(tx_data_temp[12]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[13] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[13]_i_1_n_0 ),
        .Q(tx_data_temp[13]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[14] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[14]_i_1_n_0 ),
        .Q(tx_data_temp[14]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[15] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[15]_i_1_n_0 ),
        .Q(tx_data_temp[15]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[16] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[16]_i_1_n_0 ),
        .Q(tx_data_temp[16]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[17] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[17]_i_1_n_0 ),
        .Q(tx_data_temp[17]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[18] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[18]_i_1_n_0 ),
        .Q(tx_data_temp[18]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[19] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[19]_i_1_n_0 ),
        .Q(tx_data_temp[19]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[1] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[1]_i_1_n_0 ),
        .Q(tx_data_temp[1]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[20] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[20]_i_1_n_0 ),
        .Q(tx_data_temp[20]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[21] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[21]_i_1_n_0 ),
        .Q(tx_data_temp[21]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[22] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[22]_i_1_n_0 ),
        .Q(tx_data_temp[22]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[23] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[23]_i_1_n_0 ),
        .Q(tx_data_temp[23]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[24] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[24]_i_1_n_0 ),
        .Q(tx_data_temp[24]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[25] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[25]_i_1_n_0 ),
        .Q(tx_data_temp[25]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[26] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[26]_i_1_n_0 ),
        .Q(tx_data_temp[26]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[27] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[27]_i_1_n_0 ),
        .Q(tx_data_temp[27]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[28] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[28]_i_1_n_0 ),
        .Q(tx_data_temp[28]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[29] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[29]_i_1_n_0 ),
        .Q(tx_data_temp[29]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[2] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[2]_i_1_n_0 ),
        .Q(tx_data_temp[2]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[30] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[30]_i_1_n_0 ),
        .Q(tx_data_temp[30]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[31] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[31]_i_1_n_0 ),
        .Q(tx_data_temp[31]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[32] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[32]_i_1_n_0 ),
        .Q(tx_data_temp[32]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[33] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[33]_i_1_n_0 ),
        .Q(tx_data_temp[33]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[34] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[34]_i_1_n_0 ),
        .Q(tx_data_temp[34]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[35] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[35]_i_1_n_0 ),
        .Q(tx_data_temp[35]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[36] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[36]_i_1_n_0 ),
        .Q(tx_data_temp[36]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[37] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[37]_i_1_n_0 ),
        .Q(tx_data_temp[37]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[38] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[38]_i_1_n_0 ),
        .Q(tx_data_temp[38]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[39] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[39]_i_1_n_0 ),
        .Q(tx_data_temp[39]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[3] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[3]_i_1_n_0 ),
        .Q(tx_data_temp[3]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[40] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[40]_i_1_n_0 ),
        .Q(tx_data_temp[40]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[41] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[41]_i_1_n_0 ),
        .Q(tx_data_temp[41]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[42] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[42]_i_1_n_0 ),
        .Q(tx_data_temp[42]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[43] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[43]_i_1_n_0 ),
        .Q(tx_data_temp[43]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[44] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[44]_i_1_n_0 ),
        .Q(tx_data_temp[44]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[45] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[45]_i_1_n_0 ),
        .Q(tx_data_temp[45]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[46] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[46]_i_1_n_0 ),
        .Q(tx_data_temp[46]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[47] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[47]_i_1_n_0 ),
        .Q(tx_data_temp[47]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[48] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[48]_i_1_n_0 ),
        .Q(tx_data_temp[48]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[49] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[49]_i_1_n_0 ),
        .Q(tx_data_temp[49]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[4] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[4]_i_1_n_0 ),
        .Q(tx_data_temp[4]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[50] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[50]_i_1_n_0 ),
        .Q(tx_data_temp[50]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[51] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[51]_i_1_n_0 ),
        .Q(tx_data_temp[51]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[52] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[52]_i_1_n_0 ),
        .Q(tx_data_temp[52]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[53] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[53]_i_1_n_0 ),
        .Q(tx_data_temp[53]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[54] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[54]_i_1_n_0 ),
        .Q(tx_data_temp[54]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[55] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[55]_i_1_n_0 ),
        .Q(tx_data_temp[55]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[56] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[56]_i_1_n_0 ),
        .Q(tx_data_temp[56]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[57] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[57]_i_1_n_0 ),
        .Q(tx_data_temp[57]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[58] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[58]_i_1_n_0 ),
        .Q(tx_data_temp[58]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[59] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[59]_i_1_n_0 ),
        .Q(tx_data_temp[59]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[5] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[5]_i_1_n_0 ),
        .Q(tx_data_temp[5]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[60] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[60]_i_1_n_0 ),
        .Q(tx_data_temp[60]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[61] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[61]_i_1_n_0 ),
        .Q(tx_data_temp[61]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[62] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[62]_i_1_n_0 ),
        .Q(tx_data_temp[62]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[63] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[63]_i_2_n_0 ),
        .Q(tx_data_temp[63]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[6] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[6]_i_1_n_0 ),
        .Q(tx_data_temp[6]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[7] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[7]_i_1_n_0 ),
        .Q(tx_data_temp[7]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[8] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[8]_i_1_n_0 ),
        .Q(tx_data_temp[8]),
        .R(my_mac_hit1));
  FDRE \tx_data_temp_reg[9] 
       (.C(lclk),
        .CE(\tx_data_temp[63]_i_1_n_0 ),
        .D(\tx_data_temp[9]_i_1_n_0 ),
        .Q(tx_data_temp[9]),
        .R(my_mac_hit1));
  LUT6 #(
    .INIT(64'h00000000FFE200E2)) 
    tx_wrreq_i_1
       (.I0(tx_wrreq_i_2_n_0),
        .I1(rx_rd_bcnt_st),
        .I2(rx_rd_state3__15),
        .I3(\rx_rd_state_reg_n_0_[0] ),
        .I4(tx_wrreq_reg_n_0),
        .I5(tx_wrreq_i_3_n_0),
        .O(tx_wrreq_i_1_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAABBBAAAA)) 
    tx_wrreq_i_2
       (.I0(tx_wrreq_i_4_n_0),
        .I1(\tx_data[31]_i_6_n_0 ),
        .I2(\tx_data_temp[63]_i_4_n_0 ),
        .I3(\tx_data_temp[63]_i_3_n_0 ),
        .I4(rx_rd_msb_fifo_st),
        .I5(rx_rd_fifo_st),
        .O(tx_wrreq_i_2_n_0));
  LUT6 #(
    .INIT(64'hEA000000FFFFFFFF)) 
    tx_wrreq_i_3
       (.I0(rx_rd_state2__2),
        .I1(\tx_data_temp[63]_i_3_n_0 ),
        .I2(\tx_data_temp[63]_i_4_n_0 ),
        .I3(\rd_bcnt_reg[31]_i_4_n_0 ),
        .I4(\rx_rd_state[0]_i_3_n_0 ),
        .I5(rst_),
        .O(tx_wrreq_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    tx_wrreq_i_4
       (.I0(rx_rd_state229_out__4),
        .I1(continue_data_reg_n_0),
        .I2(rx_rd_fifo_st),
        .I3(rx_rd_lsb_fifo_st),
        .O(tx_wrreq_i_4_n_0));
  FDRE tx_wrreq_reg
       (.C(lclk),
        .CE(1'b1),
        .D(tx_wrreq_i_1_n_0),
        .Q(tx_wrreq_reg_n_0),
        .R(1'b0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_DFIFO_BRIDGE_TX
   (full,
    empty,
    s_axis_tready,
    tx_mac_wr,
    Q,
    my_mac_hit1,
    dclk,
    lclk,
    rst_,
    s_axis_tlast,
    tx_rd_state26_out,
    s_axis_tvalid,
    s_axis_tkeep,
    s_axis_tdata);
  output full;
  output empty;
  output s_axis_tready;
  output tx_mac_wr;
  output [63:0]Q;
  input my_mac_hit1;
  input dclk;
  input lclk;
  input rst_;
  input s_axis_tlast;
  input tx_rd_state26_out;
  input s_axis_tvalid;
  input [3:0]s_axis_tkeep;
  input [31:0]s_axis_tdata;

  wire [63:0]Q;
  wire byte_lo_i_1_n_0;
  wire byte_lo_reg_n_0;
  wire dclk;
  wire empty;
  wire first_fifo_data;
  wire first_fifo_data_i_1_n_0;
  wire full;
  wire lclk;
  wire my_mac_hit1;
  wire [15:0]p_0_in;
  wire [15:0]p_1_in;
  wire [15:0]rd_bcnt_reg;
  wire \rd_bcnt_reg[10]_i_2_n_0 ;
  wire \rd_bcnt_reg[11]_i_2_n_0 ;
  wire \rd_bcnt_reg[12]_i_2_n_0 ;
  wire \rd_bcnt_reg[14]_i_2_n_0 ;
  wire \rd_bcnt_reg[15]_i_2_n_0 ;
  wire \rd_bcnt_reg[15]_i_4_n_0 ;
  wire \rd_bcnt_reg[6]_i_2_n_0 ;
  wire \rd_bcnt_reg[7]_i_2_n_0 ;
  wire \rd_bcnt_reg[9]_i_2_n_0 ;
  wire rst_;
  wire [15:0]rx_bcnt_out;
  wire rx_bcnt_rdreq_i_1_n_0;
  wire rx_bcnt_rdreq_reg_n_0;
  wire [63:0]rx_dout;
  wire rx_rdreq;
  wire rx_rdreq_i_1__0_n_0;
  wire rx_rdreq_i_2_n_0;
  wire rx_rdreq_i_3_n_0;
  wire rx_rdreq_i_4_n_0;
  wire rx_rdreq_i_5_n_0;
  wire rx_rdreq_reg_n_0;
  wire [31:0]s_axis_tdata;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tready_i_1_n_0;
  wire s_axis_tready_i_3_n_0;
  wire s_axis_tready_i_4_n_0;
  wire s_axis_tvalid;
  wire \tx_bcnt[15]_i_1_n_0 ;
  wire tx_bcnt_full;
  wire \tx_bcnt_reg_n_0_[0] ;
  wire \tx_bcnt_reg_n_0_[10] ;
  wire \tx_bcnt_reg_n_0_[11] ;
  wire \tx_bcnt_reg_n_0_[12] ;
  wire \tx_bcnt_reg_n_0_[13] ;
  wire \tx_bcnt_reg_n_0_[14] ;
  wire \tx_bcnt_reg_n_0_[15] ;
  wire \tx_bcnt_reg_n_0_[1] ;
  wire \tx_bcnt_reg_n_0_[2] ;
  wire \tx_bcnt_reg_n_0_[3] ;
  wire \tx_bcnt_reg_n_0_[4] ;
  wire \tx_bcnt_reg_n_0_[5] ;
  wire \tx_bcnt_reg_n_0_[6] ;
  wire \tx_bcnt_reg_n_0_[7] ;
  wire \tx_bcnt_reg_n_0_[8] ;
  wire \tx_bcnt_reg_n_0_[9] ;
  wire tx_bcnt_wrreq;
  wire tx_bcnt_wrreq_i_1_n_0;
  wire [63:31]tx_data;
  wire [63:31]tx_data0_in;
  wire \tx_data[32]_i_1_n_0 ;
  wire \tx_data[33]_i_1_n_0 ;
  wire \tx_data[34]_i_1_n_0 ;
  wire \tx_data[35]_i_1_n_0 ;
  wire \tx_data[36]_i_1_n_0 ;
  wire \tx_data[37]_i_1_n_0 ;
  wire \tx_data[38]_i_1_n_0 ;
  wire \tx_data[39]_i_1_n_0 ;
  wire \tx_data[40]_i_1_n_0 ;
  wire \tx_data[41]_i_1_n_0 ;
  wire \tx_data[42]_i_1_n_0 ;
  wire \tx_data[43]_i_1_n_0 ;
  wire \tx_data[44]_i_1_n_0 ;
  wire \tx_data[45]_i_1_n_0 ;
  wire \tx_data[46]_i_1_n_0 ;
  wire \tx_data[47]_i_1_n_0 ;
  wire \tx_data[48]_i_1_n_0 ;
  wire \tx_data[49]_i_1_n_0 ;
  wire \tx_data[50]_i_1_n_0 ;
  wire \tx_data[51]_i_1_n_0 ;
  wire \tx_data[52]_i_1_n_0 ;
  wire \tx_data[53]_i_1_n_0 ;
  wire \tx_data[54]_i_1_n_0 ;
  wire \tx_data[55]_i_1_n_0 ;
  wire \tx_data[56]_i_1_n_0 ;
  wire \tx_data[57]_i_1_n_0 ;
  wire \tx_data[58]_i_1_n_0 ;
  wire \tx_data[59]_i_1_n_0 ;
  wire \tx_data[60]_i_1_n_0 ;
  wire \tx_data[61]_i_1_n_0 ;
  wire \tx_data[62]_i_1_n_0 ;
  wire \tx_data[63]_i_3_n_0 ;
  wire \tx_data_reg_n_0_[0] ;
  wire \tx_data_reg_n_0_[10] ;
  wire \tx_data_reg_n_0_[11] ;
  wire \tx_data_reg_n_0_[12] ;
  wire \tx_data_reg_n_0_[13] ;
  wire \tx_data_reg_n_0_[14] ;
  wire \tx_data_reg_n_0_[15] ;
  wire \tx_data_reg_n_0_[16] ;
  wire \tx_data_reg_n_0_[17] ;
  wire \tx_data_reg_n_0_[18] ;
  wire \tx_data_reg_n_0_[19] ;
  wire \tx_data_reg_n_0_[1] ;
  wire \tx_data_reg_n_0_[20] ;
  wire \tx_data_reg_n_0_[21] ;
  wire \tx_data_reg_n_0_[22] ;
  wire \tx_data_reg_n_0_[23] ;
  wire \tx_data_reg_n_0_[24] ;
  wire \tx_data_reg_n_0_[25] ;
  wire \tx_data_reg_n_0_[26] ;
  wire \tx_data_reg_n_0_[27] ;
  wire \tx_data_reg_n_0_[28] ;
  wire \tx_data_reg_n_0_[29] ;
  wire \tx_data_reg_n_0_[2] ;
  wire \tx_data_reg_n_0_[30] ;
  wire \tx_data_reg_n_0_[31] ;
  wire \tx_data_reg_n_0_[32] ;
  wire \tx_data_reg_n_0_[33] ;
  wire \tx_data_reg_n_0_[34] ;
  wire \tx_data_reg_n_0_[35] ;
  wire \tx_data_reg_n_0_[36] ;
  wire \tx_data_reg_n_0_[37] ;
  wire \tx_data_reg_n_0_[38] ;
  wire \tx_data_reg_n_0_[39] ;
  wire \tx_data_reg_n_0_[3] ;
  wire \tx_data_reg_n_0_[40] ;
  wire \tx_data_reg_n_0_[41] ;
  wire \tx_data_reg_n_0_[42] ;
  wire \tx_data_reg_n_0_[43] ;
  wire \tx_data_reg_n_0_[44] ;
  wire \tx_data_reg_n_0_[45] ;
  wire \tx_data_reg_n_0_[46] ;
  wire \tx_data_reg_n_0_[47] ;
  wire \tx_data_reg_n_0_[48] ;
  wire \tx_data_reg_n_0_[49] ;
  wire \tx_data_reg_n_0_[4] ;
  wire \tx_data_reg_n_0_[50] ;
  wire \tx_data_reg_n_0_[51] ;
  wire \tx_data_reg_n_0_[52] ;
  wire \tx_data_reg_n_0_[53] ;
  wire \tx_data_reg_n_0_[54] ;
  wire \tx_data_reg_n_0_[55] ;
  wire \tx_data_reg_n_0_[56] ;
  wire \tx_data_reg_n_0_[57] ;
  wire \tx_data_reg_n_0_[58] ;
  wire \tx_data_reg_n_0_[59] ;
  wire \tx_data_reg_n_0_[5] ;
  wire \tx_data_reg_n_0_[60] ;
  wire \tx_data_reg_n_0_[61] ;
  wire \tx_data_reg_n_0_[62] ;
  wire \tx_data_reg_n_0_[63] ;
  wire \tx_data_reg_n_0_[6] ;
  wire \tx_data_reg_n_0_[7] ;
  wire \tx_data_reg_n_0_[8] ;
  wire \tx_data_reg_n_0_[9] ;
  wire [15:4]tx_fifo_bcnt0;
  wire \tx_fifo_bcnt[10]_i_2_n_0 ;
  wire \tx_fifo_bcnt[10]_i_3_n_0 ;
  wire \tx_fifo_bcnt[10]_i_5_n_0 ;
  wire \tx_fifo_bcnt[10]_i_6_n_0 ;
  wire \tx_fifo_bcnt[10]_i_7_n_0 ;
  wire \tx_fifo_bcnt[11]_i_2_n_0 ;
  wire \tx_fifo_bcnt[11]_i_3_n_0 ;
  wire \tx_fifo_bcnt[11]_i_5_n_0 ;
  wire \tx_fifo_bcnt[12]_i_2_n_0 ;
  wire \tx_fifo_bcnt[12]_i_3_n_0 ;
  wire \tx_fifo_bcnt[12]_i_5_n_0 ;
  wire \tx_fifo_bcnt[13]_i_2_n_0 ;
  wire \tx_fifo_bcnt[13]_i_3_n_0 ;
  wire \tx_fifo_bcnt[13]_i_5_n_0 ;
  wire \tx_fifo_bcnt[14]_i_2_n_0 ;
  wire \tx_fifo_bcnt[14]_i_3_n_0 ;
  wire \tx_fifo_bcnt[14]_i_5_n_0 ;
  wire \tx_fifo_bcnt[14]_i_6_n_0 ;
  wire \tx_fifo_bcnt[15]_i_1_n_0 ;
  wire \tx_fifo_bcnt[15]_i_3_n_0 ;
  wire \tx_fifo_bcnt[15]_i_4_n_0 ;
  wire \tx_fifo_bcnt[15]_i_6_n_0 ;
  wire \tx_fifo_bcnt[15]_i_7_n_0 ;
  wire \tx_fifo_bcnt[15]_i_8_n_0 ;
  wire \tx_fifo_bcnt[15]_i_9_n_0 ;
  wire \tx_fifo_bcnt[2]_i_2_n_0 ;
  wire \tx_fifo_bcnt[2]_i_3_n_0 ;
  wire \tx_fifo_bcnt[3]_i_2_n_0 ;
  wire \tx_fifo_bcnt[3]_i_3_n_0 ;
  wire \tx_fifo_bcnt[4]_i_3_n_0 ;
  wire \tx_fifo_bcnt[4]_i_4_n_0 ;
  wire \tx_fifo_bcnt[5]_i_3_n_0 ;
  wire \tx_fifo_bcnt[5]_i_4_n_0 ;
  wire \tx_fifo_bcnt[5]_i_5_n_0 ;
  wire \tx_fifo_bcnt[6]_i_2_n_0 ;
  wire \tx_fifo_bcnt[6]_i_3_n_0 ;
  wire \tx_fifo_bcnt[6]_i_5_n_0 ;
  wire \tx_fifo_bcnt[7]_i_2_n_0 ;
  wire \tx_fifo_bcnt[7]_i_3_n_0 ;
  wire \tx_fifo_bcnt[8]_i_2_n_0 ;
  wire \tx_fifo_bcnt[8]_i_3_n_0 ;
  wire \tx_fifo_bcnt[8]_i_5_n_0 ;
  wire \tx_fifo_bcnt[9]_i_2_n_0 ;
  wire \tx_fifo_bcnt[9]_i_3_n_0 ;
  wire \tx_fifo_bcnt[9]_i_5_n_0 ;
  wire \tx_fifo_bcnt[9]_i_6_n_0 ;
  wire \tx_fifo_bcnt[9]_i_7_n_0 ;
  wire [15:0]tx_fifo_bcnt_reg__0;
  wire \tx_mac_data[0]_i_1_n_0 ;
  wire \tx_mac_data[10]_i_1_n_0 ;
  wire \tx_mac_data[11]_i_1_n_0 ;
  wire \tx_mac_data[12]_i_1_n_0 ;
  wire \tx_mac_data[13]_i_1_n_0 ;
  wire \tx_mac_data[14]_i_1_n_0 ;
  wire \tx_mac_data[15]_i_1_n_0 ;
  wire \tx_mac_data[16]_i_1_n_0 ;
  wire \tx_mac_data[17]_i_1_n_0 ;
  wire \tx_mac_data[18]_i_1_n_0 ;
  wire \tx_mac_data[19]_i_1_n_0 ;
  wire \tx_mac_data[1]_i_1_n_0 ;
  wire \tx_mac_data[20]_i_1_n_0 ;
  wire \tx_mac_data[21]_i_1_n_0 ;
  wire \tx_mac_data[22]_i_1_n_0 ;
  wire \tx_mac_data[23]_i_1_n_0 ;
  wire \tx_mac_data[24]_i_1_n_0 ;
  wire \tx_mac_data[25]_i_1_n_0 ;
  wire \tx_mac_data[26]_i_1_n_0 ;
  wire \tx_mac_data[27]_i_1_n_0 ;
  wire \tx_mac_data[28]_i_1_n_0 ;
  wire \tx_mac_data[29]_i_1_n_0 ;
  wire \tx_mac_data[2]_i_1_n_0 ;
  wire \tx_mac_data[30]_i_1_n_0 ;
  wire \tx_mac_data[31]_i_1_n_0 ;
  wire \tx_mac_data[32]_i_1_n_0 ;
  wire \tx_mac_data[33]_i_1_n_0 ;
  wire \tx_mac_data[34]_i_1_n_0 ;
  wire \tx_mac_data[35]_i_1_n_0 ;
  wire \tx_mac_data[36]_i_1_n_0 ;
  wire \tx_mac_data[37]_i_1_n_0 ;
  wire \tx_mac_data[38]_i_1_n_0 ;
  wire \tx_mac_data[39]_i_1_n_0 ;
  wire \tx_mac_data[3]_i_1_n_0 ;
  wire \tx_mac_data[40]_i_1_n_0 ;
  wire \tx_mac_data[41]_i_1_n_0 ;
  wire \tx_mac_data[42]_i_1_n_0 ;
  wire \tx_mac_data[43]_i_1_n_0 ;
  wire \tx_mac_data[44]_i_1_n_0 ;
  wire \tx_mac_data[45]_i_1_n_0 ;
  wire \tx_mac_data[46]_i_1_n_0 ;
  wire \tx_mac_data[47]_i_1_n_0 ;
  wire \tx_mac_data[48]_i_1_n_0 ;
  wire \tx_mac_data[49]_i_1_n_0 ;
  wire \tx_mac_data[4]_i_1_n_0 ;
  wire \tx_mac_data[50]_i_1_n_0 ;
  wire \tx_mac_data[51]_i_1_n_0 ;
  wire \tx_mac_data[52]_i_1_n_0 ;
  wire \tx_mac_data[53]_i_1_n_0 ;
  wire \tx_mac_data[54]_i_1_n_0 ;
  wire \tx_mac_data[55]_i_1_n_0 ;
  wire \tx_mac_data[56]_i_1_n_0 ;
  wire \tx_mac_data[57]_i_1_n_0 ;
  wire \tx_mac_data[58]_i_1_n_0 ;
  wire \tx_mac_data[59]_i_1_n_0 ;
  wire \tx_mac_data[5]_i_1_n_0 ;
  wire \tx_mac_data[60]_i_1_n_0 ;
  wire \tx_mac_data[61]_i_1_n_0 ;
  wire \tx_mac_data[62]_i_1_n_0 ;
  wire \tx_mac_data[63]_i_1_n_0 ;
  wire \tx_mac_data[63]_i_2_n_0 ;
  wire \tx_mac_data[63]_i_3_n_0 ;
  wire \tx_mac_data[6]_i_1_n_0 ;
  wire \tx_mac_data[7]_i_1_n_0 ;
  wire \tx_mac_data[8]_i_1_n_0 ;
  wire \tx_mac_data[9]_i_1_n_0 ;
  wire tx_mac_wr;
  wire tx_mac_wr_i_1_n_0;
  wire tx_rd_bcnt_st;
  wire tx_rd_fifo_st;
  wire tx_rd_idle_st;
  wire [2:0]tx_rd_state;
  wire tx_rd_state26_out;
  wire tx_rd_state34_in;
  wire \tx_rd_state[2]_i_3_n_0 ;
  wire \tx_rd_state[2]_i_4_n_0 ;
  wire \tx_rd_state[2]_i_5_n_0 ;
  wire tx_wr_bcnt_st;
  wire [7:0]tx_wr_data_count;
  wire tx_wr_fifo_st;
  wire tx_wr_idle_st;
  wire tx_wr_state1;
  wire \tx_wr_state[0]_i_1_n_0 ;
  wire \tx_wr_state[1]_i_1_n_0 ;
  wire \tx_wr_state[2]_i_1_n_0 ;
  wire tx_wrreq_i_1__0_n_0;
  wire tx_wrreq_reg_n_0;
  wire NLW_TX_DFIFO_256x64_empty_UNCONNECTED;
  wire NLW_TX_DFIFO_256x64_rd_rst_busy_UNCONNECTED;
  wire NLW_TX_DFIFO_256x64_wr_rst_busy_UNCONNECTED;
  wire [7:0]NLW_TX_DFIFO_256x64_rd_data_count_UNCONNECTED;
  wire NLW_TX_DFIFO_BCNT_16x16_rd_rst_busy_UNCONNECTED;
  wire NLW_TX_DFIFO_BCNT_16x16_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "TX_DFIFO,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_TX_DFIFO TX_DFIFO_256x64
       (.din({\tx_data_reg_n_0_[63] ,\tx_data_reg_n_0_[62] ,\tx_data_reg_n_0_[61] ,\tx_data_reg_n_0_[60] ,\tx_data_reg_n_0_[59] ,\tx_data_reg_n_0_[58] ,\tx_data_reg_n_0_[57] ,\tx_data_reg_n_0_[56] ,\tx_data_reg_n_0_[55] ,\tx_data_reg_n_0_[54] ,\tx_data_reg_n_0_[53] ,\tx_data_reg_n_0_[52] ,\tx_data_reg_n_0_[51] ,\tx_data_reg_n_0_[50] ,\tx_data_reg_n_0_[49] ,\tx_data_reg_n_0_[48] ,\tx_data_reg_n_0_[47] ,\tx_data_reg_n_0_[46] ,\tx_data_reg_n_0_[45] ,\tx_data_reg_n_0_[44] ,\tx_data_reg_n_0_[43] ,\tx_data_reg_n_0_[42] ,\tx_data_reg_n_0_[41] ,\tx_data_reg_n_0_[40] ,\tx_data_reg_n_0_[39] ,\tx_data_reg_n_0_[38] ,\tx_data_reg_n_0_[37] ,\tx_data_reg_n_0_[36] ,\tx_data_reg_n_0_[35] ,\tx_data_reg_n_0_[34] ,\tx_data_reg_n_0_[33] ,\tx_data_reg_n_0_[32] ,\tx_data_reg_n_0_[31] ,\tx_data_reg_n_0_[30] ,\tx_data_reg_n_0_[29] ,\tx_data_reg_n_0_[28] ,\tx_data_reg_n_0_[27] ,\tx_data_reg_n_0_[26] ,\tx_data_reg_n_0_[25] ,\tx_data_reg_n_0_[24] ,\tx_data_reg_n_0_[23] ,\tx_data_reg_n_0_[22] ,\tx_data_reg_n_0_[21] ,\tx_data_reg_n_0_[20] ,\tx_data_reg_n_0_[19] ,\tx_data_reg_n_0_[18] ,\tx_data_reg_n_0_[17] ,\tx_data_reg_n_0_[16] ,\tx_data_reg_n_0_[15] ,\tx_data_reg_n_0_[14] ,\tx_data_reg_n_0_[13] ,\tx_data_reg_n_0_[12] ,\tx_data_reg_n_0_[11] ,\tx_data_reg_n_0_[10] ,\tx_data_reg_n_0_[9] ,\tx_data_reg_n_0_[8] ,\tx_data_reg_n_0_[7] ,\tx_data_reg_n_0_[6] ,\tx_data_reg_n_0_[5] ,\tx_data_reg_n_0_[4] ,\tx_data_reg_n_0_[3] ,\tx_data_reg_n_0_[2] ,\tx_data_reg_n_0_[1] ,\tx_data_reg_n_0_[0] }),
        .dout(rx_dout),
        .empty(NLW_TX_DFIFO_256x64_empty_UNCONNECTED),
        .full(full),
        .rd_clk(lclk),
        .rd_data_count(NLW_TX_DFIFO_256x64_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(rx_rdreq_reg_n_0),
        .rd_rst_busy(NLW_TX_DFIFO_256x64_rd_rst_busy_UNCONNECTED),
        .rst(my_mac_hit1),
        .wr_clk(dclk),
        .wr_data_count(tx_wr_data_count),
        .wr_en(tx_wrreq_reg_n_0),
        .wr_rst_busy(NLW_TX_DFIFO_256x64_wr_rst_busy_UNCONNECTED));
  (* CHECK_LICENSE_TYPE = "TX_DFIFO_BCNT,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_TX_DFIFO_BCNT TX_DFIFO_BCNT_16x16
       (.din({\tx_bcnt_reg_n_0_[15] ,\tx_bcnt_reg_n_0_[14] ,\tx_bcnt_reg_n_0_[13] ,\tx_bcnt_reg_n_0_[12] ,\tx_bcnt_reg_n_0_[11] ,\tx_bcnt_reg_n_0_[10] ,\tx_bcnt_reg_n_0_[9] ,\tx_bcnt_reg_n_0_[8] ,\tx_bcnt_reg_n_0_[7] ,\tx_bcnt_reg_n_0_[6] ,\tx_bcnt_reg_n_0_[5] ,\tx_bcnt_reg_n_0_[4] ,\tx_bcnt_reg_n_0_[3] ,\tx_bcnt_reg_n_0_[2] ,\tx_bcnt_reg_n_0_[1] ,\tx_bcnt_reg_n_0_[0] }),
        .dout(rx_bcnt_out),
        .empty(empty),
        .full(tx_bcnt_full),
        .rd_clk(lclk),
        .rd_en(rx_bcnt_rdreq_reg_n_0),
        .rd_rst_busy(NLW_TX_DFIFO_BCNT_16x16_rd_rst_busy_UNCONNECTED),
        .rst(my_mac_hit1),
        .wr_clk(dclk),
        .wr_en(tx_bcnt_wrreq),
        .wr_rst_busy(NLW_TX_DFIFO_BCNT_16x16_wr_rst_busy_UNCONNECTED));
  LUT3 #(
    .INIT(8'h78)) 
    byte_lo_i_1
       (.I0(tx_wr_fifo_st),
        .I1(s_axis_tvalid),
        .I2(byte_lo_reg_n_0),
        .O(byte_lo_i_1_n_0));
  FDSE byte_lo_reg
       (.C(dclk),
        .CE(1'b1),
        .D(byte_lo_i_1_n_0),
        .Q(byte_lo_reg_n_0),
        .S(tx_data[31]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    first_fifo_data_i_1
       (.I0(tx_rd_fifo_st),
        .I1(tx_rd_bcnt_st),
        .I2(first_fifo_data),
        .O(first_fifo_data_i_1_n_0));
  FDRE first_fifo_data_reg
       (.C(lclk),
        .CE(1'b1),
        .D(first_fifo_data_i_1_n_0),
        .Q(first_fifo_data),
        .R(rx_rdreq));
  LUT4 #(
    .INIT(16'hD1C0)) 
    \rd_bcnt_reg[0]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rx_bcnt_out[0]),
        .I3(rd_bcnt_reg[0]),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'hDCDCDCCD10101001)) 
    \rd_bcnt_reg[10]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[10]),
        .I3(rd_bcnt_reg[9]),
        .I4(\rd_bcnt_reg[10]_i_2_n_0 ),
        .I5(rx_bcnt_out[10]),
        .O(p_1_in[10]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \rd_bcnt_reg[10]_i_2 
       (.I0(rd_bcnt_reg[7]),
        .I1(rd_bcnt_reg[3]),
        .I2(rd_bcnt_reg[4]),
        .I3(rd_bcnt_reg[5]),
        .I4(rd_bcnt_reg[6]),
        .I5(rd_bcnt_reg[8]),
        .O(\rd_bcnt_reg[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[11]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[11]),
        .I3(\rd_bcnt_reg[11]_i_2_n_0 ),
        .I4(rx_bcnt_out[11]),
        .O(p_1_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rd_bcnt_reg[11]_i_2 
       (.I0(rd_bcnt_reg[9]),
        .I1(\rd_bcnt_reg[9]_i_2_n_0 ),
        .I2(rd_bcnt_reg[8]),
        .I3(rd_bcnt_reg[10]),
        .O(\rd_bcnt_reg[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[12]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[12]),
        .I3(\rd_bcnt_reg[12]_i_2_n_0 ),
        .I4(rx_bcnt_out[12]),
        .O(p_1_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rd_bcnt_reg[12]_i_2 
       (.I0(rd_bcnt_reg[10]),
        .I1(rd_bcnt_reg[8]),
        .I2(\rd_bcnt_reg[9]_i_2_n_0 ),
        .I3(rd_bcnt_reg[9]),
        .I4(rd_bcnt_reg[11]),
        .O(\rd_bcnt_reg[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[13]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[13]),
        .I3(\rd_bcnt_reg[14]_i_2_n_0 ),
        .I4(rx_bcnt_out[13]),
        .O(p_1_in[13]));
  LUT6 #(
    .INIT(64'hDCDCDCCD10101001)) 
    \rd_bcnt_reg[14]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[14]),
        .I3(rd_bcnt_reg[13]),
        .I4(\rd_bcnt_reg[14]_i_2_n_0 ),
        .I5(rx_bcnt_out[14]),
        .O(p_1_in[14]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \rd_bcnt_reg[14]_i_2 
       (.I0(rd_bcnt_reg[11]),
        .I1(rd_bcnt_reg[9]),
        .I2(\rd_bcnt_reg[9]_i_2_n_0 ),
        .I3(rd_bcnt_reg[8]),
        .I4(rd_bcnt_reg[10]),
        .I5(rd_bcnt_reg[12]),
        .O(\rd_bcnt_reg[14]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \rd_bcnt_reg[15]_i_1 
       (.I0(tx_rd_idle_st),
        .I1(rst_),
        .O(rx_rdreq));
  LUT2 #(
    .INIT(4'h2)) 
    \rd_bcnt_reg[15]_i_2 
       (.I0(tx_rd_fifo_st),
        .I1(tx_rd_bcnt_st),
        .O(\rd_bcnt_reg[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hDCDCDCCD10101001)) 
    \rd_bcnt_reg[15]_i_3 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[15]),
        .I3(rd_bcnt_reg[14]),
        .I4(\rd_bcnt_reg[15]_i_4_n_0 ),
        .I5(rx_bcnt_out[15]),
        .O(p_1_in[15]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \rd_bcnt_reg[15]_i_4 
       (.I0(rd_bcnt_reg[12]),
        .I1(rd_bcnt_reg[10]),
        .I2(\rd_bcnt_reg[10]_i_2_n_0 ),
        .I3(rd_bcnt_reg[9]),
        .I4(rd_bcnt_reg[11]),
        .I5(rd_bcnt_reg[13]),
        .O(\rd_bcnt_reg[15]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hD1C0)) 
    \rd_bcnt_reg[1]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rx_bcnt_out[1]),
        .I3(rd_bcnt_reg[1]),
        .O(p_1_in[1]));
  LUT4 #(
    .INIT(16'hD1C0)) 
    \rd_bcnt_reg[2]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rx_bcnt_out[2]),
        .I3(rd_bcnt_reg[2]),
        .O(p_1_in[2]));
  LUT4 #(
    .INIT(16'hC0D1)) 
    \rd_bcnt_reg[3]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rx_bcnt_out[3]),
        .I3(rd_bcnt_reg[3]),
        .O(p_1_in[3]));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[4]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[4]),
        .I3(rd_bcnt_reg[3]),
        .I4(rx_bcnt_out[4]),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'hDDDCCCCD11100001)) 
    \rd_bcnt_reg[5]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[3]),
        .I3(rd_bcnt_reg[4]),
        .I4(rd_bcnt_reg[5]),
        .I5(rx_bcnt_out[5]),
        .O(p_1_in[5]));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[6]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[6]),
        .I3(\rd_bcnt_reg[6]_i_2_n_0 ),
        .I4(rx_bcnt_out[6]),
        .O(p_1_in[6]));
  LUT3 #(
    .INIT(8'hFE)) 
    \rd_bcnt_reg[6]_i_2 
       (.I0(rd_bcnt_reg[5]),
        .I1(rd_bcnt_reg[4]),
        .I2(rd_bcnt_reg[3]),
        .O(\rd_bcnt_reg[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[7]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[7]),
        .I3(\rd_bcnt_reg[7]_i_2_n_0 ),
        .I4(rx_bcnt_out[7]),
        .O(p_1_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rd_bcnt_reg[7]_i_2 
       (.I0(rd_bcnt_reg[3]),
        .I1(rd_bcnt_reg[4]),
        .I2(rd_bcnt_reg[5]),
        .I3(rd_bcnt_reg[6]),
        .O(\rd_bcnt_reg[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDCCD1001)) 
    \rd_bcnt_reg[8]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[8]),
        .I3(\rd_bcnt_reg[9]_i_2_n_0 ),
        .I4(rx_bcnt_out[8]),
        .O(p_1_in[8]));
  LUT6 #(
    .INIT(64'hDCDCDCCD10101001)) 
    \rd_bcnt_reg[9]_i_1__0 
       (.I0(tx_rd_state34_in),
        .I1(first_fifo_data),
        .I2(rd_bcnt_reg[9]),
        .I3(rd_bcnt_reg[8]),
        .I4(\rd_bcnt_reg[9]_i_2_n_0 ),
        .I5(rx_bcnt_out[9]),
        .O(p_1_in[9]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rd_bcnt_reg[9]_i_2 
       (.I0(rd_bcnt_reg[6]),
        .I1(rd_bcnt_reg[5]),
        .I2(rd_bcnt_reg[4]),
        .I3(rd_bcnt_reg[3]),
        .I4(rd_bcnt_reg[7]),
        .O(\rd_bcnt_reg[9]_i_2_n_0 ));
  FDRE \rd_bcnt_reg_reg[0] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[0]),
        .Q(rd_bcnt_reg[0]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[10] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[10]),
        .Q(rd_bcnt_reg[10]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[11] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[11]),
        .Q(rd_bcnt_reg[11]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[12] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[12]),
        .Q(rd_bcnt_reg[12]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[13] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[13]),
        .Q(rd_bcnt_reg[13]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[14] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[14]),
        .Q(rd_bcnt_reg[14]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[15] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[15]),
        .Q(rd_bcnt_reg[15]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[1] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[1]),
        .Q(rd_bcnt_reg[1]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[2] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[2]),
        .Q(rd_bcnt_reg[2]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[3] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[3]),
        .Q(rd_bcnt_reg[3]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[4] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[4]),
        .Q(rd_bcnt_reg[4]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[5] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[5]),
        .Q(rd_bcnt_reg[5]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[6] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[6]),
        .Q(rd_bcnt_reg[6]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[7] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[7]),
        .Q(rd_bcnt_reg[7]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[8] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[8]),
        .Q(rd_bcnt_reg[8]),
        .R(rx_rdreq));
  FDRE \rd_bcnt_reg_reg[9] 
       (.C(lclk),
        .CE(\rd_bcnt_reg[15]_i_2_n_0 ),
        .D(p_1_in[9]),
        .Q(rd_bcnt_reg[9]),
        .R(rx_rdreq));
  LUT5 #(
    .INIT(32'hC0C000A0)) 
    rx_bcnt_rdreq_i_1
       (.I0(rx_bcnt_rdreq_reg_n_0),
        .I1(tx_rd_state26_out),
        .I2(rst_),
        .I3(tx_rd_bcnt_st),
        .I4(tx_rd_idle_st),
        .O(rx_bcnt_rdreq_i_1_n_0));
  FDRE rx_bcnt_rdreq_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rx_bcnt_rdreq_i_1_n_0),
        .Q(rx_bcnt_rdreq_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFF7FFF0000)) 
    rx_rdreq_i_1__0
       (.I0(rx_rdreq_i_2_n_0),
        .I1(rx_rdreq_i_3_n_0),
        .I2(rx_rdreq_i_4_n_0),
        .I3(rx_rdreq_i_5_n_0),
        .I4(tx_rd_fifo_st),
        .I5(tx_rd_bcnt_st),
        .O(rx_rdreq_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    rx_rdreq_i_2
       (.I0(rd_bcnt_reg[6]),
        .I1(rd_bcnt_reg[5]),
        .I2(rd_bcnt_reg[8]),
        .I3(rd_bcnt_reg[7]),
        .O(rx_rdreq_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    rx_rdreq_i_3
       (.I0(first_fifo_data),
        .I1(rd_bcnt_reg[15]),
        .I2(rd_bcnt_reg[14]),
        .I3(rd_bcnt_reg[13]),
        .O(rx_rdreq_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    rx_rdreq_i_4
       (.I0(rd_bcnt_reg[12]),
        .I1(rd_bcnt_reg[11]),
        .I2(rd_bcnt_reg[10]),
        .I3(rd_bcnt_reg[9]),
        .O(rx_rdreq_i_4_n_0));
  LUT5 #(
    .INIT(32'h0001FFFF)) 
    rx_rdreq_i_5
       (.I0(rd_bcnt_reg[2]),
        .I1(rd_bcnt_reg[3]),
        .I2(rd_bcnt_reg[0]),
        .I3(rd_bcnt_reg[1]),
        .I4(rd_bcnt_reg[4]),
        .O(rx_rdreq_i_5_n_0));
  FDRE rx_rdreq_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rx_rdreq_i_1__0_n_0),
        .Q(rx_rdreq_reg_n_0),
        .R(rx_rdreq));
  LUT6 #(
    .INIT(64'hC000C0A0C0F0C0A0)) 
    s_axis_tready_i_1
       (.I0(s_axis_tready),
        .I1(tx_wr_state1),
        .I2(rst_),
        .I3(tx_wr_idle_st),
        .I4(tx_wr_fifo_st),
        .I5(s_axis_tlast),
        .O(s_axis_tready_i_1_n_0));
  LUT5 #(
    .INIT(32'h11010101)) 
    s_axis_tready_i_2
       (.I0(full),
        .I1(tx_bcnt_full),
        .I2(tx_wr_data_count[7]),
        .I3(s_axis_tready_i_3_n_0),
        .I4(s_axis_tready_i_4_n_0),
        .O(tx_wr_state1));
  LUT4 #(
    .INIT(16'h0001)) 
    s_axis_tready_i_3
       (.I0(tx_wr_data_count[6]),
        .I1(tx_wr_data_count[5]),
        .I2(tx_wr_data_count[4]),
        .I3(tx_wr_data_count[3]),
        .O(s_axis_tready_i_3_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    s_axis_tready_i_4
       (.I0(tx_wr_data_count[2]),
        .I1(tx_wr_data_count[1]),
        .I2(tx_wr_data_count[0]),
        .O(s_axis_tready_i_4_n_0));
  FDRE s_axis_tready_reg
       (.C(dclk),
        .CE(1'b1),
        .D(s_axis_tready_i_1_n_0),
        .Q(s_axis_tready),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \tx_bcnt[15]_i_1 
       (.I0(tx_wr_bcnt_st),
        .I1(tx_wr_fifo_st),
        .O(\tx_bcnt[15]_i_1_n_0 ));
  FDRE \tx_bcnt_reg[0] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[0]),
        .Q(\tx_bcnt_reg_n_0_[0] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[10] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[10]),
        .Q(\tx_bcnt_reg_n_0_[10] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[11] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[11]),
        .Q(\tx_bcnt_reg_n_0_[11] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[12] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[12]),
        .Q(\tx_bcnt_reg_n_0_[12] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[13] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[13]),
        .Q(\tx_bcnt_reg_n_0_[13] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[14] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[14]),
        .Q(\tx_bcnt_reg_n_0_[14] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[15] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[15]),
        .Q(\tx_bcnt_reg_n_0_[15] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[1] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[1]),
        .Q(\tx_bcnt_reg_n_0_[1] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[2] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[2]),
        .Q(\tx_bcnt_reg_n_0_[2] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[3] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[3]),
        .Q(\tx_bcnt_reg_n_0_[3] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[4] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[4]),
        .Q(\tx_bcnt_reg_n_0_[4] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[5] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[5]),
        .Q(\tx_bcnt_reg_n_0_[5] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[6] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[6]),
        .Q(\tx_bcnt_reg_n_0_[6] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[7] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[7]),
        .Q(\tx_bcnt_reg_n_0_[7] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[8] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[8]),
        .Q(\tx_bcnt_reg_n_0_[8] ),
        .R(tx_data[31]));
  FDRE \tx_bcnt_reg[9] 
       (.C(dclk),
        .CE(\tx_bcnt[15]_i_1_n_0 ),
        .D(tx_fifo_bcnt_reg__0[9]),
        .Q(\tx_bcnt_reg_n_0_[9] ),
        .R(tx_data[31]));
  LUT3 #(
    .INIT(8'hB8)) 
    tx_bcnt_wrreq_i_1
       (.I0(tx_bcnt_wrreq),
        .I1(tx_wr_fifo_st),
        .I2(tx_wr_bcnt_st),
        .O(tx_bcnt_wrreq_i_1_n_0));
  FDRE tx_bcnt_wrreq_reg
       (.C(dclk),
        .CE(1'b1),
        .D(tx_bcnt_wrreq_i_1_n_0),
        .Q(tx_bcnt_wrreq),
        .R(tx_data[31]));
  LUT2 #(
    .INIT(4'hB)) 
    \tx_data[31]_i_1__0 
       (.I0(tx_wr_idle_st),
        .I1(rst_),
        .O(tx_data[31]));
  LUT3 #(
    .INIT(8'h80)) 
    \tx_data[31]_i_2 
       (.I0(tx_wr_fifo_st),
        .I1(s_axis_tvalid),
        .I2(byte_lo_reg_n_0),
        .O(tx_data0_in[31]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[32]_i_1 
       (.I0(s_axis_tdata[0]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[33]_i_1 
       (.I0(s_axis_tdata[1]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[34]_i_1 
       (.I0(s_axis_tdata[2]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[35]_i_1 
       (.I0(s_axis_tdata[3]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[36]_i_1 
       (.I0(s_axis_tdata[4]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[37]_i_1 
       (.I0(s_axis_tdata[5]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[38]_i_1 
       (.I0(s_axis_tdata[6]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[39]_i_1 
       (.I0(s_axis_tdata[7]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[40]_i_1 
       (.I0(s_axis_tdata[8]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[41]_i_1 
       (.I0(s_axis_tdata[9]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[42]_i_1 
       (.I0(s_axis_tdata[10]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[43]_i_1 
       (.I0(s_axis_tdata[11]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[44]_i_1 
       (.I0(s_axis_tdata[12]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[45]_i_1 
       (.I0(s_axis_tdata[13]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[46]_i_1 
       (.I0(s_axis_tdata[14]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[47]_i_1 
       (.I0(s_axis_tdata[15]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[48]_i_1 
       (.I0(s_axis_tdata[16]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[49]_i_1 
       (.I0(s_axis_tdata[17]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[50]_i_1 
       (.I0(s_axis_tdata[18]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[51]_i_1 
       (.I0(s_axis_tdata[19]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[52]_i_1 
       (.I0(s_axis_tdata[20]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[53]_i_1 
       (.I0(s_axis_tdata[21]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[54]_i_1 
       (.I0(s_axis_tdata[22]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[55]_i_1 
       (.I0(s_axis_tdata[23]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[56]_i_1 
       (.I0(s_axis_tdata[24]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[57]_i_1 
       (.I0(s_axis_tdata[25]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[58]_i_1 
       (.I0(s_axis_tdata[26]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[59]_i_1 
       (.I0(s_axis_tdata[27]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[60]_i_1 
       (.I0(s_axis_tdata[28]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[61]_i_1 
       (.I0(s_axis_tdata[29]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[62]_i_1 
       (.I0(s_axis_tdata[30]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[62]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFDDDDDDD)) 
    \tx_data[63]_i_1 
       (.I0(rst_),
        .I1(tx_wr_idle_st),
        .I2(byte_lo_reg_n_0),
        .I3(s_axis_tvalid),
        .I4(tx_wr_fifo_st),
        .O(tx_data[63]));
  LUT2 #(
    .INIT(4'h8)) 
    \tx_data[63]_i_2 
       (.I0(s_axis_tvalid),
        .I1(tx_wr_fifo_st),
        .O(tx_data0_in[63]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_data[63]_i_3 
       (.I0(s_axis_tdata[31]),
        .I1(byte_lo_reg_n_0),
        .O(\tx_data[63]_i_3_n_0 ));
  FDRE \tx_data_reg[0] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[0]),
        .Q(\tx_data_reg_n_0_[0] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[10] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[10]),
        .Q(\tx_data_reg_n_0_[10] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[11] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[11]),
        .Q(\tx_data_reg_n_0_[11] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[12] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[12]),
        .Q(\tx_data_reg_n_0_[12] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[13] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[13]),
        .Q(\tx_data_reg_n_0_[13] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[14] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[14]),
        .Q(\tx_data_reg_n_0_[14] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[15] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[15]),
        .Q(\tx_data_reg_n_0_[15] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[16] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[16]),
        .Q(\tx_data_reg_n_0_[16] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[17] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[17]),
        .Q(\tx_data_reg_n_0_[17] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[18] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[18]),
        .Q(\tx_data_reg_n_0_[18] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[19] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[19]),
        .Q(\tx_data_reg_n_0_[19] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[1] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[1]),
        .Q(\tx_data_reg_n_0_[1] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[20] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[20]),
        .Q(\tx_data_reg_n_0_[20] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[21] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[21]),
        .Q(\tx_data_reg_n_0_[21] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[22] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[22]),
        .Q(\tx_data_reg_n_0_[22] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[23] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[23]),
        .Q(\tx_data_reg_n_0_[23] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[24] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[24]),
        .Q(\tx_data_reg_n_0_[24] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[25] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[25]),
        .Q(\tx_data_reg_n_0_[25] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[26] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[26]),
        .Q(\tx_data_reg_n_0_[26] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[27] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[27]),
        .Q(\tx_data_reg_n_0_[27] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[28] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[28]),
        .Q(\tx_data_reg_n_0_[28] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[29] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[29]),
        .Q(\tx_data_reg_n_0_[29] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[2] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[2]),
        .Q(\tx_data_reg_n_0_[2] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[30] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[30]),
        .Q(\tx_data_reg_n_0_[30] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[31] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[31]),
        .Q(\tx_data_reg_n_0_[31] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[32] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[32]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[32] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[33] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[33]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[33] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[34] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[34]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[34] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[35] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[35]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[35] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[36] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[36]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[36] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[37] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[37]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[37] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[38] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[38]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[38] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[39] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[39]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[39] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[3] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[3]),
        .Q(\tx_data_reg_n_0_[3] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[40] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[40]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[40] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[41] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[41]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[41] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[42] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[42]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[42] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[43] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[43]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[43] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[44] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[44]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[44] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[45] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[45]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[45] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[46] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[46]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[46] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[47] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[47]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[47] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[48] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[48]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[48] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[49] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[49]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[49] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[4] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[4]),
        .Q(\tx_data_reg_n_0_[4] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[50] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[50]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[50] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[51] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[51]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[51] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[52] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[52]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[52] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[53] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[53]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[53] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[54] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[54]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[54] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[55] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[55]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[55] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[56] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[56]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[56] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[57] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[57]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[57] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[58] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[58]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[58] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[59] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[59]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[59] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[5] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[5]),
        .Q(\tx_data_reg_n_0_[5] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[60] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[60]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[60] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[61] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[61]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[61] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[62] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[62]_i_1_n_0 ),
        .Q(\tx_data_reg_n_0_[62] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[63] 
       (.C(dclk),
        .CE(tx_data0_in[63]),
        .D(\tx_data[63]_i_3_n_0 ),
        .Q(\tx_data_reg_n_0_[63] ),
        .R(tx_data[63]));
  FDRE \tx_data_reg[6] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[6]),
        .Q(\tx_data_reg_n_0_[6] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[7] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[7]),
        .Q(\tx_data_reg_n_0_[7] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[8] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[8]),
        .Q(\tx_data_reg_n_0_[8] ),
        .R(tx_data[31]));
  FDRE \tx_data_reg[9] 
       (.C(dclk),
        .CE(tx_data0_in[31]),
        .D(s_axis_tdata[9]),
        .Q(\tx_data_reg_n_0_[9] ),
        .R(tx_data[31]));
  LUT5 #(
    .INIT(32'hE2FF1D00)) 
    \tx_fifo_bcnt[0]_i_1 
       (.I0(s_axis_tkeep[1]),
        .I1(s_axis_tkeep[2]),
        .I2(s_axis_tkeep[3]),
        .I3(s_axis_tlast),
        .I4(tx_fifo_bcnt_reg__0[0]),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'hFEEEAAAAFFAAFFAA)) 
    \tx_fifo_bcnt[10]_i_1 
       (.I0(\tx_fifo_bcnt[10]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[10]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[10]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[10]));
  LUT6 #(
    .INIT(64'h0440040404404040)) 
    \tx_fifo_bcnt[10]_i_2 
       (.I0(s_axis_tkeep[2]),
        .I1(s_axis_tlast),
        .I2(tx_fifo_bcnt_reg__0[10]),
        .I3(\tx_fifo_bcnt[10]_i_5_n_0 ),
        .I4(s_axis_tkeep[1]),
        .I5(\tx_fifo_bcnt[10]_i_6_n_0 ),
        .O(\tx_fifo_bcnt[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \tx_fifo_bcnt[10]_i_3 
       (.I0(\tx_fifo_bcnt[10]_i_7_n_0 ),
        .I1(s_axis_tkeep[3]),
        .I2(tx_fifo_bcnt_reg__0[10]),
        .O(\tx_fifo_bcnt[10]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \tx_fifo_bcnt[10]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[8]),
        .I1(\tx_fifo_bcnt[12]_i_5_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[9]),
        .I3(tx_fifo_bcnt_reg__0[10]),
        .O(tx_fifo_bcnt0[10]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \tx_fifo_bcnt[10]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[9]),
        .I1(tx_fifo_bcnt_reg__0[7]),
        .I2(\tx_fifo_bcnt[9]_i_6_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[8]),
        .O(\tx_fifo_bcnt[10]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \tx_fifo_bcnt[10]_i_6 
       (.I0(tx_fifo_bcnt_reg__0[9]),
        .I1(tx_fifo_bcnt_reg__0[7]),
        .I2(\tx_fifo_bcnt[8]_i_5_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[6]),
        .I4(tx_fifo_bcnt_reg__0[8]),
        .O(\tx_fifo_bcnt[10]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \tx_fifo_bcnt[10]_i_7 
       (.I0(tx_fifo_bcnt_reg__0[9]),
        .I1(tx_fifo_bcnt_reg__0[7]),
        .I2(\tx_fifo_bcnt[9]_i_7_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[6]),
        .I4(tx_fifo_bcnt_reg__0[8]),
        .O(\tx_fifo_bcnt[10]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFEEEAAAAFFAAFFAA)) 
    \tx_fifo_bcnt[11]_i_1 
       (.I0(\tx_fifo_bcnt[11]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[11]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[11]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[11]));
  LUT6 #(
    .INIT(64'h0440040404404040)) 
    \tx_fifo_bcnt[11]_i_2 
       (.I0(s_axis_tkeep[2]),
        .I1(s_axis_tlast),
        .I2(tx_fifo_bcnt_reg__0[11]),
        .I3(\tx_fifo_bcnt[11]_i_5_n_0 ),
        .I4(s_axis_tkeep[1]),
        .I5(\tx_fifo_bcnt[13]_i_5_n_0 ),
        .O(\tx_fifo_bcnt[11]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h12)) 
    \tx_fifo_bcnt[11]_i_3 
       (.I0(\tx_fifo_bcnt[14]_i_6_n_0 ),
        .I1(s_axis_tkeep[3]),
        .I2(tx_fifo_bcnt_reg__0[11]),
        .O(\tx_fifo_bcnt[11]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \tx_fifo_bcnt[11]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[9]),
        .I1(\tx_fifo_bcnt[12]_i_5_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[8]),
        .I3(tx_fifo_bcnt_reg__0[10]),
        .I4(tx_fifo_bcnt_reg__0[11]),
        .O(tx_fifo_bcnt0[11]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \tx_fifo_bcnt[11]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[10]),
        .I1(tx_fifo_bcnt_reg__0[8]),
        .I2(\tx_fifo_bcnt[9]_i_6_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[7]),
        .I4(tx_fifo_bcnt_reg__0[9]),
        .O(\tx_fifo_bcnt[11]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[12]_i_1 
       (.I0(\tx_fifo_bcnt[12]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[12]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[12]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[12]));
  LUT5 #(
    .INIT(32'h07F7F808)) 
    \tx_fifo_bcnt[12]_i_2 
       (.I0(\tx_fifo_bcnt[13]_i_5_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[11]),
        .I2(s_axis_tkeep[1]),
        .I3(\tx_fifo_bcnt[14]_i_5_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[12]),
        .O(\tx_fifo_bcnt[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'h0708)) 
    \tx_fifo_bcnt[12]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[11]),
        .I1(\tx_fifo_bcnt[14]_i_6_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt_reg__0[12]),
        .O(\tx_fifo_bcnt[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \tx_fifo_bcnt[12]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[10]),
        .I1(tx_fifo_bcnt_reg__0[8]),
        .I2(\tx_fifo_bcnt[12]_i_5_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[9]),
        .I4(tx_fifo_bcnt_reg__0[11]),
        .I5(tx_fifo_bcnt_reg__0[12]),
        .O(tx_fifo_bcnt0[12]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[12]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[7]),
        .I1(tx_fifo_bcnt_reg__0[5]),
        .I2(tx_fifo_bcnt_reg__0[3]),
        .I3(tx_fifo_bcnt_reg__0[2]),
        .I4(tx_fifo_bcnt_reg__0[4]),
        .I5(tx_fifo_bcnt_reg__0[6]),
        .O(\tx_fifo_bcnt[12]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[13]_i_1 
       (.I0(\tx_fifo_bcnt[13]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[13]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[13]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[13]));
  LUT6 #(
    .INIT(64'h0F7FFF7FF0800080)) 
    \tx_fifo_bcnt[13]_i_2 
       (.I0(tx_fifo_bcnt_reg__0[11]),
        .I1(\tx_fifo_bcnt[13]_i_5_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[12]),
        .I3(s_axis_tkeep[1]),
        .I4(\tx_fifo_bcnt[14]_i_5_n_0 ),
        .I5(tx_fifo_bcnt_reg__0[13]),
        .O(\tx_fifo_bcnt[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'h007F0080)) 
    \tx_fifo_bcnt[13]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[12]),
        .I1(\tx_fifo_bcnt[14]_i_6_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[11]),
        .I3(s_axis_tkeep[3]),
        .I4(tx_fifo_bcnt_reg__0[13]),
        .O(\tx_fifo_bcnt[13]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \tx_fifo_bcnt[13]_i_4 
       (.I0(\tx_fifo_bcnt[15]_i_9_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[13]),
        .O(tx_fifo_bcnt0[13]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[13]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[10]),
        .I1(tx_fifo_bcnt_reg__0[8]),
        .I2(tx_fifo_bcnt_reg__0[6]),
        .I3(\tx_fifo_bcnt[8]_i_5_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[7]),
        .I5(tx_fifo_bcnt_reg__0[9]),
        .O(\tx_fifo_bcnt[13]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[14]_i_1 
       (.I0(\tx_fifo_bcnt[14]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[14]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[14]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[14]));
  LUT6 #(
    .INIT(64'h1DDDDDDDE2222222)) 
    \tx_fifo_bcnt[14]_i_2 
       (.I0(\tx_fifo_bcnt[15]_i_6_n_0 ),
        .I1(s_axis_tkeep[1]),
        .I2(tx_fifo_bcnt_reg__0[12]),
        .I3(\tx_fifo_bcnt[14]_i_5_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[13]),
        .I5(tx_fifo_bcnt_reg__0[14]),
        .O(\tx_fifo_bcnt[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00007FFF00008000)) 
    \tx_fifo_bcnt[14]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[13]),
        .I1(tx_fifo_bcnt_reg__0[11]),
        .I2(\tx_fifo_bcnt[14]_i_6_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[12]),
        .I4(s_axis_tkeep[3]),
        .I5(tx_fifo_bcnt_reg__0[14]),
        .O(\tx_fifo_bcnt[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \tx_fifo_bcnt[14]_i_4 
       (.I0(\tx_fifo_bcnt[15]_i_9_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[13]),
        .I2(tx_fifo_bcnt_reg__0[14]),
        .O(tx_fifo_bcnt0[14]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[14]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[11]),
        .I1(tx_fifo_bcnt_reg__0[9]),
        .I2(tx_fifo_bcnt_reg__0[7]),
        .I3(\tx_fifo_bcnt[9]_i_6_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[8]),
        .I5(tx_fifo_bcnt_reg__0[10]),
        .O(\tx_fifo_bcnt[14]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[14]_i_6 
       (.I0(tx_fifo_bcnt_reg__0[10]),
        .I1(tx_fifo_bcnt_reg__0[8]),
        .I2(tx_fifo_bcnt_reg__0[6]),
        .I3(\tx_fifo_bcnt[9]_i_7_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[7]),
        .I5(tx_fifo_bcnt_reg__0[9]),
        .O(\tx_fifo_bcnt[14]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h80008A00AAAAAAAA)) 
    \tx_fifo_bcnt[15]_i_1 
       (.I0(tx_data0_in[63]),
        .I1(s_axis_tkeep[1]),
        .I2(s_axis_tkeep[2]),
        .I3(s_axis_tkeep[0]),
        .I4(s_axis_tkeep[3]),
        .I5(s_axis_tlast),
        .O(\tx_fifo_bcnt[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[15]_i_2 
       (.I0(\tx_fifo_bcnt[15]_i_3_n_0 ),
        .I1(\tx_fifo_bcnt[15]_i_4_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[15]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[15]));
  LUT5 #(
    .INIT(32'h37F7C808)) 
    \tx_fifo_bcnt[15]_i_3 
       (.I0(\tx_fifo_bcnt[15]_i_6_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[14]),
        .I2(s_axis_tkeep[1]),
        .I3(\tx_fifo_bcnt[15]_i_7_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[15]),
        .O(\tx_fifo_bcnt[15]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0708)) 
    \tx_fifo_bcnt[15]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[14]),
        .I1(\tx_fifo_bcnt[15]_i_8_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt_reg__0[15]),
        .O(\tx_fifo_bcnt[15]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \tx_fifo_bcnt[15]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[13]),
        .I1(\tx_fifo_bcnt[15]_i_9_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[14]),
        .I3(tx_fifo_bcnt_reg__0[15]),
        .O(tx_fifo_bcnt0[15]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \tx_fifo_bcnt[15]_i_6 
       (.I0(tx_fifo_bcnt_reg__0[13]),
        .I1(tx_fifo_bcnt_reg__0[11]),
        .I2(\tx_fifo_bcnt[13]_i_5_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[12]),
        .O(\tx_fifo_bcnt[15]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \tx_fifo_bcnt[15]_i_7 
       (.I0(tx_fifo_bcnt_reg__0[13]),
        .I1(\tx_fifo_bcnt[14]_i_5_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[12]),
        .O(\tx_fifo_bcnt[15]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \tx_fifo_bcnt[15]_i_8 
       (.I0(tx_fifo_bcnt_reg__0[13]),
        .I1(tx_fifo_bcnt_reg__0[11]),
        .I2(\tx_fifo_bcnt[14]_i_6_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[12]),
        .O(\tx_fifo_bcnt[15]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[15]_i_9 
       (.I0(tx_fifo_bcnt_reg__0[12]),
        .I1(tx_fifo_bcnt_reg__0[10]),
        .I2(tx_fifo_bcnt_reg__0[8]),
        .I3(\tx_fifo_bcnt[12]_i_5_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[9]),
        .I5(tx_fifo_bcnt_reg__0[11]),
        .O(\tx_fifo_bcnt[15]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hF0A3FFFF0F5C0000)) 
    \tx_fifo_bcnt[1]_i_1 
       (.I0(s_axis_tkeep[3]),
        .I1(s_axis_tkeep[1]),
        .I2(s_axis_tkeep[2]),
        .I3(tx_fifo_bcnt_reg__0[0]),
        .I4(s_axis_tlast),
        .I5(tx_fifo_bcnt_reg__0[1]),
        .O(p_0_in[1]));
  LUT6 #(
    .INIT(64'hAAABFFFEAAAAAAAA)) 
    \tx_fifo_bcnt[2]_i_1 
       (.I0(\tx_fifo_bcnt[2]_i_2_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[0]),
        .I2(tx_fifo_bcnt_reg__0[1]),
        .I3(s_axis_tkeep[3]),
        .I4(tx_fifo_bcnt_reg__0[2]),
        .I5(\tx_fifo_bcnt[2]_i_3_n_0 ),
        .O(p_0_in[2]));
  LUT6 #(
    .INIT(64'h0037000000C8FFFF)) 
    \tx_fifo_bcnt[2]_i_2 
       (.I0(tx_fifo_bcnt_reg__0[0]),
        .I1(tx_fifo_bcnt_reg__0[1]),
        .I2(s_axis_tkeep[1]),
        .I3(s_axis_tkeep[2]),
        .I4(s_axis_tlast),
        .I5(tx_fifo_bcnt_reg__0[2]),
        .O(\tx_fifo_bcnt[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_fifo_bcnt[2]_i_3 
       (.I0(s_axis_tkeep[2]),
        .I1(s_axis_tlast),
        .O(\tx_fifo_bcnt[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF00F0F066666666)) 
    \tx_fifo_bcnt[3]_i_1 
       (.I0(tx_fifo_bcnt_reg__0[3]),
        .I1(tx_fifo_bcnt_reg__0[2]),
        .I2(\tx_fifo_bcnt[3]_i_2_n_0 ),
        .I3(\tx_fifo_bcnt[3]_i_3_n_0 ),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[3]));
  LUT5 #(
    .INIT(32'h5F7FA080)) 
    \tx_fifo_bcnt[3]_i_2 
       (.I0(tx_fifo_bcnt_reg__0[1]),
        .I1(tx_fifo_bcnt_reg__0[0]),
        .I2(tx_fifo_bcnt_reg__0[2]),
        .I3(s_axis_tkeep[1]),
        .I4(tx_fifo_bcnt_reg__0[3]),
        .O(\tx_fifo_bcnt[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h01FFFE00)) 
    \tx_fifo_bcnt[3]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[0]),
        .I1(tx_fifo_bcnt_reg__0[1]),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt_reg__0[2]),
        .I4(tx_fifo_bcnt_reg__0[3]),
        .O(\tx_fifo_bcnt[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'hF0CCAAAA)) 
    \tx_fifo_bcnt[4]_i_1 
       (.I0(tx_fifo_bcnt0[4]),
        .I1(\tx_fifo_bcnt[4]_i_3_n_0 ),
        .I2(\tx_fifo_bcnt[4]_i_4_n_0 ),
        .I3(s_axis_tkeep[2]),
        .I4(s_axis_tlast),
        .O(p_0_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \tx_fifo_bcnt[4]_i_2 
       (.I0(tx_fifo_bcnt_reg__0[2]),
        .I1(tx_fifo_bcnt_reg__0[3]),
        .I2(tx_fifo_bcnt_reg__0[4]),
        .O(tx_fifo_bcnt0[4]));
  LUT6 #(
    .INIT(64'h5FFF7FFFA0008000)) 
    \tx_fifo_bcnt[4]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[2]),
        .I1(tx_fifo_bcnt_reg__0[0]),
        .I2(tx_fifo_bcnt_reg__0[1]),
        .I3(tx_fifo_bcnt_reg__0[3]),
        .I4(s_axis_tkeep[1]),
        .I5(tx_fifo_bcnt_reg__0[4]),
        .O(\tx_fifo_bcnt[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h01FFFFFFFE000000)) 
    \tx_fifo_bcnt[4]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[1]),
        .I1(tx_fifo_bcnt_reg__0[0]),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt_reg__0[2]),
        .I4(tx_fifo_bcnt_reg__0[3]),
        .I5(tx_fifo_bcnt_reg__0[4]),
        .O(\tx_fifo_bcnt[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFF003C3CAAAAAAAA)) 
    \tx_fifo_bcnt[5]_i_1 
       (.I0(tx_fifo_bcnt0[5]),
        .I1(tx_fifo_bcnt_reg__0[5]),
        .I2(\tx_fifo_bcnt[5]_i_3_n_0 ),
        .I3(\tx_fifo_bcnt[5]_i_4_n_0 ),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \tx_fifo_bcnt[5]_i_2 
       (.I0(tx_fifo_bcnt_reg__0[3]),
        .I1(tx_fifo_bcnt_reg__0[2]),
        .I2(tx_fifo_bcnt_reg__0[4]),
        .I3(tx_fifo_bcnt_reg__0[5]),
        .O(tx_fifo_bcnt0[5]));
  LUT6 #(
    .INIT(64'hC080000000000000)) 
    \tx_fifo_bcnt[5]_i_3 
       (.I0(s_axis_tkeep[1]),
        .I1(tx_fifo_bcnt_reg__0[4]),
        .I2(tx_fifo_bcnt_reg__0[2]),
        .I3(tx_fifo_bcnt_reg__0[0]),
        .I4(tx_fifo_bcnt_reg__0[1]),
        .I5(tx_fifo_bcnt_reg__0[3]),
        .O(\tx_fifo_bcnt[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1DDDDDDDE2222222)) 
    \tx_fifo_bcnt[5]_i_4 
       (.I0(\tx_fifo_bcnt[5]_i_5_n_0 ),
        .I1(s_axis_tkeep[3]),
        .I2(tx_fifo_bcnt_reg__0[3]),
        .I3(tx_fifo_bcnt_reg__0[2]),
        .I4(tx_fifo_bcnt_reg__0[4]),
        .I5(tx_fifo_bcnt_reg__0[5]),
        .O(\tx_fifo_bcnt[5]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h88800000)) 
    \tx_fifo_bcnt[5]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[4]),
        .I1(tx_fifo_bcnt_reg__0[2]),
        .I2(tx_fifo_bcnt_reg__0[1]),
        .I3(tx_fifo_bcnt_reg__0[0]),
        .I4(tx_fifo_bcnt_reg__0[3]),
        .O(\tx_fifo_bcnt[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFEEEAAAAFFAAFFAA)) 
    \tx_fifo_bcnt[6]_i_1 
       (.I0(\tx_fifo_bcnt[6]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[6]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[6]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[6]));
  LUT6 #(
    .INIT(64'h0440040404404040)) 
    \tx_fifo_bcnt[6]_i_2 
       (.I0(s_axis_tkeep[2]),
        .I1(s_axis_tlast),
        .I2(tx_fifo_bcnt_reg__0[6]),
        .I3(\tx_fifo_bcnt[6]_i_5_n_0 ),
        .I4(s_axis_tkeep[1]),
        .I5(\tx_fifo_bcnt[8]_i_5_n_0 ),
        .O(\tx_fifo_bcnt[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \tx_fifo_bcnt[6]_i_3 
       (.I0(\tx_fifo_bcnt[9]_i_7_n_0 ),
        .I1(s_axis_tkeep[3]),
        .I2(tx_fifo_bcnt_reg__0[6]),
        .O(\tx_fifo_bcnt[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \tx_fifo_bcnt[6]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[4]),
        .I1(tx_fifo_bcnt_reg__0[2]),
        .I2(tx_fifo_bcnt_reg__0[3]),
        .I3(tx_fifo_bcnt_reg__0[5]),
        .I4(tx_fifo_bcnt_reg__0[6]),
        .O(tx_fifo_bcnt0[6]));
  LUT5 #(
    .INIT(32'h80000000)) 
    \tx_fifo_bcnt[6]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[5]),
        .I1(tx_fifo_bcnt_reg__0[3]),
        .I2(tx_fifo_bcnt_reg__0[1]),
        .I3(tx_fifo_bcnt_reg__0[2]),
        .I4(tx_fifo_bcnt_reg__0[4]),
        .O(\tx_fifo_bcnt[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[7]_i_1 
       (.I0(\tx_fifo_bcnt[7]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[7]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[7]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[7]));
  LUT5 #(
    .INIT(32'h07F7F808)) 
    \tx_fifo_bcnt[7]_i_2 
       (.I0(\tx_fifo_bcnt[8]_i_5_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[6]),
        .I2(s_axis_tkeep[1]),
        .I3(\tx_fifo_bcnt[9]_i_6_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[7]),
        .O(\tx_fifo_bcnt[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT4 #(
    .INIT(16'h0708)) 
    \tx_fifo_bcnt[7]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[6]),
        .I1(\tx_fifo_bcnt[9]_i_7_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt_reg__0[7]),
        .O(\tx_fifo_bcnt[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \tx_fifo_bcnt[7]_i_4 
       (.I0(tx_fifo_bcnt_reg__0[5]),
        .I1(tx_fifo_bcnt_reg__0[3]),
        .I2(tx_fifo_bcnt_reg__0[2]),
        .I3(tx_fifo_bcnt_reg__0[4]),
        .I4(tx_fifo_bcnt_reg__0[6]),
        .I5(tx_fifo_bcnt_reg__0[7]),
        .O(tx_fifo_bcnt0[7]));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[8]_i_1 
       (.I0(\tx_fifo_bcnt[8]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[8]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[8]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[8]));
  LUT6 #(
    .INIT(64'h0F7FFF7FF0800080)) 
    \tx_fifo_bcnt[8]_i_2 
       (.I0(tx_fifo_bcnt_reg__0[6]),
        .I1(\tx_fifo_bcnt[8]_i_5_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[7]),
        .I3(s_axis_tkeep[1]),
        .I4(\tx_fifo_bcnt[9]_i_6_n_0 ),
        .I5(tx_fifo_bcnt_reg__0[8]),
        .O(\tx_fifo_bcnt[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h007F0080)) 
    \tx_fifo_bcnt[8]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[7]),
        .I1(\tx_fifo_bcnt[9]_i_7_n_0 ),
        .I2(tx_fifo_bcnt_reg__0[6]),
        .I3(s_axis_tkeep[3]),
        .I4(tx_fifo_bcnt_reg__0[8]),
        .O(\tx_fifo_bcnt[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \tx_fifo_bcnt[8]_i_4 
       (.I0(\tx_fifo_bcnt[12]_i_5_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[8]),
        .O(tx_fifo_bcnt0[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[8]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[5]),
        .I1(tx_fifo_bcnt_reg__0[3]),
        .I2(tx_fifo_bcnt_reg__0[1]),
        .I3(tx_fifo_bcnt_reg__0[0]),
        .I4(tx_fifo_bcnt_reg__0[2]),
        .I5(tx_fifo_bcnt_reg__0[4]),
        .O(\tx_fifo_bcnt[8]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFCCCAAAAFF00FF00)) 
    \tx_fifo_bcnt[9]_i_1 
       (.I0(\tx_fifo_bcnt[9]_i_2_n_0 ),
        .I1(\tx_fifo_bcnt[9]_i_3_n_0 ),
        .I2(s_axis_tkeep[3]),
        .I3(tx_fifo_bcnt0[9]),
        .I4(s_axis_tkeep[2]),
        .I5(s_axis_tlast),
        .O(p_0_in[9]));
  LUT6 #(
    .INIT(64'h1DDDDDDDE2222222)) 
    \tx_fifo_bcnt[9]_i_2 
       (.I0(\tx_fifo_bcnt[9]_i_5_n_0 ),
        .I1(s_axis_tkeep[1]),
        .I2(tx_fifo_bcnt_reg__0[7]),
        .I3(\tx_fifo_bcnt[9]_i_6_n_0 ),
        .I4(tx_fifo_bcnt_reg__0[8]),
        .I5(tx_fifo_bcnt_reg__0[9]),
        .O(\tx_fifo_bcnt[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00007FFF00008000)) 
    \tx_fifo_bcnt[9]_i_3 
       (.I0(tx_fifo_bcnt_reg__0[8]),
        .I1(tx_fifo_bcnt_reg__0[6]),
        .I2(\tx_fifo_bcnt[9]_i_7_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[7]),
        .I4(s_axis_tkeep[3]),
        .I5(tx_fifo_bcnt_reg__0[9]),
        .O(\tx_fifo_bcnt[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \tx_fifo_bcnt[9]_i_4 
       (.I0(\tx_fifo_bcnt[12]_i_5_n_0 ),
        .I1(tx_fifo_bcnt_reg__0[8]),
        .I2(tx_fifo_bcnt_reg__0[9]),
        .O(tx_fifo_bcnt0[9]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \tx_fifo_bcnt[9]_i_5 
       (.I0(tx_fifo_bcnt_reg__0[8]),
        .I1(tx_fifo_bcnt_reg__0[6]),
        .I2(\tx_fifo_bcnt[8]_i_5_n_0 ),
        .I3(tx_fifo_bcnt_reg__0[7]),
        .O(\tx_fifo_bcnt[9]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \tx_fifo_bcnt[9]_i_6 
       (.I0(tx_fifo_bcnt_reg__0[6]),
        .I1(tx_fifo_bcnt_reg__0[4]),
        .I2(tx_fifo_bcnt_reg__0[2]),
        .I3(tx_fifo_bcnt_reg__0[1]),
        .I4(tx_fifo_bcnt_reg__0[3]),
        .I5(tx_fifo_bcnt_reg__0[5]),
        .O(\tx_fifo_bcnt[9]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8880000000000000)) 
    \tx_fifo_bcnt[9]_i_7 
       (.I0(tx_fifo_bcnt_reg__0[5]),
        .I1(tx_fifo_bcnt_reg__0[3]),
        .I2(tx_fifo_bcnt_reg__0[0]),
        .I3(tx_fifo_bcnt_reg__0[1]),
        .I4(tx_fifo_bcnt_reg__0[2]),
        .I5(tx_fifo_bcnt_reg__0[4]),
        .O(\tx_fifo_bcnt[9]_i_7_n_0 ));
  FDRE \tx_fifo_bcnt_reg[0] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[0]),
        .Q(tx_fifo_bcnt_reg__0[0]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[10] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[10]),
        .Q(tx_fifo_bcnt_reg__0[10]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[11] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[11]),
        .Q(tx_fifo_bcnt_reg__0[11]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[12] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[12]),
        .Q(tx_fifo_bcnt_reg__0[12]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[13] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[13]),
        .Q(tx_fifo_bcnt_reg__0[13]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[14] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[14]),
        .Q(tx_fifo_bcnt_reg__0[14]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[15] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[15]),
        .Q(tx_fifo_bcnt_reg__0[15]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[1] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[1]),
        .Q(tx_fifo_bcnt_reg__0[1]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[2] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[2]),
        .Q(tx_fifo_bcnt_reg__0[2]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[3] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[3]),
        .Q(tx_fifo_bcnt_reg__0[3]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[4] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[4]),
        .Q(tx_fifo_bcnt_reg__0[4]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[5] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[5]),
        .Q(tx_fifo_bcnt_reg__0[5]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[6] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[6]),
        .Q(tx_fifo_bcnt_reg__0[6]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[7] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[7]),
        .Q(tx_fifo_bcnt_reg__0[7]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[8] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[8]),
        .Q(tx_fifo_bcnt_reg__0[8]),
        .R(tx_data[31]));
  FDRE \tx_fifo_bcnt_reg[9] 
       (.C(dclk),
        .CE(\tx_fifo_bcnt[15]_i_1_n_0 ),
        .D(p_0_in[9]),
        .Q(tx_fifo_bcnt_reg__0[9]),
        .R(tx_data[31]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[0]_i_1 
       (.I0(rx_bcnt_out[0]),
        .I1(first_fifo_data),
        .I2(rx_dout[0]),
        .O(\tx_mac_data[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[10]_i_1 
       (.I0(rx_bcnt_out[10]),
        .I1(first_fifo_data),
        .I2(rx_dout[10]),
        .O(\tx_mac_data[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[11]_i_1 
       (.I0(rx_bcnt_out[11]),
        .I1(first_fifo_data),
        .I2(rx_dout[11]),
        .O(\tx_mac_data[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[12]_i_1 
       (.I0(rx_bcnt_out[12]),
        .I1(first_fifo_data),
        .I2(rx_dout[12]),
        .O(\tx_mac_data[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[13]_i_1 
       (.I0(rx_bcnt_out[13]),
        .I1(first_fifo_data),
        .I2(rx_dout[13]),
        .O(\tx_mac_data[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[14]_i_1 
       (.I0(rx_bcnt_out[14]),
        .I1(first_fifo_data),
        .I2(rx_dout[14]),
        .O(\tx_mac_data[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[15]_i_1 
       (.I0(rx_bcnt_out[15]),
        .I1(first_fifo_data),
        .I2(rx_dout[15]),
        .O(\tx_mac_data[15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[16]_i_1 
       (.I0(rx_dout[16]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[17]_i_1 
       (.I0(rx_dout[17]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[18]_i_1 
       (.I0(rx_dout[18]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[19]_i_1 
       (.I0(rx_dout[19]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[1]_i_1 
       (.I0(rx_bcnt_out[1]),
        .I1(first_fifo_data),
        .I2(rx_dout[1]),
        .O(\tx_mac_data[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[20]_i_1 
       (.I0(rx_dout[20]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[21]_i_1 
       (.I0(rx_dout[21]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[22]_i_1 
       (.I0(rx_dout[22]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[23]_i_1 
       (.I0(rx_dout[23]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[24]_i_1 
       (.I0(rx_dout[24]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[25]_i_1 
       (.I0(rx_dout[25]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[26]_i_1 
       (.I0(rx_dout[26]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[27]_i_1 
       (.I0(rx_dout[27]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[28]_i_1 
       (.I0(rx_dout[28]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[29]_i_1 
       (.I0(rx_dout[29]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[2]_i_1 
       (.I0(rx_bcnt_out[2]),
        .I1(first_fifo_data),
        .I2(rx_dout[2]),
        .O(\tx_mac_data[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[30]_i_1 
       (.I0(rx_dout[30]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[31]_i_1 
       (.I0(rx_dout[31]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[32]_i_1 
       (.I0(rx_dout[32]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[33]_i_1 
       (.I0(rx_dout[33]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[34]_i_1 
       (.I0(rx_dout[34]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[35]_i_1 
       (.I0(rx_dout[35]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[36]_i_1 
       (.I0(rx_dout[36]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[37]_i_1 
       (.I0(rx_dout[37]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[38]_i_1 
       (.I0(rx_dout[38]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[39]_i_1 
       (.I0(rx_dout[39]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[3]_i_1 
       (.I0(rx_bcnt_out[3]),
        .I1(first_fifo_data),
        .I2(rx_dout[3]),
        .O(\tx_mac_data[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[40]_i_1 
       (.I0(rx_dout[40]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[41]_i_1 
       (.I0(rx_dout[41]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[42]_i_1 
       (.I0(rx_dout[42]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[43]_i_1 
       (.I0(rx_dout[43]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[44]_i_1 
       (.I0(rx_dout[44]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[45]_i_1 
       (.I0(rx_dout[45]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[46]_i_1 
       (.I0(rx_dout[46]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[47]_i_1 
       (.I0(rx_dout[47]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[48]_i_1 
       (.I0(rx_dout[48]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[49]_i_1 
       (.I0(rx_dout[49]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[4]_i_1 
       (.I0(rx_bcnt_out[4]),
        .I1(first_fifo_data),
        .I2(rx_dout[4]),
        .O(\tx_mac_data[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[50]_i_1 
       (.I0(rx_dout[50]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[51]_i_1 
       (.I0(rx_dout[51]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[52]_i_1 
       (.I0(rx_dout[52]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[53]_i_1 
       (.I0(rx_dout[53]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[54]_i_1 
       (.I0(rx_dout[54]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[55]_i_1 
       (.I0(rx_dout[55]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[56]_i_1 
       (.I0(rx_dout[56]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[57]_i_1 
       (.I0(rx_dout[57]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[58]_i_1 
       (.I0(rx_dout[58]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[59]_i_1 
       (.I0(rx_dout[59]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[5]_i_1 
       (.I0(rx_bcnt_out[5]),
        .I1(first_fifo_data),
        .I2(rx_dout[5]),
        .O(\tx_mac_data[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[60]_i_1 
       (.I0(rx_dout[60]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[61]_i_1 
       (.I0(rx_dout[61]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[62]_i_1 
       (.I0(rx_dout[62]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[62]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0020FFFF)) 
    \tx_mac_data[63]_i_1 
       (.I0(tx_rd_fifo_st),
        .I1(tx_rd_bcnt_st),
        .I2(first_fifo_data),
        .I3(tx_rd_idle_st),
        .I4(rst_),
        .O(\tx_mac_data[63]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \tx_mac_data[63]_i_2 
       (.I0(tx_rd_bcnt_st),
        .I1(tx_rd_fifo_st),
        .I2(tx_rd_idle_st),
        .O(\tx_mac_data[63]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \tx_mac_data[63]_i_3 
       (.I0(rx_dout[63]),
        .I1(first_fifo_data),
        .O(\tx_mac_data[63]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[6]_i_1 
       (.I0(rx_bcnt_out[6]),
        .I1(first_fifo_data),
        .I2(rx_dout[6]),
        .O(\tx_mac_data[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[7]_i_1 
       (.I0(rx_bcnt_out[7]),
        .I1(first_fifo_data),
        .I2(rx_dout[7]),
        .O(\tx_mac_data[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[8]_i_1 
       (.I0(rx_bcnt_out[8]),
        .I1(first_fifo_data),
        .I2(rx_dout[8]),
        .O(\tx_mac_data[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \tx_mac_data[9]_i_1 
       (.I0(rx_bcnt_out[9]),
        .I1(first_fifo_data),
        .I2(rx_dout[9]),
        .O(\tx_mac_data[9]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[0] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[10] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[10]_i_1_n_0 ),
        .Q(Q[10]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[11] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[11]_i_1_n_0 ),
        .Q(Q[11]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[12] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[12]_i_1_n_0 ),
        .Q(Q[12]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[13] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[13]_i_1_n_0 ),
        .Q(Q[13]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[14] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[14]_i_1_n_0 ),
        .Q(Q[14]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[15] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[15]_i_1_n_0 ),
        .Q(Q[15]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[16] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[16]_i_1_n_0 ),
        .Q(Q[16]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[17] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[17]_i_1_n_0 ),
        .Q(Q[17]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[18] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[18]_i_1_n_0 ),
        .Q(Q[18]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[19] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[19]_i_1_n_0 ),
        .Q(Q[19]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[1] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[20] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[20]_i_1_n_0 ),
        .Q(Q[20]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[21] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[21]_i_1_n_0 ),
        .Q(Q[21]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[22] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[22]_i_1_n_0 ),
        .Q(Q[22]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[23] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[23]_i_1_n_0 ),
        .Q(Q[23]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[24] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[24]_i_1_n_0 ),
        .Q(Q[24]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[25] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[25]_i_1_n_0 ),
        .Q(Q[25]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[26] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[26]_i_1_n_0 ),
        .Q(Q[26]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[27] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[27]_i_1_n_0 ),
        .Q(Q[27]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[28] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[28]_i_1_n_0 ),
        .Q(Q[28]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[29] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[29]_i_1_n_0 ),
        .Q(Q[29]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[2] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[30] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[30]_i_1_n_0 ),
        .Q(Q[30]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[31] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[31]_i_1_n_0 ),
        .Q(Q[31]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[32] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[32]_i_1_n_0 ),
        .Q(Q[32]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[33] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[33]_i_1_n_0 ),
        .Q(Q[33]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[34] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[34]_i_1_n_0 ),
        .Q(Q[34]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[35] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[35]_i_1_n_0 ),
        .Q(Q[35]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[36] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[36]_i_1_n_0 ),
        .Q(Q[36]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[37] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[37]_i_1_n_0 ),
        .Q(Q[37]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[38] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[38]_i_1_n_0 ),
        .Q(Q[38]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[39] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[39]_i_1_n_0 ),
        .Q(Q[39]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[3] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[40] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[40]_i_1_n_0 ),
        .Q(Q[40]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[41] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[41]_i_1_n_0 ),
        .Q(Q[41]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[42] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[42]_i_1_n_0 ),
        .Q(Q[42]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[43] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[43]_i_1_n_0 ),
        .Q(Q[43]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[44] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[44]_i_1_n_0 ),
        .Q(Q[44]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[45] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[45]_i_1_n_0 ),
        .Q(Q[45]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[46] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[46]_i_1_n_0 ),
        .Q(Q[46]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[47] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[47]_i_1_n_0 ),
        .Q(Q[47]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[48] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[48]_i_1_n_0 ),
        .Q(Q[48]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[49] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[49]_i_1_n_0 ),
        .Q(Q[49]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[4] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[50] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[50]_i_1_n_0 ),
        .Q(Q[50]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[51] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[51]_i_1_n_0 ),
        .Q(Q[51]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[52] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[52]_i_1_n_0 ),
        .Q(Q[52]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[53] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[53]_i_1_n_0 ),
        .Q(Q[53]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[54] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[54]_i_1_n_0 ),
        .Q(Q[54]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[55] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[55]_i_1_n_0 ),
        .Q(Q[55]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[56] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[56]_i_1_n_0 ),
        .Q(Q[56]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[57] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[57]_i_1_n_0 ),
        .Q(Q[57]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[58] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[58]_i_1_n_0 ),
        .Q(Q[58]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[59] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[59]_i_1_n_0 ),
        .Q(Q[59]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[5] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[60] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[60]_i_1_n_0 ),
        .Q(Q[60]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[61] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[61]_i_1_n_0 ),
        .Q(Q[61]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[62] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[62]_i_1_n_0 ),
        .Q(Q[62]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[63] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[63]_i_3_n_0 ),
        .Q(Q[63]),
        .R(\tx_mac_data[63]_i_1_n_0 ));
  FDRE \tx_mac_data_reg[6] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[6]_i_1_n_0 ),
        .Q(Q[6]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[7] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[7]_i_1_n_0 ),
        .Q(Q[7]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[8] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[8]_i_1_n_0 ),
        .Q(Q[8]),
        .R(my_mac_hit1));
  FDRE \tx_mac_data_reg[9] 
       (.C(lclk),
        .CE(\tx_mac_data[63]_i_2_n_0 ),
        .D(\tx_mac_data[9]_i_1_n_0 ),
        .Q(Q[9]),
        .R(my_mac_hit1));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    tx_mac_wr_i_1
       (.I0(tx_mac_wr),
        .I1(tx_rd_bcnt_st),
        .I2(tx_rd_fifo_st),
        .O(tx_mac_wr_i_1_n_0));
  FDRE tx_mac_wr_reg
       (.C(lclk),
        .CE(1'b1),
        .D(tx_mac_wr_i_1_n_0),
        .Q(tx_mac_wr),
        .R(rx_rdreq));
  LUT4 #(
    .INIT(16'h4447)) 
    \tx_rd_state[0]_i_1 
       (.I0(tx_rd_state26_out),
        .I1(tx_rd_idle_st),
        .I2(tx_rd_bcnt_st),
        .I3(tx_rd_fifo_st),
        .O(tx_rd_state[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \tx_rd_state[1]_i_1 
       (.I0(tx_rd_idle_st),
        .I1(tx_rd_state26_out),
        .O(tx_rd_state[1]));
  LUT5 #(
    .INIT(32'h54505454)) 
    \tx_rd_state[2]_i_1 
       (.I0(tx_rd_idle_st),
        .I1(tx_rd_fifo_st),
        .I2(tx_rd_bcnt_st),
        .I3(first_fifo_data),
        .I4(tx_rd_state34_in),
        .O(tx_rd_state[2]));
  LUT5 #(
    .INIT(32'h2222222A)) 
    \tx_rd_state[2]_i_2 
       (.I0(\tx_rd_state[2]_i_3_n_0 ),
        .I1(rd_bcnt_reg[3]),
        .I2(rd_bcnt_reg[2]),
        .I3(rd_bcnt_reg[1]),
        .I4(rd_bcnt_reg[0]),
        .O(tx_rd_state34_in));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \tx_rd_state[2]_i_3 
       (.I0(\tx_rd_state[2]_i_4_n_0 ),
        .I1(rd_bcnt_reg[15]),
        .I2(rd_bcnt_reg[14]),
        .I3(rd_bcnt_reg[13]),
        .I4(rd_bcnt_reg[12]),
        .I5(\tx_rd_state[2]_i_5_n_0 ),
        .O(\tx_rd_state[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \tx_rd_state[2]_i_4 
       (.I0(rd_bcnt_reg[11]),
        .I1(rd_bcnt_reg[10]),
        .I2(rd_bcnt_reg[9]),
        .I3(rd_bcnt_reg[8]),
        .O(\tx_rd_state[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \tx_rd_state[2]_i_5 
       (.I0(rd_bcnt_reg[5]),
        .I1(rd_bcnt_reg[4]),
        .I2(rd_bcnt_reg[7]),
        .I3(rd_bcnt_reg[6]),
        .O(\tx_rd_state[2]_i_5_n_0 ));
  FDSE \tx_rd_state_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(tx_rd_state[0]),
        .Q(tx_rd_idle_st),
        .S(my_mac_hit1));
  FDRE \tx_rd_state_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(tx_rd_state[1]),
        .Q(tx_rd_bcnt_st),
        .R(my_mac_hit1));
  FDRE \tx_rd_state_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(tx_rd_state[2]),
        .Q(tx_rd_fifo_st),
        .R(my_mac_hit1));
  LUT4 #(
    .INIT(16'h4447)) 
    \tx_wr_state[0]_i_1 
       (.I0(tx_wr_state1),
        .I1(tx_wr_idle_st),
        .I2(tx_wr_fifo_st),
        .I3(tx_wr_bcnt_st),
        .O(\tx_wr_state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'hAA30)) 
    \tx_wr_state[1]_i_1 
       (.I0(tx_wr_state1),
        .I1(s_axis_tlast),
        .I2(tx_wr_fifo_st),
        .I3(tx_wr_idle_st),
        .O(\tx_wr_state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \tx_wr_state[2]_i_1 
       (.I0(tx_wr_idle_st),
        .I1(tx_wr_fifo_st),
        .I2(s_axis_tlast),
        .O(\tx_wr_state[2]_i_1_n_0 ));
  FDSE \tx_wr_state_reg[0] 
       (.C(dclk),
        .CE(1'b1),
        .D(\tx_wr_state[0]_i_1_n_0 ),
        .Q(tx_wr_idle_st),
        .S(my_mac_hit1));
  FDRE \tx_wr_state_reg[1] 
       (.C(dclk),
        .CE(1'b1),
        .D(\tx_wr_state[1]_i_1_n_0 ),
        .Q(tx_wr_fifo_st),
        .R(my_mac_hit1));
  FDRE \tx_wr_state_reg[2] 
       (.C(dclk),
        .CE(1'b1),
        .D(\tx_wr_state[2]_i_1_n_0 ),
        .Q(tx_wr_bcnt_st),
        .R(my_mac_hit1));
  LUT6 #(
    .INIT(64'hBB0FFF0FBB000000)) 
    tx_wrreq_i_1__0
       (.I0(s_axis_tlast),
        .I1(byte_lo_reg_n_0),
        .I2(tx_wr_bcnt_st),
        .I3(tx_wr_fifo_st),
        .I4(s_axis_tvalid),
        .I5(tx_wrreq_reg_n_0),
        .O(tx_wrreq_i_1__0_n_0));
  FDRE tx_wrreq_reg
       (.C(dclk),
        .CE(1'b1),
        .D(tx_wrreq_i_1__0_n_0),
        .Q(tx_wrreq_reg_n_0),
        .R(tx_data[31]));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_LMAC_CORE_TOP
   (full,
    empty,
    SR,
    \gcc0.gc0.count_reg[3] ,
    ram_full_fb_i_reg,
    sof4,
    shift0,
    sof0,
    eof1,
    eof0,
    \gf_state_reg[0] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    gmii_rx_dv_dly,
    first_data_dly,
    frame,
    link_ok,
    pdet_in,
    link_break,
    shift,
    sof4_cycle,
    has_sof,
    linkup_1g,
    Q,
    tx_rd_state26_out,
    \dff0_reg[2] ,
    frame_reg,
    gmii_txd,
    in0,
    gmii_tx_en,
    rxfifo_dout,
    rx_mac_empty,
    ipcs_fifo_dout,
    cs_fifo_empty,
    lclk,
    wr_en,
    rd_en,
    ram_full_i_reg,
    ram_empty_i_reg,
    out,
    first_data0,
    eof0_reg,
    sof4_reg,
    sof0_reg,
    first_data_dly_reg,
    \data_in_dly1_reg[2] ,
    link_ok_reg,
    ram_empty_i_reg_0,
    fmac_speed,
    rst_,
    mode_1G,
    ram_full_i_reg_0,
    ram_empty_i_reg_1,
    D,
    mode_100M,
    txfifo_din,
    tx_mac_wr,
    fmac_speed_0_sp_1,
    rx_mac_rd,
    cs_fifo_rd_en);
  output full;
  output empty;
  output [0:0]SR;
  output \gcc0.gc0.count_reg[3] ;
  output ram_full_fb_i_reg;
  output sof4;
  output shift0;
  output sof0;
  output eof1;
  output eof0;
  output \gf_state_reg[0] ;
  output \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output gmii_rx_dv_dly;
  output first_data_dly;
  output frame;
  output link_ok;
  output pdet_in;
  output link_break;
  output shift;
  output sof4_cycle;
  output has_sof;
  output linkup_1g;
  output [3:0]Q;
  output tx_rd_state26_out;
  output [1:0]\dff0_reg[2] ;
  output frame_reg;
  output [7:0]gmii_txd;
  output in0;
  output gmii_tx_en;
  output [63:0]rxfifo_dout;
  output rx_mac_empty;
  output [15:0]ipcs_fifo_dout;
  output cs_fifo_empty;
  input lclk;
  input wr_en;
  input rd_en;
  input ram_full_i_reg;
  input ram_empty_i_reg;
  input out;
  input first_data0;
  input eof0_reg;
  input sof4_reg;
  input sof0_reg;
  input first_data_dly_reg;
  input \data_in_dly1_reg[2] ;
  input link_ok_reg;
  input ram_empty_i_reg_0;
  input [1:0]fmac_speed;
  input rst_;
  input mode_1G;
  input ram_full_i_reg_0;
  input ram_empty_i_reg_1;
  input [7:0]D;
  input mode_100M;
  input [63:0]txfifo_din;
  input tx_mac_wr;
  input fmac_speed_0_sp_1;
  input rx_mac_rd;
  input cs_fifo_rd_en;

  wire [7:0]D;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [3:0]Q;
  wire [0:0]SR;
  wire byte_reordering_n_11;
  wire byte_reordering_n_89;
  wire cs_fifo_empty;
  wire cs_fifo_rd_en;
  wire \data_in_dly1_reg[2] ;
  wire [1:0]\dff0_reg[2] ;
  wire empty;
  wire eof0;
  wire eof00;
  wire eof0_reg;
  wire eof1;
  wire eof10;
  wire first_data0;
  wire first_data_dly;
  wire first_data_dly_reg;
  wire [1:0]fmac_speed;
  wire fmac_speed_0_sn_1;
  wire frame;
  wire frame_reg;
  wire full;
  wire \gcc0.gc0.count_reg[3] ;
  wire \gf_state_reg[0] ;
  wire [7:0]gige_rx_cout;
  wire [63:0]gige_rx_dout;
  wire gige_rx_n_88;
  wire gige_rx_n_9;
  wire gige_rx_n_90;
  wire gige_rx_n_91;
  wire gige_rx_n_92;
  wire gmii_rx_dv_dly;
  wire gmii_tx_en;
  wire [7:0]gmii_txd;
  wire has_sof;
  wire in0;
  wire [15:0]ipcs_fifo_dout;
  wire lclk;
  wire link_break;
  wire link_ok;
  wire link_ok_reg;
  wire linkup_1g;
  wire mode_100M;
  wire mode_1G;
  wire out;
  wire p_0_in;
  wire [3:1]p_1_in__0;
  wire p_2_in;
  wire pdet_in;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire ram_full_i_reg_0;
  wire rd_en;
  wire rst_;
  wire rx_mac_empty;
  wire rx_mac_rd;
  wire \rx_xgmii/pre_eof0 ;
  wire \rx_xgmii/pre_sof0 ;
  wire \rx_xgmii/sof ;
  wire \rx_xgmii/type_reject ;
  wire [7:0]rxc_reorder;
  wire [63:0]rxd_reorder;
  wire [63:0]rxfifo_dout;
  wire shift;
  wire shift0;
  wire sof0;
  wire sof00;
  wire sof0_reg;
  wire sof10;
  wire sof20;
  wire sof30;
  wire sof4;
  wire sof4_cycle;
  wire sof4_reg;
  wire sof50;
  wire sof60;
  wire sof70;
  wire tx_mac_wr;
  wire tx_rd_state26_out;
  wire [63:0]txfifo_din;
  wire wr_en;
  wire xaui_mode;

  assign fmac_speed_0_sn_1 = fmac_speed_0_sp_1;
  ps_emio_eth_1g_AXIS_LMAC_0_1_tcore_byte_reordering byte_reordering
       (.D(rxc_reorder),
        .Q(gige_rx_cout),
        .SS({gige_rx_n_88,p_2_in}),
        .bad_frame_noeof_reg_0(has_sof),
        .bad_frame_reg_0(eof1),
        .\bdata1_reg[63] (rxd_reorder),
        .br_sof4_reg_0(sof4),
        .\ctrl_out_reg[1]_0 (gige_rx_n_90),
        .\ctrl_out_reg[2]_0 (gige_rx_n_91),
        .\ctrl_out_reg[3]_0 (p_1_in__0),
        .\ctrl_out_reg[4]_0 (byte_reordering_n_11),
        .\data_out_reg[31]_0 (eof0),
        .\data_out_reg[31]_1 (sof4_cycle),
        .\data_out_reg[63]_0 (shift),
        .\data_out_reg[63]_1 (gige_rx_dout),
        .empty(empty),
        .eof00(eof00),
        .eof0_reg_0(eof0_reg),
        .eof10(eof10),
        .full(full),
        .\gcc0.gc0.count_reg[3] (\gcc0.gc0.count_reg[3] ),
        .lclk(lclk),
        .pre_eof0(\rx_xgmii/pre_eof0 ),
        .pre_sof0(\rx_xgmii/pre_sof0 ),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .ram_full_i_reg(ram_full_i_reg),
        .rd_en(rd_en),
        .rst_(SR),
        .shift0(shift0),
        .sof(\rx_xgmii/sof ),
        .sof0(sof0),
        .sof00(sof00),
        .sof0_reg_0(sof0_reg),
        .sof10(sof10),
        .sof20(sof20),
        .sof30(sof30),
        .sof4_reg_0(sof4_reg),
        .sof50(sof50),
        .sof60(sof60),
        .sof70(sof70),
        .type_reject(\rx_xgmii/type_reject ),
        .type_reject_reg(byte_reordering_n_89),
        .wr_en(wr_en),
        .xaui_mode(xaui_mode),
        .xaui_mode_reg(gige_rx_n_92));
  ps_emio_eth_1g_AXIS_LMAC_0_1_tcore_fmac_core core
       (.D(rxd_reorder),
        .cs_fifo_empty(cs_fifo_empty),
        .cs_fifo_rd_en(cs_fifo_rd_en),
        .\ctrl_out_reg[7] (rxc_reorder),
        .fmac_speed(fmac_speed),
        .fmac_speed_0_sp_1(fmac_speed_0_sn_1),
        .fmac_speed_1_sp_1(gige_rx_n_9),
        .gmii_tx_en(gmii_tx_en),
        .gmii_txd(gmii_txd),
        .in0(in0),
        .ipcs_fifo_dout(ipcs_fifo_dout),
        .lclk(lclk),
        .mode_1G(mode_1G),
        .\new_crc_reg[0] (SR),
        .pre_eof0(\rx_xgmii/pre_eof0 ),
        .pre_sof0(\rx_xgmii/pre_sof0 ),
        .ram_empty_i_reg(ram_empty_i_reg_1),
        .ram_full_i_reg(ram_full_i_reg_0),
        .rst_(rst_),
        .rx_mac_empty(rx_mac_empty),
        .rx_mac_rd(rx_mac_rd),
        .rxfifo_dout(rxfifo_dout),
        .sof(\rx_xgmii/sof ),
        .sof_reg(byte_reordering_n_89),
        .tx_mac_wr(tx_mac_wr),
        .tx_rd_state26_out(tx_rd_state26_out),
        .txfifo_din(txfifo_din),
        .type_reject(\rx_xgmii/type_reject ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gige_rx gige_rx
       (.D(D),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .Q(Q),
        .SS({gige_rx_n_88,p_2_in}),
        .\consec_idle_reg[0] (linkup_1g),
        .\count_reg[8] (gige_rx_n_9),
        .\ctrl_in_dly_reg[7] (gige_rx_cout),
        .\ctrl_in_dly_reg[7]_0 (p_1_in__0),
        .\ctrl_out_reg[5] (gige_rx_n_90),
        .\ctrl_out_reg[6] (gige_rx_n_91),
        .\ctrl_out_reg[7] (gige_rx_n_92),
        .\data_in_dly1_reg[2] (\data_in_dly1_reg[2] ),
        .\data_in_dly_reg[63] (gige_rx_dout),
        .\dff0_reg[2] (\dff0_reg[2] ),
        .eof00(eof00),
        .eof10(eof10),
        .first_data0(first_data0),
        .first_data_dly(first_data_dly),
        .first_data_dly_reg(first_data_dly_reg),
        .fmac_speed(fmac_speed),
        .frame_dly1_reg(frame),
        .frame_reg(frame_reg),
        .\gf_state_reg[0] (\gf_state_reg[0] ),
        .gmii_rx_dv_dly(gmii_rx_dv_dly),
        .lclk(lclk),
        .link_break(link_break),
        .link_ok(link_ok),
        .link_ok_reg(link_ok_reg),
        .mode_100M(mode_100M),
        .mode_1G(mode_1G),
        .out(out),
        .pdet_in_dly_reg(pdet_in),
        .ram_empty_i_reg(ram_empty_i_reg_0),
        .rst_(rst_),
        .rst__0(SR),
        .shift0(shift0),
        .shift_reg(shift),
        .sof00(sof00),
        .sof10(sof10),
        .sof20(sof20),
        .sof30(sof30),
        .sof50(sof50),
        .sof60(sof60),
        .sof70(sof70),
        .xaui_mode(xaui_mode),
        .xaui_mode_reg(byte_reordering_n_11));
  LUT2 #(
    .INIT(4'h1)) 
    xaui_mode_i_1
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .O(p_0_in));
  FDRE xaui_mode_reg
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(xaui_mode),
        .R(1'b0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_LMAC_DFIFO_TOP
   (gmii_txd,
    gmii_tx_er,
    gmii_tx_en,
    m_axis_tdata,
    m_axis_tkeep,
    s_axis_tready,
    m_axis_tlast,
    m_axis_tvalid,
    fmac_speed,
    rst_,
    dclk,
    lclk,
    gmii_rxd,
    gmii_rx_dv,
    gmii_rx_er,
    s_axis_tdata,
    s_axis_tlast,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tkeep);
  output [7:0]gmii_txd;
  output gmii_tx_er;
  output gmii_tx_en;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tkeep;
  output s_axis_tready;
  output m_axis_tlast;
  output m_axis_tvalid;
  input [1:0]fmac_speed;
  input rst_;
  input dclk;
  input lclk;
  input [7:0]gmii_rxd;
  input gmii_rx_dv;
  input gmii_rx_er;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input m_axis_tready;
  input s_axis_tvalid;
  input [3:0]s_axis_tkeep;

  wire \LMAC_CORE_TOP/core/rx_xgmii/my_mac_hit1 ;
  wire cs_fifo_empty;
  wire cs_fifo_rd_en;
  wire dclk;
  wire [1:0]fmac_speed;
  wire gmii_rx_dv;
  wire gmii_rx_er;
  wire [7:0]gmii_rxd;
  wire gmii_tx_en;
  wire gmii_tx_er;
  wire [7:0]gmii_txd;
  wire [63:48]ipcs_fifo_dout;
  wire lclk;
  wire [31:0]m_axis_tdata;
  wire [3:0]m_axis_tkeep;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire rst_;
  wire rx_bcnt_empty;
  wire [63:0]rx_mac_data;
  wire rx_mac_empty;
  wire rx_mac_rd;
  wire [31:0]s_axis_tdata;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire tx_full;
  wire [63:0]tx_mac_data;
  wire tx_mac_wr;
  wire tx_rd_state26_out;

  ps_emio_eth_1g_AXIS_LMAC_0_1_DFIFO_BRIDGE_RX DFIFO_BRIDGE_RX
       (.cs_fifo_empty(cs_fifo_empty),
        .cs_fifo_rd_en(cs_fifo_rd_en),
        .dclk(dclk),
        .ipcs_fifo_dout(ipcs_fifo_dout),
        .lclk(lclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tkeep(m_axis_tkeep),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .my_mac_hit1(\LMAC_CORE_TOP/core/rx_xgmii/my_mac_hit1 ),
        .rst_(rst_),
        .rx_mac_data(rx_mac_data),
        .rx_mac_empty(rx_mac_empty),
        .rx_mac_rd(rx_mac_rd));
  ps_emio_eth_1g_AXIS_LMAC_0_1_DFIFO_BRIDGE_TX DFIFO_BRIDGE_TX
       (.Q(tx_mac_data),
        .dclk(dclk),
        .empty(rx_bcnt_empty),
        .full(tx_full),
        .lclk(lclk),
        .my_mac_hit1(\LMAC_CORE_TOP/core/rx_xgmii/my_mac_hit1 ),
        .rst_(rst_),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tkeep(s_axis_tkeep),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .tx_mac_wr(tx_mac_wr),
        .tx_rd_state26_out(tx_rd_state26_out));
  ps_emio_eth_1g_AXIS_LMAC_0_1_LMAC_SYNTH LMAC_SYNTH
       (.cs_fifo_empty(cs_fifo_empty),
        .cs_fifo_rd_en(cs_fifo_rd_en),
        .empty(rx_bcnt_empty),
        .fmac_speed(fmac_speed),
        .full(tx_full),
        .gmii_rx_dv(gmii_rx_dv),
        .gmii_rx_er(gmii_rx_er),
        .gmii_rxd(gmii_rxd),
        .gmii_tx_en(gmii_tx_en),
        .gmii_tx_er(gmii_tx_er),
        .gmii_txd(gmii_txd),
        .ipcs_fifo_dout(ipcs_fifo_dout),
        .lclk(lclk),
        .my_mac_hit1(\LMAC_CORE_TOP/core/rx_xgmii/my_mac_hit1 ),
        .rst_(rst_),
        .rx_mac_data(rx_mac_data),
        .rx_mac_empty(rx_mac_empty),
        .rx_mac_rd(rx_mac_rd),
        .tx_mac_data(tx_mac_data),
        .tx_mac_wr(tx_mac_wr),
        .tx_rd_state26_out(tx_rd_state26_out));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_LMAC_SYNTH
   (my_mac_hit1,
    tx_rd_state26_out,
    rx_mac_empty,
    ipcs_fifo_dout,
    cs_fifo_empty,
    rx_mac_data,
    gmii_txd,
    gmii_tx_er,
    gmii_tx_en,
    fmac_speed,
    rst_,
    full,
    empty,
    lclk,
    tx_mac_wr,
    rx_mac_rd,
    cs_fifo_rd_en,
    tx_mac_data,
    gmii_rxd,
    gmii_rx_dv,
    gmii_rx_er);
  output my_mac_hit1;
  output tx_rd_state26_out;
  output rx_mac_empty;
  output [15:0]ipcs_fifo_dout;
  output cs_fifo_empty;
  output [63:0]rx_mac_data;
  output [7:0]gmii_txd;
  output gmii_tx_er;
  output gmii_tx_en;
  input [1:0]fmac_speed;
  input rst_;
  input full;
  input empty;
  input lclk;
  input tx_mac_wr;
  input rx_mac_rd;
  input cs_fifo_rd_en;
  input [63:0]tx_mac_data;
  input [7:0]gmii_rxd;
  input gmii_rx_dv;
  input gmii_rx_er;

  wire \<const0> ;
  wire LMAC_CORE_TOP_n_25;
  wire LMAC_CORE_TOP_n_29;
  (* RTL_KEEP = "true" *) wire LMAC_CORE_TOP_n_38;
  wire br_sfifo_ip_4x32_i_1__0_n_0;
  wire br_sfifo_ip_4x32_i_1_n_0;
  wire br_sfifo_ip_4x32_i_2__0_n_0;
  wire br_sfifo_ip_4x32_i_2_n_0;
  wire \byte_reordering/bfsof_sfifo_empty ;
  wire \byte_reordering/bfsof_sfifo_full ;
  wire \byte_reordering/eof0 ;
  wire \byte_reordering/eof1 ;
  wire \byte_reordering/has_sof ;
  wire \byte_reordering/rf_sfifo_empty ;
  wire \byte_reordering/rf_sfifo_full ;
  wire \byte_reordering/shift ;
  wire \byte_reordering/shift0 ;
  wire \byte_reordering/sof0 ;
  wire \byte_reordering/sof4 ;
  wire \byte_reordering/sof4_cycle ;
  wire \core/gige_tx_gmii/mode_100M ;
  wire \core/gige_tx_gmii/mode_1G ;
  wire cs_fifo_empty;
  wire cs_fifo_rd_en;
  wire ctrl_in_i_1_n_0;
  wire empty;
  wire [1:0]fmac_speed;
  wire frame_i_1_n_0;
  wire full;
  wire gige_bcnt_fifo_re_i_1_n_0;
  wire \gige_rx/g2x_ctrl/gf_bcnt_buf_st ;
  wire \gige_rx/g2x_ctrl/gf_rd_bcnt_st ;
  wire \gige_rx/g2x_ctrl/gf_rd_data_st ;
  wire \gige_rx/gf_bcnt_empty ;
  wire \gige_rx/gige_bcnt_fifo_re ;
  wire [2:1]\gige_rx/gige_s2p/data_in_dly1 ;
  wire \gige_rx/gige_s2p/first_data0 ;
  wire \gige_rx/gige_s2p/first_data_dly ;
  wire \gige_rx/gige_s2p/frame ;
  wire \gige_rx/gige_s2p/gmii_rx_dv_dly ;
  wire \gige_rx/gige_s2p/link_break ;
  wire \gige_rx/gige_s2p/link_ok ;
  wire \gige_rx/gige_s2p/pdet_in ;
  (* RTL_KEEP = "true" *) wire gmii_rx_dv;
  (* RTL_KEEP = "true" *) wire gmii_rx_er;
  (* RTL_KEEP = "true" *) wire [7:0]gmii_rxd;
  (* RTL_KEEP = "true" *) wire gmii_tx_en;
  (* RTL_KEEP = "true" *) wire [7:0]gmii_txd;
  wire has_sof_i_1__0_n_0;
  wire [15:0]ipcs_fifo_dout;
  wire lclk;
  wire linkup_1g;
  wire linkup_i_1_n_0;
  wire my_mac_hit1;
  wire pulse_1_i_1__0_n_0;
  wire rst_;
  (* RTL_KEEP = "true" *) wire [63:0]rx_mac_data;
  wire rx_mac_empty;
  wire rx_mac_rd;
  wire shift_i_1_n_0;
  wire sof4_cycle_i_1_n_0;
  (* RTL_KEEP = "true" *) wire [63:0]tx_mac_data;
  wire tx_mac_wr;
  wire tx_rd_state26_out;

  assign gmii_tx_er = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_LMAC_CORE_TOP LMAC_CORE_TOP
       (.D(gmii_rxd),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\gige_rx/gige_bcnt_fifo_re ),
        .Q({\gige_rx/g2x_ctrl/gf_rd_data_st ,\gige_rx/g2x_ctrl/gf_bcnt_buf_st ,\gige_rx/g2x_ctrl/gf_rd_bcnt_st ,LMAC_CORE_TOP_n_25}),
        .SR(my_mac_hit1),
        .cs_fifo_empty(cs_fifo_empty),
        .cs_fifo_rd_en(cs_fifo_rd_en),
        .\data_in_dly1_reg[2] (frame_i_1_n_0),
        .\dff0_reg[2] (\gige_rx/gige_s2p/data_in_dly1 ),
        .empty(\byte_reordering/rf_sfifo_empty ),
        .eof0(\byte_reordering/eof0 ),
        .eof0_reg(shift_i_1_n_0),
        .eof1(\byte_reordering/eof1 ),
        .first_data0(\gige_rx/gige_s2p/first_data0 ),
        .first_data_dly(\gige_rx/gige_s2p/first_data_dly ),
        .first_data_dly_reg(ctrl_in_i_1_n_0),
        .fmac_speed(fmac_speed),
        .fmac_speed_0_sp_1(pulse_1_i_1__0_n_0),
        .frame(\gige_rx/gige_s2p/frame ),
        .frame_reg(LMAC_CORE_TOP_n_29),
        .full(\byte_reordering/rf_sfifo_full ),
        .\gcc0.gc0.count_reg[3] (\byte_reordering/bfsof_sfifo_full ),
        .\gf_state_reg[0] (\gige_rx/gf_bcnt_empty ),
        .gmii_rx_dv_dly(\gige_rx/gige_s2p/gmii_rx_dv_dly ),
        .gmii_tx_en(gmii_tx_en),
        .gmii_txd(gmii_txd),
        .has_sof(\byte_reordering/has_sof ),
        .in0(LMAC_CORE_TOP_n_38),
        .ipcs_fifo_dout(ipcs_fifo_dout),
        .lclk(lclk),
        .link_break(\gige_rx/gige_s2p/link_break ),
        .link_ok(\gige_rx/gige_s2p/link_ok ),
        .link_ok_reg(linkup_i_1_n_0),
        .linkup_1g(linkup_1g),
        .mode_100M(\core/gige_tx_gmii/mode_100M ),
        .mode_1G(\core/gige_tx_gmii/mode_1G ),
        .out(gmii_rx_dv),
        .pdet_in(\gige_rx/gige_s2p/pdet_in ),
        .ram_empty_i_reg(br_sfifo_ip_4x32_i_2__0_n_0),
        .ram_empty_i_reg_0(gige_bcnt_fifo_re_i_1_n_0),
        .ram_empty_i_reg_1(empty),
        .ram_full_fb_i_reg(\byte_reordering/bfsof_sfifo_empty ),
        .ram_full_i_reg(br_sfifo_ip_4x32_i_1__0_n_0),
        .ram_full_i_reg_0(full),
        .rd_en(br_sfifo_ip_4x32_i_2_n_0),
        .rst_(rst_),
        .rx_mac_empty(rx_mac_empty),
        .rx_mac_rd(rx_mac_rd),
        .rxfifo_dout(rx_mac_data),
        .shift(\byte_reordering/shift ),
        .shift0(\byte_reordering/shift0 ),
        .sof0(\byte_reordering/sof0 ),
        .sof0_reg(has_sof_i_1__0_n_0),
        .sof4(\byte_reordering/sof4 ),
        .sof4_cycle(\byte_reordering/sof4_cycle ),
        .sof4_reg(sof4_cycle_i_1_n_0),
        .tx_mac_wr(tx_mac_wr),
        .tx_rd_state26_out(tx_rd_state26_out),
        .txfifo_din(tx_mac_data),
        .wr_en(br_sfifo_ip_4x32_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    br_sfifo_ip_4x32_i_1
       (.I0(\byte_reordering/rf_sfifo_full ),
        .O(br_sfifo_ip_4x32_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    br_sfifo_ip_4x32_i_1__0
       (.I0(\byte_reordering/bfsof_sfifo_full ),
        .O(br_sfifo_ip_4x32_i_1__0_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    br_sfifo_ip_4x32_i_2
       (.I0(\byte_reordering/rf_sfifo_empty ),
        .O(br_sfifo_ip_4x32_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    br_sfifo_ip_4x32_i_2__0
       (.I0(\byte_reordering/bfsof_sfifo_empty ),
        .O(br_sfifo_ip_4x32_i_2__0_n_0));
  LUT3 #(
    .INIT(8'h51)) 
    ctrl_in_i_1
       (.I0(\gige_rx/gige_s2p/first_data_dly ),
        .I1(\gige_rx/gige_s2p/gmii_rx_dv_dly ),
        .I2(\gige_rx/gige_s2p/pdet_in ),
        .O(ctrl_in_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair524" *) 
  LUT2 #(
    .INIT(4'h2)) 
    eof6_i_7
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .O(\core/gige_tx_gmii/mode_100M ));
  LUT2 #(
    .INIT(4'h2)) 
    first_data_i_1
       (.I0(gmii_rx_dv),
        .I1(\gige_rx/gige_s2p/gmii_rx_dv_dly ),
        .O(\gige_rx/gige_s2p/first_data0 ));
  LUT4 #(
    .INIT(16'hDF40)) 
    frame_i_1
       (.I0(\gige_rx/gige_s2p/data_in_dly1 [2]),
        .I1(\gige_rx/gige_s2p/data_in_dly1 [1]),
        .I2(LMAC_CORE_TOP_n_29),
        .I3(\gige_rx/gige_s2p/frame ),
        .O(frame_i_1_n_0));
  LUT6 #(
    .INIT(64'h550055FC55005500)) 
    gige_bcnt_fifo_re_i_1
       (.I0(\gige_rx/gf_bcnt_empty ),
        .I1(\gige_rx/g2x_ctrl/gf_bcnt_buf_st ),
        .I2(\gige_rx/g2x_ctrl/gf_rd_data_st ),
        .I3(LMAC_CORE_TOP_n_25),
        .I4(\gige_rx/g2x_ctrl/gf_rd_bcnt_st ),
        .I5(\gige_rx/gige_bcnt_fifo_re ),
        .O(gige_bcnt_fifo_re_i_1_n_0));
  LUT5 #(
    .INIT(32'hEEEFEEEE)) 
    has_sof_i_1__0
       (.I0(\byte_reordering/sof0 ),
        .I1(\byte_reordering/sof4 ),
        .I2(\byte_reordering/eof0 ),
        .I3(\byte_reordering/eof1 ),
        .I4(\byte_reordering/has_sof ),
        .O(has_sof_i_1__0_n_0));
  LUT3 #(
    .INIT(8'hBA)) 
    linkup_i_1
       (.I0(\gige_rx/gige_s2p/link_ok ),
        .I1(\gige_rx/gige_s2p/link_break ),
        .I2(linkup_1g),
        .O(linkup_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair524" *) 
  LUT2 #(
    .INIT(4'hB)) 
    pulse_1_i_1__0
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .O(pulse_1_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFF01FFFF0000)) 
    shift_i_1
       (.I0(\byte_reordering/eof0 ),
        .I1(\byte_reordering/eof1 ),
        .I2(\byte_reordering/sof0 ),
        .I3(\byte_reordering/sof4 ),
        .I4(\byte_reordering/shift0 ),
        .I5(\byte_reordering/shift ),
        .O(shift_i_1_n_0));
  LUT4 #(
    .INIT(16'hABAA)) 
    sof4_cycle_i_1
       (.I0(\byte_reordering/sof4 ),
        .I1(\byte_reordering/eof0 ),
        .I2(\byte_reordering/eof1 ),
        .I3(\byte_reordering/sof4_cycle ),
        .O(sof4_cycle_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    \state[1]_i_3 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .O(\core/gige_tx_gmii/mode_1G ));
endmodule

(* CHECK_LICENSE_TYPE = "RX_DFIFO,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_RX_DFIFO
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    rd_data_count,
    wr_data_count,
    wr_rst_busy,
    rd_rst_busy);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [31:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [31:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [5:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "6" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "32" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "32" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "1" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "1" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "61" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "60" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "6" *) 
  (* C_RD_DEPTH = "64" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "6" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "6" *) 
  (* C_WR_DEPTH = "64" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "6" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized3 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[5:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "RX_DFIFO_BCNT,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_RX_DFIFO_BCNT
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    wr_rst_busy,
    rd_rst_busy);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [15:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [15:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output wr_rst_busy;
  output rd_rst_busy;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [3:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [3:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "16" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "16" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "13" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "12" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "4" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "4" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[3:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "TX_DFIFO,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_TX_DFIFO
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    rd_data_count,
    wr_data_count,
    wr_rst_busy,
    rd_rst_busy);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [63:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [63:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [7:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "8" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "64" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "64" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "1" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "1" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "253" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "252" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "8" *) 
  (* C_RD_DEPTH = "256" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "8" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "8" *) 
  (* C_WR_DEPTH = "256" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "8" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[7:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "TX_DFIFO_BCNT,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_TX_DFIFO_BCNT
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    wr_rst_busy,
    rd_rst_busy);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [15:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [15:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output wr_rst_busy;
  output rd_rst_busy;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [3:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [3:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "16" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "16" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "13" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "12" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "4" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "4" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized1__xdcDup__1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[3:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo4x32
   (full,
    empty,
    lclk,
    rst_,
    out,
    wr_en,
    rd_en);
  output full;
  output empty;
  input lclk;
  input rst_;
  input [31:0]out;
  input wr_en;
  input rd_en;

  wire br_sfifo_ip_4x32_n_35;
  wire br_sfifo_ip_4x32_n_36;
  wire br_sfifo_ip_4x32_n_37;
  wire empty;
  wire full;
  wire lclk;
  wire [31:0]out;
  wire rd_en;
  wire [31:0]rf_sfifo_dout;
  wire rst_;
  wire wr_en;
  wire NLW_br_sfifo_ip_4x32_rd_rst_busy_UNCONNECTED;
  wire NLW_br_sfifo_ip_4x32_wr_rst_busy_UNCONNECTED;
  wire [3:3]NLW_br_sfifo_ip_4x32_data_count_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "br_sfifo_ip_4x32,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo_ip_4x32 br_sfifo_ip_4x32
       (.clk(lclk),
        .data_count({NLW_br_sfifo_ip_4x32_data_count_UNCONNECTED[3],br_sfifo_ip_4x32_n_35,br_sfifo_ip_4x32_n_36,br_sfifo_ip_4x32_n_37}),
        .din(out),
        .dout(rf_sfifo_dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_br_sfifo_ip_4x32_rd_rst_busy_UNCONNECTED),
        .srst(rst_),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_br_sfifo_ip_4x32_wr_rst_busy_UNCONNECTED));
endmodule

(* ORIG_REF_NAME = "br_sfifo4x32" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo4x32__xdcDup__1
   (\gcc0.gc0.count_reg[3] ,
    ram_full_fb_i_reg,
    lclk,
    rst_,
    din,
    ram_full_i_reg,
    ram_empty_i_reg);
  output \gcc0.gc0.count_reg[3] ;
  output ram_full_fb_i_reg;
  input lclk;
  input rst_;
  input [31:0]din;
  input ram_full_i_reg;
  input ram_empty_i_reg;

  wire [31:0]bfsof_sfifo_dout;
  wire br_sfifo_ip_4x32_n_35;
  wire br_sfifo_ip_4x32_n_36;
  wire br_sfifo_ip_4x32_n_37;
  wire [31:0]din;
  wire \gcc0.gc0.count_reg[3] ;
  wire lclk;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire rst_;
  wire NLW_br_sfifo_ip_4x32_rd_rst_busy_UNCONNECTED;
  wire NLW_br_sfifo_ip_4x32_wr_rst_busy_UNCONNECTED;
  wire [3:3]NLW_br_sfifo_ip_4x32_data_count_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "br_sfifo_ip_4x32,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo_ip_4x32__xdcDup__1 br_sfifo_ip_4x32
       (.clk(lclk),
        .data_count({NLW_br_sfifo_ip_4x32_data_count_UNCONNECTED[3],br_sfifo_ip_4x32_n_35,br_sfifo_ip_4x32_n_36,br_sfifo_ip_4x32_n_37}),
        .din(din),
        .dout(bfsof_sfifo_dout),
        .empty(ram_full_fb_i_reg),
        .full(\gcc0.gc0.count_reg[3] ),
        .rd_en(ram_empty_i_reg),
        .rd_rst_busy(NLW_br_sfifo_ip_4x32_rd_rst_busy_UNCONNECTED),
        .srst(rst_),
        .wr_en(ram_full_i_reg),
        .wr_rst_busy(NLW_br_sfifo_ip_4x32_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "br_sfifo_ip_4x32,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo_ip_4x32
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [31:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [31:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [3:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [3:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [3:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "32" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "32" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "14" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "13" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "4" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "4" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized13__2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "br_sfifo_ip_4x32,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "br_sfifo_ip_4x32" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo_ip_4x32__xdcDup__1
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [31:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [31:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [3:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [3:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [3:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "32" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "32" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "14" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "13" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "4" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "4" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized13 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[3:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[3:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_fmac_fifo4Kx64
   (rxfifo_dout,
    rx_mac_empty,
    lclk,
    SR,
    Q,
    pkt_we_reg,
    rx_mac_rd);
  output [63:0]rxfifo_dout;
  output rx_mac_empty;
  input lclk;
  input [0:0]SR;
  input [63:0]Q;
  input pkt_we_reg;
  input rx_mac_rd;

  wire [63:0]Q;
  wire [0:0]SR;
  wire lclk;
  wire pkt_we_reg;
  wire rx_mac_empty;
  wire rx_mac_rd;
  wire [63:0]rxfifo_dout;
  wire rxfifo_ip_4Kx64_n_64;
  wire [11:0]rxfifo_wrusedw;
  wire NLW_rxfifo_ip_4Kx64_rd_rst_busy_UNCONNECTED;
  wire NLW_rxfifo_ip_4Kx64_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "rxfifo_ip_4Kx64,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_rxfifo_ip_4Kx64 rxfifo_ip_4Kx64
       (.clk(lclk),
        .data_count(rxfifo_wrusedw),
        .din(Q),
        .dout(rxfifo_dout),
        .empty(rx_mac_empty),
        .full(rxfifo_ip_4Kx64_n_64),
        .rd_en(rx_mac_rd),
        .rd_rst_busy(NLW_rxfifo_ip_4Kx64_rd_rst_busy_UNCONNECTED),
        .srst(SR),
        .wr_en(pkt_we_reg),
        .wr_rst_busy(NLW_rxfifo_ip_4Kx64_wr_rst_busy_UNCONNECTED));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_fmac_fifo4Kx8
   (lclk,
    SR,
    din,
    wr_en,
    rx_mac_rd);
  input lclk;
  input [0:0]SR;
  input [1:0]din;
  input wr_en;
  input rx_mac_rd;

  wire [0:0]SR;
  wire [1:0]din;
  wire lclk;
  wire pktctrl_fifo_ip_n_10;
  wire pktctrl_fifo_ip_n_11;
  wire pktctrl_fifo_ip_n_12;
  wire pktctrl_fifo_ip_n_13;
  wire pktctrl_fifo_ip_n_14;
  wire pktctrl_fifo_ip_n_15;
  wire pktctrl_fifo_ip_n_16;
  wire pktctrl_fifo_ip_n_17;
  wire pktctrl_fifo_ip_n_18;
  wire pktctrl_fifo_ip_n_19;
  wire pktctrl_fifo_ip_n_20;
  wire pktctrl_fifo_ip_n_21;
  wire pktctrl_fifo_ip_n_8;
  wire pktctrl_fifo_ip_n_9;
  wire rx_mac_rd;
  wire [7:0]rxfifo_ctrl_q;
  wire wr_en;
  wire NLW_pktctrl_fifo_ip_rd_rst_busy_UNCONNECTED;
  wire NLW_pktctrl_fifo_ip_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "pktctrl_fifo_ip,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_pktctrl_fifo_ip pktctrl_fifo_ip
       (.clk(lclk),
        .data_count({pktctrl_fifo_ip_n_10,pktctrl_fifo_ip_n_11,pktctrl_fifo_ip_n_12,pktctrl_fifo_ip_n_13,pktctrl_fifo_ip_n_14,pktctrl_fifo_ip_n_15,pktctrl_fifo_ip_n_16,pktctrl_fifo_ip_n_17,pktctrl_fifo_ip_n_18,pktctrl_fifo_ip_n_19,pktctrl_fifo_ip_n_20,pktctrl_fifo_ip_n_21}),
        .din({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .dout(rxfifo_ctrl_q),
        .empty(pktctrl_fifo_ip_n_9),
        .full(pktctrl_fifo_ip_n_8),
        .rd_en(rx_mac_rd),
        .rd_rst_busy(NLW_pktctrl_fifo_ip_rd_rst_busy_UNCONNECTED),
        .srst(SR),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_pktctrl_fifo_ip_wr_rst_busy_UNCONNECTED));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_fmac_fifo512x64_2clk
   (ipcs_fifo_dout,
    cs_fifo_empty,
    lclk,
    srst,
    Q,
    wr_en,
    cs_fifo_rd_en);
  output [15:0]ipcs_fifo_dout;
  output cs_fifo_empty;
  input lclk;
  input srst;
  input [13:0]Q;
  input wr_en;
  input cs_fifo_rd_en;

  wire [13:0]Q;
  wire cs_fifo_empty;
  wire cs_fifo_rd_en;
  wire [15:0]ipcs_fifo_dout;
  wire ipcs_fifo_ip_n_16;
  wire ipcs_fifo_ip_n_17;
  wire ipcs_fifo_ip_n_18;
  wire ipcs_fifo_ip_n_19;
  wire ipcs_fifo_ip_n_20;
  wire ipcs_fifo_ip_n_21;
  wire ipcs_fifo_ip_n_22;
  wire ipcs_fifo_ip_n_23;
  wire ipcs_fifo_ip_n_24;
  wire ipcs_fifo_ip_n_25;
  wire ipcs_fifo_ip_n_26;
  wire ipcs_fifo_ip_n_27;
  wire ipcs_fifo_ip_n_28;
  wire ipcs_fifo_ip_n_29;
  wire ipcs_fifo_ip_n_30;
  wire ipcs_fifo_ip_n_31;
  wire ipcs_fifo_ip_n_32;
  wire ipcs_fifo_ip_n_33;
  wire ipcs_fifo_ip_n_34;
  wire ipcs_fifo_ip_n_35;
  wire ipcs_fifo_ip_n_36;
  wire ipcs_fifo_ip_n_37;
  wire ipcs_fifo_ip_n_38;
  wire ipcs_fifo_ip_n_39;
  wire ipcs_fifo_ip_n_40;
  wire ipcs_fifo_ip_n_41;
  wire ipcs_fifo_ip_n_42;
  wire ipcs_fifo_ip_n_43;
  wire ipcs_fifo_ip_n_44;
  wire ipcs_fifo_ip_n_45;
  wire ipcs_fifo_ip_n_46;
  wire ipcs_fifo_ip_n_47;
  wire ipcs_fifo_ip_n_48;
  wire ipcs_fifo_ip_n_49;
  wire ipcs_fifo_ip_n_50;
  wire ipcs_fifo_ip_n_51;
  wire ipcs_fifo_ip_n_52;
  wire ipcs_fifo_ip_n_53;
  wire ipcs_fifo_ip_n_54;
  wire ipcs_fifo_ip_n_55;
  wire ipcs_fifo_ip_n_56;
  wire ipcs_fifo_ip_n_57;
  wire ipcs_fifo_ip_n_58;
  wire ipcs_fifo_ip_n_59;
  wire ipcs_fifo_ip_n_60;
  wire ipcs_fifo_ip_n_61;
  wire ipcs_fifo_ip_n_62;
  wire ipcs_fifo_ip_n_63;
  wire ipcs_fifo_ip_n_64;
  wire [8:0]ipcs_fifo_wrusedw;
  wire lclk;
  wire srst;
  wire wr_en;
  wire NLW_ipcs_fifo_ip_rd_rst_busy_UNCONNECTED;
  wire NLW_ipcs_fifo_ip_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "ipcs_fifo_ip,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_ipcs_fifo_ip ipcs_fifo_ip
       (.clk(lclk),
        .data_count(ipcs_fifo_wrusedw),
        .din({1'b0,1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dout({ipcs_fifo_dout,ipcs_fifo_ip_n_16,ipcs_fifo_ip_n_17,ipcs_fifo_ip_n_18,ipcs_fifo_ip_n_19,ipcs_fifo_ip_n_20,ipcs_fifo_ip_n_21,ipcs_fifo_ip_n_22,ipcs_fifo_ip_n_23,ipcs_fifo_ip_n_24,ipcs_fifo_ip_n_25,ipcs_fifo_ip_n_26,ipcs_fifo_ip_n_27,ipcs_fifo_ip_n_28,ipcs_fifo_ip_n_29,ipcs_fifo_ip_n_30,ipcs_fifo_ip_n_31,ipcs_fifo_ip_n_32,ipcs_fifo_ip_n_33,ipcs_fifo_ip_n_34,ipcs_fifo_ip_n_35,ipcs_fifo_ip_n_36,ipcs_fifo_ip_n_37,ipcs_fifo_ip_n_38,ipcs_fifo_ip_n_39,ipcs_fifo_ip_n_40,ipcs_fifo_ip_n_41,ipcs_fifo_ip_n_42,ipcs_fifo_ip_n_43,ipcs_fifo_ip_n_44,ipcs_fifo_ip_n_45,ipcs_fifo_ip_n_46,ipcs_fifo_ip_n_47,ipcs_fifo_ip_n_48,ipcs_fifo_ip_n_49,ipcs_fifo_ip_n_50,ipcs_fifo_ip_n_51,ipcs_fifo_ip_n_52,ipcs_fifo_ip_n_53,ipcs_fifo_ip_n_54,ipcs_fifo_ip_n_55,ipcs_fifo_ip_n_56,ipcs_fifo_ip_n_57,ipcs_fifo_ip_n_58,ipcs_fifo_ip_n_59,ipcs_fifo_ip_n_60,ipcs_fifo_ip_n_61,ipcs_fifo_ip_n_62,ipcs_fifo_ip_n_63}),
        .empty(cs_fifo_empty),
        .full(ipcs_fifo_ip_n_64),
        .rd_en(cs_fifo_rd_en),
        .rd_rst_busy(NLW_ipcs_fifo_ip_rd_rst_busy_UNCONNECTED),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_ipcs_fifo_ip_wr_rst_busy_UNCONNECTED));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_g2x_ctrl
   (rd_en,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    Q,
    \data_in_dly_reg[63] ,
    shift0,
    \ctrl_in_dly_reg[7] ,
    eof10,
    SS,
    \ctrl_out_reg[5]_0 ,
    \ctrl_out_reg[6]_0 ,
    \ctrl_out_reg[7]_0 ,
    eof00,
    sof00,
    sof70,
    sof60,
    sof50,
    sof10,
    sof30,
    sof20,
    rst__0,
    lclk,
    ram_empty_i_reg,
    rst_,
    dout,
    shift_reg,
    xaui_mode_reg,
    \ctrl_in_dly_reg[7]_0 ,
    xaui_mode,
    ram_empty_i_reg_0,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_1 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_2 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_3 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_4 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_5 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_6 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_7 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_8 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_9 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_10 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_11 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_12 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_13 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 );
  output rd_en;
  output \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [3:0]Q;
  output [63:0]\data_in_dly_reg[63] ;
  output shift0;
  output [7:0]\ctrl_in_dly_reg[7] ;
  output eof10;
  output [1:0]SS;
  output \ctrl_out_reg[5]_0 ;
  output \ctrl_out_reg[6]_0 ;
  output \ctrl_out_reg[7]_0 ;
  output eof00;
  output sof00;
  output sof70;
  output sof60;
  output sof50;
  output sof10;
  output sof30;
  output sof20;
  input rst__0;
  input lclk;
  input ram_empty_i_reg;
  input rst_;
  input [63:0]dout;
  input shift_reg;
  input xaui_mode_reg;
  input [2:0]\ctrl_in_dly_reg[7]_0 ;
  input xaui_mode;
  input ram_empty_i_reg_0;
  input [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_1 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_2 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_3 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_4 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_5 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_6 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_7 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_8 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_9 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_10 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_11 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_12 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_13 ;
  input [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 ;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_1 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_10 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_11 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_12 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_13 ;
  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_2 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_3 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_4 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_5 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_6 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_7 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_8 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_9 ;
  wire [3:0]Q;
  wire [1:0]SS;
  wire \ctrl_in_dly[3]_i_2_n_0 ;
  wire \ctrl_in_dly[7]_i_2_n_0 ;
  wire [7:0]\ctrl_in_dly_reg[7] ;
  wire [2:0]\ctrl_in_dly_reg[7]_0 ;
  wire \ctrl_out[0]_i_1_n_0 ;
  wire \ctrl_out[1]_i_1_n_0 ;
  wire \ctrl_out[2]_i_1_n_0 ;
  wire \ctrl_out[3]_i_1_n_0 ;
  wire \ctrl_out[4]_i_1_n_0 ;
  wire \ctrl_out[5]_i_1__0_n_0 ;
  wire \ctrl_out[6]_i_1__0_n_0 ;
  wire \ctrl_out[7]_i_1__0_n_0 ;
  wire \ctrl_out[7]_i_2_n_0 ;
  wire \ctrl_out_reg[5]_0 ;
  wire \ctrl_out_reg[6]_0 ;
  wire \ctrl_out_reg[7]_0 ;
  wire [63:0]\data_in_dly_reg[63] ;
  wire \data_out[0]_i_1_n_0 ;
  wire \data_out[10]_i_1_n_0 ;
  wire \data_out[11]_i_1__1_n_0 ;
  wire \data_out[12]_i_1__1_n_0 ;
  wire \data_out[13]_i_1__1_n_0 ;
  wire \data_out[14]_i_1__1_n_0 ;
  wire \data_out[15]_i_1__1_n_0 ;
  wire \data_out[16]_i_1_n_0 ;
  wire \data_out[17]_i_1_n_0 ;
  wire \data_out[18]_i_1_n_0 ;
  wire \data_out[19]_i_1__1_n_0 ;
  wire \data_out[1]_i_1_n_0 ;
  wire \data_out[20]_i_1__1_n_0 ;
  wire \data_out[21]_i_1__1_n_0 ;
  wire \data_out[22]_i_1__1_n_0 ;
  wire \data_out[23]_i_1__1_n_0 ;
  wire \data_out[24]_i_1_n_0 ;
  wire \data_out[25]_i_1_n_0 ;
  wire \data_out[26]_i_1_n_0 ;
  wire \data_out[27]_i_1__1_n_0 ;
  wire \data_out[28]_i_1__1_n_0 ;
  wire \data_out[29]_i_1__1_n_0 ;
  wire \data_out[2]_i_1_n_0 ;
  wire \data_out[30]_i_1__1_n_0 ;
  wire \data_out[31]_i_1__1_n_0 ;
  wire \data_out[32]_i_1_n_0 ;
  wire \data_out[33]_i_1_n_0 ;
  wire \data_out[34]_i_1_n_0 ;
  wire \data_out[35]_i_1__1_n_0 ;
  wire \data_out[36]_i_1__1_n_0 ;
  wire \data_out[37]_i_1__1_n_0 ;
  wire \data_out[38]_i_1__1_n_0 ;
  wire \data_out[39]_i_1__1_n_0 ;
  wire \data_out[3]_i_1__1_n_0 ;
  wire \data_out[40]_i_1_n_0 ;
  wire \data_out[41]_i_1_n_0 ;
  wire \data_out[42]_i_1_n_0 ;
  wire \data_out[43]_i_1__1_n_0 ;
  wire \data_out[44]_i_1__1_n_0 ;
  wire \data_out[45]_i_1__1_n_0 ;
  wire \data_out[46]_i_1__1_n_0 ;
  wire \data_out[47]_i_1__1_n_0 ;
  wire \data_out[48]_i_1_n_0 ;
  wire \data_out[49]_i_1_n_0 ;
  wire \data_out[4]_i_1__1_n_0 ;
  wire \data_out[50]_i_1_n_0 ;
  wire \data_out[51]_i_1__1_n_0 ;
  wire \data_out[52]_i_1__1_n_0 ;
  wire \data_out[53]_i_1__1_n_0 ;
  wire \data_out[54]_i_1__1_n_0 ;
  wire \data_out[55]_i_1__1_n_0 ;
  wire \data_out[56]_i_1_n_0 ;
  wire \data_out[57]_i_1_n_0 ;
  wire \data_out[58]_i_1_n_0 ;
  wire \data_out[59]_i_1__1_n_0 ;
  wire \data_out[5]_i_1__1_n_0 ;
  wire \data_out[60]_i_1__1_n_0 ;
  wire \data_out[61]_i_1__1_n_0 ;
  wire \data_out[62]_i_1__1_n_0 ;
  wire \data_out[63]_i_1__1_n_0 ;
  wire \data_out[6]_i_1__1_n_0 ;
  wire \data_out[7]_i_1__1_n_0 ;
  wire \data_out[8]_i_1_n_0 ;
  wire \data_out[9]_i_1_n_0 ;
  wire [63:0]dout;
  wire eof00;
  wire eof0_i_2__0_n_0;
  wire eof0_i_3__0_n_0;
  wire eof0_i_4__1_n_0;
  wire eof0_i_5__1_n_0;
  wire eof0_i_6__0_n_0;
  wire eof0_i_7__1_n_0;
  wire eof10;
  wire eof1_i_2__1_n_0;
  wire eof1_i_3__0_n_0;
  wire eof1_i_4__0_n_0;
  wire eof1_i_5__0_n_0;
  wire eof1_i_6__0_n_0;
  wire eof1_i_7_n_0;
  wire gf_done_st;
  wire gf_state;
  wire [7:0]gf_state1_out;
  wire gige_data_fifo_re_dly1;
  wire gige_data_fifo_re_i_1_n_0;
  wire lclk;
  wire [14:0]qwd_cnt;
  wire \qwd_cnt[0]_i_1_n_0 ;
  wire \qwd_cnt[10]_i_1_n_0 ;
  wire \qwd_cnt[10]_i_3_n_0 ;
  wire \qwd_cnt[11]_i_1_n_0 ;
  wire \qwd_cnt[11]_i_3_n_0 ;
  wire \qwd_cnt[12]_i_1_n_0 ;
  wire \qwd_cnt[12]_i_2_n_0 ;
  wire \qwd_cnt[12]_i_3_n_0 ;
  wire \qwd_cnt[13]_i_1_n_0 ;
  wire \qwd_cnt[14]_i_1_n_0 ;
  wire \qwd_cnt[14]_i_3_n_0 ;
  wire \qwd_cnt[14]_i_4_n_0 ;
  wire \qwd_cnt[1]_i_1_n_0 ;
  wire \qwd_cnt[2]_i_1_n_0 ;
  wire \qwd_cnt[2]_i_3_n_0 ;
  wire \qwd_cnt[3]_i_1_n_0 ;
  wire \qwd_cnt[3]_i_3_n_0 ;
  wire \qwd_cnt[4]_i_1_n_0 ;
  wire \qwd_cnt[4]_i_3_n_0 ;
  wire \qwd_cnt[5]_i_1_n_0 ;
  wire \qwd_cnt[5]_i_3_n_0 ;
  wire \qwd_cnt[6]_i_1_n_0 ;
  wire \qwd_cnt[6]_i_3_n_0 ;
  wire \qwd_cnt[7]_i_1_n_0 ;
  wire \qwd_cnt[7]_i_3_n_0 ;
  wire \qwd_cnt[8]_i_1_n_0 ;
  wire \qwd_cnt[8]_i_3_n_0 ;
  wire \qwd_cnt[9]_i_1_n_0 ;
  wire qwd_cnt_0;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire rd_en;
  wire rst_;
  wire rst__0;
  wire shift0;
  wire shift_reg;
  wire sof00;
  wire sof0_i_2_n_0;
  wire sof10;
  wire sof1_i_2_n_0;
  wire sof20;
  wire sof2_i_2_n_0;
  wire sof30;
  wire sof3_i_2_n_0;
  wire sof4_i_2_n_0;
  wire sof50;
  wire sof5_i_2_n_0;
  wire sof60;
  wire sof6_i_2_n_0;
  wire sof70;
  wire sof7_i_2_n_0;
  wire xaui_mode;
  wire xaui_mode_reg;

  LUT4 #(
    .INIT(16'h0040)) 
    \ctrl_in_dly[3]_i_1 
       (.I0(\data_in_dly_reg[63] [1]),
        .I1(\data_in_dly_reg[63] [3]),
        .I2(\data_in_dly_reg[63] [2]),
        .I3(\ctrl_in_dly[3]_i_2_n_0 ),
        .O(SS[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF7FF)) 
    \ctrl_in_dly[3]_i_2 
       (.I0(\data_in_dly_reg[63] [7]),
        .I1(\data_in_dly_reg[63] [4]),
        .I2(\data_in_dly_reg[63] [0]),
        .I3(\ctrl_in_dly_reg[7] [0]),
        .I4(\data_in_dly_reg[63] [5]),
        .I5(\data_in_dly_reg[63] [6]),
        .O(\ctrl_in_dly[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0080)) 
    \ctrl_in_dly[7]_i_1 
       (.I0(\data_in_dly_reg[63] [36]),
        .I1(\data_in_dly_reg[63] [39]),
        .I2(\ctrl_in_dly_reg[7] [4]),
        .I3(\ctrl_in_dly[7]_i_2_n_0 ),
        .O(SS[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF7)) 
    \ctrl_in_dly[7]_i_2 
       (.I0(\data_in_dly_reg[63] [34]),
        .I1(\data_in_dly_reg[63] [35]),
        .I2(\data_in_dly_reg[63] [37]),
        .I3(\data_in_dly_reg[63] [32]),
        .I4(\data_in_dly_reg[63] [33]),
        .I5(\data_in_dly_reg[63] [38]),
        .O(\ctrl_in_dly[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[0]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [0]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[1]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [1]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair437" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[2]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [2]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair437" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[3]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [3]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[4]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [4]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFB8FFB8FFB80000)) 
    \ctrl_out[5]_i_1 
       (.I0(\ctrl_in_dly_reg[7] [1]),
        .I1(shift_reg),
        .I2(\ctrl_in_dly_reg[7]_0 [0]),
        .I3(\ctrl_out[7]_i_2_n_0 ),
        .I4(xaui_mode),
        .I5(\ctrl_in_dly_reg[7] [5]),
        .O(\ctrl_out_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[5]_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [5]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFB8FFB8FFB80000)) 
    \ctrl_out[6]_i_1 
       (.I0(\ctrl_in_dly_reg[7] [2]),
        .I1(shift_reg),
        .I2(\ctrl_in_dly_reg[7]_0 [1]),
        .I3(\ctrl_out[7]_i_2_n_0 ),
        .I4(xaui_mode),
        .I5(\ctrl_in_dly_reg[7] [6]),
        .O(\ctrl_out_reg[6]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair439" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[6]_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [6]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEE0E0EEE0EEE0)) 
    \ctrl_out[7]_i_1 
       (.I0(xaui_mode),
        .I1(\ctrl_in_dly_reg[7] [7]),
        .I2(\ctrl_out[7]_i_2_n_0 ),
        .I3(\ctrl_in_dly_reg[7]_0 [2]),
        .I4(\ctrl_in_dly_reg[7] [3]),
        .I5(shift_reg),
        .O(\ctrl_out_reg[7]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair439" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \ctrl_out[7]_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 [7]),
        .I1(gige_data_fifo_re_dly1),
        .O(\ctrl_out[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00400000FFFFFFFF)) 
    \ctrl_out[7]_i_2 
       (.I0(\data_in_dly_reg[63] [1]),
        .I1(\data_in_dly_reg[63] [3]),
        .I2(\data_in_dly_reg[63] [2]),
        .I3(\ctrl_in_dly[3]_i_2_n_0 ),
        .I4(shift_reg),
        .I5(xaui_mode_reg),
        .O(\ctrl_out[7]_i_2_n_0 ));
  FDSE \ctrl_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[0]_i_1_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [0]),
        .S(rst__0));
  FDSE \ctrl_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[1]_i_1_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [1]),
        .S(rst__0));
  FDSE \ctrl_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[2]_i_1_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [2]),
        .S(rst__0));
  FDSE \ctrl_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[3]_i_1_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [3]),
        .S(rst__0));
  FDSE \ctrl_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[4]_i_1_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [4]),
        .S(rst__0));
  FDSE \ctrl_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[5]_i_1__0_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [5]),
        .S(rst__0));
  FDSE \ctrl_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[6]_i_1__0_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [6]),
        .S(rst__0));
  FDSE \ctrl_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[7]_i_1__0_n_0 ),
        .Q(\ctrl_in_dly_reg[7] [7]),
        .S(rst__0));
  (* SOFT_HLUTNM = "soft_lutpair424" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[0]_i_1 
       (.I0(dout[0]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[10]_i_1 
       (.I0(dout[10]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[11]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[11]),
        .O(\data_out[11]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[12]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[12]),
        .O(\data_out[12]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[13]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[13]),
        .O(\data_out[13]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[14]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[14]),
        .O(\data_out[14]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[15]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[15]),
        .O(\data_out[15]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair427" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[16]_i_1 
       (.I0(dout[16]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair427" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[17]_i_1 
       (.I0(dout[17]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair428" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[18]_i_1 
       (.I0(dout[18]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[19]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[19]),
        .O(\data_out[19]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair424" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[1]_i_1 
       (.I0(dout[1]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[20]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[20]),
        .O(\data_out[20]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[21]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[21]),
        .O(\data_out[21]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[22]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[22]),
        .O(\data_out[22]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[23]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[23]),
        .O(\data_out[23]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair428" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[24]_i_1 
       (.I0(dout[24]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair429" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[25]_i_1 
       (.I0(dout[25]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair429" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[26]_i_1 
       (.I0(dout[26]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[27]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[27]),
        .O(\data_out[27]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[28]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[28]),
        .O(\data_out[28]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[29]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[29]),
        .O(\data_out[29]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[2]_i_1 
       (.I0(dout[2]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[30]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[30]),
        .O(\data_out[30]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[31]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[31]),
        .O(\data_out[31]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair430" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[32]_i_1 
       (.I0(dout[32]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair430" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[33]_i_1 
       (.I0(dout[33]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair431" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[34]_i_1 
       (.I0(dout[34]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[35]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[35]),
        .O(\data_out[35]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[36]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[36]),
        .O(\data_out[36]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[37]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[37]),
        .O(\data_out[37]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[38]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[38]),
        .O(\data_out[38]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[39]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[39]),
        .O(\data_out[39]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[3]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[3]),
        .O(\data_out[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair431" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[40]_i_1 
       (.I0(dout[40]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair432" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[41]_i_1 
       (.I0(dout[41]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair432" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[42]_i_1 
       (.I0(dout[42]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[43]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[43]),
        .O(\data_out[43]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[44]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[44]),
        .O(\data_out[44]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[45]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[45]),
        .O(\data_out[45]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[46]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[46]),
        .O(\data_out[46]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[47]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[47]),
        .O(\data_out[47]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair433" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[48]_i_1 
       (.I0(dout[48]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair433" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[49]_i_1 
       (.I0(dout[49]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[4]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[4]),
        .O(\data_out[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair434" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[50]_i_1 
       (.I0(dout[50]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[51]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[51]),
        .O(\data_out[51]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[52]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[52]),
        .O(\data_out[52]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[53]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[53]),
        .O(\data_out[53]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[54]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[54]),
        .O(\data_out[54]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[55]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[55]),
        .O(\data_out[55]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair434" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[56]_i_1 
       (.I0(dout[56]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair435" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[57]_i_1 
       (.I0(dout[57]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair435" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[58]_i_1 
       (.I0(dout[58]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[59]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[59]),
        .O(\data_out[59]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[5]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[5]),
        .O(\data_out[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[60]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[60]),
        .O(\data_out[60]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[61]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[61]),
        .O(\data_out[61]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[62]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[62]),
        .O(\data_out[62]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[63]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[63]),
        .O(\data_out[63]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[6]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[6]),
        .O(\data_out[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \data_out[7]_i_1__1 
       (.I0(gige_data_fifo_re_dly1),
        .I1(dout[7]),
        .O(\data_out[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[8]_i_1 
       (.I0(dout[8]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[9]_i_1 
       (.I0(dout[9]),
        .I1(gige_data_fifo_re_dly1),
        .O(\data_out[9]_i_1_n_0 ));
  FDSE \data_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[0]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [0]),
        .S(rst__0));
  FDSE \data_out_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[10]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [10]),
        .S(rst__0));
  FDRE \data_out_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[11]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [11]),
        .R(rst__0));
  FDRE \data_out_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[12]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [12]),
        .R(rst__0));
  FDRE \data_out_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[13]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [13]),
        .R(rst__0));
  FDRE \data_out_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[14]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [14]),
        .R(rst__0));
  FDRE \data_out_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[15]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [15]),
        .R(rst__0));
  FDSE \data_out_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[16]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [16]),
        .S(rst__0));
  FDSE \data_out_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[17]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [17]),
        .S(rst__0));
  FDSE \data_out_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[18]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [18]),
        .S(rst__0));
  FDRE \data_out_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[19]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [19]),
        .R(rst__0));
  FDSE \data_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[1]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [1]),
        .S(rst__0));
  FDRE \data_out_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[20]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [20]),
        .R(rst__0));
  FDRE \data_out_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[21]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [21]),
        .R(rst__0));
  FDRE \data_out_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[22]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [22]),
        .R(rst__0));
  FDRE \data_out_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[23]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [23]),
        .R(rst__0));
  FDSE \data_out_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[24]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [24]),
        .S(rst__0));
  FDSE \data_out_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[25]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [25]),
        .S(rst__0));
  FDSE \data_out_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[26]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [26]),
        .S(rst__0));
  FDRE \data_out_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[27]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [27]),
        .R(rst__0));
  FDRE \data_out_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[28]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [28]),
        .R(rst__0));
  FDRE \data_out_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[29]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [29]),
        .R(rst__0));
  FDSE \data_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[2]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [2]),
        .S(rst__0));
  FDRE \data_out_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[30]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [30]),
        .R(rst__0));
  FDRE \data_out_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[31]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [31]),
        .R(rst__0));
  FDSE \data_out_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[32]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [32]),
        .S(rst__0));
  FDSE \data_out_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[33]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [33]),
        .S(rst__0));
  FDSE \data_out_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[34]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [34]),
        .S(rst__0));
  FDRE \data_out_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[35]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [35]),
        .R(rst__0));
  FDRE \data_out_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[36]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [36]),
        .R(rst__0));
  FDRE \data_out_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[37]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [37]),
        .R(rst__0));
  FDRE \data_out_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[38]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [38]),
        .R(rst__0));
  FDRE \data_out_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[39]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [39]),
        .R(rst__0));
  FDRE \data_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[3]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [3]),
        .R(rst__0));
  FDSE \data_out_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[40]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [40]),
        .S(rst__0));
  FDSE \data_out_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[41]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [41]),
        .S(rst__0));
  FDSE \data_out_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[42]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [42]),
        .S(rst__0));
  FDRE \data_out_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[43]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [43]),
        .R(rst__0));
  FDRE \data_out_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[44]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [44]),
        .R(rst__0));
  FDRE \data_out_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[45]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [45]),
        .R(rst__0));
  FDRE \data_out_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[46]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [46]),
        .R(rst__0));
  FDRE \data_out_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[47]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [47]),
        .R(rst__0));
  FDSE \data_out_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[48]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [48]),
        .S(rst__0));
  FDSE \data_out_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[49]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [49]),
        .S(rst__0));
  FDRE \data_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[4]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [4]),
        .R(rst__0));
  FDSE \data_out_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[50]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [50]),
        .S(rst__0));
  FDRE \data_out_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[51]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [51]),
        .R(rst__0));
  FDRE \data_out_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[52]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [52]),
        .R(rst__0));
  FDRE \data_out_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[53]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [53]),
        .R(rst__0));
  FDRE \data_out_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[54]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [54]),
        .R(rst__0));
  FDRE \data_out_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[55]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [55]),
        .R(rst__0));
  FDSE \data_out_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[56]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [56]),
        .S(rst__0));
  FDSE \data_out_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[57]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [57]),
        .S(rst__0));
  FDSE \data_out_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[58]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [58]),
        .S(rst__0));
  FDRE \data_out_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[59]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [59]),
        .R(rst__0));
  FDRE \data_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[5]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [5]),
        .R(rst__0));
  FDRE \data_out_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[60]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [60]),
        .R(rst__0));
  FDRE \data_out_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[61]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [61]),
        .R(rst__0));
  FDRE \data_out_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[62]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [62]),
        .R(rst__0));
  FDRE \data_out_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[63]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [63]),
        .R(rst__0));
  FDRE \data_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[6]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [6]),
        .R(rst__0));
  FDRE \data_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[7]_i_1__1_n_0 ),
        .Q(\data_in_dly_reg[63] [7]),
        .R(rst__0));
  FDSE \data_out_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[8]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [8]),
        .S(rst__0));
  FDSE \data_out_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out[9]_i_1_n_0 ),
        .Q(\data_in_dly_reg[63] [9]),
        .S(rst__0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAEAAA)) 
    eof0_i_1__0
       (.I0(eof0_i_2__0_n_0),
        .I1(\data_in_dly_reg[63] [20]),
        .I2(\data_in_dly_reg[63] [21]),
        .I3(\data_in_dly_reg[63] [22]),
        .I4(eof0_i_3__0_n_0),
        .I5(eof0_i_4__1_n_0),
        .O(eof00));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    eof0_i_2__0
       (.I0(\data_in_dly_reg[63] [1]),
        .I1(\data_in_dly_reg[63] [3]),
        .I2(\data_in_dly_reg[63] [2]),
        .I3(sof0_i_2_n_0),
        .I4(\ctrl_in_dly_reg[7] [0]),
        .I5(\data_in_dly_reg[63] [6]),
        .O(eof0_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    eof0_i_3__0
       (.I0(\ctrl_in_dly_reg[7] [2]),
        .I1(\data_in_dly_reg[63] [16]),
        .I2(\data_in_dly_reg[63] [17]),
        .I3(\data_in_dly_reg[63] [18]),
        .I4(\data_in_dly_reg[63] [23]),
        .I5(\data_in_dly_reg[63] [19]),
        .O(eof0_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h4000FFFF40004000)) 
    eof0_i_4__1
       (.I0(eof0_i_5__1_n_0),
        .I1(\data_in_dly_reg[63] [30]),
        .I2(\data_in_dly_reg[63] [29]),
        .I3(\data_in_dly_reg[63] [28]),
        .I4(eof0_i_6__0_n_0),
        .I5(eof0_i_7__1_n_0),
        .O(eof0_i_4__1_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    eof0_i_5__1
       (.I0(\data_in_dly_reg[63] [27]),
        .I1(\data_in_dly_reg[63] [31]),
        .I2(\data_in_dly_reg[63] [25]),
        .I3(\data_in_dly_reg[63] [26]),
        .I4(\data_in_dly_reg[63] [24]),
        .I5(\ctrl_in_dly_reg[7] [3]),
        .O(eof0_i_5__1_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    eof0_i_6__0
       (.I0(\data_in_dly_reg[63] [11]),
        .I1(\data_in_dly_reg[63] [15]),
        .I2(\data_in_dly_reg[63] [9]),
        .I3(\data_in_dly_reg[63] [10]),
        .I4(\data_in_dly_reg[63] [8]),
        .I5(\ctrl_in_dly_reg[7] [1]),
        .O(eof0_i_6__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT3 #(
    .INIT(8'h80)) 
    eof0_i_7__1
       (.I0(\data_in_dly_reg[63] [14]),
        .I1(\data_in_dly_reg[63] [13]),
        .I2(\data_in_dly_reg[63] [12]),
        .O(eof0_i_7__1_n_0));
  LUT6 #(
    .INIT(64'hEEEEEEEEFEEEEEEE)) 
    eof1_i_1__0
       (.I0(eof1_i_2__1_n_0),
        .I1(eof1_i_3__0_n_0),
        .I2(\data_in_dly_reg[63] [60]),
        .I3(\data_in_dly_reg[63] [61]),
        .I4(\data_in_dly_reg[63] [62]),
        .I5(eof1_i_4__0_n_0),
        .O(eof10));
  LUT6 #(
    .INIT(64'h4000FFFF40004000)) 
    eof1_i_2__1
       (.I0(eof1_i_5__0_n_0),
        .I1(\data_in_dly_reg[63] [46]),
        .I2(\data_in_dly_reg[63] [45]),
        .I3(\data_in_dly_reg[63] [44]),
        .I4(eof1_i_6__0_n_0),
        .I5(eof1_i_7_n_0),
        .O(eof1_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    eof1_i_3__0
       (.I0(sof4_i_2_n_0),
        .I1(\data_in_dly_reg[63] [33]),
        .I2(\data_in_dly_reg[63] [38]),
        .I3(\ctrl_in_dly_reg[7] [4]),
        .I4(\data_in_dly_reg[63] [35]),
        .I5(\data_in_dly_reg[63] [34]),
        .O(eof1_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    eof1_i_4__0
       (.I0(\data_in_dly_reg[63] [59]),
        .I1(\data_in_dly_reg[63] [63]),
        .I2(\data_in_dly_reg[63] [57]),
        .I3(\data_in_dly_reg[63] [58]),
        .I4(\data_in_dly_reg[63] [56]),
        .I5(\ctrl_in_dly_reg[7] [7]),
        .O(eof1_i_4__0_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    eof1_i_5__0
       (.I0(\ctrl_in_dly_reg[7] [5]),
        .I1(\data_in_dly_reg[63] [40]),
        .I2(\data_in_dly_reg[63] [41]),
        .I3(\data_in_dly_reg[63] [42]),
        .I4(\data_in_dly_reg[63] [47]),
        .I5(\data_in_dly_reg[63] [43]),
        .O(eof1_i_5__0_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    eof1_i_6__0
       (.I0(\ctrl_in_dly_reg[7] [6]),
        .I1(\data_in_dly_reg[63] [48]),
        .I2(\data_in_dly_reg[63] [49]),
        .I3(\data_in_dly_reg[63] [50]),
        .I4(\data_in_dly_reg[63] [55]),
        .I5(\data_in_dly_reg[63] [51]),
        .O(eof1_i_6__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT3 #(
    .INIT(8'h80)) 
    eof1_i_7
       (.I0(\data_in_dly_reg[63] [54]),
        .I1(\data_in_dly_reg[63] [53]),
        .I2(\data_in_dly_reg[63] [52]),
        .O(eof1_i_7_n_0));
  LUT5 #(
    .INIT(32'hAAAA0003)) 
    \gf_state[0]_i_1 
       (.I0(ram_empty_i_reg_0),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(gf_state1_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gf_state[1]_i_1 
       (.I0(Q[0]),
        .I1(ram_empty_i_reg_0),
        .O(gf_state1_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gf_state[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(gf_state1_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT5 #(
    .INIT(32'h03030200)) 
    \gf_state[3]_i_1 
       (.I0(\qwd_cnt[12]_i_2_n_0 ),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(gf_state1_out[3]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gf_state[7]_i_1 
       (.I0(gf_done_st),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(gf_state));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \gf_state[7]_i_2 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\qwd_cnt[12]_i_2_n_0 ),
        .O(gf_state1_out[7]));
  FDSE \gf_state_reg[0] 
       (.C(lclk),
        .CE(gf_state),
        .D(gf_state1_out[0]),
        .Q(Q[0]),
        .S(rst__0));
  FDRE \gf_state_reg[1] 
       (.C(lclk),
        .CE(gf_state),
        .D(gf_state1_out[1]),
        .Q(Q[1]),
        .R(rst__0));
  FDRE \gf_state_reg[2] 
       (.C(lclk),
        .CE(gf_state),
        .D(gf_state1_out[2]),
        .Q(Q[2]),
        .R(rst__0));
  FDRE \gf_state_reg[3] 
       (.C(lclk),
        .CE(gf_state),
        .D(gf_state1_out[3]),
        .Q(Q[3]),
        .R(rst__0));
  FDRE \gf_state_reg[7] 
       (.C(lclk),
        .CE(gf_state),
        .D(gf_state1_out[7]),
        .Q(gf_done_st),
        .R(rst__0));
  FDRE gige_bcnt_fifo_re_reg
       (.C(lclk),
        .CE(1'b1),
        .D(ram_empty_i_reg),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .R(rst__0));
  FDRE gige_data_fifo_re_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rd_en),
        .Q(gige_data_fifo_re_dly1),
        .R(rst__0));
  LUT6 #(
    .INIT(64'hFF8F008000000000)) 
    gige_data_fifo_re_i_1
       (.I0(\qwd_cnt[12]_i_2_n_0 ),
        .I1(Q[3]),
        .I2(qwd_cnt_0),
        .I3(Q[2]),
        .I4(rd_en),
        .I5(rst_),
        .O(gige_data_fifo_re_i_1_n_0));
  FDRE gige_data_fifo_re_reg
       (.C(lclk),
        .CE(1'b1),
        .D(gige_data_fifo_re_i_1_n_0),
        .Q(rd_en),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h90909F90)) 
    \qwd_cnt[0]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [0]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_2 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(qwd_cnt[0]),
        .O(\qwd_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB888B8B888B88888)) 
    \qwd_cnt[10]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_12 ),
        .I1(Q[2]),
        .I2(\qwd_cnt[12]_i_2_n_0 ),
        .I3(qwd_cnt[9]),
        .I4(\qwd_cnt[10]_i_3_n_0 ),
        .I5(qwd_cnt[10]),
        .O(\qwd_cnt[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \qwd_cnt[10]_i_3 
       (.I0(qwd_cnt[8]),
        .I1(qwd_cnt[6]),
        .I2(\qwd_cnt[6]_i_3_n_0 ),
        .I3(qwd_cnt[7]),
        .O(\qwd_cnt[10]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h60606F60)) 
    \qwd_cnt[11]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [10]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_13 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[11]_i_3_n_0 ),
        .O(\qwd_cnt[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h5559)) 
    \qwd_cnt[11]_i_3 
       (.I0(qwd_cnt[11]),
        .I1(\qwd_cnt[10]_i_3_n_0 ),
        .I2(qwd_cnt[9]),
        .I3(qwd_cnt[10]),
        .O(\qwd_cnt[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6F60606060606F60)) 
    \qwd_cnt[12]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [11]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_1 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[12]_i_3_n_0 ),
        .I5(qwd_cnt[12]),
        .O(\qwd_cnt[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \qwd_cnt[12]_i_2 
       (.I0(qwd_cnt[14]),
        .I1(qwd_cnt[13]),
        .I2(\qwd_cnt[14]_i_4_n_0 ),
        .O(\qwd_cnt[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \qwd_cnt[12]_i_3 
       (.I0(\qwd_cnt[8]_i_3_n_0 ),
        .I1(qwd_cnt[8]),
        .I2(qwd_cnt[11]),
        .I3(qwd_cnt[9]),
        .I4(qwd_cnt[10]),
        .O(\qwd_cnt[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h80808F8F8F808080)) 
    \qwd_cnt[13]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [11]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_1 ),
        .I2(Q[2]),
        .I3(qwd_cnt[14]),
        .I4(\qwd_cnt[14]_i_4_n_0 ),
        .I5(qwd_cnt[13]),
        .O(\qwd_cnt[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0001FFFF)) 
    \qwd_cnt[14]_i_1 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(rst_),
        .O(\qwd_cnt[14]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \qwd_cnt[14]_i_2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(qwd_cnt_0));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT4 #(
    .INIT(16'h5100)) 
    \qwd_cnt[14]_i_3 
       (.I0(Q[2]),
        .I1(\qwd_cnt[14]_i_4_n_0 ),
        .I2(qwd_cnt[13]),
        .I3(qwd_cnt[14]),
        .O(\qwd_cnt[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \qwd_cnt[14]_i_4 
       (.I0(qwd_cnt[12]),
        .I1(qwd_cnt[10]),
        .I2(qwd_cnt[9]),
        .I3(qwd_cnt[11]),
        .I4(qwd_cnt[8]),
        .I5(\qwd_cnt[8]_i_3_n_0 ),
        .O(\qwd_cnt[14]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9F90909090909F90)) 
    \qwd_cnt[1]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [1]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_3 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(qwd_cnt[1]),
        .I5(qwd_cnt[0]),
        .O(\qwd_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h9F90909090909F90)) 
    \qwd_cnt[2]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [2]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_4 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[2]_i_3_n_0 ),
        .I5(qwd_cnt[2]),
        .O(\qwd_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \qwd_cnt[2]_i_3 
       (.I0(qwd_cnt[0]),
        .I1(qwd_cnt[1]),
        .O(\qwd_cnt[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9F90909090909F90)) 
    \qwd_cnt[3]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [3]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_5 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[3]_i_3_n_0 ),
        .I5(qwd_cnt[3]),
        .O(\qwd_cnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \qwd_cnt[3]_i_3 
       (.I0(qwd_cnt[2]),
        .I1(qwd_cnt[1]),
        .I2(qwd_cnt[0]),
        .O(\qwd_cnt[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9F90909090909F90)) 
    \qwd_cnt[4]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [4]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_6 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[4]_i_3_n_0 ),
        .I5(qwd_cnt[4]),
        .O(\qwd_cnt[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \qwd_cnt[4]_i_3 
       (.I0(qwd_cnt[3]),
        .I1(qwd_cnt[0]),
        .I2(qwd_cnt[1]),
        .I3(qwd_cnt[2]),
        .O(\qwd_cnt[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9F90909090909F90)) 
    \qwd_cnt[5]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [5]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_7 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[5]_i_3_n_0 ),
        .I5(qwd_cnt[5]),
        .O(\qwd_cnt[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \qwd_cnt[5]_i_3 
       (.I0(qwd_cnt[4]),
        .I1(qwd_cnt[2]),
        .I2(qwd_cnt[1]),
        .I3(qwd_cnt[0]),
        .I4(qwd_cnt[3]),
        .O(\qwd_cnt[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9F90909090909F90)) 
    \qwd_cnt[6]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [6]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_8 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[6]_i_3_n_0 ),
        .I5(qwd_cnt[6]),
        .O(\qwd_cnt[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \qwd_cnt[6]_i_3 
       (.I0(qwd_cnt[5]),
        .I1(qwd_cnt[3]),
        .I2(qwd_cnt[0]),
        .I3(qwd_cnt[1]),
        .I4(qwd_cnt[2]),
        .I5(qwd_cnt[4]),
        .O(\qwd_cnt[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h90909F909F909090)) 
    \qwd_cnt[7]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [7]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_9 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[7]_i_3_n_0 ),
        .I5(qwd_cnt[7]),
        .O(\qwd_cnt[7]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \qwd_cnt[7]_i_3 
       (.I0(qwd_cnt[6]),
        .I1(\qwd_cnt[6]_i_3_n_0 ),
        .O(\qwd_cnt[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6F60606060606F60)) 
    \qwd_cnt[8]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [8]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_10 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[8]_i_3_n_0 ),
        .I5(qwd_cnt[8]),
        .O(\qwd_cnt[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \qwd_cnt[8]_i_3 
       (.I0(qwd_cnt[7]),
        .I1(\qwd_cnt[6]_i_3_n_0 ),
        .I2(qwd_cnt[6]),
        .O(\qwd_cnt[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h60606F606F606060)) 
    \qwd_cnt[9]_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 [9]),
        .I1(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_11 ),
        .I2(Q[2]),
        .I3(\qwd_cnt[12]_i_2_n_0 ),
        .I4(\qwd_cnt[10]_i_3_n_0 ),
        .I5(qwd_cnt[9]),
        .O(\qwd_cnt[9]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[0] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[0]_i_1_n_0 ),
        .Q(qwd_cnt[0]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[10] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[10]_i_1_n_0 ),
        .Q(qwd_cnt[10]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[11] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[11]_i_1_n_0 ),
        .Q(qwd_cnt[11]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[12] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[12]_i_1_n_0 ),
        .Q(qwd_cnt[12]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[13] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[13]_i_1_n_0 ),
        .Q(qwd_cnt[13]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[14] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[14]_i_3_n_0 ),
        .Q(qwd_cnt[14]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[1] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[1]_i_1_n_0 ),
        .Q(qwd_cnt[1]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[2] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[2]_i_1_n_0 ),
        .Q(qwd_cnt[2]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[3] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[3]_i_1_n_0 ),
        .Q(qwd_cnt[3]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[4] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[4]_i_1_n_0 ),
        .Q(qwd_cnt[4]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[5] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[5]_i_1_n_0 ),
        .Q(qwd_cnt[5]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[6] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[6]_i_1_n_0 ),
        .Q(qwd_cnt[6]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[7] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[7]_i_1_n_0 ),
        .Q(qwd_cnt[7]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[8] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[8]_i_1_n_0 ),
        .Q(qwd_cnt[8]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  FDRE \qwd_cnt_reg[9] 
       (.C(lclk),
        .CE(qwd_cnt_0),
        .D(\qwd_cnt[9]_i_1_n_0 ),
        .Q(qwd_cnt[9]),
        .R(\qwd_cnt[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    sof0_i_1
       (.I0(sof0_i_2_n_0),
        .I1(\data_in_dly_reg[63] [1]),
        .I2(\data_in_dly_reg[63] [2]),
        .I3(\data_in_dly_reg[63] [3]),
        .I4(\ctrl_in_dly_reg[7] [0]),
        .I5(\data_in_dly_reg[63] [6]),
        .O(sof00));
  LUT4 #(
    .INIT(16'h8000)) 
    sof0_i_2
       (.I0(\data_in_dly_reg[63] [7]),
        .I1(\data_in_dly_reg[63] [4]),
        .I2(\data_in_dly_reg[63] [0]),
        .I3(\data_in_dly_reg[63] [5]),
        .O(sof0_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    sof1_i_1
       (.I0(\data_in_dly_reg[63] [12]),
        .I1(\data_in_dly_reg[63] [13]),
        .I2(\data_in_dly_reg[63] [14]),
        .I3(sof1_i_2_n_0),
        .O(sof10));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    sof1_i_2
       (.I0(\ctrl_in_dly_reg[7] [1]),
        .I1(\data_in_dly_reg[63] [8]),
        .I2(\data_in_dly_reg[63] [10]),
        .I3(\data_in_dly_reg[63] [9]),
        .I4(\data_in_dly_reg[63] [15]),
        .I5(\data_in_dly_reg[63] [11]),
        .O(sof1_i_2_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    sof2_i_1
       (.I0(\data_in_dly_reg[63] [20]),
        .I1(\data_in_dly_reg[63] [21]),
        .I2(\data_in_dly_reg[63] [22]),
        .I3(sof2_i_2_n_0),
        .O(sof20));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    sof2_i_2
       (.I0(\data_in_dly_reg[63] [19]),
        .I1(\data_in_dly_reg[63] [23]),
        .I2(\data_in_dly_reg[63] [18]),
        .I3(\data_in_dly_reg[63] [17]),
        .I4(\data_in_dly_reg[63] [16]),
        .I5(\ctrl_in_dly_reg[7] [2]),
        .O(sof2_i_2_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    sof3_i_1
       (.I0(\data_in_dly_reg[63] [28]),
        .I1(\data_in_dly_reg[63] [29]),
        .I2(\data_in_dly_reg[63] [30]),
        .I3(sof3_i_2_n_0),
        .O(sof30));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    sof3_i_2
       (.I0(\ctrl_in_dly_reg[7] [3]),
        .I1(\data_in_dly_reg[63] [24]),
        .I2(\data_in_dly_reg[63] [26]),
        .I3(\data_in_dly_reg[63] [25]),
        .I4(\data_in_dly_reg[63] [31]),
        .I5(\data_in_dly_reg[63] [27]),
        .O(sof3_i_2_n_0));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    sof4_i_1
       (.I0(sof4_i_2_n_0),
        .I1(\data_in_dly_reg[63] [34]),
        .I2(\data_in_dly_reg[63] [35]),
        .I3(\data_in_dly_reg[63] [33]),
        .I4(\ctrl_in_dly_reg[7] [4]),
        .I5(\data_in_dly_reg[63] [38]),
        .O(shift0));
  LUT4 #(
    .INIT(16'h8000)) 
    sof4_i_2
       (.I0(\data_in_dly_reg[63] [32]),
        .I1(\data_in_dly_reg[63] [37]),
        .I2(\data_in_dly_reg[63] [39]),
        .I3(\data_in_dly_reg[63] [36]),
        .O(sof4_i_2_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    sof5_i_1
       (.I0(\data_in_dly_reg[63] [44]),
        .I1(\data_in_dly_reg[63] [45]),
        .I2(\data_in_dly_reg[63] [46]),
        .I3(sof5_i_2_n_0),
        .O(sof50));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    sof5_i_2
       (.I0(\data_in_dly_reg[63] [43]),
        .I1(\data_in_dly_reg[63] [47]),
        .I2(\data_in_dly_reg[63] [42]),
        .I3(\data_in_dly_reg[63] [41]),
        .I4(\data_in_dly_reg[63] [40]),
        .I5(\ctrl_in_dly_reg[7] [5]),
        .O(sof5_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    sof6_i_1
       (.I0(\data_in_dly_reg[63] [52]),
        .I1(\data_in_dly_reg[63] [53]),
        .I2(\data_in_dly_reg[63] [54]),
        .I3(sof6_i_2_n_0),
        .O(sof60));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    sof6_i_2
       (.I0(\data_in_dly_reg[63] [51]),
        .I1(\data_in_dly_reg[63] [55]),
        .I2(\data_in_dly_reg[63] [50]),
        .I3(\data_in_dly_reg[63] [49]),
        .I4(\data_in_dly_reg[63] [48]),
        .I5(\ctrl_in_dly_reg[7] [6]),
        .O(sof6_i_2_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    sof7_i_1
       (.I0(\data_in_dly_reg[63] [60]),
        .I1(\data_in_dly_reg[63] [61]),
        .I2(\data_in_dly_reg[63] [62]),
        .I3(sof7_i_2_n_0),
        .O(sof70));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    sof7_i_2
       (.I0(\ctrl_in_dly_reg[7] [7]),
        .I1(\data_in_dly_reg[63] [56]),
        .I2(\data_in_dly_reg[63] [58]),
        .I3(\data_in_dly_reg[63] [57]),
        .I4(\data_in_dly_reg[63] [63]),
        .I5(\data_in_dly_reg[63] [59]),
        .O(sof7_i_2_n_0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gige_crc32x64
   (\new_crc_reg[0]_0 ,
    bcnt0,
    D,
    lclk,
    rst_,
    pulse_1,
    Q,
    \crc_cnt_reg[15] ,
    fmac_speed,
    crc_we_,
    crc_clr_,
    pulse_0,
    \rbytes_reg_reg[0]_rep__0 ,
    \rbytes_reg_reg[1]_rep__0 ,
    \rbytes_reg_reg[2] ,
    \rbytes_reg_reg[0]_rep__1 ,
    mode_1G,
    \rbytes_reg_reg[1]_rep ,
    \wdata_reg[23] ,
    \wdata_reg[39] ,
    insert_crc,
    \rbytes_reg_reg[2]_0 ,
    \bdata2_reg[63] ,
    \rbytes_reg_reg[0]_rep__1_0 ,
    txd1,
    \rbytes_reg_reg[1]_rep__0_0 ,
    \rbytes_reg_reg[0]_rep ,
    \pdin_reg[63] ,
    \wdata_reg[55] ,
    \wdata_reg[8] ,
    \wdata_reg[9] ,
    \wdata_reg[10] ,
    \wdata_reg[11] ,
    \wdata_reg[12] ,
    \wdata_reg[13] ,
    \wdata_reg[14] ,
    \wdata_reg[15] ,
    \wdata_reg[16] ,
    \wdata_reg[17] ,
    \wdata_reg[18] ,
    \wdata_reg[19] ,
    \wdata_reg[20] ,
    \wdata_reg[21] ,
    \wdata_reg[22] ,
    \wdata_reg[24] ,
    \wdata_reg[25] ,
    \wdata_reg[26] ,
    \wdata_reg[27] ,
    \wdata_reg[28] ,
    \wdata_reg[29] ,
    \wdata_reg[30] ,
    \wdata_reg[31] ,
    \wdata_reg[32] ,
    \wdata_reg[33] ,
    \wdata_reg[34] ,
    \wdata_reg[35] ,
    \wdata_reg[36] ,
    \wdata_reg[37] ,
    \wdata_reg[38] ,
    \wdata_reg[16]_0 ,
    \wdata_reg[17]_0 ,
    \wdata_reg[18]_0 ,
    \wdata_reg[19]_0 ,
    \wdata_reg[20]_0 ,
    \wdata_reg[21]_0 ,
    \wdata_reg[22]_0 ,
    \wdata_reg[23]_0 ,
    \rbytes_reg_reg[0]_rep__1_1 ,
    crc_last_,
    \wcnt_reg[15] ,
    \rbytes_reg_reg[2]_1 );
  output \new_crc_reg[0]_0 ;
  output bcnt0;
  output [63:0]D;
  input lclk;
  input rst_;
  input pulse_1;
  input [0:0]Q;
  input [0:0]\crc_cnt_reg[15] ;
  input [1:0]fmac_speed;
  input crc_we_;
  input crc_clr_;
  input pulse_0;
  input \rbytes_reg_reg[0]_rep__0 ;
  input \rbytes_reg_reg[1]_rep__0 ;
  input [1:0]\rbytes_reg_reg[2] ;
  input \rbytes_reg_reg[0]_rep__1 ;
  input mode_1G;
  input \rbytes_reg_reg[1]_rep ;
  input \wdata_reg[23] ;
  input \wdata_reg[39] ;
  input insert_crc;
  input \rbytes_reg_reg[2]_0 ;
  input [63:0]\bdata2_reg[63] ;
  input \rbytes_reg_reg[0]_rep__1_0 ;
  input txd1;
  input \rbytes_reg_reg[1]_rep__0_0 ;
  input \rbytes_reg_reg[0]_rep ;
  input [55:0]\pdin_reg[63] ;
  input [55:0]\wdata_reg[55] ;
  input \wdata_reg[8] ;
  input \wdata_reg[9] ;
  input \wdata_reg[10] ;
  input \wdata_reg[11] ;
  input \wdata_reg[12] ;
  input \wdata_reg[13] ;
  input \wdata_reg[14] ;
  input \wdata_reg[15] ;
  input \wdata_reg[16] ;
  input \wdata_reg[17] ;
  input \wdata_reg[18] ;
  input \wdata_reg[19] ;
  input \wdata_reg[20] ;
  input \wdata_reg[21] ;
  input \wdata_reg[22] ;
  input \wdata_reg[24] ;
  input \wdata_reg[25] ;
  input \wdata_reg[26] ;
  input \wdata_reg[27] ;
  input \wdata_reg[28] ;
  input \wdata_reg[29] ;
  input \wdata_reg[30] ;
  input \wdata_reg[31] ;
  input \wdata_reg[32] ;
  input \wdata_reg[33] ;
  input \wdata_reg[34] ;
  input \wdata_reg[35] ;
  input \wdata_reg[36] ;
  input \wdata_reg[37] ;
  input \wdata_reg[38] ;
  input \wdata_reg[16]_0 ;
  input \wdata_reg[17]_0 ;
  input \wdata_reg[18]_0 ;
  input \wdata_reg[19]_0 ;
  input \wdata_reg[20]_0 ;
  input \wdata_reg[21]_0 ;
  input \wdata_reg[22]_0 ;
  input \wdata_reg[23]_0 ;
  input \rbytes_reg_reg[0]_rep__1_1 ;
  input crc_last_;
  input [0:0]\wcnt_reg[15] ;
  input [7:0]\rbytes_reg_reg[2]_1 ;

  wire [63:0]D;
  wire [0:0]Q;
  wire bcnt0;
  wire [63:0]\bdata2_reg[63] ;
  wire [55:0]bdin;
  wire \bdin[0]_i_2_n_0 ;
  wire \bdin[0]_i_3_n_0 ;
  wire \bdin[10]_i_2_n_0 ;
  wire \bdin[10]_i_3_n_0 ;
  wire \bdin[11]_i_2_n_0 ;
  wire \bdin[11]_i_3_n_0 ;
  wire \bdin[12]_i_2_n_0 ;
  wire \bdin[12]_i_3_n_0 ;
  wire \bdin[13]_i_2_n_0 ;
  wire \bdin[13]_i_3_n_0 ;
  wire \bdin[14]_i_2_n_0 ;
  wire \bdin[14]_i_3_n_0 ;
  wire \bdin[15]_i_2_n_0 ;
  wire \bdin[15]_i_3_n_0 ;
  wire \bdin[16]_i_2_n_0 ;
  wire \bdin[16]_i_3_n_0 ;
  wire \bdin[17]_i_2_n_0 ;
  wire \bdin[17]_i_3_n_0 ;
  wire \bdin[18]_i_2_n_0 ;
  wire \bdin[18]_i_3_n_0 ;
  wire \bdin[19]_i_2_n_0 ;
  wire \bdin[19]_i_3_n_0 ;
  wire \bdin[1]_i_2_n_0 ;
  wire \bdin[1]_i_3_n_0 ;
  wire \bdin[20]_i_2_n_0 ;
  wire \bdin[20]_i_3_n_0 ;
  wire \bdin[21]_i_2_n_0 ;
  wire \bdin[21]_i_3_n_0 ;
  wire \bdin[22]_i_2_n_0 ;
  wire \bdin[22]_i_3_n_0 ;
  wire \bdin[23]_i_2_n_0 ;
  wire \bdin[23]_i_3_n_0 ;
  wire \bdin[24]_i_2_n_0 ;
  wire \bdin[24]_i_3_n_0 ;
  wire \bdin[25]_i_2_n_0 ;
  wire \bdin[25]_i_3_n_0 ;
  wire \bdin[26]_i_2_n_0 ;
  wire \bdin[26]_i_3_n_0 ;
  wire \bdin[27]_i_2_n_0 ;
  wire \bdin[27]_i_3_n_0 ;
  wire \bdin[28]_i_2_n_0 ;
  wire \bdin[28]_i_3_n_0 ;
  wire \bdin[29]_i_2_n_0 ;
  wire \bdin[29]_i_3_n_0 ;
  wire \bdin[2]_i_2_n_0 ;
  wire \bdin[2]_i_3_n_0 ;
  wire \bdin[30]_i_2_n_0 ;
  wire \bdin[30]_i_3_n_0 ;
  wire \bdin[31]_i_2_n_0 ;
  wire \bdin[31]_i_3_n_0 ;
  wire \bdin[32]_i_2_n_0 ;
  wire \bdin[32]_i_3_n_0 ;
  wire \bdin[33]_i_2_n_0 ;
  wire \bdin[33]_i_3_n_0 ;
  wire \bdin[34]_i_2_n_0 ;
  wire \bdin[34]_i_3_n_0 ;
  wire \bdin[35]_i_2_n_0 ;
  wire \bdin[35]_i_3_n_0 ;
  wire \bdin[36]_i_2_n_0 ;
  wire \bdin[36]_i_3_n_0 ;
  wire \bdin[37]_i_2_n_0 ;
  wire \bdin[37]_i_3_n_0 ;
  wire \bdin[38]_i_2_n_0 ;
  wire \bdin[38]_i_3_n_0 ;
  wire \bdin[39]_i_2_n_0 ;
  wire \bdin[39]_i_3_n_0 ;
  wire \bdin[3]_i_2_n_0 ;
  wire \bdin[3]_i_3_n_0 ;
  wire \bdin[40]_i_2_n_0 ;
  wire \bdin[40]_i_3_n_0 ;
  wire \bdin[41]_i_2_n_0 ;
  wire \bdin[41]_i_3_n_0 ;
  wire \bdin[42]_i_2_n_0 ;
  wire \bdin[42]_i_3_n_0 ;
  wire \bdin[43]_i_2_n_0 ;
  wire \bdin[43]_i_3_n_0 ;
  wire \bdin[44]_i_2_n_0 ;
  wire \bdin[44]_i_3_n_0 ;
  wire \bdin[45]_i_2_n_0 ;
  wire \bdin[45]_i_3_n_0 ;
  wire \bdin[46]_i_2_n_0 ;
  wire \bdin[46]_i_3_n_0 ;
  wire \bdin[47]_i_2_n_0 ;
  wire \bdin[47]_i_3_n_0 ;
  wire \bdin[48]_i_2_n_0 ;
  wire \bdin[49]_i_2_n_0 ;
  wire \bdin[4]_i_2_n_0 ;
  wire \bdin[4]_i_3_n_0 ;
  wire \bdin[50]_i_2_n_0 ;
  wire \bdin[51]_i_2_n_0 ;
  wire \bdin[52]_i_2_n_0 ;
  wire \bdin[53]_i_2_n_0 ;
  wire \bdin[54]_i_2_n_0 ;
  wire \bdin[55]_i_2_n_0 ;
  wire \bdin[5]_i_2_n_0 ;
  wire \bdin[5]_i_3_n_0 ;
  wire \bdin[6]_i_2_n_0 ;
  wire \bdin[6]_i_3_n_0 ;
  wire \bdin[7]_i_2_n_0 ;
  wire \bdin[7]_i_3_n_0 ;
  wire \bdin[8]_i_2_n_0 ;
  wire \bdin[8]_i_3_n_0 ;
  wire \bdin[9]_i_2_n_0 ;
  wire \bdin[9]_i_3_n_0 ;
  wire \bdin_reg_n_0_[63] ;
  wire crc_clr_;
  wire [0:0]\crc_cnt_reg[15] ;
  wire crc_last_;
  wire crc_we_;
  wire [1:0]fmac_speed;
  wire [22:1]init_value;
  wire insert_crc;
  wire last_int_;
  wire last_int__i_1_n_0;
  wire last_int__i_2_n_0;
  wire lclk;
  wire mode_1G;
  wire \new_crc[0]_i_10_n_0 ;
  wire \new_crc[0]_i_2_n_0 ;
  wire \new_crc[0]_i_3_n_0 ;
  wire \new_crc[0]_i_4_n_0 ;
  wire \new_crc[0]_i_5_n_0 ;
  wire \new_crc[0]_i_6_n_0 ;
  wire \new_crc[0]_i_7_n_0 ;
  wire \new_crc[0]_i_8_n_0 ;
  wire \new_crc[0]_i_9_n_0 ;
  wire \new_crc[10]_i_10_n_0 ;
  wire \new_crc[10]_i_4_n_0 ;
  wire \new_crc[10]_i_5_n_0 ;
  wire \new_crc[10]_i_6_n_0 ;
  wire \new_crc[10]_i_7_n_0 ;
  wire \new_crc[10]_i_8_n_0 ;
  wire \new_crc[10]_i_9_n_0 ;
  wire \new_crc[11]_i_10_n_0 ;
  wire \new_crc[11]_i_11_n_0 ;
  wire \new_crc[11]_i_12_n_0 ;
  wire \new_crc[11]_i_3_n_0 ;
  wire \new_crc[11]_i_4_n_0 ;
  wire \new_crc[11]_i_5_n_0 ;
  wire \new_crc[11]_i_6_n_0 ;
  wire \new_crc[11]_i_7_n_0 ;
  wire \new_crc[11]_i_8_n_0 ;
  wire \new_crc[11]_i_9_n_0 ;
  wire \new_crc[12]_i_10_n_0 ;
  wire \new_crc[12]_i_2_n_0 ;
  wire \new_crc[12]_i_3_n_0 ;
  wire \new_crc[12]_i_5_n_0 ;
  wire \new_crc[12]_i_6_n_0 ;
  wire \new_crc[12]_i_7_n_0 ;
  wire \new_crc[12]_i_8_n_0 ;
  wire \new_crc[12]_i_9_n_0 ;
  wire \new_crc[13]_i_10_n_0 ;
  wire \new_crc[13]_i_11_n_0 ;
  wire \new_crc[13]_i_2_n_0 ;
  wire \new_crc[13]_i_3_n_0 ;
  wire \new_crc[13]_i_4_n_0 ;
  wire \new_crc[13]_i_5_n_0 ;
  wire \new_crc[13]_i_6_n_0 ;
  wire \new_crc[13]_i_7_n_0 ;
  wire \new_crc[13]_i_8_n_0 ;
  wire \new_crc[13]_i_9_n_0 ;
  wire \new_crc[14]_i_2_n_0 ;
  wire \new_crc[14]_i_3_n_0 ;
  wire \new_crc[14]_i_4_n_0 ;
  wire \new_crc[14]_i_5_n_0 ;
  wire \new_crc[14]_i_6_n_0 ;
  wire \new_crc[14]_i_7_n_0 ;
  wire \new_crc[14]_i_8_n_0 ;
  wire \new_crc[14]_i_9_n_0 ;
  wire \new_crc[15]_i_2_n_0 ;
  wire \new_crc[15]_i_3_n_0 ;
  wire \new_crc[15]_i_4_n_0 ;
  wire \new_crc[15]_i_5_n_0 ;
  wire \new_crc[15]_i_6_n_0 ;
  wire \new_crc[15]_i_7_n_0 ;
  wire \new_crc[15]_i_8_n_0 ;
  wire \new_crc[15]_i_9_n_0 ;
  wire \new_crc[16]_i_2_n_0 ;
  wire \new_crc[16]_i_3_n_0 ;
  wire \new_crc[16]_i_4_n_0 ;
  wire \new_crc[16]_i_5_n_0 ;
  wire \new_crc[16]_i_6_n_0 ;
  wire \new_crc[16]_i_7_n_0 ;
  wire \new_crc[16]_i_8_n_0 ;
  wire \new_crc[17]_i_2_n_0 ;
  wire \new_crc[17]_i_3_n_0 ;
  wire \new_crc[17]_i_4_n_0 ;
  wire \new_crc[17]_i_5_n_0 ;
  wire \new_crc[17]_i_6_n_0 ;
  wire \new_crc[18]_i_3_n_0 ;
  wire \new_crc[18]_i_4_n_0 ;
  wire \new_crc[18]_i_5_n_0 ;
  wire \new_crc[18]_i_6_n_0 ;
  wire \new_crc[18]_i_7_n_0 ;
  wire \new_crc[19]_i_10_n_0 ;
  wire \new_crc[19]_i_2_n_0 ;
  wire \new_crc[19]_i_3_n_0 ;
  wire \new_crc[19]_i_4_n_0 ;
  wire \new_crc[19]_i_5_n_0 ;
  wire \new_crc[19]_i_6_n_0 ;
  wire \new_crc[19]_i_7_n_0 ;
  wire \new_crc[19]_i_8_n_0 ;
  wire \new_crc[19]_i_9_n_0 ;
  wire \new_crc[1]_i_10_n_0 ;
  wire \new_crc[1]_i_11_n_0 ;
  wire \new_crc[1]_i_3_n_0 ;
  wire \new_crc[1]_i_4_n_0 ;
  wire \new_crc[1]_i_5_n_0 ;
  wire \new_crc[1]_i_6_n_0 ;
  wire \new_crc[1]_i_7_n_0 ;
  wire \new_crc[1]_i_8_n_0 ;
  wire \new_crc[1]_i_9_n_0 ;
  wire \new_crc[20]_i_10_n_0 ;
  wire \new_crc[20]_i_2_n_0 ;
  wire \new_crc[20]_i_3_n_0 ;
  wire \new_crc[20]_i_4_n_0 ;
  wire \new_crc[20]_i_5_n_0 ;
  wire \new_crc[20]_i_6_n_0 ;
  wire \new_crc[20]_i_7_n_0 ;
  wire \new_crc[20]_i_8_n_0 ;
  wire \new_crc[20]_i_9_n_0 ;
  wire \new_crc[21]_i_10_n_0 ;
  wire \new_crc[21]_i_11_n_0 ;
  wire \new_crc[21]_i_12_n_0 ;
  wire \new_crc[21]_i_2_n_0 ;
  wire \new_crc[21]_i_3_n_0 ;
  wire \new_crc[21]_i_4_n_0 ;
  wire \new_crc[21]_i_5_n_0 ;
  wire \new_crc[21]_i_6_n_0 ;
  wire \new_crc[21]_i_7_n_0 ;
  wire \new_crc[21]_i_8_n_0 ;
  wire \new_crc[21]_i_9_n_0 ;
  wire \new_crc[22]_i_10_n_0 ;
  wire \new_crc[22]_i_3_n_0 ;
  wire \new_crc[22]_i_4_n_0 ;
  wire \new_crc[22]_i_5_n_0 ;
  wire \new_crc[22]_i_7_n_0 ;
  wire \new_crc[22]_i_8_n_0 ;
  wire \new_crc[22]_i_9_n_0 ;
  wire \new_crc[23]_i_10_n_0 ;
  wire \new_crc[23]_i_11_n_0 ;
  wire \new_crc[23]_i_2_n_0 ;
  wire \new_crc[23]_i_3_n_0 ;
  wire \new_crc[23]_i_4_n_0 ;
  wire \new_crc[23]_i_5_n_0 ;
  wire \new_crc[23]_i_6_n_0 ;
  wire \new_crc[23]_i_7_n_0 ;
  wire \new_crc[23]_i_8_n_0 ;
  wire \new_crc[23]_i_9_n_0 ;
  wire \new_crc[24]_i_10_n_0 ;
  wire \new_crc[24]_i_11_n_0 ;
  wire \new_crc[24]_i_12_n_0 ;
  wire \new_crc[24]_i_13_n_0 ;
  wire \new_crc[24]_i_14_n_0 ;
  wire \new_crc[24]_i_2_n_0 ;
  wire \new_crc[24]_i_3_n_0 ;
  wire \new_crc[24]_i_4_n_0 ;
  wire \new_crc[24]_i_5_n_0 ;
  wire \new_crc[24]_i_7_n_0 ;
  wire \new_crc[24]_i_8_n_0 ;
  wire \new_crc[24]_i_9_n_0 ;
  wire \new_crc[25]_i_10_n_0 ;
  wire \new_crc[25]_i_11_n_0 ;
  wire \new_crc[25]_i_12_n_0 ;
  wire \new_crc[25]_i_13_n_0 ;
  wire \new_crc[25]_i_2_n_0 ;
  wire \new_crc[25]_i_3_n_0 ;
  wire \new_crc[25]_i_4_n_0 ;
  wire \new_crc[25]_i_5_n_0 ;
  wire \new_crc[25]_i_6_n_0 ;
  wire \new_crc[25]_i_7_n_0 ;
  wire \new_crc[25]_i_8_n_0 ;
  wire \new_crc[25]_i_9_n_0 ;
  wire \new_crc[26]_i_10_n_0 ;
  wire \new_crc[26]_i_11_n_0 ;
  wire \new_crc[26]_i_12_n_0 ;
  wire \new_crc[26]_i_13_n_0 ;
  wire \new_crc[26]_i_2_n_0 ;
  wire \new_crc[26]_i_3_n_0 ;
  wire \new_crc[26]_i_5_n_0 ;
  wire \new_crc[26]_i_6_n_0 ;
  wire \new_crc[26]_i_7_n_0 ;
  wire \new_crc[26]_i_8_n_0 ;
  wire \new_crc[26]_i_9_n_0 ;
  wire \new_crc[27]_i_3_n_0 ;
  wire \new_crc[27]_i_4_n_0 ;
  wire \new_crc[27]_i_5_n_0 ;
  wire \new_crc[27]_i_6_n_0 ;
  wire \new_crc[27]_i_7_n_0 ;
  wire \new_crc[27]_i_8_n_0 ;
  wire \new_crc[28]_i_10_n_0 ;
  wire \new_crc[28]_i_11_n_0 ;
  wire \new_crc[28]_i_12_n_0 ;
  wire \new_crc[28]_i_13_n_0 ;
  wire \new_crc[28]_i_14_n_0 ;
  wire \new_crc[28]_i_15_n_0 ;
  wire \new_crc[28]_i_2_n_0 ;
  wire \new_crc[28]_i_3_n_0 ;
  wire \new_crc[28]_i_4_n_0 ;
  wire \new_crc[28]_i_5_n_0 ;
  wire \new_crc[28]_i_6_n_0 ;
  wire \new_crc[28]_i_7_n_0 ;
  wire \new_crc[28]_i_9_n_0 ;
  wire \new_crc[29]_i_10_n_0 ;
  wire \new_crc[29]_i_11_n_0 ;
  wire \new_crc[29]_i_12_n_0 ;
  wire \new_crc[29]_i_13_n_0 ;
  wire \new_crc[29]_i_2_n_0 ;
  wire \new_crc[29]_i_3_n_0 ;
  wire \new_crc[29]_i_4_n_0 ;
  wire \new_crc[29]_i_5_n_0 ;
  wire \new_crc[29]_i_6_n_0 ;
  wire \new_crc[29]_i_7_n_0 ;
  wire \new_crc[29]_i_8_n_0 ;
  wire \new_crc[29]_i_9_n_0 ;
  wire \new_crc[2]_i_10_n_0 ;
  wire \new_crc[2]_i_11_n_0 ;
  wire \new_crc[2]_i_2_n_0 ;
  wire \new_crc[2]_i_3_n_0 ;
  wire \new_crc[2]_i_5_n_0 ;
  wire \new_crc[2]_i_6_n_0 ;
  wire \new_crc[2]_i_7_n_0 ;
  wire \new_crc[2]_i_8_n_0 ;
  wire \new_crc[2]_i_9_n_0 ;
  wire \new_crc[30]_i_10_n_0 ;
  wire \new_crc[30]_i_11_n_0 ;
  wire \new_crc[30]_i_2_n_0 ;
  wire \new_crc[30]_i_3_n_0 ;
  wire \new_crc[30]_i_4_n_0 ;
  wire \new_crc[30]_i_5_n_0 ;
  wire \new_crc[30]_i_7_n_0 ;
  wire \new_crc[30]_i_8_n_0 ;
  wire \new_crc[30]_i_9_n_0 ;
  wire \new_crc[31]_i_10_n_0 ;
  wire \new_crc[31]_i_11_n_0 ;
  wire \new_crc[31]_i_12_n_0 ;
  wire \new_crc[31]_i_13_n_0 ;
  wire \new_crc[31]_i_14_n_0 ;
  wire \new_crc[31]_i_1_n_0 ;
  wire \new_crc[31]_i_4_n_0 ;
  wire \new_crc[31]_i_6_n_0 ;
  wire \new_crc[31]_i_7_n_0 ;
  wire \new_crc[31]_i_8_n_0 ;
  wire \new_crc[31]_i_9_n_0 ;
  wire \new_crc[3]_i_10_n_0 ;
  wire \new_crc[3]_i_2_n_0 ;
  wire \new_crc[3]_i_3_n_0 ;
  wire \new_crc[3]_i_4_n_0 ;
  wire \new_crc[3]_i_5_n_0 ;
  wire \new_crc[3]_i_6_n_0 ;
  wire \new_crc[3]_i_7_n_0 ;
  wire \new_crc[3]_i_8_n_0 ;
  wire \new_crc[3]_i_9_n_0 ;
  wire \new_crc[4]_i_2_n_0 ;
  wire \new_crc[4]_i_3_n_0 ;
  wire \new_crc[4]_i_4_n_0 ;
  wire \new_crc[4]_i_5_n_0 ;
  wire \new_crc[4]_i_6_n_0 ;
  wire \new_crc[4]_i_7_n_0 ;
  wire \new_crc[4]_i_8_n_0 ;
  wire \new_crc[4]_i_9_n_0 ;
  wire \new_crc[5]_i_2_n_0 ;
  wire \new_crc[5]_i_3_n_0 ;
  wire \new_crc[5]_i_4_n_0 ;
  wire \new_crc[5]_i_5_n_0 ;
  wire \new_crc[5]_i_6_n_0 ;
  wire \new_crc[5]_i_7_n_0 ;
  wire \new_crc[5]_i_8_n_0 ;
  wire \new_crc[5]_i_9_n_0 ;
  wire \new_crc[6]_i_2_n_0 ;
  wire \new_crc[6]_i_3_n_0 ;
  wire \new_crc[6]_i_4_n_0 ;
  wire \new_crc[6]_i_5_n_0 ;
  wire \new_crc[6]_i_6_n_0 ;
  wire \new_crc[6]_i_7_n_0 ;
  wire \new_crc[6]_i_8_n_0 ;
  wire \new_crc[6]_i_9_n_0 ;
  wire \new_crc[7]_i_2_n_0 ;
  wire \new_crc[7]_i_3_n_0 ;
  wire \new_crc[7]_i_4_n_0 ;
  wire \new_crc[7]_i_5_n_0 ;
  wire \new_crc[7]_i_6_n_0 ;
  wire \new_crc[7]_i_7_n_0 ;
  wire \new_crc[8]_i_2_n_0 ;
  wire \new_crc[8]_i_3_n_0 ;
  wire \new_crc[8]_i_4_n_0 ;
  wire \new_crc[8]_i_5_n_0 ;
  wire \new_crc[8]_i_6_n_0 ;
  wire \new_crc[8]_i_7_n_0 ;
  wire \new_crc[9]_i_10_n_0 ;
  wire \new_crc[9]_i_11_n_0 ;
  wire \new_crc[9]_i_2_n_0 ;
  wire \new_crc[9]_i_3_n_0 ;
  wire \new_crc[9]_i_4_n_0 ;
  wire \new_crc[9]_i_5_n_0 ;
  wire \new_crc[9]_i_6_n_0 ;
  wire \new_crc[9]_i_7_n_0 ;
  wire \new_crc[9]_i_8_n_0 ;
  wire \new_crc[9]_i_9_n_0 ;
  wire \new_crc_reg[0]_0 ;
  wire \new_crc_reg_n_0_[0] ;
  wire [27:10]nextCRC32_D64_return;
  wire p_0_in;
  wire p_0_in41_in;
  wire p_0_in53_in;
  wire p_109_in;
  wire p_10_in;
  wire p_10_in18_in;
  wire p_10_in3_in;
  wire p_10_in55_in;
  wire p_114_in;
  wire p_116_in;
  wire p_11_in;
  wire p_11_in2_in;
  wire p_121_in;
  wire p_128_in;
  wire p_129_in;
  wire p_12_in;
  wire p_12_in19_in;
  wire p_12_in69_in;
  wire p_135_in;
  wire p_13_in;
  wire p_13_in64_in;
  wire p_14_in;
  wire p_14_in20_in;
  wire p_14_in58_in;
  wire p_15_in;
  wire p_15_in50_in;
  wire p_16_in;
  wire p_16_in21_in;
  wire p_16_in36_in;
  wire p_16_in9_in;
  wire p_17_in;
  wire p_17_in47_in;
  wire p_17_in62_in;
  wire p_17_in68_in;
  wire p_17_in8_in;
  wire p_18_in;
  wire p_18_in22_in;
  wire p_18_in7_in;
  wire p_19_in;
  wire p_19_in37_in;
  wire p_19_in42_in;
  wire p_19_in72_in;
  wire p_1_in;
  wire p_1_in113_in;
  wire p_1_in59_in;
  wire p_1_in73_in;
  wire p_1_in98_in;
  wire p_20_in;
  wire p_20_in23_in;
  wire p_20_in30_in;
  wire p_20_in48_in;
  wire p_20_in56_in;
  wire p_21_in;
  wire p_21_in6_in;
  wire p_22_in;
  wire p_22_in24_in;
  wire p_22_in29_in;
  wire p_22_in38_in;
  wire p_23_in;
  wire p_23_in5_in;
  wire p_24_in;
  wire p_24_in11_in;
  wire p_24_in25_in;
  wire p_24_in63_in;
  wire p_25_in;
  wire p_25_in39_in;
  wire p_26_in;
  wire p_26_in49_in;
  wire p_27_in10_in;
  wire p_28_in;
  wire p_28_in57_in;
  wire p_29_in;
  wire p_2_in;
  wire p_2_in14_in;
  wire p_2_in1_in;
  wire p_2_in45_in;
  wire [31:0]p_2_in__0;
  wire p_30_in;
  wire p_38_in;
  wire p_3_in;
  wire p_3_in33_in;
  wire p_3_in40_in;
  wire p_3_in54_in;
  wire p_4_in;
  wire p_4_in15_in;
  wire p_4_in27_in;
  wire p_5_in;
  wire p_5_in0_in;
  wire p_6_in;
  wire p_6_in16_in;
  wire p_6_in26_in;
  wire p_6_in34_in;
  wire p_79_in;
  wire p_7_in;
  wire p_7_in46_in;
  wire p_8_in;
  wire p_8_in17_in;
  wire p_8_in4_in;
  wire p_94_in;
  wire p_9_in;
  wire p_9_in28_in;
  wire p_9_in35_in;
  wire p_9_in61_in;
  wire p_9_in67_in;
  wire [55:0]\pdin_reg[63] ;
  wire pulse_0;
  wire pulse_1;
  wire \rbytes_reg_reg[0]_rep ;
  wire \rbytes_reg_reg[0]_rep__0 ;
  wire \rbytes_reg_reg[0]_rep__1 ;
  wire \rbytes_reg_reg[0]_rep__1_0 ;
  wire \rbytes_reg_reg[0]_rep__1_1 ;
  wire \rbytes_reg_reg[1]_rep ;
  wire \rbytes_reg_reg[1]_rep__0 ;
  wire \rbytes_reg_reg[1]_rep__0_0 ;
  wire [1:0]\rbytes_reg_reg[2] ;
  wire \rbytes_reg_reg[2]_0 ;
  wire [7:0]\rbytes_reg_reg[2]_1 ;
  wire rst_;
  wire \state[0]_i_1__0_n_0 ;
  wire \state[0]_i_2_n_0 ;
  wire \state[1]_i_1__0_n_0 ;
  wire \state[2]_i_1__0_n_0 ;
  wire \state_reg_n_0_[0] ;
  wire \state_reg_n_0_[1] ;
  wire \state_reg_n_0_[2] ;
  wire [59:40]txd;
  wire txd1;
  wire \txd[0]_i_2_n_0 ;
  wire \txd[10]_i_2_n_0 ;
  wire \txd[11]_i_2_n_0 ;
  wire \txd[12]_i_2_n_0 ;
  wire \txd[13]_i_2_n_0 ;
  wire \txd[14]_i_2_n_0 ;
  wire \txd[15]_i_2_n_0 ;
  wire \txd[16]_i_2_n_0 ;
  wire \txd[16]_i_3_n_0 ;
  wire \txd[17]_i_2_n_0 ;
  wire \txd[17]_i_3_n_0 ;
  wire \txd[18]_i_2_n_0 ;
  wire \txd[18]_i_3_n_0 ;
  wire \txd[19]_i_2_n_0 ;
  wire \txd[19]_i_3_n_0 ;
  wire \txd[1]_i_2_n_0 ;
  wire \txd[20]_i_2_n_0 ;
  wire \txd[20]_i_3_n_0 ;
  wire \txd[21]_i_2_n_0 ;
  wire \txd[21]_i_3_n_0 ;
  wire \txd[22]_i_2_n_0 ;
  wire \txd[22]_i_3_n_0 ;
  wire \txd[23]_i_2_n_0 ;
  wire \txd[23]_i_3_n_0 ;
  wire \txd[24]_i_2_n_0 ;
  wire \txd[25]_i_2_n_0 ;
  wire \txd[26]_i_2_n_0 ;
  wire \txd[27]_i_2_n_0 ;
  wire \txd[28]_i_2_n_0 ;
  wire \txd[29]_i_2_n_0 ;
  wire \txd[2]_i_2_n_0 ;
  wire \txd[30]_i_2_n_0 ;
  wire \txd[31]_i_4_n_0 ;
  wire \txd[32]_i_2_n_0 ;
  wire \txd[32]_i_3_n_0 ;
  wire \txd[33]_i_2_n_0 ;
  wire \txd[33]_i_3_n_0 ;
  wire \txd[34]_i_2_n_0 ;
  wire \txd[34]_i_3_n_0 ;
  wire \txd[35]_i_2_n_0 ;
  wire \txd[35]_i_3_n_0 ;
  wire \txd[36]_i_2_n_0 ;
  wire \txd[36]_i_3_n_0 ;
  wire \txd[37]_i_2_n_0 ;
  wire \txd[37]_i_3_n_0 ;
  wire \txd[38]_i_2_n_0 ;
  wire \txd[38]_i_3_n_0 ;
  wire \txd[39]_i_2_n_0 ;
  wire \txd[39]_i_3_n_0 ;
  wire \txd[3]_i_2_n_0 ;
  wire \txd[3]_i_3_n_0 ;
  wire \txd[40]_i_3_n_0 ;
  wire \txd[41]_i_3_n_0 ;
  wire \txd[42]_i_3_n_0 ;
  wire \txd[44]_i_3_n_0 ;
  wire \txd[45]_i_3_n_0 ;
  wire \txd[46]_i_3_n_0 ;
  wire \txd[47]_i_3_n_0 ;
  wire \txd[48]_i_2_n_0 ;
  wire \txd[48]_i_3_n_0 ;
  wire \txd[49]_i_2_n_0 ;
  wire \txd[49]_i_3_n_0 ;
  wire \txd[4]_i_2_n_0 ;
  wire \txd[50]_i_2_n_0 ;
  wire \txd[50]_i_3_n_0 ;
  wire \txd[51]_i_2_n_0 ;
  wire \txd[51]_i_3_n_0 ;
  wire \txd[52]_i_2_n_0 ;
  wire \txd[52]_i_3_n_0 ;
  wire \txd[53]_i_2_n_0 ;
  wire \txd[53]_i_3_n_0 ;
  wire \txd[54]_i_2_n_0 ;
  wire \txd[54]_i_3_n_0 ;
  wire \txd[55]_i_2_n_0 ;
  wire \txd[55]_i_3_n_0 ;
  wire \txd[56]_i_2_n_0 ;
  wire \txd[56]_i_3_n_0 ;
  wire \txd[57]_i_2_n_0 ;
  wire \txd[57]_i_3_n_0 ;
  wire \txd[58]_i_2_n_0 ;
  wire \txd[58]_i_3_n_0 ;
  wire \txd[59]_i_3_n_0 ;
  wire \txd[59]_i_4_n_0 ;
  wire \txd[5]_i_2_n_0 ;
  wire \txd[60]_i_2_n_0 ;
  wire \txd[60]_i_3_n_0 ;
  wire \txd[61]_i_2_n_0 ;
  wire \txd[61]_i_3_n_0 ;
  wire \txd[62]_i_2_n_0 ;
  wire \txd[62]_i_3_n_0 ;
  wire \txd[63]_i_4_n_0 ;
  wire \txd[63]_i_5_n_0 ;
  wire \txd[6]_i_2_n_0 ;
  wire \txd[7]_i_3_n_0 ;
  wire \txd[8]_i_2_n_0 ;
  wire \txd[9]_i_2_n_0 ;
  wire [0:0]\wcnt_reg[15] ;
  wire \wdata_reg[10] ;
  wire \wdata_reg[11] ;
  wire \wdata_reg[12] ;
  wire \wdata_reg[13] ;
  wire \wdata_reg[14] ;
  wire \wdata_reg[15] ;
  wire \wdata_reg[16] ;
  wire \wdata_reg[16]_0 ;
  wire \wdata_reg[17] ;
  wire \wdata_reg[17]_0 ;
  wire \wdata_reg[18] ;
  wire \wdata_reg[18]_0 ;
  wire \wdata_reg[19] ;
  wire \wdata_reg[19]_0 ;
  wire \wdata_reg[20] ;
  wire \wdata_reg[20]_0 ;
  wire \wdata_reg[21] ;
  wire \wdata_reg[21]_0 ;
  wire \wdata_reg[22] ;
  wire \wdata_reg[22]_0 ;
  wire \wdata_reg[23] ;
  wire \wdata_reg[23]_0 ;
  wire \wdata_reg[24] ;
  wire \wdata_reg[25] ;
  wire \wdata_reg[26] ;
  wire \wdata_reg[27] ;
  wire \wdata_reg[28] ;
  wire \wdata_reg[29] ;
  wire \wdata_reg[30] ;
  wire \wdata_reg[31] ;
  wire \wdata_reg[32] ;
  wire \wdata_reg[33] ;
  wire \wdata_reg[34] ;
  wire \wdata_reg[35] ;
  wire \wdata_reg[36] ;
  wire \wdata_reg[37] ;
  wire \wdata_reg[38] ;
  wire \wdata_reg[39] ;
  wire [55:0]\wdata_reg[55] ;
  wire \wdata_reg[8] ;
  wire \wdata_reg[9] ;
  wire we_int_;
  wire we_int__i_1_n_0;

  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[0]_i_1 
       (.I0(\bdin[0]_i_2_n_0 ),
        .I1(\bdin[0]_i_3_n_0 ),
        .I2(\bdin[16]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[32]_i_2_n_0 ),
        .O(bdin[0]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[0]_i_2 
       (.I0(\pdin_reg[63] [16]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [0]),
        .O(\bdin[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[0]_i_3 
       (.I0(\pdin_reg[63] [0]),
        .I1(\pdin_reg[63] [8]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[10]_i_1 
       (.I0(\bdin[10]_i_2_n_0 ),
        .I1(\bdin[10]_i_3_n_0 ),
        .I2(\bdin[26]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[42]_i_2_n_0 ),
        .O(bdin[10]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[10]_i_2 
       (.I0(\pdin_reg[63] [18]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [10]),
        .O(\bdin[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[10]_i_3 
       (.I0(\pdin_reg[63] [26]),
        .I1(\pdin_reg[63] [10]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[11]_i_1 
       (.I0(\bdin[11]_i_2_n_0 ),
        .I1(\bdin[11]_i_3_n_0 ),
        .I2(\bdin[27]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[43]_i_2_n_0 ),
        .O(bdin[11]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[11]_i_2 
       (.I0(\pdin_reg[63] [19]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [11]),
        .O(\bdin[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[11]_i_3 
       (.I0(\pdin_reg[63] [27]),
        .I1(\pdin_reg[63] [11]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[12]_i_1 
       (.I0(\bdin[12]_i_2_n_0 ),
        .I1(\bdin[12]_i_3_n_0 ),
        .I2(\bdin[28]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[44]_i_2_n_0 ),
        .O(bdin[12]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[12]_i_2 
       (.I0(\pdin_reg[63] [20]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [12]),
        .O(\bdin[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[12]_i_3 
       (.I0(\pdin_reg[63] [28]),
        .I1(\pdin_reg[63] [12]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[13]_i_1 
       (.I0(\bdin[13]_i_2_n_0 ),
        .I1(\bdin[13]_i_3_n_0 ),
        .I2(\bdin[29]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[45]_i_2_n_0 ),
        .O(bdin[13]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[13]_i_2 
       (.I0(\pdin_reg[63] [21]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [13]),
        .O(\bdin[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[13]_i_3 
       (.I0(\pdin_reg[63] [29]),
        .I1(\pdin_reg[63] [13]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[14]_i_1 
       (.I0(\bdin[14]_i_2_n_0 ),
        .I1(\bdin[14]_i_3_n_0 ),
        .I2(\bdin[30]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[46]_i_2_n_0 ),
        .O(bdin[14]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[14]_i_2 
       (.I0(\pdin_reg[63] [22]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [14]),
        .O(\bdin[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[14]_i_3 
       (.I0(\pdin_reg[63] [30]),
        .I1(\pdin_reg[63] [14]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[15]_i_1 
       (.I0(\bdin[15]_i_2_n_0 ),
        .I1(\bdin[15]_i_3_n_0 ),
        .I2(\bdin[31]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[47]_i_2_n_0 ),
        .O(bdin[15]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[15]_i_2 
       (.I0(\pdin_reg[63] [23]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [15]),
        .O(\bdin[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[15]_i_3 
       (.I0(\pdin_reg[63] [31]),
        .I1(\pdin_reg[63] [15]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[16]_i_1 
       (.I0(\bdin[16]_i_2_n_0 ),
        .I1(\bdin[16]_i_3_n_0 ),
        .I2(\bdin[32]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[8] ),
        .O(bdin[16]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[16]_i_2 
       (.I0(\pdin_reg[63] [32]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [24]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[16]_i_3 
       (.I0(\pdin_reg[63] [16]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [16]),
        .O(\bdin[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[17]_i_1 
       (.I0(\bdin[17]_i_2_n_0 ),
        .I1(\bdin[17]_i_3_n_0 ),
        .I2(\bdin[33]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[9] ),
        .O(bdin[17]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[17]_i_2 
       (.I0(\pdin_reg[63] [33]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [25]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[17]_i_3 
       (.I0(\pdin_reg[63] [17]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [17]),
        .O(\bdin[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[18]_i_1 
       (.I0(\bdin[18]_i_2_n_0 ),
        .I1(\bdin[18]_i_3_n_0 ),
        .I2(\bdin[34]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[10] ),
        .O(bdin[18]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[18]_i_2 
       (.I0(\pdin_reg[63] [34]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [26]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[18]_i_3 
       (.I0(\pdin_reg[63] [18]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [18]),
        .O(\bdin[18]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[19]_i_1 
       (.I0(\bdin[19]_i_2_n_0 ),
        .I1(\bdin[19]_i_3_n_0 ),
        .I2(\bdin[35]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[11] ),
        .O(bdin[19]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[19]_i_2 
       (.I0(\pdin_reg[63] [35]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [27]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[19]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[19]_i_3 
       (.I0(\pdin_reg[63] [19]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [19]),
        .O(\bdin[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[1]_i_1 
       (.I0(\bdin[1]_i_2_n_0 ),
        .I1(\bdin[1]_i_3_n_0 ),
        .I2(\bdin[17]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[33]_i_2_n_0 ),
        .O(bdin[1]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[1]_i_2 
       (.I0(\pdin_reg[63] [17]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [1]),
        .O(\bdin[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[1]_i_3 
       (.I0(\pdin_reg[63] [1]),
        .I1(\pdin_reg[63] [9]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[20]_i_1 
       (.I0(\bdin[20]_i_2_n_0 ),
        .I1(\bdin[20]_i_3_n_0 ),
        .I2(\bdin[36]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[12] ),
        .O(bdin[20]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[20]_i_2 
       (.I0(\pdin_reg[63] [36]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [28]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[20]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[20]_i_3 
       (.I0(\pdin_reg[63] [20]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [20]),
        .O(\bdin[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[21]_i_1 
       (.I0(\bdin[21]_i_2_n_0 ),
        .I1(\bdin[21]_i_3_n_0 ),
        .I2(\bdin[37]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[13] ),
        .O(bdin[21]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[21]_i_2 
       (.I0(\pdin_reg[63] [37]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [29]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[21]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[21]_i_3 
       (.I0(\pdin_reg[63] [21]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [21]),
        .O(\bdin[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[22]_i_1 
       (.I0(\bdin[22]_i_2_n_0 ),
        .I1(\bdin[22]_i_3_n_0 ),
        .I2(\bdin[38]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[14] ),
        .O(bdin[22]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[22]_i_2 
       (.I0(\pdin_reg[63] [38]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [30]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[22]_i_3 
       (.I0(\pdin_reg[63] [22]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [22]),
        .O(\bdin[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[23]_i_1 
       (.I0(\bdin[23]_i_2_n_0 ),
        .I1(\bdin[23]_i_3_n_0 ),
        .I2(\bdin[39]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[15] ),
        .O(bdin[23]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[23]_i_2 
       (.I0(\pdin_reg[63] [39]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [31]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[23]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[23]_i_3 
       (.I0(\pdin_reg[63] [23]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [23]),
        .O(\bdin[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[24]_i_1 
       (.I0(\bdin[24]_i_2_n_0 ),
        .I1(\bdin[24]_i_3_n_0 ),
        .I2(\bdin[40]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[16] ),
        .O(bdin[24]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[24]_i_2 
       (.I0(\pdin_reg[63] [40]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [32]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[24]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[24]_i_3 
       (.I0(\pdin_reg[63] [24]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [24]),
        .O(\bdin[24]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[25]_i_1 
       (.I0(\bdin[25]_i_2_n_0 ),
        .I1(\bdin[25]_i_3_n_0 ),
        .I2(\bdin[41]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[17] ),
        .O(bdin[25]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[25]_i_2 
       (.I0(\pdin_reg[63] [41]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [33]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[25]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[25]_i_3 
       (.I0(\pdin_reg[63] [25]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [25]),
        .O(\bdin[25]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[26]_i_1 
       (.I0(\bdin[26]_i_2_n_0 ),
        .I1(\bdin[26]_i_3_n_0 ),
        .I2(\bdin[42]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[18] ),
        .O(bdin[26]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[26]_i_2 
       (.I0(\pdin_reg[63] [42]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [34]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[26]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[26]_i_3 
       (.I0(\pdin_reg[63] [26]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [26]),
        .O(\bdin[26]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[27]_i_1 
       (.I0(\bdin[27]_i_2_n_0 ),
        .I1(\bdin[27]_i_3_n_0 ),
        .I2(\bdin[43]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[19] ),
        .O(bdin[27]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[27]_i_2 
       (.I0(\pdin_reg[63] [43]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [35]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[27]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[27]_i_3 
       (.I0(\pdin_reg[63] [27]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [27]),
        .O(\bdin[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[28]_i_1 
       (.I0(\bdin[28]_i_2_n_0 ),
        .I1(\bdin[28]_i_3_n_0 ),
        .I2(\bdin[44]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[20] ),
        .O(bdin[28]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[28]_i_2 
       (.I0(\pdin_reg[63] [44]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [36]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[28]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[28]_i_3 
       (.I0(\pdin_reg[63] [28]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [28]),
        .O(\bdin[28]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[29]_i_1 
       (.I0(\bdin[29]_i_2_n_0 ),
        .I1(\bdin[29]_i_3_n_0 ),
        .I2(\bdin[45]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[21] ),
        .O(bdin[29]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[29]_i_2 
       (.I0(\pdin_reg[63] [45]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [37]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[29]_i_3 
       (.I0(\pdin_reg[63] [29]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [29]),
        .O(\bdin[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[2]_i_1 
       (.I0(\bdin[2]_i_2_n_0 ),
        .I1(\bdin[2]_i_3_n_0 ),
        .I2(\bdin[18]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[34]_i_2_n_0 ),
        .O(bdin[2]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[2]_i_2 
       (.I0(\pdin_reg[63] [18]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [2]),
        .O(\bdin[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[2]_i_3 
       (.I0(\pdin_reg[63] [2]),
        .I1(\pdin_reg[63] [10]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[30]_i_1 
       (.I0(\bdin[30]_i_2_n_0 ),
        .I1(\bdin[30]_i_3_n_0 ),
        .I2(\bdin[46]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[22] ),
        .O(bdin[30]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[30]_i_2 
       (.I0(\pdin_reg[63] [46]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [38]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[30]_i_3 
       (.I0(\pdin_reg[63] [30]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [30]),
        .O(\bdin[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[31]_i_1 
       (.I0(\bdin[31]_i_2_n_0 ),
        .I1(\bdin[31]_i_3_n_0 ),
        .I2(\bdin[47]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[23] ),
        .O(bdin[31]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[31]_i_2 
       (.I0(\pdin_reg[63] [47]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [39]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[31]_i_3 
       (.I0(\pdin_reg[63] [31]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [31]),
        .O(\bdin[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[32]_i_1 
       (.I0(\bdin[32]_i_2_n_0 ),
        .I1(\bdin[32]_i_3_n_0 ),
        .I2(\wdata_reg[8] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[24] ),
        .O(bdin[32]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[32]_i_2 
       (.I0(\pdin_reg[63] [48]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [40]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[32]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[32]_i_3 
       (.I0(\pdin_reg[63] [32]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [32]),
        .O(\bdin[32]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[33]_i_1 
       (.I0(\bdin[33]_i_2_n_0 ),
        .I1(\bdin[33]_i_3_n_0 ),
        .I2(\wdata_reg[9] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[25] ),
        .O(bdin[33]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[33]_i_2 
       (.I0(\pdin_reg[63] [49]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [41]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[33]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[33]_i_3 
       (.I0(\pdin_reg[63] [33]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [33]),
        .O(\bdin[33]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[34]_i_1 
       (.I0(\bdin[34]_i_2_n_0 ),
        .I1(\bdin[34]_i_3_n_0 ),
        .I2(\wdata_reg[10] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[26] ),
        .O(bdin[34]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[34]_i_2 
       (.I0(\pdin_reg[63] [50]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [42]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[34]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[34]_i_3 
       (.I0(\pdin_reg[63] [34]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [34]),
        .O(\bdin[34]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[35]_i_1 
       (.I0(\bdin[35]_i_2_n_0 ),
        .I1(\bdin[35]_i_3_n_0 ),
        .I2(\wdata_reg[11] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[27] ),
        .O(bdin[35]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[35]_i_2 
       (.I0(\pdin_reg[63] [51]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [43]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[35]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[35]_i_3 
       (.I0(\pdin_reg[63] [35]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [35]),
        .O(\bdin[35]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[36]_i_1 
       (.I0(\bdin[36]_i_2_n_0 ),
        .I1(\bdin[36]_i_3_n_0 ),
        .I2(\wdata_reg[12] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[28] ),
        .O(bdin[36]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[36]_i_2 
       (.I0(\pdin_reg[63] [52]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [44]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[36]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[36]_i_3 
       (.I0(\pdin_reg[63] [36]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [36]),
        .O(\bdin[36]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[37]_i_1 
       (.I0(\bdin[37]_i_2_n_0 ),
        .I1(\bdin[37]_i_3_n_0 ),
        .I2(\wdata_reg[13] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[29] ),
        .O(bdin[37]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[37]_i_2 
       (.I0(\pdin_reg[63] [53]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [45]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[37]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[37]_i_3 
       (.I0(\pdin_reg[63] [37]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [37]),
        .O(\bdin[37]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[38]_i_1 
       (.I0(\bdin[38]_i_2_n_0 ),
        .I1(\bdin[38]_i_3_n_0 ),
        .I2(\wdata_reg[14] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[30] ),
        .O(bdin[38]));
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[38]_i_2 
       (.I0(\pdin_reg[63] [54]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [46]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[38]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[38]_i_3 
       (.I0(\pdin_reg[63] [38]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [38]),
        .O(\bdin[38]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[39]_i_1 
       (.I0(\bdin[39]_i_2_n_0 ),
        .I1(\bdin[39]_i_3_n_0 ),
        .I2(\wdata_reg[15] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[31] ),
        .O(bdin[39]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \bdin[39]_i_2 
       (.I0(\pdin_reg[63] [55]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [47]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[39]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[39]_i_3 
       (.I0(\pdin_reg[63] [39]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [39]),
        .O(\bdin[39]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[3]_i_1 
       (.I0(\bdin[3]_i_2_n_0 ),
        .I1(\bdin[3]_i_3_n_0 ),
        .I2(\bdin[19]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[35]_i_2_n_0 ),
        .O(bdin[3]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[3]_i_2 
       (.I0(\pdin_reg[63] [19]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [3]),
        .O(\bdin[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[3]_i_3 
       (.I0(\pdin_reg[63] [3]),
        .I1(\pdin_reg[63] [11]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[40]_i_1 
       (.I0(\bdin[40]_i_2_n_0 ),
        .I1(\bdin[40]_i_3_n_0 ),
        .I2(\wdata_reg[16] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[32] ),
        .O(bdin[40]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[40]_i_2 
       (.I0(\wdata_reg[55] [0]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [48]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[40]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[40]_i_3 
       (.I0(\pdin_reg[63] [40]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [40]),
        .O(\bdin[40]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[41]_i_1 
       (.I0(\bdin[41]_i_2_n_0 ),
        .I1(\bdin[41]_i_3_n_0 ),
        .I2(\wdata_reg[17] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[33] ),
        .O(bdin[41]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[41]_i_2 
       (.I0(\wdata_reg[55] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [49]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[41]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[41]_i_3 
       (.I0(\pdin_reg[63] [41]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [41]),
        .O(\bdin[41]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[42]_i_1 
       (.I0(\bdin[42]_i_2_n_0 ),
        .I1(\bdin[42]_i_3_n_0 ),
        .I2(\wdata_reg[18] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[34] ),
        .O(bdin[42]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[42]_i_2 
       (.I0(\wdata_reg[55] [2]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [50]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[42]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[42]_i_3 
       (.I0(\pdin_reg[63] [42]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [42]),
        .O(\bdin[42]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[43]_i_1 
       (.I0(\bdin[43]_i_2_n_0 ),
        .I1(\bdin[43]_i_3_n_0 ),
        .I2(\wdata_reg[19] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[35] ),
        .O(bdin[43]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[43]_i_2 
       (.I0(\wdata_reg[55] [3]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [51]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[43]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[43]_i_3 
       (.I0(\pdin_reg[63] [43]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [43]),
        .O(\bdin[43]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[44]_i_1 
       (.I0(\bdin[44]_i_2_n_0 ),
        .I1(\bdin[44]_i_3_n_0 ),
        .I2(\wdata_reg[20] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[36] ),
        .O(bdin[44]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[44]_i_2 
       (.I0(\wdata_reg[55] [4]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [52]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[44]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[44]_i_3 
       (.I0(\pdin_reg[63] [44]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [44]),
        .O(\bdin[44]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[45]_i_1 
       (.I0(\bdin[45]_i_2_n_0 ),
        .I1(\bdin[45]_i_3_n_0 ),
        .I2(\wdata_reg[21] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[37] ),
        .O(bdin[45]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[45]_i_2 
       (.I0(\wdata_reg[55] [5]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [53]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[45]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[45]_i_3 
       (.I0(\pdin_reg[63] [45]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [45]),
        .O(\bdin[45]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[46]_i_1 
       (.I0(\bdin[46]_i_2_n_0 ),
        .I1(\bdin[46]_i_3_n_0 ),
        .I2(\wdata_reg[22] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[38] ),
        .O(bdin[46]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[46]_i_2 
       (.I0(\wdata_reg[55] [6]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\pdin_reg[63] [54]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[46]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[46]_i_3 
       (.I0(\pdin_reg[63] [46]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [46]),
        .O(\bdin[46]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0CC00EEF0CC)) 
    \bdin[47]_i_1 
       (.I0(\bdin[47]_i_2_n_0 ),
        .I1(\bdin[47]_i_3_n_0 ),
        .I2(\wdata_reg[23] ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[39] ),
        .O(bdin[47]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT4 #(
    .INIT(16'h88B8)) 
    \bdin[47]_i_2 
       (.I0(\wdata_reg[55] [7]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\pdin_reg[63] [55]),
        .I3(\state_reg_n_0_[0] ),
        .O(\bdin[47]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h020F0200)) 
    \bdin[47]_i_3 
       (.I0(\pdin_reg[63] [47]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [47]),
        .O(\bdin[47]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[48]_i_2 
       (.I0(\wdata_reg[55] [48]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [48]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[8] ),
        .O(\bdin[48]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[49]_i_2 
       (.I0(\wdata_reg[55] [49]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [49]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[9] ),
        .O(\bdin[49]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[4]_i_1 
       (.I0(\bdin[4]_i_2_n_0 ),
        .I1(\bdin[4]_i_3_n_0 ),
        .I2(\bdin[20]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[36]_i_2_n_0 ),
        .O(bdin[4]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[4]_i_2 
       (.I0(\pdin_reg[63] [20]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [4]),
        .O(\bdin[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[4]_i_3 
       (.I0(\pdin_reg[63] [4]),
        .I1(\pdin_reg[63] [12]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[50]_i_2 
       (.I0(\wdata_reg[55] [50]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [50]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[10] ),
        .O(\bdin[50]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[51]_i_2 
       (.I0(\wdata_reg[55] [51]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [51]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[11] ),
        .O(\bdin[51]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[52]_i_2 
       (.I0(\wdata_reg[55] [52]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [52]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[12] ),
        .O(\bdin[52]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[53]_i_2 
       (.I0(\wdata_reg[55] [53]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [53]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\wdata_reg[13] ),
        .O(\bdin[53]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[54]_i_2 
       (.I0(\wdata_reg[55] [54]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [54]),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\wdata_reg[14] ),
        .O(\bdin[54]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF2E2200002E22)) 
    \bdin[55]_i_2 
       (.I0(\wdata_reg[55] [55]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\pdin_reg[63] [55]),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\wdata_reg[15] ),
        .O(\bdin[55]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[5]_i_1 
       (.I0(\bdin[5]_i_2_n_0 ),
        .I1(\bdin[5]_i_3_n_0 ),
        .I2(\bdin[21]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[37]_i_2_n_0 ),
        .O(bdin[5]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[5]_i_2 
       (.I0(\pdin_reg[63] [21]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [5]),
        .O(\bdin[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[5]_i_3 
       (.I0(\pdin_reg[63] [5]),
        .I1(\pdin_reg[63] [13]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[5]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    \bdin[63]_i_1 
       (.I0(pulse_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .O(bcnt0));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[6]_i_1 
       (.I0(\bdin[6]_i_2_n_0 ),
        .I1(\bdin[6]_i_3_n_0 ),
        .I2(\bdin[22]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[38]_i_2_n_0 ),
        .O(bdin[6]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[6]_i_2 
       (.I0(\pdin_reg[63] [22]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [6]),
        .O(\bdin[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[6]_i_3 
       (.I0(\pdin_reg[63] [6]),
        .I1(\pdin_reg[63] [14]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[7]_i_1 
       (.I0(\bdin[7]_i_2_n_0 ),
        .I1(\bdin[7]_i_3_n_0 ),
        .I2(\bdin[23]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[39]_i_2_n_0 ),
        .O(bdin[7]));
  LUT5 #(
    .INIT(32'h200F2000)) 
    \bdin[7]_i_2 
       (.I0(\pdin_reg[63] [23]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [7]),
        .O(\bdin[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000CA0)) 
    \bdin[7]_i_3 
       (.I0(\pdin_reg[63] [7]),
        .I1(\pdin_reg[63] [15]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[8]_i_1 
       (.I0(\bdin[8]_i_2_n_0 ),
        .I1(\bdin[8]_i_3_n_0 ),
        .I2(\bdin[24]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[40]_i_2_n_0 ),
        .O(bdin[8]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[8]_i_2 
       (.I0(\pdin_reg[63] [16]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep ),
        .I4(\wdata_reg[55] [8]),
        .O(\bdin[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[8]_i_3 
       (.I0(\pdin_reg[63] [24]),
        .I1(\pdin_reg[63] [8]),
        .I2(\rbytes_reg_reg[0]_rep ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEEF0EE00EEF0EE)) 
    \bdin[9]_i_1 
       (.I0(\bdin[9]_i_2_n_0 ),
        .I1(\bdin[9]_i_3_n_0 ),
        .I2(\bdin[25]_i_2_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep ),
        .I5(\bdin[41]_i_2_n_0 ),
        .O(bdin[9]));
  LUT5 #(
    .INIT(32'h002F0020)) 
    \bdin[9]_i_2 
       (.I0(\pdin_reg[63] [17]),
        .I1(\state_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\wdata_reg[55] [9]),
        .O(\bdin[9]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000A0C0)) 
    \bdin[9]_i_3 
       (.I0(\pdin_reg[63] [25]),
        .I1(\pdin_reg[63] [9]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\state_reg_n_0_[0] ),
        .O(\bdin[9]_i_3_n_0 ));
  FDRE \bdin_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[0]),
        .Q(p_1_in59_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[10] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[10]),
        .Q(p_4_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[11] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[11]),
        .Q(p_3_in33_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[12] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[12]),
        .Q(p_2_in14_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[13] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[13]),
        .Q(p_5_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[14] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[14]),
        .Q(p_4_in15_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[15] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[15]),
        .Q(p_6_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[16] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[16]),
        .Q(p_7_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[17] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[17]),
        .Q(p_6_in16_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[18] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[18]),
        .Q(p_8_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[19] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[19]),
        .Q(p_9_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[1] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[1]),
        .Q(p_1_in113_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[20] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[20]),
        .Q(p_9_in67_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[21] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[21]),
        .Q(p_9_in61_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[22] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[22]),
        .Q(p_10_in55_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[23] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[23]),
        .Q(p_7_in46_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[24] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[24]),
        .Q(p_6_in34_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[25] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[25]),
        .Q(p_8_in17_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[26] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[26]),
        .Q(p_10_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[27] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[27]),
        .Q(p_9_in35_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[28] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[28]),
        .Q(p_10_in18_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[29] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[29]),
        .Q(p_11_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[2]),
        .Q(p_1_in98_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[30] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[30]),
        .Q(p_12_in19_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[31] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[31]),
        .Q(p_12_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[32] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[32]),
        .Q(p_13_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[33] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[33]),
        .Q(p_14_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[34] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[34]),
        .Q(p_15_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[35] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[35]),
        .Q(p_16_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[36] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[36]),
        .Q(p_14_in20_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[37] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[37]),
        .Q(p_17_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[38] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[38]),
        .Q(p_18_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[39] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[39]),
        .Q(p_19_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[3]),
        .Q(p_1_in73_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[40] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[40]),
        .Q(p_19_in72_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[41] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[41]),
        .Q(p_17_in68_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[42] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[42]),
        .Q(p_17_in62_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[43] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[43]),
        .Q(p_20_in56_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[44] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[44]),
        .Q(p_17_in47_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[45] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[45]),
        .Q(p_16_in36_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[46] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[46]),
        .Q(p_16_in21_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[47] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[47]),
        .Q(p_20_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[48] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[48]),
        .Q(p_20_in48_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[48]_i_1 
       (.I0(\bdin[48]_i_2_n_0 ),
        .I1(\wdata_reg[16]_0 ),
        .O(bdin[48]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[49] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[49]),
        .Q(p_19_in37_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[49]_i_1 
       (.I0(\bdin[49]_i_2_n_0 ),
        .I1(\wdata_reg[17]_0 ),
        .O(bdin[49]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[4]),
        .Q(p_0_in53_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[50] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[50]),
        .Q(p_18_in22_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[50]_i_1 
       (.I0(\bdin[50]_i_2_n_0 ),
        .I1(\wdata_reg[18]_0 ),
        .O(bdin[50]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[51] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[51]),
        .Q(p_21_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[51]_i_1 
       (.I0(\bdin[51]_i_2_n_0 ),
        .I1(\wdata_reg[19]_0 ),
        .O(bdin[51]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[52] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[52]),
        .Q(p_20_in23_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[52]_i_1 
       (.I0(\bdin[52]_i_2_n_0 ),
        .I1(\wdata_reg[20]_0 ),
        .O(bdin[52]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[53] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[53]),
        .Q(p_22_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[53]_i_1 
       (.I0(\bdin[53]_i_2_n_0 ),
        .I1(\wdata_reg[21]_0 ),
        .O(bdin[53]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[54] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[54]),
        .Q(p_23_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[54]_i_1 
       (.I0(\bdin[54]_i_2_n_0 ),
        .I1(\wdata_reg[22]_0 ),
        .O(bdin[54]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[55] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[55]),
        .Q(p_22_in38_in),
        .R(\new_crc_reg[0]_0 ));
  MUXF7 \bdin_reg[55]_i_1 
       (.I0(\bdin[55]_i_2_n_0 ),
        .I1(\wdata_reg[23]_0 ),
        .O(bdin[55]),
        .S(\rbytes_reg_reg[2] [1]));
  FDRE \bdin_reg[56] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [0]),
        .Q(p_22_in24_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[57] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [1]),
        .Q(p_24_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[58] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [2]),
        .Q(p_24_in63_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[59] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [3]),
        .Q(p_28_in57_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[5]),
        .Q(p_0_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[60] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [4]),
        .Q(p_26_in49_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[61] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [5]),
        .Q(p_25_in39_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[62] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [6]),
        .Q(p_24_in25_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[63] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg_reg[2]_1 [7]),
        .Q(\bdin_reg_n_0_[63] ),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[6]),
        .Q(p_3_in54_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[7]),
        .Q(p_2_in45_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[8] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[8]),
        .Q(p_2_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \bdin_reg[9] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdin[9]),
        .Q(p_3_in),
        .R(\new_crc_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hAAAAFCFFAAAA0C00)) 
    last_int__i_1
       (.I0(crc_last_),
        .I1(last_int__i_2_n_0),
        .I2(\crc_cnt_reg[15] ),
        .I3(\wcnt_reg[15] ),
        .I4(mode_1G),
        .I5(last_int_),
        .O(last_int__i_1_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    last_int__i_2
       (.I0(Q),
        .I1(pulse_1),
        .O(last_int__i_2_n_0));
  FDSE last_int__reg
       (.C(lclk),
        .CE(1'b1),
        .D(last_int__i_1_n_0),
        .Q(last_int_),
        .S(\new_crc_reg[0]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    m_axis_tvalid_i_1
       (.I0(rst_),
        .O(\new_crc_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hBFB0B0BFB0BFBFB0)) 
    \new_crc[0]_i_1 
       (.I0(\new_crc[28]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[0]_i_2_n_0 ),
        .I4(\new_crc[0]_i_3_n_0 ),
        .I5(\new_crc[0]_i_4_n_0 ),
        .O(p_2_in__0[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[0]_i_10 
       (.I0(p_11_in),
        .I1(p_21_in),
        .I2(p_5_in0_in),
        .O(\new_crc[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[0]_i_2 
       (.I0(\new_crc[0]_i_5_n_0 ),
        .I1(p_17_in8_in),
        .I2(\bdin_reg_n_0_[63] ),
        .I3(p_16_in9_in),
        .I4(p_0_in),
        .I5(\new_crc[0]_i_6_n_0 ),
        .O(\new_crc[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[0]_i_3 
       (.I0(\new_crc[24]_i_9_n_0 ),
        .I1(\new_crc[0]_i_7_n_0 ),
        .I2(p_5_in),
        .I3(p_15_in),
        .I4(p_21_in6_in),
        .I5(p_11_in2_in),
        .O(\new_crc[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[0]_i_4 
       (.I0(\new_crc[0]_i_8_n_0 ),
        .I1(p_26_in),
        .I2(p_27_in10_in),
        .I3(p_10_in3_in),
        .I4(p_8_in),
        .I5(p_18_in),
        .O(\new_crc[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[0]_i_5 
       (.I0(p_2_in),
        .I1(p_3_in),
        .I2(p_17_in),
        .I3(p_24_in),
        .O(\new_crc[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[0]_i_6 
       (.I0(p_14_in),
        .I1(p_24_in11_in),
        .I2(\new_crc[1]_i_10_n_0 ),
        .I3(\new_crc[0]_i_9_n_0 ),
        .I4(p_23_in),
        .I5(p_109_in),
        .O(\new_crc[0]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[0]_i_7 
       (.I0(p_29_in),
        .I1(p_4_in),
        .I2(p_18_in7_in),
        .O(\new_crc[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[0]_i_8 
       (.I0(\new_crc_reg_n_0_[0] ),
        .I1(p_19_in),
        .I2(p_12_in),
        .I3(\new_crc[0]_i_10_n_0 ),
        .I4(p_10_in),
        .I5(p_22_in),
        .O(\new_crc[0]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[0]_i_9 
       (.I0(p_13_in),
        .I1(p_2_in1_in),
        .I2(p_9_in),
        .O(\new_crc[0]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT5 #(
    .INIT(32'h4BFF4B00)) 
    \new_crc[10]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(nextCRC32_D64_return[10]),
        .O(p_2_in__0[10]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_10 
       (.I0(p_12_in19_in),
        .I1(p_6_in26_in),
        .I2(p_9_in61_in),
        .I3(p_13_in64_in),
        .I4(p_27_in10_in),
        .I5(p_26_in49_in),
        .O(\new_crc[10]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_2 
       (.I0(p_24_in63_in),
        .I1(p_79_in),
        .I2(\new_crc_reg_n_0_[0] ),
        .I3(\new_crc[10]_i_4_n_0 ),
        .I4(\new_crc[10]_i_5_n_0 ),
        .I5(\new_crc[10]_i_6_n_0 ),
        .O(nextCRC32_D64_return[10]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_3 
       (.I0(p_2_in45_in),
        .I1(p_0_in53_in),
        .I2(p_0_in),
        .I3(p_1_in59_in),
        .I4(p_1_in113_in),
        .I5(p_1_in73_in),
        .O(p_79_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_4 
       (.I0(\new_crc[10]_i_7_n_0 ),
        .I1(p_38_in),
        .I2(p_24_in11_in),
        .I3(p_25_in),
        .I4(p_23_in),
        .I5(\new_crc[10]_i_8_n_0 ),
        .O(\new_crc[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_5 
       (.I0(p_29_in),
        .I1(p_0_in41_in),
        .I2(\new_crc[10]_i_9_n_0 ),
        .I3(\new_crc[24]_i_14_n_0 ),
        .I4(p_15_in),
        .I5(p_16_in9_in),
        .O(\new_crc[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_6 
       (.I0(p_17_in),
        .I1(p_6_in34_in),
        .I2(\new_crc[3]_i_5_n_0 ),
        .I3(\new_crc[1]_i_10_n_0 ),
        .I4(p_17_in47_in),
        .I5(p_25_in39_in),
        .O(\new_crc[10]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_7 
       (.I0(p_12_in),
        .I1(p_18_in22_in),
        .I2(p_10_in18_in),
        .I3(p_4_in27_in),
        .I4(p_7_in46_in),
        .I5(p_15_in50_in),
        .O(\new_crc[10]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[10]_i_8 
       (.I0(\new_crc[10]_i_10_n_0 ),
        .I1(p_3_in33_in),
        .I2(p_5_in),
        .I3(p_21_in6_in),
        .I4(p_19_in42_in),
        .I5(p_28_in),
        .O(\new_crc[10]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[10]_i_9 
       (.I0(p_13_in),
        .I1(\bdin_reg_n_0_[63] ),
        .O(\new_crc[10]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[11]_i_1 
       (.I0(init_value[11]),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[11]_i_3_n_0 ),
        .I3(\new_crc[11]_i_4_n_0 ),
        .I4(\new_crc[11]_i_5_n_0 ),
        .I5(\new_crc[11]_i_6_n_0 ),
        .O(p_2_in__0[11]));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[11]_i_10 
       (.I0(p_9_in),
        .I1(p_19_in),
        .I2(p_28_in57_in),
        .I3(p_13_in),
        .O(\new_crc[11]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[11]_i_11 
       (.I0(p_20_in56_in),
        .I1(\bdin_reg_n_0_[63] ),
        .I2(p_20_in48_in),
        .I3(p_21_in),
        .O(\new_crc[11]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[11]_i_12 
       (.I0(p_7_in46_in),
        .I1(p_14_in58_in),
        .I2(p_15_in50_in),
        .I3(p_26_in49_in),
        .O(\new_crc[11]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT3 #(
    .INIT(8'hE1)) 
    \new_crc[11]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .O(init_value[11]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[11]_i_3 
       (.I0(p_0_in),
        .I1(p_0_in53_in),
        .I2(p_3_in54_in),
        .I3(p_11_in2_in),
        .I4(p_16_in21_in),
        .I5(p_24_in25_in),
        .O(\new_crc[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[11]_i_4 
       (.I0(p_28_in),
        .I1(p_29_in),
        .I2(p_2_in14_in),
        .I3(p_20_in),
        .I4(p_16_in),
        .I5(\new_crc[11]_i_7_n_0 ),
        .O(\new_crc[11]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[11]_i_5 
       (.I0(p_21_in6_in),
        .I1(p_23_in5_in),
        .I2(p_6_in),
        .I3(\new_crc[24]_i_8_n_0 ),
        .I4(\new_crc[11]_i_8_n_0 ),
        .O(\new_crc[11]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[11]_i_6 
       (.I0(p_9_in67_in),
        .I1(p_9_in35_in),
        .I2(p_19_in37_in),
        .I3(p_12_in69_in),
        .I4(\new_crc[11]_i_9_n_0 ),
        .O(\new_crc[11]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[11]_i_7 
       (.I0(\new_crc[11]_i_10_n_0 ),
        .I1(p_12_in19_in),
        .I2(p_30_in),
        .I3(p_6_in26_in),
        .I4(p_8_in4_in),
        .I5(p_7_in),
        .O(\new_crc[11]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[11]_i_8 
       (.I0(p_18_in),
        .I1(p_10_in55_in),
        .I2(p_8_in),
        .I3(p_10_in3_in),
        .I4(\new_crc[11]_i_11_n_0 ),
        .I5(\new_crc[11]_i_12_n_0 ),
        .O(\new_crc[11]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[11]_i_9 
       (.I0(p_23_in),
        .I1(p_3_in40_in),
        .I2(\new_crc[3]_i_7_n_0 ),
        .I3(p_16_in9_in),
        .I4(p_17_in),
        .I5(p_2_in),
        .O(\new_crc[11]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h6D006DFF6DFF6D00)) 
    \new_crc[12]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__0 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[12]_i_2_n_0 ),
        .I5(\new_crc[12]_i_3_n_0 ),
        .O(p_2_in__0[12]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[12]_i_10 
       (.I0(p_30_in),
        .I1(\new_crc[21]_i_9_n_0 ),
        .I2(\new_crc[15]_i_8_n_0 ),
        .I3(\new_crc[9]_i_9_n_0 ),
        .I4(\new_crc[23]_i_8_n_0 ),
        .I5(\new_crc[19]_i_8_n_0 ),
        .O(\new_crc[12]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[12]_i_2 
       (.I0(p_17_in62_in),
        .I1(p_128_in),
        .I2(p_13_in),
        .I3(\bdin_reg_n_0_[63] ),
        .I4(p_24_in63_in),
        .I5(p_19_in),
        .O(\new_crc[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[12]_i_3 
       (.I0(\new_crc[12]_i_5_n_0 ),
        .I1(\new_crc[12]_i_6_n_0 ),
        .I2(p_28_in57_in),
        .I3(p_20_in48_in),
        .I4(\new_crc[12]_i_7_n_0 ),
        .I5(\new_crc[12]_i_8_n_0 ),
        .O(\new_crc[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[12]_i_4 
       (.I0(p_1_in59_in),
        .I1(p_1_in98_in),
        .I2(p_0_in53_in),
        .O(p_128_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[12]_i_5 
       (.I0(\new_crc[4]_i_2_n_0 ),
        .I1(p_3_in),
        .I2(p_24_in),
        .I3(p_38_in),
        .I4(p_14_in20_in),
        .I5(\new_crc[28]_i_14_n_0 ),
        .O(\new_crc[12]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[12]_i_6 
       (.I0(p_24_in25_in),
        .I1(p_16_in21_in),
        .O(\new_crc[12]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[12]_i_7 
       (.I0(p_2_in14_in),
        .I1(p_17_in8_in),
        .I2(p_2_in45_in),
        .I3(p_6_in16_in),
        .O(\new_crc[12]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[12]_i_8 
       (.I0(\new_crc[12]_i_9_n_0 ),
        .I1(p_9_in28_in),
        .I2(p_23_in),
        .I3(p_3_in54_in),
        .I4(p_18_in22_in),
        .I5(\new_crc[12]_i_10_n_0 ),
        .O(\new_crc[12]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[12]_i_9 
       (.I0(p_26_in),
        .I1(p_10_in55_in),
        .I2(p_21_in),
        .I3(p_14_in58_in),
        .I4(p_28_in),
        .I5(\new_crc[21]_i_12_n_0 ),
        .O(\new_crc[12]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hEFE0E0EFE0EFEFE0)) 
    \new_crc[13]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\new_crc[28]_i_3_n_0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[13]_i_2_n_0 ),
        .I4(\new_crc[13]_i_3_n_0 ),
        .I5(\new_crc[13]_i_4_n_0 ),
        .O(p_2_in__0[13]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[13]_i_10 
       (.I0(\new_crc[22]_i_10_n_0 ),
        .I1(p_9_in61_in),
        .I2(p_13_in),
        .I3(p_24_in25_in),
        .I4(p_26_in49_in),
        .I5(\new_crc_reg_n_0_[0] ),
        .O(\new_crc[13]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[13]_i_11 
       (.I0(\new_crc[31]_i_14_n_0 ),
        .I1(\new_crc[3]_i_7_n_0 ),
        .I2(p_22_in),
        .I3(p_3_in54_in),
        .I4(p_16_in),
        .I5(p_12_in),
        .O(\new_crc[13]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[13]_i_2 
       (.I0(p_18_in),
        .I1(p_1_in113_in),
        .I2(p_1_in73_in),
        .I3(p_22_in24_in),
        .I4(\new_crc[13]_i_5_n_0 ),
        .O(\new_crc[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[13]_i_3 
       (.I0(p_21_in6_in),
        .I1(p_19_in42_in),
        .I2(p_8_in4_in),
        .I3(p_7_in),
        .I4(\new_crc[13]_i_6_n_0 ),
        .I5(\new_crc[13]_i_7_n_0 ),
        .O(\new_crc[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[13]_i_4 
       (.I0(p_20_in),
        .I1(p_25_in),
        .I2(\new_crc[4]_i_2_n_0 ),
        .I3(\new_crc[13]_i_8_n_0 ),
        .I4(p_18_in22_in),
        .I5(p_29_in),
        .O(\new_crc[13]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[13]_i_5 
       (.I0(\new_crc[13]_i_9_n_0 ),
        .I1(p_24_in63_in),
        .I2(p_2_in14_in),
        .I3(p_24_in),
        .I4(p_17_in47_in),
        .I5(\new_crc[24]_i_14_n_0 ),
        .O(\new_crc[13]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[13]_i_6 
       (.I0(p_23_in5_in),
        .I1(p_6_in),
        .O(\new_crc[13]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[13]_i_7 
       (.I0(p_17_in68_in),
        .I1(p_20_in30_in),
        .I2(\new_crc[13]_i_10_n_0 ),
        .I3(\new_crc[13]_i_11_n_0 ),
        .I4(p_5_in),
        .I5(p_13_in64_in),
        .O(\new_crc[13]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[13]_i_8 
       (.I0(p_3_in33_in),
        .I1(p_4_in),
        .I2(p_18_in7_in),
        .O(\new_crc[13]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[13]_i_9 
       (.I0(p_0_in),
        .I1(p_16_in9_in),
        .O(\new_crc[13]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h5D005DFF5DFF5D00)) 
    \new_crc[14]_i_1 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[14]_i_2_n_0 ),
        .I5(\new_crc[14]_i_3_n_0 ),
        .O(p_2_in__0[14]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[14]_i_2 
       (.I0(p_129_in),
        .I1(\new_crc[14]_i_4_n_0 ),
        .I2(p_16_in21_in),
        .I3(p_20_in48_in),
        .I4(p_3_in),
        .I5(p_17_in8_in),
        .O(\new_crc[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[14]_i_3 
       (.I0(p_20_in56_in),
        .I1(\new_crc_reg_n_0_[0] ),
        .I2(p_12_in),
        .I3(\new_crc[14]_i_5_n_0 ),
        .I4(\new_crc[14]_i_6_n_0 ),
        .I5(\new_crc[14]_i_7_n_0 ),
        .O(\new_crc[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[14]_i_4 
       (.I0(p_24_in11_in),
        .I1(p_17_in47_in),
        .I2(p_12_in69_in),
        .I3(p_9_in67_in),
        .I4(p_20_in23_in),
        .O(\new_crc[14]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[14]_i_5 
       (.I0(p_6_in26_in),
        .I1(p_12_in19_in),
        .I2(p_26_in49_in),
        .O(\new_crc[14]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[14]_i_6 
       (.I0(p_2_in14_in),
        .I1(p_22_in38_in),
        .I2(\new_crc[14]_i_8_n_0 ),
        .I3(p_11_in2_in),
        .I4(p_9_in),
        .I5(\new_crc[14]_i_9_n_0 ),
        .O(\new_crc[14]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[14]_i_7 
       (.I0(\new_crc[30]_i_7_n_0 ),
        .I1(\new_crc[9]_i_9_n_0 ),
        .I2(p_19_in72_in),
        .I3(p_22_in24_in),
        .I4(p_22_in29_in),
        .I5(p_4_in15_in),
        .O(\new_crc[14]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[14]_i_8 
       (.I0(p_15_in),
        .I1(p_38_in),
        .I2(p_17_in),
        .O(\new_crc[14]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[14]_i_9 
       (.I0(p_16_in9_in),
        .I1(p_24_in),
        .I2(p_25_in39_in),
        .I3(p_2_in),
        .I4(p_19_in37_in),
        .O(\new_crc[14]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hC100C1FFC1FFC100)) 
    \new_crc[15]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[15]_i_2_n_0 ),
        .I5(\new_crc[15]_i_3_n_0 ),
        .O(p_2_in__0[15]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[15]_i_2 
       (.I0(p_8_in),
        .I1(p_22_in24_in),
        .I2(p_11_in),
        .I3(p_5_in0_in),
        .I4(p_10_in3_in),
        .I5(p_17_in62_in),
        .O(\new_crc[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[15]_i_3 
       (.I0(\new_crc[15]_i_4_n_0 ),
        .I1(\new_crc[15]_i_5_n_0 ),
        .I2(\new_crc[17]_i_4_n_0 ),
        .I3(p_14_in),
        .I4(p_38_in),
        .I5(\new_crc[15]_i_6_n_0 ),
        .O(\new_crc[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[15]_i_4 
       (.I0(p_20_in56_in),
        .I1(p_28_in57_in),
        .I2(p_20_in48_in),
        .I3(p_21_in),
        .I4(\new_crc[31]_i_10_n_0 ),
        .I5(\new_crc[15]_i_7_n_0 ),
        .O(\new_crc[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[15]_i_5 
       (.I0(\new_crc[15]_i_8_n_0 ),
        .I1(p_27_in10_in),
        .I2(p_28_in),
        .I3(\new_crc[31]_i_13_n_0 ),
        .I4(p_30_in),
        .I5(\new_crc[21]_i_9_n_0 ),
        .O(\new_crc[15]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[15]_i_6 
       (.I0(p_0_in53_in),
        .I1(p_1_in73_in),
        .I2(p_1_in113_in),
        .I3(p_3_in54_in),
        .I4(p_25_in),
        .I5(\new_crc[14]_i_5_n_0 ),
        .O(\new_crc[15]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[15]_i_7 
       (.I0(p_16_in9_in),
        .I1(p_3_in),
        .I2(p_17_in8_in),
        .I3(p_2_in45_in),
        .I4(\new_crc[15]_i_9_n_0 ),
        .O(\new_crc[15]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[15]_i_8 
       (.I0(p_3_in33_in),
        .I1(p_5_in),
        .I2(p_21_in6_in),
        .O(\new_crc[15]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[15]_i_9 
       (.I0(p_16_in36_in),
        .I1(p_2_in),
        .I2(p_20_in),
        .I3(p_22_in38_in),
        .O(\new_crc[15]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0B0BFB0BFBFB0)) 
    \new_crc[16]_i_1 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[16]_i_2_n_0 ),
        .I4(\new_crc[16]_i_3_n_0 ),
        .I5(\new_crc[16]_i_4_n_0 ),
        .O(p_2_in__0[16]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[16]_i_2 
       (.I0(p_21_in),
        .I1(p_16_in21_in),
        .I2(p_9_in),
        .I3(\bdin_reg_n_0_[63] ),
        .I4(\new_crc[16]_i_5_n_0 ),
        .I5(\new_crc[21]_i_8_n_0 ),
        .O(\new_crc[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[16]_i_3 
       (.I0(p_17_in62_in),
        .I1(\new_crc_reg_n_0_[0] ),
        .I2(p_17_in68_in),
        .I3(p_19_in),
        .I4(p_11_in2_in),
        .I5(\new_crc[21]_i_5_n_0 ),
        .O(\new_crc[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[16]_i_4 
       (.I0(\new_crc[16]_i_6_n_0 ),
        .I1(p_17_in),
        .I2(p_10_in),
        .I3(p_22_in38_in),
        .I4(p_17_in47_in),
        .I5(\new_crc[16]_i_7_n_0 ),
        .O(\new_crc[16]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[16]_i_5 
       (.I0(p_6_in16_in),
        .I1(p_2_in45_in),
        .O(\new_crc[16]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[16]_i_6 
       (.I0(p_38_in),
        .I1(p_14_in),
        .I2(p_18_in22_in),
        .I3(p_9_in28_in),
        .O(\new_crc[16]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[16]_i_7 
       (.I0(p_4_in27_in),
        .I1(p_10_in18_in),
        .I2(p_28_in57_in),
        .I3(p_12_in),
        .I4(p_3_in54_in),
        .I5(\new_crc[16]_i_8_n_0 ),
        .O(\new_crc[16]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[16]_i_8 
       (.I0(p_7_in),
        .I1(p_8_in4_in),
        .I2(p_30_in),
        .I3(p_20_in30_in),
        .I4(p_23_in5_in),
        .I5(p_6_in),
        .O(\new_crc[16]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h470047FF47FF4700)) 
    \new_crc[17]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[17]_i_2_n_0 ),
        .I5(\new_crc[17]_i_3_n_0 ),
        .O(p_2_in__0[17]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[17]_i_2 
       (.I0(p_24_in25_in),
        .I1(p_9_in35_in),
        .I2(p_24_in63_in),
        .I3(\new_crc[17]_i_4_n_0 ),
        .I4(p_3_in40_in),
        .I5(p_16_in36_in),
        .O(\new_crc[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[17]_i_3 
       (.I0(\new_crc[17]_i_5_n_0 ),
        .I1(\new_crc[25]_i_8_n_0 ),
        .I2(p_3_in33_in),
        .I3(p_29_in),
        .I4(\new_crc[17]_i_6_n_0 ),
        .I5(\new_crc[26]_i_10_n_0 ),
        .O(\new_crc[17]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[17]_i_4 
       (.I0(p_14_in20_in),
        .I1(p_23_in),
        .O(\new_crc[17]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[17]_i_5 
       (.I0(p_8_in),
        .I1(p_10_in3_in),
        .O(\new_crc[17]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[17]_i_6 
       (.I0(p_19_in37_in),
        .I1(p_24_in),
        .I2(p_3_in54_in),
        .I3(p_13_in),
        .I4(p_18_in22_in),
        .I5(\new_crc[4]_i_6_n_0 ),
        .O(\new_crc[17]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[18]_i_1 
       (.I0(init_value[10]),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(p_17_in),
        .I3(p_0_in53_in),
        .I4(p_0_in),
        .I5(\new_crc[18]_i_3_n_0 ),
        .O(p_2_in__0[18]));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'h4B)) 
    \new_crc[18]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\rbytes_reg_reg[2] [0]),
        .O(init_value[10]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[18]_i_3 
       (.I0(\new_crc[18]_i_4_n_0 ),
        .I1(p_21_in6_in),
        .I2(\new_crc[18]_i_5_n_0 ),
        .I3(p_5_in),
        .I4(\new_crc[19]_i_8_n_0 ),
        .I5(\new_crc[18]_i_6_n_0 ),
        .O(\new_crc[18]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[18]_i_4 
       (.I0(p_24_in),
        .I1(p_19_in37_in),
        .I2(\new_crc[26]_i_5_n_0 ),
        .I3(p_25_in39_in),
        .I4(p_16_in),
        .I5(\new_crc[18]_i_7_n_0 ),
        .O(\new_crc[18]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[18]_i_5 
       (.I0(p_22_in24_in),
        .I1(p_19_in72_in),
        .O(\new_crc[18]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[18]_i_6 
       (.I0(p_28_in),
        .I1(p_29_in),
        .I2(p_11_in),
        .I3(p_5_in0_in),
        .I4(\new_crc[13]_i_6_n_0 ),
        .I5(\new_crc[21]_i_9_n_0 ),
        .O(\new_crc[18]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[18]_i_7 
       (.I0(p_2_in1_in),
        .I1(p_13_in),
        .I2(\new_crc[30]_i_8_n_0 ),
        .I3(\new_crc[7]_i_6_n_0 ),
        .I4(p_17_in62_in),
        .I5(p_12_in),
        .O(\new_crc[18]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h7F70707F707F7F70)) 
    \new_crc[19]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[19]_i_2_n_0 ),
        .I4(\new_crc[19]_i_3_n_0 ),
        .I5(\new_crc[19]_i_4_n_0 ),
        .O(p_2_in__0[19]));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[19]_i_10 
       (.I0(p_12_in),
        .I1(p_19_in),
        .I2(\new_crc_reg_n_0_[0] ),
        .O(\new_crc[19]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[19]_i_2 
       (.I0(p_15_in),
        .I1(p_20_in),
        .I2(p_0_in53_in),
        .I3(p_1_in73_in),
        .I4(\new_crc[19]_i_5_n_0 ),
        .O(\new_crc[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[19]_i_3 
       (.I0(\new_crc[19]_i_6_n_0 ),
        .I1(p_28_in),
        .I2(\new_crc[23]_i_8_n_0 ),
        .I3(\new_crc[19]_i_7_n_0 ),
        .I4(\new_crc[19]_i_8_n_0 ),
        .I5(p_5_in),
        .O(\new_crc[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[19]_i_4 
       (.I0(\new_crc[19]_i_9_n_0 ),
        .I1(p_26_in49_in),
        .I2(p_27_in10_in),
        .I3(p_4_in27_in),
        .I4(p_10_in18_in),
        .I5(\new_crc[25]_i_8_n_0 ),
        .O(\new_crc[19]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[19]_i_5 
       (.I0(p_20_in48_in),
        .I1(p_14_in20_in),
        .I2(p_8_in17_in),
        .I3(p_17_in8_in),
        .I4(p_3_in),
        .O(\new_crc[19]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[19]_i_6 
       (.I0(p_7_in46_in),
        .I1(p_20_in56_in),
        .I2(p_22_in24_in),
        .I3(p_18_in),
        .I4(p_21_in6_in),
        .O(\new_crc[19]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[19]_i_7 
       (.I0(p_20_in30_in),
        .I1(p_17_in68_in),
        .O(\new_crc[19]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[19]_i_8 
       (.I0(p_4_in15_in),
        .I1(p_22_in29_in),
        .O(\new_crc[19]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[19]_i_9 
       (.I0(p_15_in50_in),
        .I1(p_1_in),
        .I2(p_20_in23_in),
        .I3(p_2_in14_in),
        .I4(p_22_in38_in),
        .I5(\new_crc[19]_i_10_n_0 ),
        .O(\new_crc[19]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[1]_i_1 
       (.I0(init_value[1]),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[1]_i_3_n_0 ),
        .I3(\new_crc[1]_i_4_n_0 ),
        .I4(\new_crc[1]_i_5_n_0 ),
        .I5(\new_crc[1]_i_6_n_0 ),
        .O(p_2_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[1]_i_10 
       (.I0(p_16_in),
        .I1(p_20_in),
        .O(\new_crc[1]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[1]_i_11 
       (.I0(p_25_in),
        .I1(p_20_in23_in),
        .O(\new_crc[1]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT3 #(
    .INIT(8'hC5)) 
    \new_crc[1]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .O(init_value[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[1]_i_3 
       (.I0(p_79_in),
        .I1(p_22_in24_in),
        .I2(p_2_in1_in),
        .I3(p_19_in),
        .I4(p_11_in),
        .I5(p_5_in0_in),
        .O(\new_crc[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[1]_i_4 
       (.I0(\new_crc[1]_i_7_n_0 ),
        .I1(\new_crc[19]_i_8_n_0 ),
        .I2(\new_crc[23]_i_8_n_0 ),
        .I3(p_20_in30_in),
        .I4(p_5_in),
        .I5(\new_crc[1]_i_8_n_0 ),
        .O(\new_crc[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[1]_i_5 
       (.I0(\bdin_reg_n_0_[63] ),
        .I1(p_29_in),
        .I2(\new_crc[5]_i_8_n_0 ),
        .I3(\new_crc[12]_i_6_n_0 ),
        .I4(p_21_in),
        .I5(p_8_in17_in),
        .O(\new_crc[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[1]_i_6 
       (.I0(p_10_in),
        .I1(p_24_in),
        .I2(\new_crc[1]_i_9_n_0 ),
        .I3(p_24_in11_in),
        .I4(p_38_in),
        .I5(\new_crc[1]_i_10_n_0 ),
        .O(\new_crc[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[1]_i_7 
       (.I0(\new_crc[1]_i_11_n_0 ),
        .I1(\new_crc[17]_i_4_n_0 ),
        .I2(p_18_in22_in),
        .I3(\new_crc[21]_i_10_n_0 ),
        .I4(p_1_in),
        .I5(p_9_in28_in),
        .O(\new_crc[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[1]_i_8 
       (.I0(p_27_in10_in),
        .I1(\new_crc[25]_i_8_n_0 ),
        .I2(p_18_in7_in),
        .I3(p_4_in),
        .I4(p_21_in6_in),
        .I5(p_28_in),
        .O(\new_crc[1]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[1]_i_9 
       (.I0(p_2_in14_in),
        .I1(p_6_in16_in),
        .O(\new_crc[1]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h4774744774474774)) 
    \new_crc[20]_i_1 
       (.I0(\new_crc[20]_i_2_n_0 ),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[20]_i_3_n_0 ),
        .I3(\new_crc[20]_i_4_n_0 ),
        .I4(\new_crc[20]_i_5_n_0 ),
        .I5(\new_crc[20]_i_6_n_0 ),
        .O(p_2_in__0[20]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[20]_i_10 
       (.I0(p_0_in41_in),
        .I1(p_16_in21_in),
        .I2(p_16_in9_in),
        .I3(p_2_in14_in),
        .O(\new_crc[20]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \new_crc[20]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .O(\new_crc[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[20]_i_3 
       (.I0(\new_crc[20]_i_7_n_0 ),
        .I1(p_26_in),
        .I2(p_3_in33_in),
        .I3(p_18_in),
        .I4(p_27_in10_in),
        .I5(\new_crc[20]_i_8_n_0 ),
        .O(\new_crc[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[20]_i_4 
       (.I0(p_23_in),
        .I1(p_14_in),
        .I2(p_12_in19_in),
        .I3(p_6_in26_in),
        .I4(p_1_in98_in),
        .I5(p_1_in73_in),
        .O(\new_crc[20]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[20]_i_5 
       (.I0(p_23_in5_in),
        .I1(p_6_in),
        .I2(p_21_in6_in),
        .I3(p_5_in),
        .I4(p_20_in30_in),
        .I5(p_19_in42_in),
        .O(\new_crc[20]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[20]_i_6 
       (.I0(p_3_in40_in),
        .I1(p_17_in),
        .I2(p_2_in),
        .I3(p_9_in35_in),
        .I4(\new_crc[20]_i_9_n_0 ),
        .O(\new_crc[20]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[20]_i_7 
       (.I0(p_14_in58_in),
        .I1(p_10_in55_in),
        .I2(p_11_in),
        .I3(p_17_in62_in),
        .O(\new_crc[20]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[20]_i_8 
       (.I0(p_28_in57_in),
        .I1(p_21_in),
        .I2(p_19_in72_in),
        .I3(p_5_in0_in),
        .I4(\new_crc[20]_i_10_n_0 ),
        .O(\new_crc[20]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[20]_i_9 
       (.I0(p_22_in38_in),
        .I1(p_6_in34_in),
        .I2(p_20_in),
        .I3(p_16_in),
        .O(\new_crc[20]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0B0BFB0BFBFB0)) 
    \new_crc[21]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[21]_i_2_n_0 ),
        .I4(\new_crc[21]_i_3_n_0 ),
        .I5(\new_crc[21]_i_4_n_0 ),
        .O(p_2_in__0[21]));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[21]_i_10 
       (.I0(p_10_in18_in),
        .I1(p_4_in27_in),
        .O(\new_crc[21]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[21]_i_11 
       (.I0(p_10_in),
        .I1(p_18_in22_in),
        .I2(p_19_in),
        .I3(p_25_in),
        .I4(\new_crc[21]_i_12_n_0 ),
        .I5(p_26_in),
        .O(\new_crc[21]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[21]_i_12 
       (.I0(p_9_in61_in),
        .I1(p_13_in64_in),
        .O(\new_crc[21]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[21]_i_2 
       (.I0(\new_crc[21]_i_5_n_0 ),
        .I1(\new_crc[21]_i_6_n_0 ),
        .I2(\new_crc[21]_i_7_n_0 ),
        .I3(p_16_in21_in),
        .I4(p_13_in),
        .I5(\new_crc[21]_i_8_n_0 ),
        .O(\new_crc[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[21]_i_3 
       (.I0(p_3_in33_in),
        .I1(\new_crc[21]_i_9_n_0 ),
        .I2(p_5_in0_in),
        .I3(p_11_in),
        .I4(\new_crc[21]_i_10_n_0 ),
        .I5(\new_crc[25]_i_9_n_0 ),
        .O(\new_crc[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[21]_i_4 
       (.I0(p_22_in),
        .I1(p_1_in113_in),
        .I2(p_1_in98_in),
        .I3(p_14_in20_in),
        .I4(p_23_in),
        .I5(\new_crc[21]_i_11_n_0 ),
        .O(\new_crc[21]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[21]_i_5 
       (.I0(p_2_in1_in),
        .I1(p_24_in63_in),
        .O(\new_crc[21]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[21]_i_6 
       (.I0(p_7_in46_in),
        .I1(p_15_in50_in),
        .O(\new_crc[21]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[21]_i_7 
       (.I0(p_17_in),
        .I1(p_2_in45_in),
        .I2(p_38_in),
        .I3(p_16_in36_in),
        .O(\new_crc[21]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[21]_i_8 
       (.I0(p_15_in),
        .I1(p_2_in14_in),
        .O(\new_crc[21]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[21]_i_9 
       (.I0(p_18_in7_in),
        .I1(p_4_in),
        .O(\new_crc[21]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT5 #(
    .INIT(32'hA3FFA300)) 
    \new_crc[22]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(nextCRC32_D64_return[22]),
        .O(p_2_in__0[22]));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[22]_i_10 
       (.I0(p_27_in10_in),
        .I1(p_30_in),
        .O(\new_crc[22]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[22]_i_2 
       (.I0(\new_crc[22]_i_3_n_0 ),
        .I1(p_19_in),
        .I2(p_8_in17_in),
        .I3(p_2_in1_in),
        .I4(\new_crc[22]_i_4_n_0 ),
        .I5(\new_crc[22]_i_5_n_0 ),
        .O(nextCRC32_D64_return[22]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[22]_i_3 
       (.I0(\new_crc[17]_i_4_n_0 ),
        .I1(p_16_in36_in),
        .I2(p_20_in),
        .I3(p_116_in),
        .I4(\new_crc[24]_i_10_n_0 ),
        .I5(\new_crc[22]_i_7_n_0 ),
        .O(\new_crc[22]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[22]_i_4 
       (.I0(p_0_in),
        .I1(p_15_in),
        .I2(p_17_in47_in),
        .I3(p_17_in),
        .O(\new_crc[22]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[22]_i_5 
       (.I0(p_26_in),
        .I1(\new_crc[21]_i_10_n_0 ),
        .I2(\new_crc[17]_i_5_n_0 ),
        .I3(p_11_in),
        .I4(\new_crc[22]_i_8_n_0 ),
        .I5(\new_crc[22]_i_9_n_0 ),
        .O(\new_crc[22]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[22]_i_6 
       (.I0(p_1_in113_in),
        .I1(p_1_in98_in),
        .I2(p_1_in73_in),
        .O(p_116_in));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[22]_i_7 
       (.I0(p_20_in23_in),
        .I1(p_1_in),
        .O(\new_crc[22]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[22]_i_8 
       (.I0(\bdin_reg_n_0_[63] ),
        .I1(p_25_in),
        .I2(p_11_in2_in),
        .I3(p_13_in),
        .I4(p_9_in),
        .I5(\new_crc[9]_i_7_n_0 ),
        .O(\new_crc[22]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[22]_i_9 
       (.I0(\new_crc[22]_i_10_n_0 ),
        .I1(p_29_in),
        .I2(p_3_in33_in),
        .I3(p_19_in72_in),
        .I4(p_19_in42_in),
        .I5(\new_crc[24]_i_9_n_0 ),
        .O(\new_crc[22]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[23]_i_1 
       (.I0(\new_crc[23]_i_2_n_0 ),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[23]_i_3_n_0 ),
        .I3(\new_crc[23]_i_4_n_0 ),
        .I4(\new_crc[23]_i_5_n_0 ),
        .I5(\new_crc[23]_i_6_n_0 ),
        .O(p_2_in__0[23]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[23]_i_10 
       (.I0(\new_crc[30]_i_8_n_0 ),
        .I1(p_8_in17_in),
        .I2(p_13_in),
        .I3(p_18_in22_in),
        .I4(\bdin_reg_n_0_[63] ),
        .I5(p_25_in),
        .O(\new_crc[23]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[23]_i_11 
       (.I0(p_38_in),
        .I1(p_14_in20_in),
        .O(\new_crc[23]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \new_crc[23]_i_2 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .O(\new_crc[23]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[23]_i_3 
       (.I0(p_9_in35_in),
        .I1(p_3_in40_in),
        .I2(p_20_in56_in),
        .I3(p_20_in48_in),
        .I4(\new_crc[23]_i_7_n_0 ),
        .O(\new_crc[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[23]_i_4 
       (.I0(p_10_in18_in),
        .I1(p_4_in27_in),
        .I2(p_11_in),
        .I3(p_5_in0_in),
        .I4(\new_crc[23]_i_8_n_0 ),
        .I5(p_28_in),
        .O(\new_crc[23]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[23]_i_5 
       (.I0(p_4_in15_in),
        .I1(p_22_in29_in),
        .I2(p_21_in6_in),
        .I3(\new_crc[23]_i_9_n_0 ),
        .I4(p_5_in),
        .O(\new_crc[23]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[23]_i_6 
       (.I0(\new_crc[26]_i_6_n_0 ),
        .I1(p_1_in),
        .I2(p_16_in21_in),
        .I3(p_23_in),
        .I4(p_24_in25_in),
        .I5(\new_crc[23]_i_10_n_0 ),
        .O(\new_crc[23]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[23]_i_7 
       (.I0(p_20_in),
        .I1(p_24_in),
        .I2(\new_crc[26]_i_5_n_0 ),
        .I3(p_1_in113_in),
        .I4(p_1_in73_in),
        .I5(p_0_in53_in),
        .O(\new_crc[23]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[23]_i_8 
       (.I0(p_7_in),
        .I1(p_8_in4_in),
        .O(\new_crc[23]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[23]_i_9 
       (.I0(p_13_in64_in),
        .I1(p_27_in10_in),
        .I2(p_9_in61_in),
        .I3(\new_crc[23]_i_11_n_0 ),
        .I4(p_15_in),
        .I5(p_2_in45_in),
        .O(\new_crc[23]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0B0BFB0BFBFB0)) 
    \new_crc[24]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1 ),
        .I1(\new_crc[24]_i_2_n_0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[24]_i_3_n_0 ),
        .I4(\new_crc[24]_i_4_n_0 ),
        .I5(\new_crc[24]_i_5_n_0 ),
        .O(p_2_in__0[24]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[24]_i_10 
       (.I0(p_16_in9_in),
        .I1(\new_crc[24]_i_13_n_0 ),
        .I2(p_3_in54_in),
        .I3(p_3_in40_in),
        .I4(\new_crc[24]_i_14_n_0 ),
        .I5(\new_crc[31]_i_14_n_0 ),
        .O(\new_crc[24]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[24]_i_11 
       (.I0(p_15_in50_in),
        .I1(p_7_in46_in),
        .I2(p_2_in1_in),
        .I3(p_22_in),
        .I4(p_22_in24_in),
        .I5(p_17_in62_in),
        .O(\new_crc[24]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[24]_i_12 
       (.I0(p_12_in),
        .I1(\new_crc_reg_n_0_[0] ),
        .I2(p_20_in56_in),
        .O(\new_crc[24]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[24]_i_13 
       (.I0(p_9_in35_in),
        .I1(p_10_in),
        .O(\new_crc[24]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[24]_i_14 
       (.I0(p_2_in),
        .I1(p_19_in37_in),
        .O(\new_crc[24]_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[24]_i_2 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .O(\new_crc[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[24]_i_3 
       (.I0(p_16_in21_in),
        .I1(p_24_in25_in),
        .I2(p_6_in34_in),
        .I3(p_16_in36_in),
        .I4(p_109_in),
        .I5(p_0_in41_in),
        .O(\new_crc[24]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[24]_i_4 
       (.I0(p_27_in10_in),
        .I1(p_30_in),
        .I2(\new_crc[24]_i_7_n_0 ),
        .I3(p_21_in6_in),
        .I4(\new_crc[24]_i_8_n_0 ),
        .I5(\new_crc[24]_i_9_n_0 ),
        .O(\new_crc[24]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[24]_i_5 
       (.I0(\new_crc[30]_i_10_n_0 ),
        .I1(\new_crc[24]_i_10_n_0 ),
        .I2(p_25_in39_in),
        .I3(p_20_in),
        .I4(\new_crc[24]_i_11_n_0 ),
        .I5(\new_crc[24]_i_12_n_0 ),
        .O(\new_crc[24]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[24]_i_6 
       (.I0(p_1_in59_in),
        .I1(p_1_in98_in),
        .I2(p_1_in73_in),
        .O(p_109_in));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[24]_i_7 
       (.I0(p_4_in27_in),
        .I1(p_10_in18_in),
        .I2(p_26_in),
        .O(\new_crc[24]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[24]_i_8 
       (.I0(p_5_in),
        .I1(p_14_in20_in),
        .I2(p_20_in30_in),
        .I3(p_2_in45_in),
        .I4(p_38_in),
        .O(\new_crc[24]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[24]_i_9 
       (.I0(p_8_in4_in),
        .I1(p_7_in),
        .I2(p_6_in),
        .I3(p_23_in5_in),
        .O(\new_crc[24]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[25]_i_1 
       (.I0(\new_crc[25]_i_2_n_0 ),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[25]_i_3_n_0 ),
        .I3(\new_crc[25]_i_4_n_0 ),
        .I4(\new_crc[25]_i_5_n_0 ),
        .I5(\new_crc[25]_i_6_n_0 ),
        .O(p_2_in__0[25]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[25]_i_10 
       (.I0(p_3_in40_in),
        .I1(p_10_in),
        .I2(p_16_in36_in),
        .I3(p_17_in47_in),
        .O(\new_crc[25]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[25]_i_11 
       (.I0(p_16_in),
        .I1(p_38_in),
        .I2(p_22_in38_in),
        .I3(p_25_in39_in),
        .I4(\new_crc[25]_i_13_n_0 ),
        .O(\new_crc[25]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[25]_i_12 
       (.I0(p_2_in1_in),
        .I1(p_13_in),
        .O(\new_crc[25]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[25]_i_13 
       (.I0(p_20_in23_in),
        .I1(p_25_in),
        .I2(p_1_in98_in),
        .I3(p_1_in113_in),
        .I4(p_1_in),
        .O(\new_crc[25]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \new_crc[25]_i_2 
       (.I0(\rbytes_reg_reg[0]_rep ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .O(\new_crc[25]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[25]_i_3 
       (.I0(p_11_in2_in),
        .I1(p_16_in21_in),
        .I2(p_15_in),
        .I3(p_20_in48_in),
        .I4(p_8_in17_in),
        .O(\new_crc[25]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[25]_i_4 
       (.I0(\new_crc[25]_i_7_n_0 ),
        .I1(\new_crc[25]_i_8_n_0 ),
        .I2(p_26_in49_in),
        .I3(p_15_in50_in),
        .I4(p_7_in46_in),
        .I5(p_26_in),
        .O(\new_crc[25]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[25]_i_5 
       (.I0(p_30_in),
        .I1(p_6_in),
        .I2(p_23_in5_in),
        .I3(p_29_in),
        .I4(p_3_in33_in),
        .I5(\new_crc[25]_i_9_n_0 ),
        .O(\new_crc[25]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[25]_i_6 
       (.I0(\new_crc[25]_i_10_n_0 ),
        .I1(p_2_in45_in),
        .I2(p_2_in14_in),
        .I3(p_9_in35_in),
        .I4(p_0_in),
        .I5(\new_crc[25]_i_11_n_0 ),
        .O(\new_crc[25]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[25]_i_7 
       (.I0(\new_crc[25]_i_12_n_0 ),
        .I1(p_3_in54_in),
        .I2(p_10_in55_in),
        .I3(p_17_in62_in),
        .I4(p_14_in58_in),
        .I5(p_9_in),
        .O(\new_crc[25]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[25]_i_8 
       (.I0(p_12_in19_in),
        .I1(p_6_in26_in),
        .O(\new_crc[25]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[25]_i_9 
       (.I0(p_19_in42_in),
        .I1(p_4_in15_in),
        .I2(p_22_in29_in),
        .I3(p_17_in68_in),
        .I4(p_20_in30_in),
        .O(\new_crc[25]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h070007FF07FF0700)) 
    \new_crc[26]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[26]_i_2_n_0 ),
        .I5(\new_crc[26]_i_3_n_0 ),
        .O(p_2_in__0[26]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[26]_i_10 
       (.I0(\new_crc[13]_i_6_n_0 ),
        .I1(p_19_in72_in),
        .I2(p_30_in),
        .I3(p_8_in4_in),
        .I4(p_7_in),
        .I5(\new_crc[26]_i_13_n_0 ),
        .O(\new_crc[26]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[26]_i_11 
       (.I0(p_10_in55_in),
        .I1(p_14_in58_in),
        .O(\new_crc[26]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[26]_i_12 
       (.I0(p_11_in2_in),
        .I1(p_13_in),
        .I2(p_9_in),
        .O(\new_crc[26]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[26]_i_13 
       (.I0(p_4_in15_in),
        .I1(p_22_in29_in),
        .I2(p_18_in),
        .I3(p_20_in56_in),
        .I4(p_17_in68_in),
        .I5(p_19_in42_in),
        .O(\new_crc[26]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[26]_i_2 
       (.I0(p_1_in73_in),
        .I1(p_114_in),
        .I2(p_1_in),
        .I3(\new_crc[26]_i_5_n_0 ),
        .I4(\new_crc[26]_i_6_n_0 ),
        .I5(\new_crc[26]_i_7_n_0 ),
        .O(\new_crc[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[26]_i_3 
       (.I0(p_28_in),
        .I1(\new_crc[26]_i_8_n_0 ),
        .I2(p_27_in10_in),
        .I3(p_3_in33_in),
        .I4(\new_crc[26]_i_9_n_0 ),
        .I5(\new_crc[26]_i_10_n_0 ),
        .O(\new_crc[26]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[26]_i_4 
       (.I0(p_1_in98_in),
        .I1(p_1_in113_in),
        .O(p_114_in));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[26]_i_5 
       (.I0(p_0_in41_in),
        .I1(p_17_in47_in),
        .I2(p_6_in34_in),
        .O(\new_crc[26]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[26]_i_6 
       (.I0(p_2_in),
        .I1(p_17_in),
        .I2(p_16_in9_in),
        .I3(p_3_in),
        .I4(p_17_in8_in),
        .O(\new_crc[26]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[26]_i_7 
       (.I0(p_16_in),
        .I1(p_16_in36_in),
        .I2(p_0_in53_in),
        .I3(p_24_in),
        .I4(p_3_in54_in),
        .O(\new_crc[26]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[26]_i_8 
       (.I0(p_13_in64_in),
        .I1(p_26_in),
        .I2(p_9_in61_in),
        .I3(p_26_in49_in),
        .I4(p_28_in57_in),
        .I5(\new_crc[26]_i_11_n_0 ),
        .O(\new_crc[26]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[26]_i_9 
       (.I0(\new_crc[26]_i_12_n_0 ),
        .I1(p_8_in17_in),
        .I2(p_19_in),
        .I3(p_22_in),
        .I4(\bdin_reg_n_0_[63] ),
        .I5(p_25_in),
        .O(\new_crc[26]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT5 #(
    .INIT(32'hC5FFC500)) 
    \new_crc[27]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(nextCRC32_D64_return[27]),
        .O(p_2_in__0[27]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[27]_i_2 
       (.I0(\new_crc[27]_i_3_n_0 ),
        .I1(p_121_in),
        .I2(p_20_in56_in),
        .I3(\new_crc[27]_i_4_n_0 ),
        .I4(\new_crc[23]_i_5_n_0 ),
        .I5(\new_crc[27]_i_5_n_0 ),
        .O(nextCRC32_D64_return[27]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[27]_i_3 
       (.I0(p_20_in23_in),
        .I1(p_1_in73_in),
        .I2(p_0_in),
        .I3(p_24_in11_in),
        .I4(\new_crc[27]_i_6_n_0 ),
        .O(\new_crc[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[27]_i_4 
       (.I0(p_18_in7_in),
        .I1(p_4_in),
        .I2(p_29_in),
        .I3(p_22_in24_in),
        .I4(p_19_in72_in),
        .I5(\new_crc[13]_i_6_n_0 ),
        .O(\new_crc[27]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[27]_i_5 
       (.I0(\new_crc[27]_i_7_n_0 ),
        .I1(p_10_in3_in),
        .I2(p_8_in),
        .I3(p_28_in57_in),
        .I4(p_18_in),
        .I5(p_26_in),
        .O(\new_crc[27]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[27]_i_6 
       (.I0(\new_crc[26]_i_5_n_0 ),
        .I1(\new_crc[31]_i_14_n_0 ),
        .I2(p_16_in9_in),
        .I3(p_17_in),
        .I4(p_2_in),
        .I5(p_24_in25_in),
        .O(\new_crc[27]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[27]_i_7 
       (.I0(\new_crc_reg_n_0_[0] ),
        .I1(p_24_in63_in),
        .I2(\new_crc[27]_i_8_n_0 ),
        .I3(\new_crc[21]_i_6_n_0 ),
        .I4(p_17_in62_in),
        .I5(p_12_in),
        .O(\new_crc[27]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[27]_i_8 
       (.I0(p_19_in),
        .I1(p_25_in),
        .O(\new_crc[27]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h7F70707F707F7F70)) 
    \new_crc[28]_i_1 
       (.I0(\new_crc[28]_i_2_n_0 ),
        .I1(\new_crc[28]_i_3_n_0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[28]_i_4_n_0 ),
        .I4(\new_crc[28]_i_5_n_0 ),
        .I5(\new_crc[28]_i_6_n_0 ),
        .O(p_2_in__0[28]));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[28]_i_10 
       (.I0(p_0_in53_in),
        .I1(p_2_in45_in),
        .I2(p_12_in69_in),
        .I3(p_3_in),
        .O(\new_crc[28]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[28]_i_11 
       (.I0(p_17_in),
        .I1(p_22_in38_in),
        .I2(p_9_in67_in),
        .I3(p_24_in),
        .I4(\new_crc[28]_i_14_n_0 ),
        .I5(\new_crc[28]_i_15_n_0 ),
        .O(\new_crc[28]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[28]_i_12 
       (.I0(p_14_in58_in),
        .I1(p_17_in62_in),
        .O(\new_crc[28]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[28]_i_13 
       (.I0(p_5_in),
        .I1(p_4_in15_in),
        .I2(p_22_in29_in),
        .I3(p_17_in68_in),
        .I4(p_20_in30_in),
        .O(\new_crc[28]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[28]_i_14 
       (.I0(p_14_in),
        .I1(p_24_in11_in),
        .O(\new_crc[28]_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[28]_i_15 
       (.I0(p_25_in39_in),
        .I1(p_16_in),
        .O(\new_crc[28]_i_15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \new_crc[28]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .O(\new_crc[28]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \new_crc[28]_i_3 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .O(\new_crc[28]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[28]_i_4 
       (.I0(p_30_in),
        .I1(p_9_in),
        .I2(p_20_in56_in),
        .I3(p_24_in63_in),
        .I4(p_11_in2_in),
        .O(\new_crc[28]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[28]_i_5 
       (.I0(\new_crc[28]_i_7_n_0 ),
        .I1(p_14_in20_in),
        .I2(p_38_in),
        .I3(p_121_in),
        .I4(p_9_in28_in),
        .I5(\new_crc[28]_i_9_n_0 ),
        .O(\new_crc[28]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[28]_i_6 
       (.I0(\new_crc[28]_i_10_n_0 ),
        .I1(p_17_in8_in),
        .I2(p_21_in),
        .I3(p_6_in16_in),
        .I4(p_2_in14_in),
        .I5(\new_crc[28]_i_11_n_0 ),
        .O(\new_crc[28]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[28]_i_7 
       (.I0(p_19_in),
        .I1(p_25_in),
        .I2(p_3_in54_in),
        .I3(\new_crc[21]_i_6_n_0 ),
        .I4(p_10_in55_in),
        .I5(\new_crc[28]_i_12_n_0 ),
        .O(\new_crc[28]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[28]_i_8 
       (.I0(p_1_in59_in),
        .I1(p_1_in113_in),
        .I2(p_1_in98_in),
        .O(p_121_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[28]_i_9 
       (.I0(\new_crc[25]_i_8_n_0 ),
        .I1(p_28_in),
        .I2(p_21_in6_in),
        .I3(p_18_in),
        .I4(p_26_in),
        .I5(\new_crc[28]_i_13_n_0 ),
        .O(\new_crc[28]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h4774744774474774)) 
    \new_crc[29]_i_1 
       (.I0(\new_crc[29]_i_2_n_0 ),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(p_10_in55_in),
        .I3(p_9_in61_in),
        .I4(\new_crc[29]_i_3_n_0 ),
        .I5(\new_crc[29]_i_4_n_0 ),
        .O(p_2_in__0[29]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[29]_i_10 
       (.I0(p_30_in),
        .I1(p_8_in4_in),
        .I2(p_7_in),
        .O(\new_crc[29]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[29]_i_11 
       (.I0(p_3_in33_in),
        .I1(p_27_in10_in),
        .O(\new_crc[29]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[29]_i_12 
       (.I0(p_19_in72_in),
        .I1(p_5_in0_in),
        .O(\new_crc[29]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[29]_i_13 
       (.I0(p_24_in),
        .I1(p_17_in),
        .O(\new_crc[29]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT3 #(
    .INIT(8'hAE)) 
    \new_crc[29]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .O(\new_crc[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[29]_i_3 
       (.I0(\new_crc[29]_i_5_n_0 ),
        .I1(\new_crc[29]_i_6_n_0 ),
        .I2(p_21_in6_in),
        .I3(p_22_in24_in),
        .I4(p_19_in42_in),
        .I5(\new_crc[29]_i_7_n_0 ),
        .O(\new_crc[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[29]_i_4 
       (.I0(p_13_in),
        .I1(p_9_in),
        .I2(p_0_in),
        .I3(p_2_in14_in),
        .I4(\new_crc[29]_i_8_n_0 ),
        .I5(\new_crc[29]_i_9_n_0 ),
        .O(\new_crc[29]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[29]_i_5 
       (.I0(p_3_in54_in),
        .I1(p_29_in),
        .I2(p_25_in),
        .I3(p_18_in22_in),
        .I4(\new_crc[29]_i_10_n_0 ),
        .I5(\new_crc[29]_i_11_n_0 ),
        .O(\new_crc[29]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[29]_i_6 
       (.I0(p_17_in68_in),
        .I1(p_20_in30_in),
        .I2(p_15_in),
        .I3(p_5_in),
        .I4(p_13_in64_in),
        .O(\new_crc[29]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[29]_i_7 
       (.I0(p_10_in3_in),
        .I1(p_18_in),
        .I2(p_8_in),
        .I3(\new_crc[29]_i_12_n_0 ),
        .I4(p_11_in),
        .I5(p_26_in49_in),
        .O(\new_crc[29]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[29]_i_8 
       (.I0(p_17_in62_in),
        .I1(p_14_in58_in),
        .I2(p_11_in2_in),
        .I3(p_1_in59_in),
        .I4(p_1_in113_in),
        .I5(p_1_in73_in),
        .O(\new_crc[29]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[29]_i_9 
       (.I0(\new_crc[29]_i_13_n_0 ),
        .I1(p_16_in9_in),
        .I2(p_2_in),
        .I3(\new_crc[17]_i_4_n_0 ),
        .I4(p_16_in),
        .I5(p_24_in11_in),
        .O(\new_crc[29]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hCB00CBFFCBFFCB00)) 
    \new_crc[2]_i_1 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[2]_i_2_n_0 ),
        .I5(\new_crc[2]_i_3_n_0 ),
        .O(p_2_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[2]_i_10 
       (.I0(p_18_in22_in),
        .I1(p_1_in),
        .I2(p_9_in),
        .I3(p_2_in1_in),
        .I4(p_13_in),
        .O(\new_crc[2]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[2]_i_11 
       (.I0(p_2_in14_in),
        .I1(p_16_in9_in),
        .O(\new_crc[2]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[2]_i_2 
       (.I0(p_3_in54_in),
        .I1(p_94_in),
        .I2(p_11_in2_in),
        .I3(\bdin_reg_n_0_[63] ),
        .I4(p_30_in),
        .I5(\new_crc_reg_n_0_[0] ),
        .O(\new_crc[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[2]_i_3 
       (.I0(\new_crc[2]_i_5_n_0 ),
        .I1(\new_crc[2]_i_6_n_0 ),
        .I2(\new_crc[9]_i_9_n_0 ),
        .I3(\new_crc[21]_i_9_n_0 ),
        .I4(p_22_in24_in),
        .I5(\new_crc[2]_i_7_n_0 ),
        .O(\new_crc[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[2]_i_4 
       (.I0(p_0_in53_in),
        .I1(p_0_in),
        .O(p_94_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[2]_i_5 
       (.I0(\new_crc[2]_i_8_n_0 ),
        .I1(\new_crc[2]_i_9_n_0 ),
        .I2(p_10_in),
        .I3(p_9_in35_in),
        .I4(p_24_in),
        .I5(p_3_in40_in),
        .O(\new_crc[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[2]_i_6 
       (.I0(\new_crc[21]_i_10_n_0 ),
        .I1(p_19_in),
        .I2(p_12_in),
        .I3(p_28_in),
        .I4(p_29_in),
        .I5(p_3_in33_in),
        .O(\new_crc[2]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[2]_i_7 
       (.I0(p_14_in),
        .I1(p_23_in),
        .I2(p_25_in39_in),
        .I3(p_20_in),
        .I4(\new_crc[2]_i_10_n_0 ),
        .O(\new_crc[2]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[2]_i_8 
       (.I0(p_16_in21_in),
        .I1(p_0_in41_in),
        .I2(p_8_in17_in),
        .I3(p_24_in25_in),
        .I4(\new_crc[24]_i_14_n_0 ),
        .I5(\new_crc[2]_i_11_n_0 ),
        .O(\new_crc[2]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[2]_i_9 
       (.I0(p_6_in34_in),
        .I1(p_17_in),
        .I2(p_22_in38_in),
        .I3(p_16_in36_in),
        .O(\new_crc[2]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h2F20202F202F2F20)) 
    \new_crc[30]_i_1 
       (.I0(\new_crc[30]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[30]_i_3_n_0 ),
        .I4(\new_crc[30]_i_4_n_0 ),
        .I5(\new_crc[30]_i_5_n_0 ),
        .O(p_2_in__0[30]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[30]_i_10 
       (.I0(p_16_in),
        .I1(p_2_in14_in),
        .I2(p_24_in11_in),
        .I3(p_14_in),
        .O(\new_crc[30]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[30]_i_11 
       (.I0(\new_crc[21]_i_10_n_0 ),
        .I1(p_19_in),
        .I2(p_22_in),
        .I3(\new_crc[17]_i_5_n_0 ),
        .I4(p_9_in61_in),
        .I5(p_13_in64_in),
        .O(\new_crc[30]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \new_crc[30]_i_2 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .O(\new_crc[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[30]_i_3 
       (.I0(p_129_in),
        .I1(p_15_in),
        .I2(p_38_in),
        .I3(p_17_in),
        .I4(p_12_in69_in),
        .I5(p_9_in67_in),
        .O(\new_crc[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[30]_i_4 
       (.I0(\new_crc[30]_i_7_n_0 ),
        .I1(p_20_in30_in),
        .I2(p_17_in68_in),
        .I3(p_19_in72_in),
        .I4(p_22_in24_in),
        .I5(p_19_in42_in),
        .O(\new_crc[30]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[30]_i_5 
       (.I0(\new_crc[30]_i_8_n_0 ),
        .I1(p_12_in),
        .I2(\new_crc_reg_n_0_[0] ),
        .I3(\new_crc[30]_i_9_n_0 ),
        .I4(\new_crc[30]_i_10_n_0 ),
        .I5(\new_crc[30]_i_11_n_0 ),
        .O(\new_crc[30]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[30]_i_6 
       (.I0(p_0_in53_in),
        .I1(p_1_in98_in),
        .I2(p_1_in59_in),
        .I3(p_0_in),
        .I4(p_2_in45_in),
        .O(p_129_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[30]_i_7 
       (.I0(p_3_in33_in),
        .I1(p_28_in57_in),
        .I2(p_26_in),
        .I3(\new_crc[4]_i_5_n_0 ),
        .I4(\new_crc[13]_i_6_n_0 ),
        .I5(\new_crc[21]_i_9_n_0 ),
        .O(\new_crc[30]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[30]_i_8 
       (.I0(p_6_in16_in),
        .I1(p_9_in28_in),
        .O(\new_crc[30]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[30]_i_9 
       (.I0(p_19_in37_in),
        .I1(p_14_in20_in),
        .I2(p_22_in38_in),
        .O(\new_crc[30]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hF444FF44F444F444)) 
    \new_crc[31]_i_1 
       (.I0(we_int_),
        .I1(\state_reg_n_0_[1] ),
        .I2(pulse_0),
        .I3(\state_reg_n_0_[0] ),
        .I4(fmac_speed[1]),
        .I5(fmac_speed[0]),
        .O(\new_crc[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[31]_i_10 
       (.I0(p_19_in),
        .I1(p_24_in63_in),
        .I2(p_9_in),
        .I3(p_11_in2_in),
        .O(\new_crc[31]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[31]_i_11 
       (.I0(\new_crc[31]_i_14_n_0 ),
        .I1(p_6_in16_in),
        .I2(p_3_in),
        .I3(p_22_in38_in),
        .I4(p_16_in),
        .I5(\new_crc[3]_i_5_n_0 ),
        .O(\new_crc[31]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[31]_i_12 
       (.I0(p_30_in),
        .I1(p_4_in),
        .I2(p_18_in7_in),
        .O(\new_crc[31]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[31]_i_13 
       (.I0(p_22_in29_in),
        .I1(p_4_in15_in),
        .I2(p_19_in42_in),
        .O(\new_crc[31]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[31]_i_14 
       (.I0(p_12_in69_in),
        .I1(p_9_in67_in),
        .O(\new_crc[31]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[31]_i_2 
       (.I0(init_value[22]),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(p_18_in),
        .I3(p_135_in),
        .I4(\new_crc[31]_i_6_n_0 ),
        .I5(\new_crc[31]_i_7_n_0 ),
        .O(p_2_in__0[31]));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT3 #(
    .INIT(8'hA3)) 
    \new_crc[31]_i_3 
       (.I0(\rbytes_reg_reg[0]_rep__0 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .O(init_value[22]));
  LUT4 #(
    .INIT(16'hF020)) 
    \new_crc[31]_i_4 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(\state_reg_n_0_[0] ),
        .I3(pulse_0),
        .O(\new_crc[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[31]_i_5 
       (.I0(p_0_in53_in),
        .I1(p_1_in73_in),
        .I2(p_1_in113_in),
        .I3(p_3_in54_in),
        .O(p_135_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[31]_i_6 
       (.I0(\new_crc[31]_i_8_n_0 ),
        .I1(p_14_in20_in),
        .I2(p_14_in),
        .I3(p_25_in),
        .I4(p_23_in),
        .I5(\new_crc[31]_i_9_n_0 ),
        .O(\new_crc[31]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[31]_i_7 
       (.I0(p_20_in48_in),
        .I1(p_13_in),
        .I2(p_15_in),
        .I3(p_17_in8_in),
        .I4(\new_crc[31]_i_10_n_0 ),
        .I5(\new_crc[31]_i_11_n_0 ),
        .O(\new_crc[31]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[31]_i_8 
       (.I0(p_9_in28_in),
        .I1(p_20_in23_in),
        .I2(p_28_in),
        .I3(p_12_in19_in),
        .I4(p_6_in26_in),
        .O(\new_crc[31]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[31]_i_9 
       (.I0(\new_crc[31]_i_12_n_0 ),
        .I1(p_3_in33_in),
        .I2(p_27_in10_in),
        .I3(\new_crc[31]_i_13_n_0 ),
        .I4(\new_crc[23]_i_8_n_0 ),
        .I5(p_19_in72_in),
        .O(\new_crc[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0B0BFB0BFBFB0)) 
    \new_crc[3]_i_1 
       (.I0(\new_crc[25]_i_2_n_0 ),
        .I1(\new_crc[30]_i_2_n_0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[3]_i_2_n_0 ),
        .I4(\new_crc[3]_i_3_n_0 ),
        .I5(\new_crc[3]_i_4_n_0 ),
        .O(p_2_in__0[3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[3]_i_10 
       (.I0(\new_crc[30]_i_9_n_0 ),
        .I1(p_8_in17_in),
        .I2(p_10_in),
        .I3(p_22_in),
        .I4(p_2_in1_in),
        .I5(p_13_in),
        .O(\new_crc[3]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[3]_i_2 
       (.I0(\new_crc[4]_i_2_n_0 ),
        .I1(\new_crc[3]_i_5_n_0 ),
        .I2(\new_crc[3]_i_6_n_0 ),
        .I3(\new_crc[3]_i_7_n_0 ),
        .I4(p_20_in48_in),
        .I5(\new_crc[3]_i_8_n_0 ),
        .O(\new_crc[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[3]_i_3 
       (.I0(p_27_in10_in),
        .I1(p_19_in42_in),
        .I2(\new_crc[14]_i_5_n_0 ),
        .I3(\new_crc[21]_i_9_n_0 ),
        .I4(p_22_in24_in),
        .I5(\new_crc[3]_i_9_n_0 ),
        .O(\new_crc[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[3]_i_4 
       (.I0(\new_crc[3]_i_10_n_0 ),
        .I1(\new_crc[21]_i_6_n_0 ),
        .I2(p_18_in),
        .I3(p_12_in),
        .I4(\new_crc_reg_n_0_[0] ),
        .I5(\new_crc[17]_i_5_n_0 ),
        .O(\new_crc[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[3]_i_5 
       (.I0(p_9_in35_in),
        .I1(p_3_in40_in),
        .O(\new_crc[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[3]_i_6 
       (.I0(p_1_in),
        .I1(p_16_in21_in),
        .I2(p_23_in),
        .I3(p_24_in25_in),
        .O(\new_crc[3]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[3]_i_7 
       (.I0(p_17_in8_in),
        .I1(p_3_in),
        .O(\new_crc[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[3]_i_8 
       (.I0(p_0_in53_in),
        .I1(p_1_in73_in),
        .I2(p_38_in),
        .I3(\new_crc[26]_i_5_n_0 ),
        .I4(p_2_in45_in),
        .I5(p_0_in),
        .O(\new_crc[3]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[3]_i_9 
       (.I0(p_3_in33_in),
        .I1(p_29_in),
        .I2(p_28_in),
        .O(\new_crc[3]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h1F10101F101F1F10)) 
    \new_crc[4]_i_1 
       (.I0(\new_crc[20]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\new_crc[31]_i_4_n_0 ),
        .I3(\new_crc[4]_i_2_n_0 ),
        .I4(p_17_in47_in),
        .I5(\new_crc[4]_i_3_n_0 ),
        .O(p_2_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[4]_i_2 
       (.I0(p_16_in36_in),
        .I1(p_25_in39_in),
        .O(\new_crc[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[4]_i_3 
       (.I0(\new_crc[4]_i_4_n_0 ),
        .I1(\new_crc[30]_i_8_n_0 ),
        .I2(\new_crc[4]_i_5_n_0 ),
        .I3(\new_crc[4]_i_6_n_0 ),
        .I4(\new_crc[4]_i_7_n_0 ),
        .I5(\new_crc[4]_i_8_n_0 ),
        .O(\new_crc[4]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[4]_i_4 
       (.I0(p_6_in34_in),
        .I1(p_0_in41_in),
        .I2(p_3_in54_in),
        .I3(p_22_in38_in),
        .O(\new_crc[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[4]_i_5 
       (.I0(p_28_in),
        .I1(p_29_in),
        .O(\new_crc[4]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[4]_i_6 
       (.I0(p_0_in),
        .I1(p_8_in17_in),
        .I2(p_1_in),
        .I3(p_14_in),
        .O(\new_crc[4]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[4]_i_7 
       (.I0(p_20_in23_in),
        .I1(p_24_in11_in),
        .I2(p_0_in53_in),
        .I3(p_24_in),
        .I4(p_1_in59_in),
        .O(\new_crc[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[4]_i_8 
       (.I0(\new_crc[4]_i_9_n_0 ),
        .I1(\new_crc[11]_i_7_n_0 ),
        .I2(p_5_in),
        .I3(p_15_in),
        .I4(\new_crc[11]_i_8_n_0 ),
        .I5(p_11_in2_in),
        .O(\new_crc[4]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \new_crc[4]_i_9 
       (.I0(p_6_in),
        .I1(p_23_in5_in),
        .I2(p_21_in6_in),
        .O(\new_crc[4]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h4774744774474774)) 
    \new_crc[5]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[5]_i_2_n_0 ),
        .I3(\new_crc[5]_i_3_n_0 ),
        .I4(\new_crc[5]_i_4_n_0 ),
        .I5(\new_crc[5]_i_5_n_0 ),
        .O(p_2_in__0[5]));
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[5]_i_2 
       (.I0(p_20_in56_in),
        .I1(p_17_in8_in),
        .I2(p_19_in),
        .I3(\new_crc[5]_i_6_n_0 ),
        .O(\new_crc[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[5]_i_3 
       (.I0(\new_crc[26]_i_8_n_0 ),
        .I1(p_28_in),
        .I2(p_21_in6_in),
        .I3(\new_crc[24]_i_11_n_0 ),
        .I4(\new_crc[5]_i_7_n_0 ),
        .O(\new_crc[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[5]_i_4 
       (.I0(p_9_in28_in),
        .I1(p_24_in11_in),
        .I2(\new_crc[26]_i_5_n_0 ),
        .I3(p_1_in59_in),
        .I4(p_1_in98_in),
        .I5(p_0_in53_in),
        .O(\new_crc[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[5]_i_5 
       (.I0(\new_crc[5]_i_8_n_0 ),
        .I1(p_24_in25_in),
        .I2(p_24_in63_in),
        .I3(\bdin_reg_n_0_[63] ),
        .I4(p_10_in),
        .I5(p_18_in22_in),
        .O(\new_crc[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[5]_i_6 
       (.I0(p_6_in16_in),
        .I1(p_16_in9_in),
        .I2(\new_crc[21]_i_8_n_0 ),
        .I3(p_24_in),
        .I4(p_16_in),
        .I5(\new_crc[5]_i_9_n_0 ),
        .O(\new_crc[5]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[5]_i_7 
       (.I0(p_4_in15_in),
        .I1(p_22_in29_in),
        .I2(p_18_in7_in),
        .I3(p_4_in),
        .I4(p_20_in30_in),
        .I5(p_5_in),
        .O(\new_crc[5]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[5]_i_8 
       (.I0(p_11_in2_in),
        .I1(p_9_in),
        .O(\new_crc[5]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[5]_i_9 
       (.I0(p_3_in),
        .I1(p_2_in),
        .O(\new_crc[5]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B88BB88B8BB8)) 
    \new_crc[6]_i_1 
       (.I0(\new_crc[28]_i_3_n_0 ),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[6]_i_2_n_0 ),
        .I3(\new_crc[6]_i_3_n_0 ),
        .I4(\new_crc[6]_i_4_n_0 ),
        .I5(\new_crc[6]_i_5_n_0 ),
        .O(p_2_in__0[6]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[6]_i_2 
       (.I0(p_1_in113_in),
        .I1(p_1_in73_in),
        .I2(p_14_in),
        .I3(p_25_in),
        .I4(p_24_in63_in),
        .I5(p_8_in17_in),
        .O(\new_crc[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[6]_i_3 
       (.I0(p_21_in6_in),
        .I1(p_18_in),
        .I2(p_22_in24_in),
        .I3(p_20_in56_in),
        .I4(p_7_in46_in),
        .I5(\new_crc[9]_i_9_n_0 ),
        .O(\new_crc[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[6]_i_4 
       (.I0(p_5_in),
        .I1(p_13_in64_in),
        .I2(p_17_in68_in),
        .I3(\new_crc[6]_i_6_n_0 ),
        .I4(p_15_in),
        .O(\new_crc[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[6]_i_5 
       (.I0(\new_crc[6]_i_7_n_0 ),
        .I1(p_3_in33_in),
        .I2(\new_crc[23]_i_8_n_0 ),
        .I3(p_10_in3_in),
        .I4(p_8_in),
        .I5(p_28_in57_in),
        .O(\new_crc[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[6]_i_6 
       (.I0(p_27_in10_in),
        .I1(p_10_in55_in),
        .I2(p_9_in61_in),
        .I3(\new_crc[6]_i_8_n_0 ),
        .I4(\new_crc[28]_i_12_n_0 ),
        .I5(\new_crc[6]_i_9_n_0 ),
        .O(\new_crc[6]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[6]_i_7 
       (.I0(p_2_in14_in),
        .I1(p_22_in38_in),
        .I2(p_24_in25_in),
        .I3(p_15_in50_in),
        .I4(\new_crc[22]_i_7_n_0 ),
        .I5(\new_crc[14]_i_9_n_0 ),
        .O(\new_crc[6]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[6]_i_8 
       (.I0(p_12_in69_in),
        .I1(p_3_in),
        .I2(p_38_in),
        .I3(p_9_in67_in),
        .O(\new_crc[6]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[6]_i_9 
       (.I0(p_17_in8_in),
        .I1(p_2_in45_in),
        .O(\new_crc[6]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h430043FF43FF4300)) 
    \new_crc[7]_i_1 
       (.I0(\rbytes_reg_reg[1]_rep__0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[7]_i_2_n_0 ),
        .I5(\new_crc[7]_i_3_n_0 ),
        .O(p_2_in__0[7]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[7]_i_2 
       (.I0(p_0_in),
        .I1(p_25_in39_in),
        .I2(p_2_in1_in),
        .I3(\new_crc[7]_i_4_n_0 ),
        .I4(p_12_in),
        .I5(p_1_in73_in),
        .O(\new_crc[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[7]_i_3 
       (.I0(\new_crc[7]_i_5_n_0 ),
        .I1(\new_crc[6]_i_4_n_0 ),
        .I2(\new_crc[29]_i_7_n_0 ),
        .I3(p_21_in6_in),
        .I4(p_20_in30_in),
        .I5(p_19_in42_in),
        .O(\new_crc[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[7]_i_4 
       (.I0(p_16_in),
        .I1(p_20_in),
        .I2(p_2_in14_in),
        .I3(p_9_in28_in),
        .I4(p_6_in16_in),
        .O(\new_crc[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[7]_i_5 
       (.I0(\new_crc[7]_i_6_n_0 ),
        .I1(p_29_in),
        .I2(\new_crc[4]_i_4_n_0 ),
        .I3(\bdin_reg_n_0_[63] ),
        .I4(p_24_in63_in),
        .I5(\new_crc[7]_i_7_n_0 ),
        .O(\new_crc[7]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[7]_i_6 
       (.I0(\new_crc_reg_n_0_[0] ),
        .I1(p_10_in),
        .I2(p_22_in),
        .I3(p_19_in),
        .I4(p_20_in48_in),
        .O(\new_crc[7]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[7]_i_7 
       (.I0(p_30_in),
        .I1(p_3_in33_in),
        .I2(p_22_in24_in),
        .I3(p_7_in),
        .I4(p_8_in4_in),
        .O(\new_crc[7]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h830083FF83FF8300)) 
    \new_crc[8]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__0 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\new_crc[31]_i_4_n_0 ),
        .I4(\new_crc[8]_i_2_n_0 ),
        .I5(\new_crc[8]_i_3_n_0 ),
        .O(p_2_in__0[8]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[8]_i_2 
       (.I0(\new_crc[8]_i_4_n_0 ),
        .I1(\new_crc[8]_i_5_n_0 ),
        .I2(p_6_in16_in),
        .I3(p_2_in14_in),
        .I4(p_10_in),
        .I5(p_0_in53_in),
        .O(\new_crc[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[8]_i_3 
       (.I0(\new_crc[8]_i_6_n_0 ),
        .I1(\new_crc[13]_i_7_n_0 ),
        .I2(p_3_in33_in),
        .I3(p_28_in),
        .I4(p_19_in42_in),
        .I5(p_21_in6_in),
        .O(\new_crc[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[8]_i_4 
       (.I0(p_2_in1_in),
        .I1(p_19_in72_in),
        .I2(p_8_in17_in),
        .I3(p_16_in21_in),
        .I4(\bdin_reg_n_0_[63] ),
        .I5(p_28_in57_in),
        .O(\new_crc[8]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[8]_i_5 
       (.I0(p_24_in11_in),
        .I1(p_22_in38_in),
        .I2(p_1_in),
        .I3(p_20_in23_in),
        .O(\new_crc[8]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[8]_i_6 
       (.I0(\new_crc[8]_i_7_n_0 ),
        .I1(\new_crc[25]_i_8_n_0 ),
        .I2(\new_crc[17]_i_5_n_0 ),
        .I3(p_15_in50_in),
        .I4(p_7_in46_in),
        .I5(\new_crc[21]_i_10_n_0 ),
        .O(\new_crc[8]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[8]_i_7 
       (.I0(p_1_in73_in),
        .I1(p_9_in28_in),
        .I2(p_11_in),
        .I3(p_21_in),
        .I4(p_5_in0_in),
        .I5(p_1_in59_in),
        .O(\new_crc[8]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h4774744774474774)) 
    \new_crc[9]_i_1 
       (.I0(\new_crc[29]_i_2_n_0 ),
        .I1(\new_crc[31]_i_4_n_0 ),
        .I2(\new_crc[9]_i_2_n_0 ),
        .I3(\new_crc[9]_i_3_n_0 ),
        .I4(\new_crc[9]_i_4_n_0 ),
        .I5(\new_crc[9]_i_5_n_0 ),
        .O(p_2_in__0[9]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[9]_i_10 
       (.I0(\new_crc[31]_i_14_n_0 ),
        .I1(p_16_in9_in),
        .I2(p_2_in),
        .I3(p_6_in34_in),
        .I4(p_16_in36_in),
        .I5(\new_crc[3]_i_5_n_0 ),
        .O(\new_crc[9]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \new_crc[9]_i_11 
       (.I0(p_18_in22_in),
        .I1(p_9_in28_in),
        .I2(p_9_in),
        .I3(p_1_in98_in),
        .I4(p_1_in73_in),
        .O(\new_crc[9]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[9]_i_2 
       (.I0(p_11_in2_in),
        .I1(\new_crc[9]_i_6_n_0 ),
        .I2(p_8_in17_in),
        .I3(p_28_in57_in),
        .I4(p_0_in41_in),
        .I5(p_24_in25_in),
        .O(\new_crc[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[9]_i_3 
       (.I0(\new_crc[9]_i_7_n_0 ),
        .I1(p_12_in),
        .I2(p_19_in),
        .I3(p_24_in63_in),
        .I4(\new_crc_reg_n_0_[0] ),
        .I5(\new_crc[9]_i_8_n_0 ),
        .O(\new_crc[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[9]_i_4 
       (.I0(\new_crc[13]_i_8_n_0 ),
        .I1(p_27_in10_in),
        .I2(p_29_in),
        .I3(\new_crc[9]_i_9_n_0 ),
        .I4(\new_crc[23]_i_8_n_0 ),
        .I5(p_19_in72_in),
        .O(\new_crc[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[9]_i_5 
       (.I0(\new_crc[9]_i_10_n_0 ),
        .I1(\new_crc[9]_i_11_n_0 ),
        .I2(p_23_in),
        .I3(p_25_in39_in),
        .I4(p_1_in),
        .I5(p_20_in23_in),
        .O(\new_crc[9]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[9]_i_6 
       (.I0(p_2_in14_in),
        .I1(p_15_in),
        .I2(p_0_in),
        .I3(p_6_in16_in),
        .O(\new_crc[9]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \new_crc[9]_i_7 
       (.I0(p_14_in58_in),
        .I1(p_21_in),
        .I2(p_10_in55_in),
        .I3(p_5_in0_in),
        .O(\new_crc[9]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \new_crc[9]_i_8 
       (.I0(p_26_in),
        .I1(p_10_in18_in),
        .I2(p_4_in27_in),
        .I3(p_12_in19_in),
        .I4(p_6_in26_in),
        .I5(p_11_in),
        .O(\new_crc[9]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \new_crc[9]_i_9 
       (.I0(p_19_in42_in),
        .I1(p_20_in30_in),
        .O(\new_crc[9]_i_9_n_0 ));
  FDRE \new_crc_reg[0] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[0]),
        .Q(\new_crc_reg_n_0_[0] ),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[10] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[10]),
        .Q(p_13_in64_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[11] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[11]),
        .Q(p_12_in69_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[12] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[12]),
        .Q(p_11_in2_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[13] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[13]),
        .Q(p_10_in3_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[14] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[14]),
        .Q(p_9_in28_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[15] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[15]),
        .Q(p_8_in4_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[16] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[16]),
        .Q(p_23_in5_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[17] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[17]),
        .Q(p_22_in29_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[18] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[18]),
        .Q(p_21_in6_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[19] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[19]),
        .Q(p_20_in30_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[1] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[1]),
        .Q(p_6_in26_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[20] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[20]),
        .Q(p_19_in42_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[21] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[21]),
        .Q(p_18_in7_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[22] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[22]),
        .Q(p_17_in8_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[23] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[23]),
        .Q(p_16_in9_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[24] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[24]),
        .Q(p_38_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[25] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[25]),
        .Q(p_30_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[26] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[26]),
        .Q(p_29_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[27] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[27]),
        .Q(p_28_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[28] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[28]),
        .Q(p_27_in10_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[29] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[29]),
        .Q(p_26_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[2] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[2]),
        .Q(p_5_in0_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[30] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[30]),
        .Q(p_25_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[31] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[31]),
        .Q(p_24_in11_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[3] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[3]),
        .Q(p_4_in27_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[4] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[4]),
        .Q(p_3_in40_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[5] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[5]),
        .Q(p_2_in1_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[6] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[6]),
        .Q(p_1_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[7] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[7]),
        .Q(p_0_in41_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[8] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[8]),
        .Q(p_15_in50_in),
        .R(\new_crc_reg[0]_0 ));
  FDRE \new_crc_reg[9] 
       (.C(lclk),
        .CE(\new_crc[31]_i_1_n_0 ),
        .D(p_2_in__0[9]),
        .Q(p_14_in58_in),
        .R(\new_crc_reg[0]_0 ));
  LUT4 #(
    .INIT(16'hFFA8)) 
    \state[0]_i_1__0 
       (.I0(\state_reg_n_0_[0] ),
        .I1(crc_we_),
        .I2(\state_reg_n_0_[2] ),
        .I3(\state[0]_i_2_n_0 ),
        .O(\state[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00FF0000FF0032FF)) 
    \state[0]_i_2 
       (.I0(pulse_0),
        .I1(crc_clr_),
        .I2(mode_1G),
        .I3(\state_reg_n_0_[2] ),
        .I4(\state_reg_n_0_[1] ),
        .I5(\state_reg_n_0_[0] ),
        .O(\state[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00030088)) 
    \state[1]_i_1__0 
       (.I0(last_int_),
        .I1(\state_reg_n_0_[1] ),
        .I2(crc_we_),
        .I3(\state_reg_n_0_[2] ),
        .I4(\state_reg_n_0_[0] ),
        .O(\state[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000055CF00)) 
    \state[2]_i_1__0 
       (.I0(last_int_),
        .I1(crc_clr_),
        .I2(bcnt0),
        .I3(\state_reg_n_0_[2] ),
        .I4(\state_reg_n_0_[1] ),
        .I5(\state_reg_n_0_[0] ),
        .O(\state[2]_i_1__0_n_0 ));
  FDSE \state_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\state[0]_i_1__0_n_0 ),
        .Q(\state_reg_n_0_[0] ),
        .S(\new_crc_reg[0]_0 ));
  FDRE \state_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\state[1]_i_1__0_n_0 ),
        .Q(\state_reg_n_0_[1] ),
        .R(\new_crc_reg[0]_0 ));
  FDRE \state_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\state[2]_i_1__0_n_0 ),
        .Q(\state_reg_n_0_[2] ),
        .R(\new_crc_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[0]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_24_in11_in),
        .I3(\txd[0]_i_2_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h1D1D33FFFFFF0000)) 
    \txd[0]_i_2 
       (.I0(p_8_in4_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_16_in9_in),
        .I3(p_0_in41_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[10]_i_1 
       (.I0(\txd[10]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [10]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_26_in),
        .O(D[10]));
  LUT6 #(
    .INIT(64'h3F3F3DFDFFFF3DFD)) 
    \txd[10]_i_2 
       (.I0(p_18_in7_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_2_in1_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_10_in3_in),
        .O(\txd[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[11]_i_1 
       (.I0(\txd[11]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [11]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_27_in10_in),
        .O(D[11]));
  LUT6 #(
    .INIT(64'h00C130C1C0C1F0C1)) 
    \txd[11]_i_2 
       (.I0(p_19_in42_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(p_3_in40_in),
        .I5(p_11_in2_in),
        .O(\txd[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[12]_i_1 
       (.I0(\txd[12]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [12]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_28_in),
        .O(D[12]));
  LUT6 #(
    .INIT(64'h3F3F3DFDFFFF3DFD)) 
    \txd[12]_i_2 
       (.I0(p_20_in30_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_4_in27_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_12_in69_in),
        .O(\txd[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[13]_i_1 
       (.I0(\txd[13]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [13]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_29_in),
        .O(D[13]));
  LUT6 #(
    .INIT(64'h3F3F3DFDFFFF3DFD)) 
    \txd[13]_i_2 
       (.I0(p_21_in6_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_5_in0_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_13_in64_in),
        .O(\txd[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[14]_i_1 
       (.I0(\txd[14]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [14]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_30_in),
        .O(D[14]));
  LUT6 #(
    .INIT(64'h3F3F3DFDFFFF3DFD)) 
    \txd[14]_i_2 
       (.I0(p_22_in29_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_6_in26_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_14_in58_in),
        .O(\txd[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[15]_i_1 
       (.I0(\txd[15]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [15]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_38_in),
        .O(D[15]));
  LUT6 #(
    .INIT(64'h3F3F3DFDFFFF3DFD)) 
    \txd[15]_i_2 
       (.I0(p_23_in5_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\new_crc_reg_n_0_[0] ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_15_in50_in),
        .O(\txd[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[16]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [16]),
        .I2(p_24_in11_in),
        .I3(p_16_in9_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFFFDFD)) 
    \txd[16]_i_3 
       (.I0(p_8_in4_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_0_in41_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[17]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [17]),
        .I2(p_25_in),
        .I3(p_17_in8_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFF3D3D)) 
    \txd[17]_i_3 
       (.I0(p_9_in28_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_1_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[18]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [18]),
        .I2(p_26_in),
        .I3(p_18_in7_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFFFDFD)) 
    \txd[18]_i_3 
       (.I0(p_10_in3_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_2_in1_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[18]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBAAAAAAAFAAAAAAA)) 
    \txd[19]_i_1 
       (.I0(\txd[19]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(insert_crc),
        .I5(p_3_in40_in),
        .O(D[19]));
  LUT6 #(
    .INIT(64'h0001FFFF00010000)) 
    \txd[19]_i_2 
       (.I0(\rbytes_reg_reg[0]_rep__1 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(p_11_in2_in),
        .I4(insert_crc),
        .I5(\txd[19]_i_3_n_0 ),
        .O(\txd[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[19]_i_3 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [19]),
        .I2(p_27_in10_in),
        .I3(p_19_in42_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[1]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_25_in),
        .I3(\txd[1]_i_2_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [1]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h1D1D00CCFFFF0000)) 
    \txd[1]_i_2 
       (.I0(p_9_in28_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_17_in8_in),
        .I3(p_1_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[20]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [20]),
        .I2(p_28_in),
        .I3(p_20_in30_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[20]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFFFDFD)) 
    \txd[20]_i_3 
       (.I0(p_12_in69_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_4_in27_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[21]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [21]),
        .I2(p_29_in),
        .I3(p_21_in6_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[21]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFFFDFD)) 
    \txd[21]_i_3 
       (.I0(p_13_in64_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_5_in0_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[22]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [22]),
        .I2(p_30_in),
        .I3(p_22_in29_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFFFDFD)) 
    \txd[22]_i_3 
       (.I0(p_14_in58_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_6_in26_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCC88DD8D8DCCCC)) 
    \txd[23]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [23]),
        .I2(p_38_in),
        .I3(p_23_in5_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[23]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3FFFFDFD)) 
    \txd[23]_i_3 
       (.I0(p_15_in50_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\new_crc_reg_n_0_[0] ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .O(\txd[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \txd[24]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_0 ),
        .I1(p_0_in41_in),
        .I2(insert_crc),
        .I3(\bdata2_reg[63] [24]),
        .I4(\rbytes_reg_reg[2]_0 ),
        .I5(\txd[24]_i_2_n_0 ),
        .O(D[24]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[24]_i_2 
       (.I0(\bdata2_reg[63] [24]),
        .I1(p_8_in4_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_24_in11_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_16_in9_in),
        .O(\txd[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h3FFDFFFF3FFD0000)) 
    \txd[25]_i_1 
       (.I0(p_1_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\rbytes_reg_reg[0]_rep__1 ),
        .I4(insert_crc),
        .I5(\txd[25]_i_2_n_0 ),
        .O(D[25]));
  LUT6 #(
    .INIT(64'hDDDD8CDC88888CDC)) 
    \txd[25]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [25]),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_9_in28_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\txd[57]_i_3_n_0 ),
        .O(\txd[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \txd[26]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_0 ),
        .I1(p_2_in1_in),
        .I2(insert_crc),
        .I3(\bdata2_reg[63] [26]),
        .I4(\rbytes_reg_reg[2]_0 ),
        .I5(\txd[26]_i_2_n_0 ),
        .O(D[26]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[26]_i_2 
       (.I0(\bdata2_reg[63] [26]),
        .I1(p_10_in3_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_26_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_18_in7_in),
        .O(\txd[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF0000003AAAAAAAA)) 
    \txd[27]_i_1 
       (.I0(\txd[27]_i_2_n_0 ),
        .I1(p_3_in40_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(insert_crc),
        .O(D[27]));
  LUT6 #(
    .INIT(64'hDDDD8CDC88888CDC)) 
    \txd[27]_i_2 
       (.I0(\rbytes_reg_reg[2]_0 ),
        .I1(\bdata2_reg[63] [27]),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(p_11_in2_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\txd[59]_i_3_n_0 ),
        .O(\txd[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \txd[28]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_0 ),
        .I1(p_4_in27_in),
        .I2(insert_crc),
        .I3(\bdata2_reg[63] [28]),
        .I4(\rbytes_reg_reg[2]_0 ),
        .I5(\txd[28]_i_2_n_0 ),
        .O(D[28]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[28]_i_2 
       (.I0(\bdata2_reg[63] [28]),
        .I1(p_12_in69_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_28_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_20_in30_in),
        .O(\txd[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \txd[29]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_0 ),
        .I1(p_5_in0_in),
        .I2(insert_crc),
        .I3(\bdata2_reg[63] [29]),
        .I4(\rbytes_reg_reg[2]_0 ),
        .I5(\txd[29]_i_2_n_0 ),
        .O(D[29]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[29]_i_2 
       (.I0(\bdata2_reg[63] [29]),
        .I1(p_13_in64_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_29_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_21_in6_in),
        .O(\txd[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[2]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_26_in),
        .I3(\txd[2]_i_2_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [2]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h1D1D33FFFFFF0000)) 
    \txd[2]_i_2 
       (.I0(p_10_in3_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_18_in7_in),
        .I3(p_2_in1_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \txd[30]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_0 ),
        .I1(p_6_in26_in),
        .I2(insert_crc),
        .I3(\bdata2_reg[63] [30]),
        .I4(\rbytes_reg_reg[2]_0 ),
        .I5(\txd[30]_i_2_n_0 ),
        .O(D[30]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[30]_i_2 
       (.I0(\bdata2_reg[63] [30]),
        .I1(p_14_in58_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_30_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_22_in29_in),
        .O(\txd[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \txd[31]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_0 ),
        .I1(\new_crc_reg_n_0_[0] ),
        .I2(insert_crc),
        .I3(\bdata2_reg[63] [31]),
        .I4(\rbytes_reg_reg[2]_0 ),
        .I5(\txd[31]_i_4_n_0 ),
        .O(D[31]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[31]_i_4 
       (.I0(\bdata2_reg[63] [31]),
        .I1(p_15_in50_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_38_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_23_in5_in),
        .O(\txd[31]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[32]_i_1 
       (.I0(\txd[32]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[32]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [32]),
        .I5(txd1),
        .O(D[32]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[32]_i_2 
       (.I0(\bdata2_reg[63] [32]),
        .I1(p_0_in41_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_16_in9_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_8_in4_in),
        .O(\txd[32]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT4 #(
    .INIT(16'hA8AB)) 
    \txd[32]_i_3 
       (.I0(\bdata2_reg[63] [32]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_24_in11_in),
        .O(\txd[32]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT5 #(
    .INIT(32'hFEFFFE00)) 
    \txd[33]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1 ),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(insert_crc),
        .I4(\txd[33]_i_2_n_0 ),
        .O(D[33]));
  LUT6 #(
    .INIT(64'hC0CFCCCCAAAACCCC)) 
    \txd[33]_i_2 
       (.I0(\txd[33]_i_3_n_0 ),
        .I1(\bdata2_reg[63] [33]),
        .I2(\rbytes_reg_reg[1]_rep__0_0 ),
        .I3(p_25_in),
        .I4(txd1),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[33]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[33]_i_3 
       (.I0(\bdata2_reg[63] [33]),
        .I1(p_1_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_17_in8_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_9_in28_in),
        .O(\txd[33]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[34]_i_1 
       (.I0(\txd[34]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[34]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [34]),
        .I5(txd1),
        .O(D[34]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[34]_i_2 
       (.I0(\bdata2_reg[63] [34]),
        .I1(p_2_in1_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_18_in7_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_10_in3_in),
        .O(\txd[34]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hA8AB)) 
    \txd[34]_i_3 
       (.I0(\bdata2_reg[63] [34]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_26_in),
        .O(\txd[34]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT5 #(
    .INIT(32'h01FF0100)) 
    \txd[35]_i_1 
       (.I0(\rbytes_reg_reg[2] [1]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(insert_crc),
        .I4(\txd[35]_i_2_n_0 ),
        .O(D[35]));
  LUT6 #(
    .INIT(64'hC0CFCCCCAAAACCCC)) 
    \txd[35]_i_2 
       (.I0(\txd[35]_i_3_n_0 ),
        .I1(\bdata2_reg[63] [35]),
        .I2(\rbytes_reg_reg[1]_rep__0_0 ),
        .I3(p_27_in10_in),
        .I4(txd1),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[35]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[35]_i_3 
       (.I0(\bdata2_reg[63] [35]),
        .I1(p_3_in40_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_19_in42_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_11_in2_in),
        .O(\txd[35]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[36]_i_1 
       (.I0(\txd[36]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[36]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [36]),
        .I5(txd1),
        .O(D[36]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[36]_i_2 
       (.I0(\bdata2_reg[63] [36]),
        .I1(p_4_in27_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_20_in30_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_12_in69_in),
        .O(\txd[36]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT4 #(
    .INIT(16'hA8AB)) 
    \txd[36]_i_3 
       (.I0(\bdata2_reg[63] [36]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_28_in),
        .O(\txd[36]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[37]_i_1 
       (.I0(\txd[37]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[37]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [37]),
        .I5(txd1),
        .O(D[37]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[37]_i_2 
       (.I0(\bdata2_reg[63] [37]),
        .I1(p_5_in0_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_21_in6_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_13_in64_in),
        .O(\txd[37]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT4 #(
    .INIT(16'hA8AB)) 
    \txd[37]_i_3 
       (.I0(\bdata2_reg[63] [37]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_29_in),
        .O(\txd[37]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[38]_i_1 
       (.I0(\txd[38]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[38]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [38]),
        .I5(txd1),
        .O(D[38]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[38]_i_2 
       (.I0(\bdata2_reg[63] [38]),
        .I1(p_6_in26_in),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_22_in29_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_14_in58_in),
        .O(\txd[38]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT4 #(
    .INIT(16'hA8AB)) 
    \txd[38]_i_3 
       (.I0(\bdata2_reg[63] [38]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_30_in),
        .O(\txd[38]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[39]_i_1 
       (.I0(\txd[39]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[39]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [39]),
        .I5(txd1),
        .O(D[39]));
  LUT6 #(
    .INIT(64'h03F30A0A03F3FAFA)) 
    \txd[39]_i_2 
       (.I0(\bdata2_reg[63] [39]),
        .I1(\new_crc_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_23_in5_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_15_in50_in),
        .O(\txd[39]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT4 #(
    .INIT(16'hA8AB)) 
    \txd[39]_i_3 
       (.I0(\bdata2_reg[63] [39]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_38_in),
        .O(\txd[39]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \txd[3]_i_1 
       (.I0(\txd[3]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\bdata2_reg[63] [3]),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hFF003F0500003F05)) 
    \txd[3]_i_2 
       (.I0(p_27_in10_in),
        .I1(p_3_in40_in),
        .I2(\rbytes_reg_reg[0]_rep__0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\txd[3]_i_3_n_0 ),
        .O(\txd[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[3]_i_3 
       (.I0(p_19_in42_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_11_in2_in),
        .O(\txd[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[40]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [40]),
        .I2(txd1),
        .I3(txd[40]),
        .O(D[40]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[40]_i_2 
       (.I0(\txd[40]_i_3_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\txd[56]_i_3_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [40]),
        .O(txd[40]));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[40]_i_3 
       (.I0(p_8_in4_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_0_in41_in),
        .O(\txd[40]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[41]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [41]),
        .I2(txd1),
        .I3(txd[41]),
        .O(D[41]));
  LUT6 #(
    .INIT(64'hCAF0CAFCCA00CA0C)) 
    \txd[41]_i_2 
       (.I0(\txd[41]_i_3_n_0 ),
        .I1(\bdata2_reg[63] [41]),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[2] [0]),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\txd[57]_i_3_n_0 ),
        .O(txd[41]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[41]_i_3 
       (.I0(p_9_in28_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_1_in),
        .O(\txd[41]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[42]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [42]),
        .I2(txd1),
        .I3(txd[42]),
        .O(D[42]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[42]_i_2 
       (.I0(\txd[42]_i_3_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\txd[58]_i_3_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [42]),
        .O(txd[42]));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[42]_i_3 
       (.I0(p_10_in3_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_2_in1_in),
        .O(\txd[42]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \txd[43]_i_1 
       (.I0(txd[43]),
        .I1(insert_crc),
        .I2(txd1),
        .I3(\bdata2_reg[63] [43]),
        .O(D[43]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[43]_i_2 
       (.I0(\txd[59]_i_4_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\txd[59]_i_3_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [43]),
        .O(txd[43]));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[44]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [44]),
        .I2(txd1),
        .I3(txd[44]),
        .O(D[44]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[44]_i_2 
       (.I0(\txd[44]_i_3_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\txd[60]_i_3_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [44]),
        .O(txd[44]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[44]_i_3 
       (.I0(p_12_in69_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_4_in27_in),
        .O(\txd[44]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[45]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [45]),
        .I2(txd1),
        .I3(txd[45]),
        .O(D[45]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[45]_i_2 
       (.I0(\txd[45]_i_3_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\txd[61]_i_3_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [45]),
        .O(txd[45]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[45]_i_3 
       (.I0(p_13_in64_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_5_in0_in),
        .O(\txd[45]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[46]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [46]),
        .I2(txd1),
        .I3(txd[46]),
        .O(D[46]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[46]_i_2 
       (.I0(\txd[46]_i_3_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\txd[62]_i_3_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [46]),
        .O(txd[46]));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[46]_i_3 
       (.I0(p_14_in58_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_6_in26_in),
        .O(\txd[46]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \txd[47]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [47]),
        .I2(txd1),
        .I3(txd[47]),
        .O(D[47]));
  LUT6 #(
    .INIT(64'hFFAAF0FF00AAF0CC)) 
    \txd[47]_i_2 
       (.I0(\txd[47]_i_3_n_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\txd[63]_i_5_n_0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\rbytes_reg_reg[2] [0]),
        .I5(\bdata2_reg[63] [47]),
        .O(txd[47]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[47]_i_3 
       (.I0(p_15_in50_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\new_crc_reg_n_0_[0] ),
        .O(\txd[47]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[48]_i_1 
       (.I0(\txd[48]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[48]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [48]),
        .I5(txd1),
        .O(D[48]));
  LUT4 #(
    .INIT(16'h3EFE)) 
    \txd[48]_i_2 
       (.I0(\bdata2_reg[63] [48]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_0_in41_in),
        .O(\txd[48]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[48]_i_3 
       (.I0(p_8_in4_in),
        .I1(p_16_in9_in),
        .I2(p_24_in11_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [48]),
        .O(\txd[48]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[49]_i_1 
       (.I0(\txd[49]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[49]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [49]),
        .I5(txd1),
        .O(D[49]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT4 #(
    .INIT(16'h32F2)) 
    \txd[49]_i_2 
       (.I0(\bdata2_reg[63] [49]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_1_in),
        .O(\txd[49]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[49]_i_3 
       (.I0(p_9_in28_in),
        .I1(p_17_in8_in),
        .I2(p_25_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [49]),
        .O(\txd[49]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[4]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_28_in),
        .I3(\txd[4]_i_2_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [4]),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h1D1D33FFFFFF0000)) 
    \txd[4]_i_2 
       (.I0(p_12_in69_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_20_in30_in),
        .I3(p_4_in27_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[50]_i_1 
       (.I0(\txd[50]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[50]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [50]),
        .I5(txd1),
        .O(D[50]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT4 #(
    .INIT(16'h3EFE)) 
    \txd[50]_i_2 
       (.I0(\bdata2_reg[63] [50]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_2_in1_in),
        .O(\txd[50]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[50]_i_3 
       (.I0(p_10_in3_in),
        .I1(p_18_in7_in),
        .I2(p_26_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [50]),
        .O(\txd[50]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00EA00FF00EA0000)) 
    \txd[51]_i_1 
       (.I0(\txd[51]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[51]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(txd1),
        .I5(\bdata2_reg[63] [51]),
        .O(D[51]));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT5 #(
    .INIT(32'h00730070)) 
    \txd[51]_i_2 
       (.I0(p_3_in40_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\rbytes_reg_reg[2] [1]),
        .I4(\bdata2_reg[63] [51]),
        .O(\txd[51]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[51]_i_3 
       (.I0(p_11_in2_in),
        .I1(p_19_in42_in),
        .I2(p_27_in10_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [51]),
        .O(\txd[51]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[52]_i_1 
       (.I0(\txd[52]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[52]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [52]),
        .I5(txd1),
        .O(D[52]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT4 #(
    .INIT(16'h3EFE)) 
    \txd[52]_i_2 
       (.I0(\bdata2_reg[63] [52]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_4_in27_in),
        .O(\txd[52]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[52]_i_3 
       (.I0(p_12_in69_in),
        .I1(p_20_in30_in),
        .I2(p_28_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [52]),
        .O(\txd[52]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[53]_i_1 
       (.I0(\txd[53]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[53]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [53]),
        .I5(txd1),
        .O(D[53]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT4 #(
    .INIT(16'h3EFE)) 
    \txd[53]_i_2 
       (.I0(\bdata2_reg[63] [53]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_5_in0_in),
        .O(\txd[53]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[53]_i_3 
       (.I0(p_13_in64_in),
        .I1(p_21_in6_in),
        .I2(p_29_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [53]),
        .O(\txd[53]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[54]_i_1 
       (.I0(\txd[54]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[54]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [54]),
        .I5(txd1),
        .O(D[54]));
  LUT4 #(
    .INIT(16'h3EFE)) 
    \txd[54]_i_2 
       (.I0(\bdata2_reg[63] [54]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(p_6_in26_in),
        .O(\txd[54]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[54]_i_3 
       (.I0(p_14_in58_in),
        .I1(p_22_in29_in),
        .I2(p_30_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [54]),
        .O(\txd[54]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFE2FFE2FFFFFF00)) 
    \txd[55]_i_1 
       (.I0(\txd[55]_i_2_n_0 ),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\txd[55]_i_3_n_0 ),
        .I3(insert_crc),
        .I4(\bdata2_reg[63] [55]),
        .I5(txd1),
        .O(D[55]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT4 #(
    .INIT(16'h3EFE)) 
    \txd[55]_i_2 
       (.I0(\bdata2_reg[63] [55]),
        .I1(\rbytes_reg_reg[1]_rep__0 ),
        .I2(\rbytes_reg_reg[0]_rep__1 ),
        .I3(\new_crc_reg_n_0_[0] ),
        .O(\txd[55]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF330F5500330F55)) 
    \txd[55]_i_3 
       (.I0(p_15_in50_in),
        .I1(p_23_in5_in),
        .I2(p_38_in),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(\bdata2_reg[63] [55]),
        .O(\txd[55]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[56]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [56]),
        .I2(txd1),
        .I3(\txd[56]_i_2_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[56]_i_3_n_0 ),
        .O(D[56]));
  LUT6 #(
    .INIT(64'h0F0F5F3F0F0F5F30)) 
    \txd[56]_i_2 
       (.I0(p_8_in4_in),
        .I1(p_0_in41_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [56]),
        .O(\txd[56]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[56]_i_3 
       (.I0(p_24_in11_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_16_in9_in),
        .O(\txd[56]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[57]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [57]),
        .I2(txd1),
        .I3(\txd[57]_i_2_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[57]_i_3_n_0 ),
        .O(D[57]));
  LUT6 #(
    .INIT(64'h000F5F3F000F5F30)) 
    \txd[57]_i_2 
       (.I0(p_9_in28_in),
        .I1(p_1_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__1 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [57]),
        .O(\txd[57]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[57]_i_3 
       (.I0(p_25_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_17_in8_in),
        .O(\txd[57]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[58]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [58]),
        .I2(txd1),
        .I3(\txd[58]_i_2_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[58]_i_3_n_0 ),
        .O(D[58]));
  LUT6 #(
    .INIT(64'h0F0F5F3F0F0F5F30)) 
    \txd[58]_i_2 
       (.I0(p_10_in3_in),
        .I1(p_2_in1_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [58]),
        .O(\txd[58]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[58]_i_3 
       (.I0(p_26_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_18_in7_in),
        .O(\txd[58]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \txd[59]_i_1 
       (.I0(txd[59]),
        .I1(insert_crc),
        .I2(txd1),
        .I3(\bdata2_reg[63] [59]),
        .O(D[59]));
  LUT6 #(
    .INIT(64'hAFF0A0FCAF00A00C)) 
    \txd[59]_i_2 
       (.I0(\txd[59]_i_3_n_0 ),
        .I1(\bdata2_reg[63] [59]),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[2] [0]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\txd[59]_i_4_n_0 ),
        .O(txd[59]));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[59]_i_3 
       (.I0(p_27_in10_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_19_in42_in),
        .O(\txd[59]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[59]_i_4 
       (.I0(p_11_in2_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_3_in40_in),
        .O(\txd[59]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[5]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_29_in),
        .I3(\txd[5]_i_2_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [5]),
        .O(D[5]));
  LUT6 #(
    .INIT(64'h1D1D33FFFFFF0000)) 
    \txd[5]_i_2 
       (.I0(p_13_in64_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_21_in6_in),
        .I3(p_5_in0_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[60]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [60]),
        .I2(txd1),
        .I3(\txd[60]_i_2_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[60]_i_3_n_0 ),
        .O(D[60]));
  LUT6 #(
    .INIT(64'h0F0F5F3F0F0F5F30)) 
    \txd[60]_i_2 
       (.I0(p_12_in69_in),
        .I1(p_4_in27_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__1 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [60]),
        .O(\txd[60]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[60]_i_3 
       (.I0(p_28_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_20_in30_in),
        .O(\txd[60]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[61]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [61]),
        .I2(txd1),
        .I3(\txd[61]_i_2_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[61]_i_3_n_0 ),
        .O(D[61]));
  LUT6 #(
    .INIT(64'h0F0F5F3F0F0F5F30)) 
    \txd[61]_i_2 
       (.I0(p_13_in64_in),
        .I1(p_5_in0_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__1 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [61]),
        .O(\txd[61]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[61]_i_3 
       (.I0(p_29_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_21_in6_in),
        .O(\txd[61]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[62]_i_1 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [62]),
        .I2(txd1),
        .I3(\txd[62]_i_2_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[62]_i_3_n_0 ),
        .O(D[62]));
  LUT6 #(
    .INIT(64'h0F0F5F3F0F0F5F30)) 
    \txd[62]_i_2 
       (.I0(p_14_in58_in),
        .I1(p_6_in26_in),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__0 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [62]),
        .O(\txd[62]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[62]_i_3 
       (.I0(p_30_in),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(p_22_in29_in),
        .O(\txd[62]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFEFEFEAEFEAE)) 
    \txd[63]_i_2 
       (.I0(insert_crc),
        .I1(\bdata2_reg[63] [63]),
        .I2(txd1),
        .I3(\txd[63]_i_4_n_0 ),
        .I4(\new_crc[30]_i_2_n_0 ),
        .I5(\txd[63]_i_5_n_0 ),
        .O(D[63]));
  LUT6 #(
    .INIT(64'h0F0F5F3F0F0F5F30)) 
    \txd[63]_i_4 
       (.I0(p_15_in50_in),
        .I1(\new_crc_reg_n_0_[0] ),
        .I2(\rbytes_reg_reg[2] [1]),
        .I3(\rbytes_reg_reg[0]_rep__1 ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\bdata2_reg[63] [63]),
        .O(\txd[63]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \txd[63]_i_5 
       (.I0(p_38_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_23_in5_in),
        .O(\txd[63]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[6]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_30_in),
        .I3(\txd[6]_i_2_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [6]),
        .O(D[6]));
  LUT6 #(
    .INIT(64'h1D1D33FFFFFF0000)) 
    \txd[6]_i_2 
       (.I0(p_14_in58_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_22_in29_in),
        .I3(p_6_in26_in),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFABFFFFFFAB0000)) 
    \txd[7]_i_1 
       (.I0(\rbytes_reg_reg[0]_rep__1_1 ),
        .I1(\new_crc[28]_i_2_n_0 ),
        .I2(p_38_in),
        .I3(\txd[7]_i_3_n_0 ),
        .I4(insert_crc),
        .I5(\bdata2_reg[63] [7]),
        .O(D[7]));
  LUT6 #(
    .INIT(64'h1D1D33FFFFFF0000)) 
    \txd[7]_i_3 
       (.I0(p_15_in50_in),
        .I1(\rbytes_reg_reg[0]_rep__1 ),
        .I2(p_23_in5_in),
        .I3(\new_crc_reg_n_0_[0] ),
        .I4(\rbytes_reg_reg[1]_rep__0 ),
        .I5(\rbytes_reg_reg[2] [1]),
        .O(\txd[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[8]_i_1 
       (.I0(\txd[8]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [8]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_24_in11_in),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h3F3F3DFDFFFF3DFD)) 
    \txd[8]_i_2 
       (.I0(p_16_in9_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_0_in41_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_8_in4_in),
        .O(\txd[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88B888BB88BB8B)) 
    \txd[9]_i_1 
       (.I0(\txd[9]_i_2_n_0 ),
        .I1(insert_crc),
        .I2(\rbytes_reg_reg[2]_0 ),
        .I3(\bdata2_reg[63] [9]),
        .I4(\new_crc[23]_i_2_n_0 ),
        .I5(p_25_in),
        .O(D[9]));
  LUT6 #(
    .INIT(64'h33F33D3D33F3FDFD)) 
    \txd[9]_i_2 
       (.I0(p_17_in8_in),
        .I1(\rbytes_reg_reg[2] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(p_9_in28_in),
        .I4(\rbytes_reg_reg[0]_rep__1 ),
        .I5(p_1_in),
        .O(\txd[9]_i_2_n_0 ));
  MUXF7 \txd_reg[16]_i_1 
       (.I0(\txd[16]_i_2_n_0 ),
        .I1(\txd[16]_i_3_n_0 ),
        .O(D[16]),
        .S(insert_crc));
  MUXF7 \txd_reg[17]_i_1 
       (.I0(\txd[17]_i_2_n_0 ),
        .I1(\txd[17]_i_3_n_0 ),
        .O(D[17]),
        .S(insert_crc));
  MUXF7 \txd_reg[18]_i_1 
       (.I0(\txd[18]_i_2_n_0 ),
        .I1(\txd[18]_i_3_n_0 ),
        .O(D[18]),
        .S(insert_crc));
  MUXF7 \txd_reg[20]_i_1 
       (.I0(\txd[20]_i_2_n_0 ),
        .I1(\txd[20]_i_3_n_0 ),
        .O(D[20]),
        .S(insert_crc));
  MUXF7 \txd_reg[21]_i_1 
       (.I0(\txd[21]_i_2_n_0 ),
        .I1(\txd[21]_i_3_n_0 ),
        .O(D[21]),
        .S(insert_crc));
  MUXF7 \txd_reg[22]_i_1 
       (.I0(\txd[22]_i_2_n_0 ),
        .I1(\txd[22]_i_3_n_0 ),
        .O(D[22]),
        .S(insert_crc));
  MUXF7 \txd_reg[23]_i_1 
       (.I0(\txd[23]_i_2_n_0 ),
        .I1(\txd[23]_i_3_n_0 ),
        .O(D[23]),
        .S(insert_crc));
  LUT6 #(
    .INIT(64'hF7F7FFF7F7F700F7)) 
    we_int__i_1
       (.I0(pulse_1),
        .I1(Q),
        .I2(\crc_cnt_reg[15] ),
        .I3(fmac_speed[0]),
        .I4(fmac_speed[1]),
        .I5(crc_we_),
        .O(we_int__i_1_n_0));
  FDSE we_int__reg
       (.C(lclk),
        .CE(1'b1),
        .D(we_int__i_1_n_0),
        .Q(we_int_),
        .S(\new_crc_reg[0]_0 ));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gige_rx
   (\gf_state_reg[0] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    gmii_rx_dv_dly,
    first_data_dly,
    frame_dly1_reg,
    link_ok,
    pdet_in_dly_reg,
    link_break,
    \consec_idle_reg[0] ,
    \count_reg[8] ,
    Q,
    \data_in_dly_reg[63] ,
    shift0,
    \ctrl_in_dly_reg[7] ,
    eof10,
    SS,
    \ctrl_out_reg[5] ,
    \ctrl_out_reg[6] ,
    \ctrl_out_reg[7] ,
    eof00,
    sof00,
    \dff0_reg[2] ,
    frame_reg,
    sof70,
    sof60,
    sof50,
    sof10,
    sof30,
    sof20,
    lclk,
    rst__0,
    out,
    first_data0,
    first_data_dly_reg,
    \data_in_dly1_reg[2] ,
    link_ok_reg,
    ram_empty_i_reg,
    fmac_speed,
    rst_,
    mode_1G,
    shift_reg,
    xaui_mode_reg,
    \ctrl_in_dly_reg[7]_0 ,
    xaui_mode,
    mode_100M,
    D);
  output \gf_state_reg[0] ;
  output \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output gmii_rx_dv_dly;
  output first_data_dly;
  output frame_dly1_reg;
  output link_ok;
  output pdet_in_dly_reg;
  output link_break;
  output \consec_idle_reg[0] ;
  output \count_reg[8] ;
  output [3:0]Q;
  output [63:0]\data_in_dly_reg[63] ;
  output shift0;
  output [7:0]\ctrl_in_dly_reg[7] ;
  output eof10;
  output [1:0]SS;
  output \ctrl_out_reg[5] ;
  output \ctrl_out_reg[6] ;
  output \ctrl_out_reg[7] ;
  output eof00;
  output sof00;
  output [1:0]\dff0_reg[2] ;
  output frame_reg;
  output sof70;
  output sof60;
  output sof50;
  output sof10;
  output sof30;
  output sof20;
  input lclk;
  input rst__0;
  input out;
  input first_data0;
  input first_data_dly_reg;
  input \data_in_dly1_reg[2] ;
  input link_ok_reg;
  input ram_empty_i_reg;
  input [1:0]fmac_speed;
  input rst_;
  input mode_1G;
  input shift_reg;
  input xaui_mode_reg;
  input [2:0]\ctrl_in_dly_reg[7]_0 ;
  input xaui_mode;
  input mode_100M;
  input [7:0]D;

  wire [7:0]D;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [3:0]Q;
  wire [1:0]SS;
  wire [15:3]bcnt_in;
  wire \consec_idle_reg[0] ;
  wire \count_reg[8] ;
  wire [7:0]ctrl_in;
  wire [7:0]\ctrl_in_dly_reg[7] ;
  wire [2:0]\ctrl_in_dly_reg[7]_0 ;
  wire \ctrl_out_reg[5] ;
  wire \ctrl_out_reg[6] ;
  wire \ctrl_out_reg[7] ;
  wire [7:0]ctrl_out_s2p;
  wire [63:0]data_in;
  wire \data_in_dly1_reg[2] ;
  wire [63:0]\data_in_dly_reg[63] ;
  wire [63:0]data_out_s2p;
  wire [1:0]\dff0_reg[2] ;
  wire eof00;
  wire eof10;
  wire first_data0;
  wire first_data_dly;
  wire first_data_dly_reg;
  wire [1:0]fmac_speed;
  wire frame_dly1_reg;
  wire frame_reg;
  wire \gf_state_reg[0] ;
  wire gige_data_fifo_re;
  wire gigerx_bcnt_fifo256x16_n_13;
  wire gigerx_bcnt_fifo256x16_n_14;
  wire gigerx_bcnt_fifo256x16_n_15;
  wire gigerx_bcnt_fifo256x16_n_16;
  wire gigerx_bcnt_fifo256x16_n_17;
  wire gigerx_bcnt_fifo256x16_n_18;
  wire gigerx_bcnt_fifo256x16_n_19;
  wire gigerx_bcnt_fifo256x16_n_20;
  wire gigerx_bcnt_fifo256x16_n_21;
  wire gigerx_bcnt_fifo256x16_n_22;
  wire gigerx_bcnt_fifo256x16_n_23;
  wire gigerx_bcnt_fifo256x16_n_24;
  wire gigerx_bcnt_fifo256x16_n_25;
  wire gmii_rx_dv_dly;
  wire lclk;
  wire link_break;
  wire link_ok;
  wire link_ok_reg;
  wire mode_100M;
  wire mode_1G;
  wire out;
  wire pdet_in_dly_reg;
  wire ram_empty_i_reg;
  wire rst_;
  wire rst__0;
  wire shift0;
  wire shift_reg;
  wire sof00;
  wire sof10;
  wire sof20;
  wire sof30;
  wire sof50;
  wire sof60;
  wire sof70;
  wire x_bcnt_we;
  wire [15:0]x_byte_cnt;
  wire x_we;
  wire xaui_mode;
  wire xaui_mode_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_g2x_ctrl g2x_ctrl
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ({bcnt_in[15:14],bcnt_in[12:3]}),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_1 (gigerx_bcnt_fifo256x16_n_16),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_10 (gigerx_bcnt_fifo256x16_n_15),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_11 (gigerx_bcnt_fifo256x16_n_18),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_12 (gigerx_bcnt_fifo256x16_n_14),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_13 (gigerx_bcnt_fifo256x16_n_17),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_14 (ctrl_in),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_2 (gigerx_bcnt_fifo256x16_n_25),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_3 (gigerx_bcnt_fifo256x16_n_13),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_4 (gigerx_bcnt_fifo256x16_n_24),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_5 (gigerx_bcnt_fifo256x16_n_19),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_6 (gigerx_bcnt_fifo256x16_n_23),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_7 (gigerx_bcnt_fifo256x16_n_22),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_8 (gigerx_bcnt_fifo256x16_n_21),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_9 (gigerx_bcnt_fifo256x16_n_20),
        .Q(Q),
        .SS(SS),
        .\ctrl_in_dly_reg[7] (\ctrl_in_dly_reg[7] ),
        .\ctrl_in_dly_reg[7]_0 (\ctrl_in_dly_reg[7]_0 ),
        .\ctrl_out_reg[5]_0 (\ctrl_out_reg[5] ),
        .\ctrl_out_reg[6]_0 (\ctrl_out_reg[6] ),
        .\ctrl_out_reg[7]_0 (\ctrl_out_reg[7] ),
        .\data_in_dly_reg[63] (\data_in_dly_reg[63] ),
        .dout(data_in),
        .eof00(eof00),
        .eof10(eof10),
        .lclk(lclk),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_empty_i_reg_0(\gf_state_reg[0] ),
        .rd_en(gige_data_fifo_re),
        .rst_(rst_),
        .rst__0(rst__0),
        .shift0(shift0),
        .shift_reg(shift_reg),
        .sof00(sof00),
        .sof10(sof10),
        .sof20(sof20),
        .sof30(sof30),
        .sof50(sof50),
        .sof60(sof60),
        .sof70(sof70),
        .xaui_mode(xaui_mode),
        .xaui_mode_reg(xaui_mode_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gige_s2p gige_s2p
       (.D(D),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (ctrl_out_s2p),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (data_out_s2p),
        .Q(\dff0_reg[2] ),
        .\consec_idle_reg[0]_0 (\consec_idle_reg[0] ),
        .\count_reg[7]_0 (x_bcnt_we),
        .\count_reg[8]_0 (\count_reg[8] ),
        .\data_in_dly1_reg[2]_0 (\data_in_dly1_reg[2] ),
        .first_data0(first_data0),
        .first_data_dly(first_data_dly),
        .first_data_dly_reg_0(first_data_dly_reg),
        .fmac_speed(fmac_speed),
        .frame_dly1_reg_0(frame_dly1_reg),
        .frame_reg_0(frame_reg),
        .gmii_rx_dv_dly(gmii_rx_dv_dly),
        .lclk(lclk),
        .link_break(link_break),
        .link_ok(link_ok),
        .link_ok_reg_0(link_ok_reg),
        .mode_100M(mode_100M),
        .mode_1G(mode_1G),
        .out(out),
        .pdet_in_dly_reg_0(pdet_in_dly_reg),
        .rst_(rst_),
        .rst__0(rst__0),
        .wr_en(x_we),
        .x_byte_cnt(x_byte_cnt));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_bcnt_fifo256x16 gigerx_bcnt_fifo256x16
       (.dout({bcnt_in[15:14],bcnt_in[12:3]}),
        .\gf_state_reg[0] (\gf_state_reg[0] ),
        .gige_bcnt_fifo_re_reg(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .lclk(lclk),
        .\qwd_cnt_reg[0] (gigerx_bcnt_fifo256x16_n_25),
        .\qwd_cnt_reg[10] (gigerx_bcnt_fifo256x16_n_14),
        .\qwd_cnt_reg[11] (gigerx_bcnt_fifo256x16_n_17),
        .\qwd_cnt_reg[12] (gigerx_bcnt_fifo256x16_n_16),
        .\qwd_cnt_reg[1] (gigerx_bcnt_fifo256x16_n_13),
        .\qwd_cnt_reg[2] (gigerx_bcnt_fifo256x16_n_24),
        .\qwd_cnt_reg[3] (gigerx_bcnt_fifo256x16_n_19),
        .\qwd_cnt_reg[4] (gigerx_bcnt_fifo256x16_n_23),
        .\qwd_cnt_reg[5] (gigerx_bcnt_fifo256x16_n_22),
        .\qwd_cnt_reg[6] (gigerx_bcnt_fifo256x16_n_21),
        .\qwd_cnt_reg[7] (gigerx_bcnt_fifo256x16_n_20),
        .\qwd_cnt_reg[8] (gigerx_bcnt_fifo256x16_n_15),
        .\qwd_cnt_reg[9] (gigerx_bcnt_fifo256x16_n_18),
        .rst_(rst__0),
        .x_bcnt_we_reg(x_bcnt_we),
        .x_byte_cnt(x_byte_cnt));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo256x64_2clk gigerx_fifo256x64_2clk
       (.\data_out_reg[63] (data_out_s2p),
        .dout(data_in),
        .lclk(lclk),
        .rd_en(gige_data_fifo_re),
        .rst_(rst__0),
        .wr_en(x_we));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo256x8 gigerx_fifo256x8
       (.\ctrl_out_reg[7] (ctrl_out_s2p),
        .dout(ctrl_in),
        .lclk(lclk),
        .rd_en(gige_data_fifo_re),
        .rst_(rst__0),
        .wr_en(x_we));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gige_s2p
   (gmii_rx_dv_dly,
    first_data_dly,
    frame_dly1_reg_0,
    link_ok,
    pdet_in_dly_reg_0,
    link_break,
    wr_en,
    \count_reg[7]_0 ,
    \consec_idle_reg[0]_0 ,
    \count_reg[8]_0 ,
    x_byte_cnt,
    Q,
    frame_reg_0,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    rst__0,
    out,
    lclk,
    first_data0,
    first_data_dly_reg_0,
    \data_in_dly1_reg[2]_0 ,
    link_ok_reg_0,
    fmac_speed,
    rst_,
    mode_1G,
    mode_100M,
    D);
  output gmii_rx_dv_dly;
  output first_data_dly;
  output frame_dly1_reg_0;
  output link_ok;
  output pdet_in_dly_reg_0;
  output link_break;
  output wr_en;
  output \count_reg[7]_0 ;
  output \consec_idle_reg[0]_0 ;
  output \count_reg[8]_0 ;
  output [15:0]x_byte_cnt;
  output [1:0]Q;
  output frame_reg_0;
  output [63:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input rst__0;
  input out;
  input lclk;
  input first_data0;
  input first_data_dly_reg_0;
  input \data_in_dly1_reg[2]_0 ;
  input link_ok_reg_0;
  input [1:0]fmac_speed;
  input rst_;
  input mode_1G;
  input mode_100M;
  input [7:0]D;

  wire [7:0]D;
  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [63:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [1:0]Q;
  wire cff0;
  wire cff1;
  wire cff2;
  wire cff3;
  wire cff4;
  wire cff5;
  wire cff6;
  wire cff7;
  wire [7:0]consec_idle;
  wire \consec_idle[7]_i_1_n_0 ;
  wire \consec_idle_reg[0]_0 ;
  wire [15:0]count;
  wire [15:0]count100;
  wire [5:5]count1000;
  wire [15:0]count1002;
  wire \count100[14]_i_2_n_0 ;
  wire \count100[15]_i_3_n_0 ;
  wire \count100[15]_i_4_n_0 ;
  wire \count100[15]_i_5_n_0 ;
  wire \count100[15]_i_6_n_0 ;
  wire \count100[15]_i_7_n_0 ;
  wire \count100[1]_i_1_n_0 ;
  wire \count100[9]_i_2_n_0 ;
  wire \count[0]_i_1_n_0 ;
  wire \count[10]_i_1_n_0 ;
  wire \count[11]_i_1_n_0 ;
  wire \count[12]_i_1_n_0 ;
  wire \count[13]_i_1_n_0 ;
  wire \count[14]_i_1_n_0 ;
  wire \count[14]_i_2_n_0 ;
  wire \count[14]_i_3_n_0 ;
  wire \count[15]_i_1_n_0 ;
  wire \count[15]_i_2_n_0 ;
  wire \count[15]_i_3_n_0 ;
  wire \count[15]_i_4_n_0 ;
  wire \count[15]_i_5_n_0 ;
  wire \count[15]_i_6_n_0 ;
  wire \count[1]_i_1_n_0 ;
  wire \count[1]_i_2_n_0 ;
  wire \count[2]_i_1_n_0 ;
  wire \count[3]_i_1_n_0 ;
  wire \count[3]_i_2_n_0 ;
  wire \count[4]_i_1_n_0 ;
  wire \count[4]_i_2_n_0 ;
  wire \count[4]_i_3_n_0 ;
  wire \count[5]_i_1_n_0 ;
  wire \count[6]_i_1_n_0 ;
  wire \count[6]_i_2_n_0 ;
  wire \count[6]_i_3_n_0 ;
  wire \count[7]_i_1_n_0 ;
  wire \count[7]_i_2_n_0 ;
  wire \count[8]_i_1_n_0 ;
  wire \count[8]_i_2_n_0 ;
  wire \count[9]_i_1_n_0 ;
  wire \count[9]_i_3_n_0 ;
  wire \count_reg[7]_0 ;
  wire \count_reg[8]_0 ;
  wire [7:0]counter2;
  wire [3:3]counter20;
  wire [7:0]counter22;
  wire \counter2[1]_i_1_n_0 ;
  wire \counter2[1]_i_2_n_0 ;
  wire \counter2[7]_i_3_n_0 ;
  wire \counter2[7]_i_4_n_0 ;
  wire [7:0]ctrl_out;
  wire \ctrl_out[0]_i_2_n_0 ;
  wire \ctrl_out[0]_i_3_n_0 ;
  wire \ctrl_out[0]_i_4_n_0 ;
  wire \ctrl_out[0]_i_5_n_0 ;
  wire \ctrl_out[1]_i_2_n_0 ;
  wire \ctrl_out[1]_i_3_n_0 ;
  wire \ctrl_out[2]_i_2_n_0 ;
  wire \ctrl_out[3]_i_2__0_n_0 ;
  wire \ctrl_out[3]_i_3__0_n_0 ;
  wire [63:0]data0;
  wire [7:0]data_in_dly;
  wire [7:0]data_in_dly1;
  wire \data_in_dly1[1]_i_1_n_0 ;
  wire \data_in_dly1[2]_i_1_n_0 ;
  wire \data_in_dly1[3]_i_1_n_0 ;
  wire \data_in_dly1[4]_i_1_n_0 ;
  wire \data_in_dly1[5]_i_1_n_0 ;
  wire \data_in_dly1[6]_i_1_n_0 ;
  wire \data_in_dly1[7]_i_1_n_0 ;
  wire \data_in_dly1_reg[2]_0 ;
  wire [63:0]data_out;
  wire \data_out[0]_i_2__0_n_0 ;
  wire \data_out[0]_i_3_n_0 ;
  wire \data_out[10]_i_2__0_n_0 ;
  wire \data_out[10]_i_3_n_0 ;
  wire \data_out[11]_i_2__0_n_0 ;
  wire \data_out[11]_i_3_n_0 ;
  wire \data_out[12]_i_2__0_n_0 ;
  wire \data_out[12]_i_3_n_0 ;
  wire \data_out[13]_i_2__0_n_0 ;
  wire \data_out[13]_i_3_n_0 ;
  wire \data_out[14]_i_2__0_n_0 ;
  wire \data_out[14]_i_3_n_0 ;
  wire \data_out[15]_i_2__0_n_0 ;
  wire \data_out[15]_i_3_n_0 ;
  wire \data_out[16]_i_2__0_n_0 ;
  wire \data_out[17]_i_2__0_n_0 ;
  wire \data_out[17]_i_3_n_0 ;
  wire \data_out[17]_i_4_n_0 ;
  wire \data_out[17]_i_5_n_0 ;
  wire \data_out[17]_i_6_n_0 ;
  wire \data_out[18]_i_2__0_n_0 ;
  wire \data_out[19]_i_2__0_n_0 ;
  wire \data_out[19]_i_3_n_0 ;
  wire \data_out[1]_i_2__0_n_0 ;
  wire \data_out[1]_i_3_n_0 ;
  wire \data_out[1]_i_4_n_0 ;
  wire \data_out[20]_i_2__0_n_0 ;
  wire \data_out[20]_i_3_n_0 ;
  wire \data_out[21]_i_2__0_n_0 ;
  wire \data_out[21]_i_3_n_0 ;
  wire \data_out[22]_i_2__0_n_0 ;
  wire \data_out[22]_i_3_n_0 ;
  wire \data_out[23]_i_2__0_n_0 ;
  wire \data_out[23]_i_3_n_0 ;
  wire \data_out[24]_i_2__0_n_0 ;
  wire \data_out[24]_i_3_n_0 ;
  wire \data_out[24]_i_4_n_0 ;
  wire \data_out[25]_i_2__0_n_0 ;
  wire \data_out[26]_i_2__0_n_0 ;
  wire \data_out[26]_i_3_n_0 ;
  wire \data_out[26]_i_4_n_0 ;
  wire \data_out[27]_i_2__0_n_0 ;
  wire \data_out[28]_i_2__0_n_0 ;
  wire \data_out[29]_i_2__0_n_0 ;
  wire \data_out[2]_i_2__0_n_0 ;
  wire \data_out[2]_i_3_n_0 ;
  wire \data_out[30]_i_2__0_n_0 ;
  wire \data_out[31]_i_2__0_n_0 ;
  wire \data_out[31]_i_3_n_0 ;
  wire \data_out[31]_i_4_n_0 ;
  wire \data_out[33]_i_2_n_0 ;
  wire \data_out[33]_i_3_n_0 ;
  wire \data_out[33]_i_4_n_0 ;
  wire \data_out[33]_i_5_n_0 ;
  wire \data_out[33]_i_6_n_0 ;
  wire \data_out[34]_i_2_n_0 ;
  wire \data_out[39]_i_2_n_0 ;
  wire \data_out[39]_i_3_n_0 ;
  wire \data_out[3]_i_2__0_n_0 ;
  wire \data_out[3]_i_3_n_0 ;
  wire \data_out[3]_i_4_n_0 ;
  wire \data_out[41]_i_2_n_0 ;
  wire \data_out[41]_i_3_n_0 ;
  wire \data_out[41]_i_4_n_0 ;
  wire \data_out[42]_i_2_n_0 ;
  wire \data_out[47]_i_2_n_0 ;
  wire \data_out[49]_i_2_n_0 ;
  wire \data_out[49]_i_3_n_0 ;
  wire \data_out[4]_i_2__0_n_0 ;
  wire \data_out[4]_i_3_n_0 ;
  wire \data_out[4]_i_4_n_0 ;
  wire \data_out[55]_i_2_n_0 ;
  wire \data_out[55]_i_3_n_0 ;
  wire \data_out[55]_i_4_n_0 ;
  wire \data_out[5]_i_2__0_n_0 ;
  wire \data_out[5]_i_3_n_0 ;
  wire \data_out[5]_i_4_n_0 ;
  wire \data_out[6]_i_2__0_n_0 ;
  wire \data_out[6]_i_3_n_0 ;
  wire \data_out[6]_i_4_n_0 ;
  wire \data_out[7]_i_2__0_n_0 ;
  wire \data_out[7]_i_3_n_0 ;
  wire \data_out[7]_i_4_n_0 ;
  wire \data_out[8]_i_2__0_n_0 ;
  wire \data_out[8]_i_3_n_0 ;
  wire \data_out[8]_i_4_n_0 ;
  wire \data_out[8]_i_5_n_0 ;
  wire \data_out[9]_i_2__0_n_0 ;
  wire \data_out[9]_i_3_n_0 ;
  wire \data_out[9]_i_4_n_0 ;
  wire \data_out[9]_i_5_n_0 ;
  wire \data_out[9]_i_6_n_0 ;
  wire \data_out[9]_i_7_n_0 ;
  wire \dff0[7]_i_1_n_0 ;
  wire \dff0[7]_i_2_n_0 ;
  wire \dff0[7]_i_3_n_0 ;
  wire \dff0[7]_i_4_n_0 ;
  wire eof;
  wire eof0;
  wire eof0_2;
  wire eof0_i_2__1_n_0;
  wire eof0_i_3__1_n_0;
  wire eof0_i_4__0_n_0;
  wire eof0_i_5__0_n_0;
  wire eof0_i_6__1_n_0;
  wire eof0_i_7__0_n_0;
  wire eof1;
  wire eof1_5;
  wire eof1_i_2__0_n_0;
  wire eof1_i_3__1_n_0;
  wire eof1_i_4__1_n_0;
  wire eof2;
  wire eof2_1;
  wire eof2_i_2_n_0;
  wire eof2_i_3_n_0;
  wire eof2_i_4_n_0;
  wire eof3;
  wire eof3_4;
  wire eof3_i_2_n_0;
  wire eof3_i_3_n_0;
  wire eof3_i_4_n_0;
  wire eof3_i_5_n_0;
  wire eof4;
  wire eof4_3;
  wire eof4_i_2_n_0;
  wire eof4_i_3_n_0;
  wire eof4_i_4_n_0;
  wire eof4_i_5_n_0;
  wire eof4_i_6_n_0;
  wire eof4_i_7_n_0;
  wire eof5;
  wire eof5_6;
  wire eof5_i_2_n_0;
  wire eof5_i_3_n_0;
  wire eof5_i_4_n_0;
  wire eof5_i_5_n_0;
  wire eof5_i_6_n_0;
  wire eof5_i_7_n_0;
  wire eof6;
  wire eof6_0;
  wire eof6_i_1_n_0;
  wire eof6_i_3_n_0;
  wire eof6_i_4_n_0;
  wire eof6_i_5_n_0;
  wire eof6_i_6_n_0;
  wire eof_dly1;
  wire eof_dly2;
  wire eof_i_2_n_0;
  wire first_data;
  wire first_data0;
  wire first_data_dly;
  wire first_data_dly_reg_0;
  wire [1:0]fmac_speed;
  wire frame_dly1;
  wire frame_dly1_reg_0;
  wire frame_reg_0;
  wire gmii_rx_dv_dly;
  wire idle_detect;
  wire idle_detect0;
  wire lclk;
  wire link_break;
  wire link_break1;
  wire link_break1_carry__0_i_1_n_0;
  wire link_break1_carry__0_i_2_n_0;
  wire link_break1_carry__0_i_3_n_0;
  wire link_break1_carry__0_i_4_n_0;
  wire link_break1_carry__0_i_5_n_0;
  wire link_break1_carry__0_i_6_n_0;
  wire link_break1_carry__0_i_7_n_0;
  wire link_break1_carry__0_i_8_n_0;
  wire link_break1_carry__0_n_0;
  wire link_break1_carry__0_n_1;
  wire link_break1_carry__0_n_2;
  wire link_break1_carry__0_n_3;
  wire link_break1_carry__0_n_5;
  wire link_break1_carry__0_n_6;
  wire link_break1_carry__0_n_7;
  wire link_break1_carry__1_i_1_n_0;
  wire link_break1_carry__1_i_2_n_0;
  wire link_break1_carry__1_i_3_n_0;
  wire link_break1_carry__1_i_4_n_0;
  wire link_break1_carry__1_i_5_n_0;
  wire link_break1_carry__1_i_6_n_0;
  wire link_break1_carry__1_n_3;
  wire link_break1_carry__1_n_5;
  wire link_break1_carry__1_n_6;
  wire link_break1_carry__1_n_7;
  wire link_break1_carry_i_1_n_0;
  wire link_break1_carry_i_2_n_0;
  wire link_break1_carry_i_3_n_0;
  wire link_break1_carry_i_4_n_0;
  wire link_break1_carry_i_5_n_0;
  wire link_break1_carry_i_6_n_0;
  wire link_break1_carry_i_7_n_0;
  wire link_break1_carry_i_8_n_0;
  wire link_break1_carry_n_0;
  wire link_break1_carry_n_1;
  wire link_break1_carry_n_2;
  wire link_break1_carry_n_3;
  wire link_break1_carry_n_5;
  wire link_break1_carry_n_6;
  wire link_break1_carry_n_7;
  wire link_ok;
  wire link_ok0__0;
  wire link_ok_i_2_n_0;
  wire link_ok_reg_0;
  wire mode_100M;
  wire mode_1G;
  wire out;
  wire p_1_in;
  wire [15:1]p_3_in;
  wire pdet_in_dly;
  wire pdet_in_dly_reg_0;
  wire pulse100;
  wire pulse100_dly1;
  wire pulse100_i_1_n_0;
  wire pvld;
  wire pvld_i_1_n_0;
  wire pvld_i_2_n_0;
  wire rst_;
  wire rst__0;
  wire wr_en;
  wire x_bcnt_we_i_1_n_0;
  wire [15:0]x_byte_cnt;
  wire \x_byte_cnt[0]_i_1_n_0 ;
  wire \x_byte_cnt[15]_i_1_n_0 ;
  wire \x_byte_cnt[15]_i_2_n_0 ;
  wire \x_byte_cnt[15]_i_4_n_0 ;
  wire \x_byte_cnt_reg[15]_i_3_n_2 ;
  wire \x_byte_cnt_reg[15]_i_3_n_3 ;
  wire \x_byte_cnt_reg[15]_i_3_n_5 ;
  wire \x_byte_cnt_reg[15]_i_3_n_6 ;
  wire \x_byte_cnt_reg[15]_i_3_n_7 ;
  wire \x_byte_cnt_reg[8]_i_1_n_0 ;
  wire \x_byte_cnt_reg[8]_i_1_n_1 ;
  wire \x_byte_cnt_reg[8]_i_1_n_2 ;
  wire \x_byte_cnt_reg[8]_i_1_n_3 ;
  wire \x_byte_cnt_reg[8]_i_1_n_5 ;
  wire \x_byte_cnt_reg[8]_i_1_n_6 ;
  wire \x_byte_cnt_reg[8]_i_1_n_7 ;
  wire x_we;
  wire x_we_i_2_n_0;
  wire [3:3]NLW_link_break1_carry_CO_UNCONNECTED;
  wire [7:0]NLW_link_break1_carry_O_UNCONNECTED;
  wire [3:3]NLW_link_break1_carry__0_CO_UNCONNECTED;
  wire [7:0]NLW_link_break1_carry__0_O_UNCONNECTED;
  wire [7:3]NLW_link_break1_carry__1_CO_UNCONNECTED;
  wire [7:0]NLW_link_break1_carry__1_O_UNCONNECTED;
  wire [7:3]\NLW_x_byte_cnt_reg[15]_i_3_CO_UNCONNECTED ;
  wire [7:7]\NLW_x_byte_cnt_reg[15]_i_3_O_UNCONNECTED ;
  wire [3:3]\NLW_x_byte_cnt_reg[8]_i_1_CO_UNCONNECTED ;

  FDRE cff0_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(pdet_in_dly_reg_0),
        .Q(cff0),
        .R(rst__0));
  FDRE cff1_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff0),
        .Q(cff1),
        .R(rst__0));
  FDRE cff2_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff1),
        .Q(cff2),
        .R(rst__0));
  FDRE cff3_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff2),
        .Q(cff3),
        .R(rst__0));
  FDRE cff4_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff3),
        .Q(cff4),
        .R(rst__0));
  FDRE cff5_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff4),
        .Q(cff5),
        .R(rst__0));
  FDRE cff6_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff5),
        .Q(cff6),
        .R(rst__0));
  FDRE cff7_reg
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(cff6),
        .Q(cff7),
        .R(rst__0));
  LUT2 #(
    .INIT(4'hB)) 
    \consec_idle[7]_i_1 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(rst_),
        .O(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(idle_detect),
        .Q(consec_idle[0]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[0]),
        .Q(consec_idle[1]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[1]),
        .Q(consec_idle[2]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[2]),
        .Q(consec_idle[3]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[3]),
        .Q(consec_idle[4]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[4]),
        .Q(consec_idle[5]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[5]),
        .Q(consec_idle[6]),
        .R(\consec_idle[7]_i_1_n_0 ));
  FDRE \consec_idle_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(consec_idle[6]),
        .Q(consec_idle[7]),
        .R(\consec_idle[7]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \count100[0]_i_1 
       (.I0(count100[0]),
        .O(count1002[0]));
  (* SOFT_HLUTNM = "soft_lutpair482" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \count100[10]_i_1 
       (.I0(count100[10]),
        .I1(\count100[14]_i_2_n_0 ),
        .O(count1002[10]));
  (* SOFT_HLUTNM = "soft_lutpair482" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \count100[11]_i_1 
       (.I0(count100[11]),
        .I1(\count100[14]_i_2_n_0 ),
        .I2(count100[10]),
        .O(count1002[11]));
  (* SOFT_HLUTNM = "soft_lutpair469" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count100[12]_i_1 
       (.I0(count100[12]),
        .I1(count100[10]),
        .I2(\count100[14]_i_2_n_0 ),
        .I3(count100[11]),
        .O(count1002[12]));
  (* SOFT_HLUTNM = "soft_lutpair449" *) 
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \count100[13]_i_1 
       (.I0(count100[11]),
        .I1(\count100[14]_i_2_n_0 ),
        .I2(count100[10]),
        .I3(count100[12]),
        .I4(count100[13]),
        .O(count1002[13]));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \count100[14]_i_1 
       (.I0(count100[14]),
        .I1(count100[11]),
        .I2(\count100[14]_i_2_n_0 ),
        .I3(count100[10]),
        .I4(count100[12]),
        .I5(count100[13]),
        .O(count1002[14]));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    \count100[14]_i_2 
       (.I0(count100[8]),
        .I1(\count100[9]_i_2_n_0 ),
        .I2(count100[6]),
        .I3(count100[5]),
        .I4(count100[7]),
        .I5(count100[9]),
        .O(\count100[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0800FFFF)) 
    \count100[15]_i_1 
       (.I0(count100[0]),
        .I1(count100[1]),
        .I2(\count100[15]_i_3_n_0 ),
        .I3(\count100[15]_i_4_n_0 ),
        .I4(rst_),
        .I5(\count100[15]_i_5_n_0 ),
        .O(count1000));
  LUT3 #(
    .INIT(8'h6A)) 
    \count100[15]_i_2 
       (.I0(count100[15]),
        .I1(\count100[15]_i_6_n_0 ),
        .I2(count100[14]),
        .O(count1002[15]));
  LUT6 #(
    .INIT(64'hFFFEFFFFFFFFFFFF)) 
    \count100[15]_i_3 
       (.I0(count100[7]),
        .I1(count100[4]),
        .I2(count100[2]),
        .I3(count100[3]),
        .I4(count100[5]),
        .I5(count100[6]),
        .O(\count100[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \count100[15]_i_4 
       (.I0(count100[8]),
        .I1(count100[13]),
        .I2(count100[14]),
        .I3(count100[15]),
        .I4(\count100[15]_i_7_n_0 ),
        .O(\count100[15]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair480" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \count100[15]_i_5 
       (.I0(frame_dly1_reg_0),
        .I1(frame_dly1),
        .O(\count100[15]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair449" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \count100[15]_i_6 
       (.I0(count100[13]),
        .I1(count100[12]),
        .I2(count100[10]),
        .I3(\count100[14]_i_2_n_0 ),
        .I4(count100[11]),
        .O(\count100[15]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair469" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \count100[15]_i_7 
       (.I0(count100[12]),
        .I1(count100[10]),
        .I2(count100[9]),
        .I3(count100[11]),
        .O(\count100[15]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair480" *) 
  LUT4 #(
    .INIT(16'h4FF4)) 
    \count100[1]_i_1 
       (.I0(frame_dly1),
        .I1(frame_dly1_reg_0),
        .I2(count100[0]),
        .I3(count100[1]),
        .O(\count100[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair466" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count100[2]_i_1 
       (.I0(count100[2]),
        .I1(count100[1]),
        .I2(count100[0]),
        .O(count1002[2]));
  (* SOFT_HLUTNM = "soft_lutpair466" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count100[3]_i_1 
       (.I0(count100[3]),
        .I1(count100[0]),
        .I2(count100[1]),
        .I3(count100[2]),
        .O(count1002[3]));
  (* SOFT_HLUTNM = "soft_lutpair448" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count100[4]_i_1 
       (.I0(count100[4]),
        .I1(count100[2]),
        .I2(count100[1]),
        .I3(count100[0]),
        .I4(count100[3]),
        .O(count1002[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count100[5]_i_1 
       (.I0(count100[3]),
        .I1(count100[0]),
        .I2(count100[1]),
        .I3(count100[2]),
        .I4(count100[4]),
        .I5(count100[5]),
        .O(count1002[5]));
  LUT3 #(
    .INIT(8'h9A)) 
    \count100[6]_i_1 
       (.I0(count100[6]),
        .I1(\count100[9]_i_2_n_0 ),
        .I2(count100[5]),
        .O(count1002[6]));
  (* SOFT_HLUTNM = "soft_lutpair447" *) 
  LUT4 #(
    .INIT(16'hAA6A)) 
    \count100[7]_i_1 
       (.I0(count100[7]),
        .I1(count100[5]),
        .I2(count100[6]),
        .I3(\count100[9]_i_2_n_0 ),
        .O(count1002[7]));
  (* SOFT_HLUTNM = "soft_lutpair447" *) 
  LUT5 #(
    .INIT(32'h9AAAAAAA)) 
    \count100[8]_i_1 
       (.I0(count100[8]),
        .I1(\count100[9]_i_2_n_0 ),
        .I2(count100[6]),
        .I3(count100[5]),
        .I4(count100[7]),
        .O(count1002[8]));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAAAAAAA)) 
    \count100[9]_i_1 
       (.I0(count100[9]),
        .I1(count100[7]),
        .I2(count100[5]),
        .I3(count100[6]),
        .I4(\count100[9]_i_2_n_0 ),
        .I5(count100[8]),
        .O(count1002[9]));
  (* SOFT_HLUTNM = "soft_lutpair448" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \count100[9]_i_2 
       (.I0(count100[3]),
        .I1(count100[0]),
        .I2(count100[1]),
        .I3(count100[2]),
        .I4(count100[4]),
        .O(\count100[9]_i_2_n_0 ));
  FDRE \count100_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[0]),
        .Q(count100[0]),
        .R(count1000));
  FDRE \count100_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[10]),
        .Q(count100[10]),
        .R(count1000));
  FDRE \count100_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[11]),
        .Q(count100[11]),
        .R(count1000));
  FDRE \count100_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[12]),
        .Q(count100[12]),
        .R(count1000));
  FDRE \count100_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[13]),
        .Q(count100[13]),
        .R(count1000));
  FDRE \count100_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[14]),
        .Q(count100[14]),
        .R(count1000));
  FDRE \count100_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[15]),
        .Q(count100[15]),
        .R(count1000));
  FDRE \count100_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\count100[1]_i_1_n_0 ),
        .Q(count100[1]),
        .R(rst__0));
  FDRE \count100_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[2]),
        .Q(count100[2]),
        .R(count1000));
  FDRE \count100_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[3]),
        .Q(count100[3]),
        .R(count1000));
  FDRE \count100_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[4]),
        .Q(count100[4]),
        .R(count1000));
  FDRE \count100_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[5]),
        .Q(count100[5]),
        .R(count1000));
  FDRE \count100_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[6]),
        .Q(count100[6]),
        .R(count1000));
  FDRE \count100_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[7]),
        .Q(count100[7]),
        .R(count1000));
  FDRE \count100_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[8]),
        .Q(count100[8]),
        .R(count1000));
  FDRE \count100_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(count1002[9]),
        .Q(count100[9]),
        .R(count1000));
  LUT2 #(
    .INIT(4'hB)) 
    \count[0]_i_1 
       (.I0(\count[15]_i_4_n_0 ),
        .I1(count[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[10]_i_1 
       (.I0(count[10]),
        .I1(\count[14]_i_2_n_0 ),
        .O(\count[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair490" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \count[11]_i_1 
       (.I0(count[11]),
        .I1(\count[14]_i_2_n_0 ),
        .I2(count[10]),
        .O(\count[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair453" *) 
  LUT4 #(
    .INIT(16'hAAA9)) 
    \count[12]_i_1 
       (.I0(count[12]),
        .I1(\count[14]_i_2_n_0 ),
        .I2(count[11]),
        .I3(count[10]),
        .O(\count[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair453" *) 
  LUT5 #(
    .INIT(32'hAAAAAAA9)) 
    \count[13]_i_1 
       (.I0(count[13]),
        .I1(count[12]),
        .I2(count[10]),
        .I3(count[11]),
        .I4(\count[14]_i_2_n_0 ),
        .O(\count[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA9)) 
    \count[14]_i_1 
       (.I0(count[14]),
        .I1(\count[14]_i_2_n_0 ),
        .I2(count[11]),
        .I3(count[10]),
        .I4(count[12]),
        .I5(count[13]),
        .O(\count[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \count[14]_i_2 
       (.I0(count[9]),
        .I1(\count[14]_i_3_n_0 ),
        .I2(count[2]),
        .I3(count[0]),
        .I4(count[1]),
        .I5(count[8]),
        .O(\count[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair440" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \count[14]_i_3 
       (.I0(count[5]),
        .I1(count[6]),
        .I2(count[4]),
        .I3(count[7]),
        .I4(count[3]),
        .O(\count[14]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hE0FF)) 
    \count[15]_i_1 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(\count[15]_i_4_n_0 ),
        .I3(rst_),
        .O(\count[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFD)) 
    \count[15]_i_2 
       (.I0(rst_),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .O(\count[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAAAA6)) 
    \count[15]_i_3 
       (.I0(count[15]),
        .I1(\count[15]_i_5_n_0 ),
        .I2(count[12]),
        .I3(count[14]),
        .I4(count[13]),
        .O(\count[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7530753030FF7530)) 
    \count[15]_i_4 
       (.I0(frame_dly1),
        .I1(\count[9]_i_3_n_0 ),
        .I2(\count[15]_i_6_n_0 ),
        .I3(frame_dly1_reg_0),
        .I4(fmac_speed[0]),
        .I5(fmac_speed[1]),
        .O(\count[15]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair490" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \count[15]_i_5 
       (.I0(count[10]),
        .I1(count[11]),
        .I2(\count[14]_i_2_n_0 ),
        .O(\count[15]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair446" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \count[15]_i_6 
       (.I0(count[9]),
        .I1(eof0_i_7__0_n_0),
        .O(\count[15]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF990999999909)) 
    \count[1]_i_1 
       (.I0(count[0]),
        .I1(count[1]),
        .I2(frame_dly1_reg_0),
        .I3(frame_dly1),
        .I4(mode_1G),
        .I5(\count[1]_i_2_n_0 ),
        .O(\count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair470" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    \count[1]_i_2 
       (.I0(\count[9]_i_3_n_0 ),
        .I1(\count[15]_i_6_n_0 ),
        .I2(frame_dly1_reg_0),
        .O(\count[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair473" *) 
  LUT4 #(
    .INIT(16'hFEAB)) 
    \count[2]_i_1 
       (.I0(\count[15]_i_4_n_0 ),
        .I1(count[0]),
        .I2(count[1]),
        .I3(count[2]),
        .O(\count[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA020A0F0A020A000)) 
    \count[3]_i_1 
       (.I0(\count[3]_i_2_n_0 ),
        .I1(\count[1]_i_2_n_0 ),
        .I2(rst_),
        .I3(fmac_speed[1]),
        .I4(fmac_speed[0]),
        .I5(count[3]),
        .O(\count[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFE01FFFFFE01FE01)) 
    \count[3]_i_2 
       (.I0(count[1]),
        .I1(count[0]),
        .I2(count[2]),
        .I3(count[3]),
        .I4(mode_1G),
        .I5(\count[4]_i_2_n_0 ),
        .O(\count[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEBEB00C300C3EBEB)) 
    \count[4]_i_1 
       (.I0(\count[4]_i_2_n_0 ),
        .I1(count[4]),
        .I2(\count[4]_i_3_n_0 ),
        .I3(\count[15]_i_4_n_0 ),
        .I4(fmac_speed[1]),
        .I5(fmac_speed[0]),
        .O(\count[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair470" *) 
  LUT4 #(
    .INIT(16'h4F44)) 
    \count[4]_i_2 
       (.I0(frame_dly1),
        .I1(frame_dly1_reg_0),
        .I2(\count[9]_i_3_n_0 ),
        .I3(\count[15]_i_6_n_0 ),
        .O(\count[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair473" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \count[4]_i_3 
       (.I0(count[2]),
        .I1(count[3]),
        .I2(count[1]),
        .I3(count[0]),
        .O(\count[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA9)) 
    \count[5]_i_1 
       (.I0(count[5]),
        .I1(count[2]),
        .I2(count[3]),
        .I3(count[1]),
        .I4(count[0]),
        .I5(count[4]),
        .O(\count[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000B4F4F000C000B)) 
    \count[6]_i_1 
       (.I0(frame_dly1),
        .I1(frame_dly1_reg_0),
        .I2(\count[6]_i_2_n_0 ),
        .I3(\count[6]_i_3_n_0 ),
        .I4(fmac_speed[0]),
        .I5(fmac_speed[1]),
        .O(\count[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair477" *) 
  LUT4 #(
    .INIT(16'h5556)) 
    \count[6]_i_2 
       (.I0(count[6]),
        .I1(count[5]),
        .I2(count[4]),
        .I3(\count[4]_i_3_n_0 ),
        .O(\count[6]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \count[6]_i_3 
       (.I0(\count[15]_i_6_n_0 ),
        .I1(\count[9]_i_3_n_0 ),
        .O(\count[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA9)) 
    \count[7]_i_1 
       (.I0(count[7]),
        .I1(count[2]),
        .I2(count[3]),
        .I3(count[1]),
        .I4(count[0]),
        .I5(\count[7]_i_2_n_0 ),
        .O(\count[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair440" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \count[7]_i_2 
       (.I0(count[4]),
        .I1(count[6]),
        .I2(count[5]),
        .O(\count[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF22FF22F0000F00F)) 
    \count[8]_i_1 
       (.I0(frame_dly1_reg_0),
        .I1(frame_dly1),
        .I2(count[8]),
        .I3(\count[8]_i_2_n_0 ),
        .I4(\count[15]_i_4_n_0 ),
        .I5(\count_reg[8]_0 ),
        .O(\count[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \count[8]_i_2 
       (.I0(count[3]),
        .I1(count[7]),
        .I2(\count[7]_i_2_n_0 ),
        .I3(count[2]),
        .I4(count[0]),
        .I5(count[1]),
        .O(\count[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF0F22002200FF0F)) 
    \count[9]_i_1 
       (.I0(frame_dly1_reg_0),
        .I1(frame_dly1),
        .I2(\count[15]_i_4_n_0 ),
        .I3(\count_reg[8]_0 ),
        .I4(count[9]),
        .I5(\count[9]_i_3_n_0 ),
        .O(\count[9]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[9]_i_2 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .O(\count_reg[8]_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \count[9]_i_3 
       (.I0(count[8]),
        .I1(count[1]),
        .I2(count[0]),
        .I3(count[2]),
        .I4(\count[14]_i_3_n_0 ),
        .O(\count[9]_i_3_n_0 ));
  FDRE \count_reg[0] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[0]_i_1_n_0 ),
        .Q(count[0]),
        .R(rst__0));
  FDRE \count_reg[10] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[10]_i_1_n_0 ),
        .Q(count[10]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[11] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[11]_i_1_n_0 ),
        .Q(count[11]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[12] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[12]_i_1_n_0 ),
        .Q(count[12]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[13] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[13]_i_1_n_0 ),
        .Q(count[13]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[14] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[14]_i_1_n_0 ),
        .Q(count[14]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[15] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[15]_i_3_n_0 ),
        .Q(count[15]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[1] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[1]_i_1_n_0 ),
        .Q(count[1]),
        .R(rst__0));
  FDRE \count_reg[2] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[2]_i_1_n_0 ),
        .Q(count[2]),
        .R(rst__0));
  FDRE \count_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\count[3]_i_1_n_0 ),
        .Q(count[3]),
        .R(1'b0));
  FDRE \count_reg[4] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[4]_i_1_n_0 ),
        .Q(count[4]),
        .R(rst__0));
  FDRE \count_reg[5] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[5]_i_1_n_0 ),
        .Q(count[5]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[6] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[6]_i_1_n_0 ),
        .Q(count[6]),
        .R(rst__0));
  FDRE \count_reg[7] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[7]_i_1_n_0 ),
        .Q(count[7]),
        .R(\count[15]_i_1_n_0 ));
  FDRE \count_reg[8] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[8]_i_1_n_0 ),
        .Q(count[8]),
        .R(rst__0));
  FDRE \count_reg[9] 
       (.C(lclk),
        .CE(\count[15]_i_2_n_0 ),
        .D(\count[9]_i_1_n_0 ),
        .Q(count[9]),
        .R(rst__0));
  (* SOFT_HLUTNM = "soft_lutpair483" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \counter2[0]_i_1 
       (.I0(counter2[0]),
        .O(counter22[0]));
  LUT6 #(
    .INIT(64'hBEBEBEBABEBEBEBE)) 
    \counter2[1]_i_1 
       (.I0(\count100[15]_i_5_n_0 ),
        .I1(counter2[0]),
        .I2(counter2[1]),
        .I3(\counter2[1]_i_2_n_0 ),
        .I4(counter2[2]),
        .I5(counter2[3]),
        .O(\counter2[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair478" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter2[1]_i_2 
       (.I0(counter2[6]),
        .I1(counter2[4]),
        .I2(counter2[7]),
        .I3(counter2[5]),
        .O(\counter2[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair483" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \counter2[2]_i_1 
       (.I0(counter2[2]),
        .I1(counter2[1]),
        .I2(counter2[0]),
        .O(counter22[2]));
  (* SOFT_HLUTNM = "soft_lutpair445" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \counter2[3]_i_1 
       (.I0(counter2[3]),
        .I1(counter2[0]),
        .I2(counter2[1]),
        .I3(counter2[2]),
        .O(counter22[3]));
  (* SOFT_HLUTNM = "soft_lutpair445" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \counter2[4]_i_1 
       (.I0(counter2[4]),
        .I1(counter2[2]),
        .I2(counter2[1]),
        .I3(counter2[0]),
        .I4(counter2[3]),
        .O(counter22[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \counter2[5]_i_1 
       (.I0(counter2[5]),
        .I1(counter2[3]),
        .I2(counter2[0]),
        .I3(counter2[1]),
        .I4(counter2[2]),
        .I5(counter2[4]),
        .O(counter22[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \counter2[6]_i_1 
       (.I0(counter2[6]),
        .I1(\counter2[7]_i_4_n_0 ),
        .O(counter22[6]));
  LUT4 #(
    .INIT(16'h4FFF)) 
    \counter2[7]_i_1 
       (.I0(frame_dly1),
        .I1(frame_dly1_reg_0),
        .I2(\counter2[7]_i_3_n_0 ),
        .I3(rst_),
        .O(counter20));
  (* SOFT_HLUTNM = "soft_lutpair478" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \counter2[7]_i_2 
       (.I0(counter2[7]),
        .I1(\counter2[7]_i_4_n_0 ),
        .I2(counter2[6]),
        .O(counter22[7]));
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \counter2[7]_i_3 
       (.I0(\counter2[1]_i_2_n_0 ),
        .I1(counter2[2]),
        .I2(counter2[1]),
        .I3(counter2[3]),
        .I4(counter2[0]),
        .O(\counter2[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \counter2[7]_i_4 
       (.I0(counter2[5]),
        .I1(counter2[3]),
        .I2(counter2[0]),
        .I3(counter2[1]),
        .I4(counter2[2]),
        .I5(counter2[4]),
        .O(\counter2[7]_i_4_n_0 ));
  FDRE \counter2_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[0]),
        .Q(counter2[0]),
        .R(counter20));
  FDRE \counter2_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\counter2[1]_i_1_n_0 ),
        .Q(counter2[1]),
        .R(rst__0));
  FDRE \counter2_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[2]),
        .Q(counter2[2]),
        .R(counter20));
  FDRE \counter2_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[3]),
        .Q(counter2[3]),
        .R(counter20));
  FDRE \counter2_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[4]),
        .Q(counter2[4]),
        .R(counter20));
  FDRE \counter2_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[5]),
        .Q(counter2[5]),
        .R(counter20));
  FDRE \counter2_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[6]),
        .Q(counter2[6]),
        .R(counter20));
  FDRE \counter2_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(counter22[7]),
        .Q(counter2[7]),
        .R(counter20));
  FDSE ctrl_in_reg
       (.C(lclk),
        .CE(1'b1),
        .D(first_data_dly_reg_0),
        .Q(pdet_in_dly_reg_0),
        .S(rst__0));
  LUT6 #(
    .INIT(64'h000E000E000E0000)) 
    \ctrl_out[0]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(cff7),
        .I2(\ctrl_out[0]_i_2_n_0 ),
        .I3(\ctrl_out[0]_i_3_n_0 ),
        .I4(\ctrl_out[0]_i_4_n_0 ),
        .I5(cff4),
        .O(ctrl_out[0]));
  LUT5 #(
    .INIT(32'h04040F04)) 
    \ctrl_out[0]_i_2 
       (.I0(cff5),
        .I1(\data_out[26]_i_4_n_0 ),
        .I2(eof0),
        .I3(\data_out[34]_i_2_n_0 ),
        .I4(cff6),
        .O(\ctrl_out[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h444F4444)) 
    \ctrl_out[0]_i_3 
       (.I0(cff2),
        .I1(\ctrl_out[0]_i_5_n_0 ),
        .I2(eof0),
        .I3(cff3),
        .I4(\data_out[8]_i_4_n_0 ),
        .O(\ctrl_out[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFFFFFFFFFF)) 
    \ctrl_out[0]_i_4 
       (.I0(pvld),
        .I1(eof1),
        .I2(eof2),
        .I3(eof0),
        .I4(eof3),
        .I5(\consec_idle_reg[0]_0 ),
        .O(\ctrl_out[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair475" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \ctrl_out[0]_i_5 
       (.I0(eof1),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .I3(eof0),
        .O(\ctrl_out[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0E0E0E0E0E000E0E)) 
    \ctrl_out[1]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(cff6),
        .I2(\ctrl_out[1]_i_2_n_0 ),
        .I3(cff5),
        .I4(\data_out[34]_i_2_n_0 ),
        .I5(eof0),
        .O(ctrl_out[1]));
  LUT6 #(
    .INIT(64'h44F444F444F4FFFF)) 
    \ctrl_out[1]_i_2 
       (.I0(\ctrl_out[1]_i_3_n_0 ),
        .I1(\data_out[26]_i_4_n_0 ),
        .I2(\data_out[8]_i_4_n_0 ),
        .I3(\ctrl_out[3]_i_3__0_n_0 ),
        .I4(cff3),
        .I5(\ctrl_out[0]_i_4_n_0 ),
        .O(\ctrl_out[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair492" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ctrl_out[1]_i_3 
       (.I0(eof0),
        .I1(cff4),
        .O(\ctrl_out[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0E0E0E0E0E0E000E)) 
    \ctrl_out[2]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(cff5),
        .I2(\ctrl_out[2]_i_2_n_0 ),
        .I3(\data_out[26]_i_4_n_0 ),
        .I4(cff3),
        .I5(eof0),
        .O(ctrl_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair456" *) 
  LUT5 #(
    .INIT(32'h111F1111)) 
    \ctrl_out[2]_i_2 
       (.I0(\ctrl_out[0]_i_4_n_0 ),
        .I1(cff2),
        .I2(eof0),
        .I3(cff4),
        .I4(\data_out[34]_i_2_n_0 ),
        .O(\ctrl_out[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEE0EEE0E0000EE0E)) 
    \ctrl_out[3]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(cff4),
        .I2(\data_out[34]_i_2_n_0 ),
        .I3(\ctrl_out[3]_i_2__0_n_0 ),
        .I4(\data_out[26]_i_4_n_0 ),
        .I5(\ctrl_out[3]_i_3__0_n_0 ),
        .O(ctrl_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair444" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ctrl_out[3]_i_2__0 
       (.I0(eof0),
        .I1(cff3),
        .O(\ctrl_out[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair456" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ctrl_out[3]_i_3__0 
       (.I0(eof0),
        .I1(cff2),
        .O(\ctrl_out[3]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair444" *) 
  LUT5 #(
    .INIT(32'hEEE0EEEE)) 
    \ctrl_out[4]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(cff3),
        .I2(eof0),
        .I3(cff2),
        .I4(\data_out[34]_i_2_n_0 ),
        .O(ctrl_out[4]));
  LUT2 #(
    .INIT(4'hE)) 
    \ctrl_out[5]_i_1__0 
       (.I0(cff2),
        .I1(\data_out[42]_i_2_n_0 ),
        .O(ctrl_out[5]));
  (* SOFT_HLUTNM = "soft_lutpair484" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \ctrl_out[6]_i_1__0 
       (.I0(cff1),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(ctrl_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair484" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \ctrl_out[7]_i_1__0 
       (.I0(cff0),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(ctrl_out[7]));
  FDSE \ctrl_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .S(rst__0));
  FDSE \ctrl_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .S(rst__0));
  FDSE \ctrl_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .S(rst__0));
  FDSE \ctrl_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .S(rst__0));
  FDSE \ctrl_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .S(rst__0));
  FDSE \ctrl_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .S(rst__0));
  FDSE \ctrl_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .S(rst__0));
  FDSE \ctrl_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(ctrl_out[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .S(rst__0));
  LUT2 #(
    .INIT(4'hB)) 
    \data_in_dly1[1]_i_1 
       (.I0(first_data),
        .I1(rst_),
        .O(\data_in_dly1[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \data_in_dly1[2]_i_1 
       (.I0(data_in_dly[2]),
        .I1(first_data),
        .O(\data_in_dly1[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \data_in_dly1[3]_i_1 
       (.I0(data_in_dly[3]),
        .I1(first_data),
        .O(\data_in_dly1[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair494" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_in_dly1[4]_i_1 
       (.I0(data_in_dly[4]),
        .I1(first_data),
        .O(\data_in_dly1[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair494" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_in_dly1[5]_i_1 
       (.I0(data_in_dly[5]),
        .I1(first_data),
        .O(\data_in_dly1[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair493" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_in_dly1[6]_i_1 
       (.I0(data_in_dly[6]),
        .I1(first_data),
        .O(\data_in_dly1[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair493" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_in_dly1[7]_i_1 
       (.I0(data_in_dly[7]),
        .I1(first_data),
        .O(\data_in_dly1[7]_i_1_n_0 ));
  FDSE \data_in_dly1_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_in_dly[0]),
        .Q(data_in_dly1[0]),
        .S(\data_in_dly1[1]_i_1_n_0 ));
  FDSE \data_in_dly1_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_in_dly[1]),
        .Q(Q[0]),
        .S(\data_in_dly1[1]_i_1_n_0 ));
  FDSE \data_in_dly1_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1[2]_i_1_n_0 ),
        .Q(Q[1]),
        .S(rst__0));
  FDRE \data_in_dly1_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1[3]_i_1_n_0 ),
        .Q(data_in_dly1[3]),
        .R(rst__0));
  FDRE \data_in_dly1_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1[4]_i_1_n_0 ),
        .Q(data_in_dly1[4]),
        .R(rst__0));
  FDRE \data_in_dly1_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1[5]_i_1_n_0 ),
        .Q(data_in_dly1[5]),
        .R(rst__0));
  FDRE \data_in_dly1_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1[6]_i_1_n_0 ),
        .Q(data_in_dly1[6]),
        .R(rst__0));
  FDRE \data_in_dly1_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1[7]_i_1_n_0 ),
        .Q(data_in_dly1[7]),
        .R(rst__0));
  FDSE \data_in_dly_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(data_in_dly[0]),
        .S(rst__0));
  FDSE \data_in_dly_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(data_in_dly[1]),
        .S(rst__0));
  FDSE \data_in_dly_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(data_in_dly[2]),
        .S(rst__0));
  FDRE \data_in_dly_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(data_in_dly[3]),
        .R(rst__0));
  FDRE \data_in_dly_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(data_in_dly[4]),
        .R(rst__0));
  FDRE \data_in_dly_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(data_in_dly[5]),
        .R(rst__0));
  FDRE \data_in_dly_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(data_in_dly[6]),
        .R(rst__0));
  FDRE \data_in_dly_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(data_in_dly[7]),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h0E0E0E0E0E0E000E)) 
    \data_out[0]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[0]),
        .I2(\data_out[0]_i_2__0_n_0 ),
        .I3(\data_out[26]_i_4_n_0 ),
        .I4(eof0),
        .I5(data0[16]),
        .O(data_out[0]));
  LUT6 #(
    .INIT(64'hAAAEAAAEAAAEFFFF)) 
    \data_out[0]_i_2__0 
       (.I0(\data_out[0]_i_3_n_0 ),
        .I1(\data_out[34]_i_2_n_0 ),
        .I2(eof0),
        .I3(data0[8]),
        .I4(data0[24]),
        .I5(\ctrl_out[0]_i_4_n_0 ),
        .O(\data_out[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair461" *) 
  LUT5 #(
    .INIT(32'h444444F4)) 
    \data_out[0]_i_3 
       (.I0(data0[40]),
        .I1(\ctrl_out[0]_i_5_n_0 ),
        .I2(\data_out[8]_i_4_n_0 ),
        .I3(data0[32]),
        .I4(eof0),
        .O(\data_out[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0E0E0E000E0E0E0E)) 
    \data_out[10]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[10]),
        .I2(\data_out[10]_i_2__0_n_0 ),
        .I3(eof0),
        .I4(data0[26]),
        .I5(\data_out[26]_i_4_n_0 ),
        .O(data_out[10]));
  LUT6 #(
    .INIT(64'hFF10FF10FF10FFFF)) 
    \data_out[10]_i_2__0 
       (.I0(data0[18]),
        .I1(eof0),
        .I2(\data_out[34]_i_2_n_0 ),
        .I3(\data_out[10]_i_3_n_0 ),
        .I4(data0[34]),
        .I5(\ctrl_out[0]_i_4_n_0 ),
        .O(\data_out[10]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \data_out[10]_i_3 
       (.I0(eof0),
        .I1(data0[42]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(eof2),
        .I4(pvld),
        .I5(eof1),
        .O(\data_out[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC000C000C0F0C050)) 
    \data_out[11]_i_1__0 
       (.I0(\data_out[11]_i_2__0_n_0 ),
        .I1(data0[11]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof1),
        .I5(eof0),
        .O(data_out[11]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[11]_i_2__0 
       (.I0(data0[19]),
        .I1(eof5),
        .I2(data0[11]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[11]_i_3_n_0 ),
        .O(\data_out[11]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8080000F808)) 
    \data_out[11]_i_3 
       (.I0(eof4),
        .I1(data0[27]),
        .I2(eof3),
        .I3(data0[35]),
        .I4(eof2),
        .I5(data0[43]),
        .O(\data_out[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC000C000C0F0C050)) 
    \data_out[12]_i_1__0 
       (.I0(\data_out[12]_i_2__0_n_0 ),
        .I1(data0[12]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof1),
        .I5(eof0),
        .O(data_out[12]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[12]_i_2__0 
       (.I0(data0[20]),
        .I1(eof5),
        .I2(data0[12]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[12]_i_3_n_0 ),
        .O(\data_out[12]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8080000F808)) 
    \data_out[12]_i_3 
       (.I0(eof4),
        .I1(data0[28]),
        .I2(eof3),
        .I3(data0[36]),
        .I4(eof2),
        .I5(data0[44]),
        .O(\data_out[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC000C000C0F0C050)) 
    \data_out[13]_i_1__0 
       (.I0(\data_out[13]_i_2__0_n_0 ),
        .I1(data0[13]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof1),
        .I5(eof0),
        .O(data_out[13]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[13]_i_2__0 
       (.I0(data0[21]),
        .I1(eof5),
        .I2(data0[13]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[13]_i_3_n_0 ),
        .O(\data_out[13]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8080000F808)) 
    \data_out[13]_i_3 
       (.I0(eof4),
        .I1(data0[29]),
        .I2(eof3),
        .I3(data0[37]),
        .I4(eof2),
        .I5(data0[45]),
        .O(\data_out[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC000C000C0F0C050)) 
    \data_out[14]_i_1__0 
       (.I0(\data_out[14]_i_2__0_n_0 ),
        .I1(data0[14]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof1),
        .I5(eof0),
        .O(data_out[14]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[14]_i_2__0 
       (.I0(data0[22]),
        .I1(eof5),
        .I2(data0[14]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[14]_i_3_n_0 ),
        .O(\data_out[14]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8080000F808)) 
    \data_out[14]_i_3 
       (.I0(eof4),
        .I1(data0[30]),
        .I2(eof3),
        .I3(data0[38]),
        .I4(eof2),
        .I5(data0[46]),
        .O(\data_out[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hF000F0D0000000D0)) 
    \data_out[15]_i_1__0 
       (.I0(\data_out[15]_i_2__0_n_0 ),
        .I1(eof1),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof0),
        .I5(data0[15]),
        .O(data_out[15]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[15]_i_2__0 
       (.I0(data0[23]),
        .I1(eof5),
        .I2(data0[15]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[15]_i_3_n_0 ),
        .O(\data_out[15]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8080000F808)) 
    \data_out[15]_i_3 
       (.I0(eof4),
        .I1(data0[31]),
        .I2(eof3),
        .I3(data0[39]),
        .I4(eof2),
        .I5(data0[47]),
        .O(\data_out[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0E0E0E000E0E0E0E)) 
    \data_out[16]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[16]),
        .I2(\data_out[16]_i_2__0_n_0 ),
        .I3(eof0),
        .I4(data0[32]),
        .I5(\data_out[26]_i_4_n_0 ),
        .O(data_out[16]));
  LUT5 #(
    .INIT(32'h111F1111)) 
    \data_out[16]_i_2__0 
       (.I0(\ctrl_out[0]_i_4_n_0 ),
        .I1(data0[40]),
        .I2(data0[24]),
        .I3(eof0),
        .I4(\data_out[34]_i_2_n_0 ),
        .O(\data_out[16]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000FF8A)) 
    \data_out[17]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(\data_out[17]_i_2__0_n_0 ),
        .I2(\data_out[41]_i_2_n_0 ),
        .I3(data0[17]),
        .I4(\data_out[17]_i_3_n_0 ),
        .I5(\data_out[17]_i_4_n_0 ),
        .O(data_out[17]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF7)) 
    \data_out[17]_i_2__0 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof6),
        .I2(pvld),
        .I3(eof1),
        .I4(eof0),
        .I5(eof5),
        .O(\data_out[17]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAEAAA)) 
    \data_out[17]_i_3 
       (.I0(\data_out[17]_i_5_n_0 ),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(eof3),
        .I3(\data_out[33]_i_5_n_0 ),
        .I4(eof0),
        .I5(data0[41]),
        .O(\data_out[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000400)) 
    \data_out[17]_i_4 
       (.I0(\data_out[31]_i_2__0_n_0 ),
        .I1(\data_out[55]_i_4_n_0 ),
        .I2(pvld),
        .I3(\consec_idle_reg[0]_0 ),
        .I4(data0[33]),
        .I5(\data_out[17]_i_6_n_0 ),
        .O(\data_out[17]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair442" *) 
  LUT5 #(
    .INIT(32'h00000008)) 
    \data_out[17]_i_5 
       (.I0(eof2),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .I3(eof1),
        .I4(eof0),
        .O(\data_out[17]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    \data_out[17]_i_6 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof5),
        .I2(\data_out[41]_i_2_n_0 ),
        .I3(data0[25]),
        .I4(\data_out[9]_i_4_n_0 ),
        .I5(eof1),
        .O(\data_out[17]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0E0E0E000E0E0E0E)) 
    \data_out[18]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[18]),
        .I2(\data_out[18]_i_2__0_n_0 ),
        .I3(eof0),
        .I4(data0[34]),
        .I5(\data_out[26]_i_4_n_0 ),
        .O(data_out[18]));
  LUT5 #(
    .INIT(32'h111F1111)) 
    \data_out[18]_i_2__0 
       (.I0(\ctrl_out[0]_i_4_n_0 ),
        .I1(data0[42]),
        .I2(data0[26]),
        .I3(eof0),
        .I4(\data_out[34]_i_2_n_0 ),
        .O(\data_out[18]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFD555C000C000)) 
    \data_out[19]_i_1__0 
       (.I0(\data_out[19]_i_2__0_n_0 ),
        .I1(data0[19]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof2),
        .I5(\data_out[33]_i_3_n_0 ),
        .O(data_out[19]));
  LUT5 #(
    .INIT(32'h00F4FFF4)) 
    \data_out[19]_i_2__0 
       (.I0(data0[35]),
        .I1(eof4),
        .I2(\data_out[19]_i_3_n_0 ),
        .I3(eof3),
        .I4(data0[43]),
        .O(\data_out[19]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair455" *) 
  LUT5 #(
    .INIT(32'h00000F77)) 
    \data_out[19]_i_3 
       (.I0(eof6),
        .I1(data0[19]),
        .I2(data0[27]),
        .I3(eof5),
        .I4(eof4),
        .O(\data_out[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000045004545)) 
    \data_out[1]_i_1__0 
       (.I0(\data_out[1]_i_2__0_n_0 ),
        .I1(data0[9]),
        .I2(\data_out[34]_i_2_n_0 ),
        .I3(data0[17]),
        .I4(\data_out[26]_i_4_n_0 ),
        .I5(\data_out[1]_i_3_n_0 ),
        .O(data_out[1]));
  LUT6 #(
    .INIT(64'h000000000F440000)) 
    \data_out[1]_i_2__0 
       (.I0(data0[33]),
        .I1(eof2),
        .I2(data0[41]),
        .I3(eof1),
        .I4(\consec_idle_reg[0]_0 ),
        .I5(pvld),
        .O(\data_out[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F0C00EFEFEEEA)) 
    \data_out[1]_i_3 
       (.I0(\data_out[24]_i_2__0_n_0 ),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .I3(eof0),
        .I4(\data_out[1]_i_4_n_0 ),
        .I5(data0[1]),
        .O(\data_out[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00001000)) 
    \data_out[1]_i_4 
       (.I0(eof1),
        .I1(eof2),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(eof3),
        .I4(data0[25]),
        .O(\data_out[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFD555C000C000)) 
    \data_out[20]_i_1__0 
       (.I0(\data_out[20]_i_2__0_n_0 ),
        .I1(data0[20]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof2),
        .I5(\data_out[33]_i_3_n_0 ),
        .O(data_out[20]));
  LUT5 #(
    .INIT(32'h00F4FFF4)) 
    \data_out[20]_i_2__0 
       (.I0(data0[36]),
        .I1(eof4),
        .I2(\data_out[20]_i_3_n_0 ),
        .I3(eof3),
        .I4(data0[44]),
        .O(\data_out[20]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000F77)) 
    \data_out[20]_i_3 
       (.I0(eof6),
        .I1(data0[20]),
        .I2(data0[28]),
        .I3(eof5),
        .I4(eof4),
        .O(\data_out[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFD555C000C000)) 
    \data_out[21]_i_1__0 
       (.I0(\data_out[21]_i_2__0_n_0 ),
        .I1(data0[21]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof2),
        .I5(\data_out[33]_i_3_n_0 ),
        .O(data_out[21]));
  LUT5 #(
    .INIT(32'h00F4FFF4)) 
    \data_out[21]_i_2__0 
       (.I0(data0[37]),
        .I1(eof4),
        .I2(\data_out[21]_i_3_n_0 ),
        .I3(eof3),
        .I4(data0[45]),
        .O(\data_out[21]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000F77)) 
    \data_out[21]_i_3 
       (.I0(eof6),
        .I1(data0[21]),
        .I2(data0[29]),
        .I3(eof5),
        .I4(eof4),
        .O(\data_out[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFD555C000C000)) 
    \data_out[22]_i_1__0 
       (.I0(\data_out[22]_i_2__0_n_0 ),
        .I1(data0[22]),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(pvld),
        .I4(eof2),
        .I5(\data_out[33]_i_3_n_0 ),
        .O(data_out[22]));
  (* SOFT_HLUTNM = "soft_lutpair464" *) 
  LUT5 #(
    .INIT(32'h00F4FFF4)) 
    \data_out[22]_i_2__0 
       (.I0(data0[38]),
        .I1(eof4),
        .I2(\data_out[22]_i_3_n_0 ),
        .I3(eof3),
        .I4(data0[46]),
        .O(\data_out[22]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000F77)) 
    \data_out[22]_i_3 
       (.I0(eof6),
        .I1(data0[22]),
        .I2(data0[30]),
        .I3(eof5),
        .I4(eof4),
        .O(\data_out[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFD0D0D0D0D0D0D0)) 
    \data_out[23]_i_1__0 
       (.I0(\data_out[23]_i_2__0_n_0 ),
        .I1(eof2),
        .I2(\data_out[33]_i_3_n_0 ),
        .I3(data0[23]),
        .I4(\consec_idle_reg[0]_0 ),
        .I5(pvld),
        .O(data_out[23]));
  (* SOFT_HLUTNM = "soft_lutpair463" *) 
  LUT5 #(
    .INIT(32'h00F4FFF4)) 
    \data_out[23]_i_2__0 
       (.I0(data0[39]),
        .I1(eof4),
        .I2(\data_out[23]_i_3_n_0 ),
        .I3(eof3),
        .I4(data0[47]),
        .O(\data_out[23]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000F77)) 
    \data_out[23]_i_3 
       (.I0(eof6),
        .I1(data0[23]),
        .I2(data0[31]),
        .I3(eof5),
        .I4(eof4),
        .O(\data_out[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFDDFF0D)) 
    \data_out[24]_i_1__0 
       (.I0(\data_out[26]_i_4_n_0 ),
        .I1(data0[40]),
        .I2(\data_out[24]_i_2__0_n_0 ),
        .I3(eof0),
        .I4(data0[24]),
        .I5(\data_out[24]_i_3_n_0 ),
        .O(data_out[24]));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    \data_out[24]_i_2__0 
       (.I0(\data_out[24]_i_4_n_0 ),
        .I1(\data_out[41]_i_2_n_0 ),
        .I2(pvld),
        .I3(\consec_idle_reg[0]_0 ),
        .I4(eof1),
        .I5(eof2),
        .O(\data_out[24]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h080808FF08080808)) 
    \data_out[24]_i_3 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(data0[24]),
        .I3(data0[32]),
        .I4(eof0),
        .I5(\data_out[34]_i_2_n_0 ),
        .O(\data_out[24]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair455" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \data_out[24]_i_4 
       (.I0(eof6),
        .I1(eof5),
        .O(\data_out[24]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hE0EEE0E0EEEEEEEE)) 
    \data_out[25]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[25]),
        .I2(\data_out[25]_i_2__0_n_0 ),
        .I3(\data_out[31]_i_2__0_n_0 ),
        .I4(data0[41]),
        .I5(\data_out[31]_i_4_n_0 ),
        .O(data_out[25]));
  LUT6 #(
    .INIT(64'h000000000000F0DD)) 
    \data_out[25]_i_2__0 
       (.I0(eof6),
        .I1(data0[25]),
        .I2(data0[33]),
        .I3(eof5),
        .I4(eof4),
        .I5(eof3),
        .O(\data_out[25]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000EEE0EEE0EEE)) 
    \data_out[26]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[26]),
        .I2(\data_out[34]_i_2_n_0 ),
        .I3(\data_out[26]_i_2__0_n_0 ),
        .I4(\data_out[26]_i_3_n_0 ),
        .I5(\data_out[26]_i_4_n_0 ),
        .O(data_out[26]));
  (* SOFT_HLUTNM = "soft_lutpair491" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[26]_i_2__0 
       (.I0(data0[34]),
        .I1(eof0),
        .O(\data_out[26]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair458" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[26]_i_3 
       (.I0(data0[42]),
        .I1(eof0),
        .O(\data_out[26]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \data_out[26]_i_4 
       (.I0(pvld),
        .I1(eof1),
        .I2(eof3),
        .I3(eof2),
        .I4(eof4),
        .I5(\consec_idle_reg[0]_0 ),
        .O(\data_out[26]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hF4F4F44444444444)) 
    \data_out[27]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[27]),
        .I2(\data_out[31]_i_4_n_0 ),
        .I3(\data_out[31]_i_2__0_n_0 ),
        .I4(data0[43]),
        .I5(\data_out[27]_i_2__0_n_0 ),
        .O(data_out[27]));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFF8FFF8)) 
    \data_out[27]_i_2__0 
       (.I0(eof6),
        .I1(data0[27]),
        .I2(eof4),
        .I3(eof3),
        .I4(data0[35]),
        .I5(eof5),
        .O(\data_out[27]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h4444FFF444444444)) 
    \data_out[28]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[28]),
        .I2(\data_out[31]_i_2__0_n_0 ),
        .I3(data0[44]),
        .I4(\data_out[28]_i_2__0_n_0 ),
        .I5(\data_out[31]_i_4_n_0 ),
        .O(data_out[28]));
  LUT6 #(
    .INIT(64'h0000000000000F77)) 
    \data_out[28]_i_2__0 
       (.I0(eof6),
        .I1(data0[28]),
        .I2(data0[36]),
        .I3(eof5),
        .I4(eof4),
        .I5(eof3),
        .O(\data_out[28]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h4444FFF444444444)) 
    \data_out[29]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[29]),
        .I2(\data_out[31]_i_2__0_n_0 ),
        .I3(data0[45]),
        .I4(\data_out[29]_i_2__0_n_0 ),
        .I5(\data_out[31]_i_4_n_0 ),
        .O(data_out[29]));
  LUT6 #(
    .INIT(64'h0000000000000F77)) 
    \data_out[29]_i_2__0 
       (.I0(eof6),
        .I1(data0[29]),
        .I2(data0[37]),
        .I3(eof5),
        .I4(eof4),
        .I5(eof3),
        .O(\data_out[29]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFFD0DD)) 
    \data_out[2]_i_1__0 
       (.I0(\data_out[26]_i_4_n_0 ),
        .I1(data0[18]),
        .I2(data0[10]),
        .I3(\data_out[34]_i_2_n_0 ),
        .I4(eof0),
        .I5(\data_out[2]_i_2__0_n_0 ),
        .O(data_out[2]));
  LUT5 #(
    .INIT(32'hFFFF111F)) 
    \data_out[2]_i_2__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[2]),
        .I2(data0[26]),
        .I3(\ctrl_out[0]_i_4_n_0 ),
        .I4(\data_out[2]_i_3_n_0 ),
        .O(\data_out[2]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair458" *) 
  LUT5 #(
    .INIT(32'h444444F4)) 
    \data_out[2]_i_3 
       (.I0(data0[42]),
        .I1(\ctrl_out[0]_i_5_n_0 ),
        .I2(\data_out[8]_i_4_n_0 ),
        .I3(data0[34]),
        .I4(eof0),
        .O(\data_out[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4444FFF444444444)) 
    \data_out[30]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[30]),
        .I2(\data_out[31]_i_2__0_n_0 ),
        .I3(data0[46]),
        .I4(\data_out[30]_i_2__0_n_0 ),
        .I5(\data_out[31]_i_4_n_0 ),
        .O(data_out[30]));
  LUT6 #(
    .INIT(64'h0000000000000F77)) 
    \data_out[30]_i_2__0 
       (.I0(eof6),
        .I1(data0[30]),
        .I2(data0[38]),
        .I3(eof5),
        .I4(eof4),
        .I5(eof3),
        .O(\data_out[30]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h4444FFF444444444)) 
    \data_out[31]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[31]),
        .I2(\data_out[31]_i_2__0_n_0 ),
        .I3(data0[47]),
        .I4(\data_out[31]_i_3_n_0 ),
        .I5(\data_out[31]_i_4_n_0 ),
        .O(data_out[31]));
  (* SOFT_HLUTNM = "soft_lutpair464" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \data_out[31]_i_2__0 
       (.I0(eof3),
        .I1(eof4),
        .O(\data_out[31]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000F77)) 
    \data_out[31]_i_3 
       (.I0(eof6),
        .I1(data0[31]),
        .I2(data0[39]),
        .I3(eof5),
        .I4(eof4),
        .I5(eof3),
        .O(\data_out[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair442" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \data_out[31]_i_4 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(pvld),
        .I2(eof0),
        .I3(eof1),
        .I4(eof2),
        .O(\data_out[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair451" *) 
  LUT5 #(
    .INIT(32'hEEE0EEEE)) 
    \data_out[32]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[32]),
        .I2(data0[40]),
        .I3(eof0),
        .I4(\data_out[34]_i_2_n_0 ),
        .O(data_out[32]));
  LUT5 #(
    .INIT(32'h0E0E000E)) 
    \data_out[33]_i_1__0 
       (.I0(\data_out[39]_i_2_n_0 ),
        .I1(data0[33]),
        .I2(\data_out[33]_i_2_n_0 ),
        .I3(\data_out[33]_i_3_n_0 ),
        .I4(\data_out[33]_i_4_n_0 ),
        .O(data_out[33]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \data_out[33]_i_2 
       (.I0(\data_out[33]_i_5_n_0 ),
        .I1(eof3),
        .I2(eof2),
        .I3(data0[41]),
        .I4(eof0),
        .I5(\data_out[33]_i_6_n_0 ),
        .O(\data_out[33]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair475" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \data_out[33]_i_3 
       (.I0(eof0),
        .I1(eof1),
        .I2(pvld),
        .I3(\consec_idle_reg[0]_0 ),
        .O(\data_out[33]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair489" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \data_out[33]_i_4 
       (.I0(eof4),
        .I1(eof2),
        .I2(eof3),
        .O(\data_out[33]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair457" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[33]_i_5 
       (.I0(pvld),
        .I1(eof1),
        .O(\data_out[33]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair460" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \data_out[33]_i_6 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof5),
        .O(\data_out[33]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair452" *) 
  LUT5 #(
    .INIT(32'hEEEEEE0E)) 
    \data_out[34]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[34]),
        .I2(\data_out[34]_i_2_n_0 ),
        .I3(data0[42]),
        .I4(eof0),
        .O(data_out[34]));
  (* SOFT_HLUTNM = "soft_lutpair460" *) 
  LUT5 #(
    .INIT(32'h02000000)) 
    \data_out[34]_i_2 
       (.I0(\data_out[55]_i_3_n_0 ),
        .I1(pvld),
        .I2(eof1),
        .I3(\consec_idle_reg[0]_0 ),
        .I4(eof5),
        .O(\data_out[34]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF4F4F444444444)) 
    \data_out[35]_i_1__0 
       (.I0(\data_out[39]_i_2_n_0 ),
        .I1(data0[35]),
        .I2(eof4),
        .I3(eof5),
        .I4(data0[43]),
        .I5(\data_out[39]_i_3_n_0 ),
        .O(data_out[35]));
  LUT6 #(
    .INIT(64'hFFF4F4F444444444)) 
    \data_out[36]_i_1__0 
       (.I0(\data_out[39]_i_2_n_0 ),
        .I1(data0[36]),
        .I2(eof4),
        .I3(eof5),
        .I4(data0[44]),
        .I5(\data_out[39]_i_3_n_0 ),
        .O(data_out[36]));
  LUT6 #(
    .INIT(64'hFFF4F4F444444444)) 
    \data_out[37]_i_1__0 
       (.I0(\data_out[39]_i_2_n_0 ),
        .I1(data0[37]),
        .I2(eof4),
        .I3(eof5),
        .I4(data0[45]),
        .I5(\data_out[39]_i_3_n_0 ),
        .O(data_out[37]));
  LUT6 #(
    .INIT(64'hFFF4F4F444444444)) 
    \data_out[38]_i_1__0 
       (.I0(\data_out[39]_i_2_n_0 ),
        .I1(data0[38]),
        .I2(eof4),
        .I3(eof5),
        .I4(data0[46]),
        .I5(\data_out[39]_i_3_n_0 ),
        .O(data_out[38]));
  LUT6 #(
    .INIT(64'hFFF4F4F444444444)) 
    \data_out[39]_i_1__0 
       (.I0(\data_out[39]_i_2_n_0 ),
        .I1(data0[39]),
        .I2(eof4),
        .I3(eof5),
        .I4(data0[47]),
        .I5(\data_out[39]_i_3_n_0 ),
        .O(data_out[39]));
  LUT6 #(
    .INIT(64'h7777777777077777)) 
    \data_out[39]_i_2 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(pvld),
        .I2(eof6),
        .I3(eof5),
        .I4(\data_out[31]_i_4_n_0 ),
        .I5(eof3),
        .O(\data_out[39]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \data_out[39]_i_3 
       (.I0(eof2),
        .I1(eof1),
        .I2(eof0),
        .I3(pvld),
        .I4(\consec_idle_reg[0]_0 ),
        .I5(eof3),
        .O(\data_out[39]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h888A8888)) 
    \data_out[3]_i_1__0 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(\data_out[3]_i_2__0_n_0 ),
        .I2(eof1),
        .I3(pvld),
        .I4(\data_out[3]_i_3_n_0 ),
        .O(data_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair457" *) 
  LUT5 #(
    .INIT(32'hAAFFAAC0)) 
    \data_out[3]_i_2__0 
       (.I0(data0[3]),
        .I1(data0[43]),
        .I2(eof1),
        .I3(pvld),
        .I4(eof0),
        .O(\data_out[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFEAEAEAAAAAAAAA)) 
    \data_out[3]_i_3 
       (.I0(\data_out[3]_i_4_n_0 ),
        .I1(data0[11]),
        .I2(eof5),
        .I3(data0[3]),
        .I4(eof6),
        .I5(\data_out[55]_i_3_n_0 ),
        .O(\data_out[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF0880000F088)) 
    \data_out[3]_i_4 
       (.I0(eof4),
        .I1(data0[19]),
        .I2(data0[27]),
        .I3(eof3),
        .I4(eof2),
        .I5(data0[35]),
        .O(\data_out[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair451" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_out[40]_i_1__0 
       (.I0(data0[40]),
        .I1(\data_out[42]_i_2_n_0 ),
        .O(data_out[40]));
  LUT6 #(
    .INIT(64'hFF7F0000FF7FFF7F)) 
    \data_out[41]_i_1__0 
       (.I0(\data_out[41]_i_2_n_0 ),
        .I1(eof5),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(\data_out[41]_i_3_n_0 ),
        .I4(data0[41]),
        .I5(\data_out[41]_i_4_n_0 ),
        .O(data_out[41]));
  (* SOFT_HLUTNM = "soft_lutpair463" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[41]_i_2 
       (.I0(eof4),
        .I1(eof3),
        .O(\data_out[41]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair479" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \data_out[41]_i_3 
       (.I0(eof0),
        .I1(eof2),
        .I2(eof1),
        .I3(pvld),
        .O(\data_out[41]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF000002000000)) 
    \data_out[41]_i_4 
       (.I0(eof6),
        .I1(eof0),
        .I2(eof1),
        .I3(\data_out[55]_i_3_n_0 ),
        .I4(\consec_idle_reg[0]_0 ),
        .I5(pvld),
        .O(\data_out[41]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair452" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_out[42]_i_1__0 
       (.I0(data0[42]),
        .I1(\data_out[42]_i_2_n_0 ),
        .O(data_out[42]));
  LUT6 #(
    .INIT(64'h7777777777777077)) 
    \data_out[42]_i_2 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(pvld),
        .I2(eof0),
        .I3(\data_out[49]_i_3_n_0 ),
        .I4(eof1),
        .I5(eof2),
        .O(\data_out[42]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8F0F088880000)) 
    \data_out[43]_i_1__0 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(eof5),
        .I3(eof6),
        .I4(data0[43]),
        .I5(\data_out[47]_i_2_n_0 ),
        .O(data_out[43]));
  LUT6 #(
    .INIT(64'hFFF8F0F088880000)) 
    \data_out[44]_i_1__0 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(eof5),
        .I3(eof6),
        .I4(data0[44]),
        .I5(\data_out[47]_i_2_n_0 ),
        .O(data_out[44]));
  LUT6 #(
    .INIT(64'hFFF8F0F088880000)) 
    \data_out[45]_i_1__0 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(eof5),
        .I3(eof6),
        .I4(data0[45]),
        .I5(\data_out[47]_i_2_n_0 ),
        .O(data_out[45]));
  LUT6 #(
    .INIT(64'hFFF8F0F088880000)) 
    \data_out[46]_i_1__0 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(eof5),
        .I3(eof6),
        .I4(data0[46]),
        .I5(\data_out[47]_i_2_n_0 ),
        .O(data_out[46]));
  LUT6 #(
    .INIT(64'hFFF8F0F088880000)) 
    \data_out[47]_i_1__0 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(eof5),
        .I3(eof6),
        .I4(data0[47]),
        .I5(\data_out[47]_i_2_n_0 ),
        .O(data_out[47]));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \data_out[47]_i_2 
       (.I0(\data_out[41]_i_2_n_0 ),
        .I1(eof2),
        .I2(eof1),
        .I3(eof0),
        .I4(pvld),
        .I5(\consec_idle_reg[0]_0 ),
        .O(\data_out[47]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair487" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \data_out[48]_i_1__0 
       (.I0(data0[48]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[48]));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \data_out[49]_i_1__0 
       (.I0(\data_out[49]_i_2_n_0 ),
        .I1(data0[49]),
        .I2(eof0),
        .I3(eof1),
        .I4(eof2),
        .I5(\data_out[49]_i_3_n_0 ),
        .O(data_out[49]));
  (* SOFT_HLUTNM = "soft_lutpair459" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \data_out[49]_i_2 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .O(\data_out[49]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \data_out[49]_i_3 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(pvld),
        .I2(eof4),
        .I3(eof3),
        .I4(eof5),
        .I5(eof6),
        .O(\data_out[49]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0002AAAA)) 
    \data_out[4]_i_1__0 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof1),
        .I2(pvld),
        .I3(\data_out[4]_i_2__0_n_0 ),
        .I4(\data_out[4]_i_3_n_0 ),
        .O(data_out[4]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[4]_i_2__0 
       (.I0(data0[12]),
        .I1(eof5),
        .I2(data0[4]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[4]_i_4_n_0 ),
        .O(\data_out[4]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair462" *) 
  LUT5 #(
    .INIT(32'h5500553F)) 
    \data_out[4]_i_3 
       (.I0(data0[4]),
        .I1(data0[44]),
        .I2(eof1),
        .I3(pvld),
        .I4(eof0),
        .O(\data_out[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF0880000F088)) 
    \data_out[4]_i_4 
       (.I0(eof4),
        .I1(data0[20]),
        .I2(data0[28]),
        .I3(eof3),
        .I4(eof2),
        .I5(data0[36]),
        .O(\data_out[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair488" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \data_out[50]_i_1__0 
       (.I0(data0[50]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[50]));
  (* SOFT_HLUTNM = "soft_lutpair471" *) 
  LUT4 #(
    .INIT(16'hEAAA)) 
    \data_out[51]_i_1__0 
       (.I0(\data_out[55]_i_2_n_0 ),
        .I1(pvld),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(data0[51]),
        .O(data_out[51]));
  (* SOFT_HLUTNM = "soft_lutpair471" *) 
  LUT4 #(
    .INIT(16'hEAAA)) 
    \data_out[52]_i_1__0 
       (.I0(\data_out[55]_i_2_n_0 ),
        .I1(pvld),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(data0[52]),
        .O(data_out[52]));
  (* SOFT_HLUTNM = "soft_lutpair472" *) 
  LUT4 #(
    .INIT(16'hEAAA)) 
    \data_out[53]_i_1__0 
       (.I0(\data_out[55]_i_2_n_0 ),
        .I1(pvld),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(data0[53]),
        .O(data_out[53]));
  (* SOFT_HLUTNM = "soft_lutpair474" *) 
  LUT4 #(
    .INIT(16'hEAAA)) 
    \data_out[54]_i_1__0 
       (.I0(\data_out[55]_i_2_n_0 ),
        .I1(pvld),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(data0[54]),
        .O(data_out[54]));
  (* SOFT_HLUTNM = "soft_lutpair472" *) 
  LUT4 #(
    .INIT(16'hFF80)) 
    \data_out[55]_i_1__0 
       (.I0(pvld),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(data0[55]),
        .I3(\data_out[55]_i_2_n_0 ),
        .O(data_out[55]));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \data_out[55]_i_2 
       (.I0(\data_out[55]_i_3_n_0 ),
        .I1(eof5),
        .I2(\data_out[55]_i_4_n_0 ),
        .I3(pvld),
        .I4(eof6),
        .I5(\consec_idle_reg[0]_0 ),
        .O(\data_out[55]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair489" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \data_out[55]_i_3 
       (.I0(eof3),
        .I1(eof4),
        .I2(eof2),
        .O(\data_out[55]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair462" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[55]_i_4 
       (.I0(eof1),
        .I1(eof0),
        .O(\data_out[55]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hBF)) 
    \data_out[56]_i_1__0 
       (.I0(data0[56]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[56]));
  (* SOFT_HLUTNM = "soft_lutpair488" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \data_out[57]_i_1__0 
       (.I0(data0[57]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[57]));
  (* SOFT_HLUTNM = "soft_lutpair487" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \data_out[58]_i_1__0 
       (.I0(data0[58]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[58]));
  (* SOFT_HLUTNM = "soft_lutpair474" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_out[59]_i_1__0 
       (.I0(data0[59]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[59]));
  LUT5 #(
    .INIT(32'h0002AAAA)) 
    \data_out[5]_i_1__0 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof1),
        .I2(pvld),
        .I3(\data_out[5]_i_2__0_n_0 ),
        .I4(\data_out[5]_i_3_n_0 ),
        .O(data_out[5]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[5]_i_2__0 
       (.I0(data0[13]),
        .I1(eof5),
        .I2(data0[5]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[5]_i_4_n_0 ),
        .O(\data_out[5]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h5500553F)) 
    \data_out[5]_i_3 
       (.I0(data0[5]),
        .I1(data0[45]),
        .I2(eof1),
        .I3(pvld),
        .I4(eof0),
        .O(\data_out[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF0880000F088)) 
    \data_out[5]_i_4 
       (.I0(eof4),
        .I1(data0[21]),
        .I2(data0[29]),
        .I3(eof3),
        .I4(eof2),
        .I5(data0[37]),
        .O(\data_out[5]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair485" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_out[60]_i_1__0 
       (.I0(data0[60]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[60]));
  (* SOFT_HLUTNM = "soft_lutpair486" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_out[61]_i_1__0 
       (.I0(data0[61]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[61]));
  (* SOFT_HLUTNM = "soft_lutpair485" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_out[62]_i_1__0 
       (.I0(data0[62]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[62]));
  (* SOFT_HLUTNM = "soft_lutpair486" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_out[63]_i_1__0 
       (.I0(data0[63]),
        .I1(\consec_idle_reg[0]_0 ),
        .I2(pvld),
        .O(data_out[63]));
  (* SOFT_HLUTNM = "soft_lutpair459" *) 
  LUT5 #(
    .INIT(32'h0002AAAA)) 
    \data_out[6]_i_1__0 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof1),
        .I2(pvld),
        .I3(\data_out[6]_i_2__0_n_0 ),
        .I4(\data_out[6]_i_3_n_0 ),
        .O(data_out[6]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[6]_i_2__0 
       (.I0(data0[14]),
        .I1(eof5),
        .I2(data0[6]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[6]_i_4_n_0 ),
        .O(\data_out[6]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h5500553F)) 
    \data_out[6]_i_3 
       (.I0(data0[6]),
        .I1(data0[46]),
        .I2(eof1),
        .I3(pvld),
        .I4(eof0),
        .O(\data_out[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF0880000F088)) 
    \data_out[6]_i_4 
       (.I0(eof4),
        .I1(data0[22]),
        .I2(data0[30]),
        .I3(eof3),
        .I4(eof2),
        .I5(data0[38]),
        .O(\data_out[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0002AAAA)) 
    \data_out[7]_i_1__0 
       (.I0(\consec_idle_reg[0]_0 ),
        .I1(eof1),
        .I2(pvld),
        .I3(\data_out[7]_i_2__0_n_0 ),
        .I4(\data_out[7]_i_3_n_0 ),
        .O(data_out[7]));
  LUT6 #(
    .INIT(64'h000000004777FFFF)) 
    \data_out[7]_i_2__0 
       (.I0(data0[15]),
        .I1(eof5),
        .I2(data0[7]),
        .I3(eof6),
        .I4(\data_out[55]_i_3_n_0 ),
        .I5(\data_out[7]_i_4_n_0 ),
        .O(\data_out[7]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h5500553F)) 
    \data_out[7]_i_3 
       (.I0(data0[7]),
        .I1(data0[47]),
        .I2(eof1),
        .I3(pvld),
        .I4(eof0),
        .O(\data_out[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF0880000F088)) 
    \data_out[7]_i_4 
       (.I0(eof4),
        .I1(data0[23]),
        .I2(data0[31]),
        .I3(eof3),
        .I4(eof2),
        .I5(data0[39]),
        .O(\data_out[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0E0E0E0E0E0E000E)) 
    \data_out[8]_i_1__0 
       (.I0(\data_out[42]_i_2_n_0 ),
        .I1(data0[8]),
        .I2(\data_out[8]_i_2__0_n_0 ),
        .I3(\data_out[26]_i_4_n_0 ),
        .I4(eof0),
        .I5(data0[24]),
        .O(data_out[8]));
  LUT6 #(
    .INIT(64'hF444F444F444FFFF)) 
    \data_out[8]_i_2__0 
       (.I0(\data_out[8]_i_3_n_0 ),
        .I1(\data_out[34]_i_2_n_0 ),
        .I2(\data_out[8]_i_4_n_0 ),
        .I3(\data_out[8]_i_5_n_0 ),
        .I4(data0[32]),
        .I5(\ctrl_out[0]_i_4_n_0 ),
        .O(\data_out[8]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair492" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_out[8]_i_3 
       (.I0(data0[16]),
        .I1(eof0),
        .O(\data_out[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair479" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \data_out[8]_i_4 
       (.I0(eof1),
        .I1(pvld),
        .I2(eof2),
        .I3(\consec_idle_reg[0]_0 ),
        .O(\data_out[8]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair461" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[8]_i_5 
       (.I0(data0[40]),
        .I1(eof0),
        .O(\data_out[8]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h2222222220222222)) 
    \data_out[9]_i_1__0 
       (.I0(\data_out[9]_i_2__0_n_0 ),
        .I1(\data_out[9]_i_3_n_0 ),
        .I2(\data_out[33]_i_4_n_0 ),
        .I3(\consec_idle_reg[0]_0 ),
        .I4(\data_out[9]_i_4_n_0 ),
        .I5(data0[25]),
        .O(data_out[9]));
  LUT6 #(
    .INIT(64'h0A0AAAAA8AAAAAAA)) 
    \data_out[9]_i_2__0 
       (.I0(\data_out[9]_i_5_n_0 ),
        .I1(data0[41]),
        .I2(\data_out[9]_i_4_n_0 ),
        .I3(eof2),
        .I4(\consec_idle_reg[0]_0 ),
        .I5(eof1),
        .O(\data_out[9]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0100FFFF01000100)) 
    \data_out[9]_i_3 
       (.I0(data0[9]),
        .I1(eof0),
        .I2(eof2),
        .I3(\data_out[49]_i_3_n_0 ),
        .I4(\data_out[9]_i_6_n_0 ),
        .I5(\data_out[55]_i_3_n_0 ),
        .O(\data_out[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair454" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \data_out[9]_i_4 
       (.I0(pvld),
        .I1(eof0),
        .O(\data_out[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAAFFFFFFAACFFFFF)) 
    \data_out[9]_i_5 
       (.I0(data0[9]),
        .I1(\data_out[9]_i_7_n_0 ),
        .I2(eof3),
        .I3(pvld),
        .I4(\consec_idle_reg[0]_0 ),
        .I5(data0[33]),
        .O(\data_out[9]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair454" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \data_out[9]_i_6 
       (.I0(eof0),
        .I1(pvld),
        .I2(\consec_idle_reg[0]_0 ),
        .I3(eof5),
        .I4(data0[17]),
        .O(\data_out[9]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair491" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_out[9]_i_7 
       (.I0(eof2),
        .I1(eof0),
        .O(\data_out[9]_i_7_n_0 ));
  FDSE \data_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [0]),
        .S(rst__0));
  FDSE \data_out_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[10]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [10]),
        .S(rst__0));
  FDRE \data_out_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[11]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [11]),
        .R(rst__0));
  FDRE \data_out_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[12]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [12]),
        .R(rst__0));
  FDRE \data_out_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[13]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [13]),
        .R(rst__0));
  FDRE \data_out_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[14]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [14]),
        .R(rst__0));
  FDRE \data_out_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[15]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [15]),
        .R(rst__0));
  FDSE \data_out_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[16]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [16]),
        .S(rst__0));
  FDSE \data_out_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[17]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [17]),
        .S(rst__0));
  FDSE \data_out_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[18]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [18]),
        .S(rst__0));
  FDRE \data_out_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[19]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [19]),
        .R(rst__0));
  FDSE \data_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [1]),
        .S(rst__0));
  FDRE \data_out_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[20]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [20]),
        .R(rst__0));
  FDRE \data_out_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[21]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [21]),
        .R(rst__0));
  FDRE \data_out_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[22]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [22]),
        .R(rst__0));
  FDRE \data_out_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[23]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [23]),
        .R(rst__0));
  FDSE \data_out_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[24]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [24]),
        .S(rst__0));
  FDSE \data_out_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[25]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [25]),
        .S(rst__0));
  FDSE \data_out_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[26]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [26]),
        .S(rst__0));
  FDRE \data_out_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[27]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [27]),
        .R(rst__0));
  FDRE \data_out_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[28]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [28]),
        .R(rst__0));
  FDRE \data_out_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[29]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [29]),
        .R(rst__0));
  FDSE \data_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [2]),
        .S(rst__0));
  FDRE \data_out_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[30]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [30]),
        .R(rst__0));
  FDRE \data_out_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[31]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [31]),
        .R(rst__0));
  FDSE \data_out_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[32]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [32]),
        .S(rst__0));
  FDSE \data_out_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[33]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [33]),
        .S(rst__0));
  FDSE \data_out_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[34]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [34]),
        .S(rst__0));
  FDRE \data_out_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[35]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [35]),
        .R(rst__0));
  FDRE \data_out_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[36]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [36]),
        .R(rst__0));
  FDRE \data_out_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[37]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [37]),
        .R(rst__0));
  FDRE \data_out_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[38]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [38]),
        .R(rst__0));
  FDRE \data_out_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[39]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [39]),
        .R(rst__0));
  FDRE \data_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [3]),
        .R(rst__0));
  FDSE \data_out_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[40]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [40]),
        .S(rst__0));
  FDSE \data_out_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[41]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [41]),
        .S(rst__0));
  FDSE \data_out_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[42]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [42]),
        .S(rst__0));
  FDRE \data_out_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[43]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [43]),
        .R(rst__0));
  FDRE \data_out_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[44]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [44]),
        .R(rst__0));
  FDRE \data_out_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[45]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [45]),
        .R(rst__0));
  FDRE \data_out_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[46]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [46]),
        .R(rst__0));
  FDRE \data_out_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[47]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [47]),
        .R(rst__0));
  FDSE \data_out_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[48]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [48]),
        .S(rst__0));
  FDSE \data_out_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[49]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [49]),
        .S(rst__0));
  FDRE \data_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [4]),
        .R(rst__0));
  FDSE \data_out_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[50]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [50]),
        .S(rst__0));
  FDRE \data_out_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[51]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [51]),
        .R(rst__0));
  FDRE \data_out_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[52]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [52]),
        .R(rst__0));
  FDRE \data_out_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[53]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [53]),
        .R(rst__0));
  FDRE \data_out_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[54]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [54]),
        .R(rst__0));
  FDRE \data_out_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[55]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [55]),
        .R(rst__0));
  FDSE \data_out_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[56]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [56]),
        .S(rst__0));
  FDSE \data_out_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[57]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [57]),
        .S(rst__0));
  FDSE \data_out_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[58]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [58]),
        .S(rst__0));
  FDRE \data_out_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[59]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [59]),
        .R(rst__0));
  FDRE \data_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [5]),
        .R(rst__0));
  FDRE \data_out_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[60]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [60]),
        .R(rst__0));
  FDRE \data_out_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[61]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [61]),
        .R(rst__0));
  FDRE \data_out_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[62]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [62]),
        .R(rst__0));
  FDRE \data_out_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[63]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [63]),
        .R(rst__0));
  FDRE \data_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [6]),
        .R(rst__0));
  FDRE \data_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [7]),
        .R(rst__0));
  FDSE \data_out_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [8]),
        .S(rst__0));
  FDSE \data_out_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(data_out[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [9]),
        .S(rst__0));
  LUT6 #(
    .INIT(64'h4C4CFC4C7C7CFC7C)) 
    \dff0[7]_i_1 
       (.I0(\dff0[7]_i_2_n_0 ),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .I3(frame_dly1_reg_0),
        .I4(frame_dly1),
        .I5(\dff0[7]_i_3_n_0 ),
        .O(\dff0[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \dff0[7]_i_2 
       (.I0(count100[5]),
        .I1(count100[6]),
        .I2(count100[0]),
        .I3(count100[1]),
        .I4(\dff0[7]_i_4_n_0 ),
        .I5(\count100[15]_i_4_n_0 ),
        .O(\dff0[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \dff0[7]_i_3 
       (.I0(\counter2[1]_i_2_n_0 ),
        .I1(counter2[3]),
        .I2(counter2[2]),
        .I3(counter2[0]),
        .I4(counter2[1]),
        .O(\dff0[7]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \dff0[7]_i_4 
       (.I0(count100[3]),
        .I1(count100[2]),
        .I2(count100[4]),
        .I3(count100[7]),
        .O(\dff0[7]_i_4_n_0 ));
  FDRE \dff0_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data_in_dly1[0]),
        .Q(data0[56]),
        .R(rst__0));
  FDRE \dff0_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(Q[0]),
        .Q(data0[57]),
        .R(rst__0));
  FDRE \dff0_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(Q[1]),
        .Q(data0[58]),
        .R(rst__0));
  FDRE \dff0_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data_in_dly1[3]),
        .Q(data0[59]),
        .R(rst__0));
  FDRE \dff0_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data_in_dly1[4]),
        .Q(data0[60]),
        .R(rst__0));
  FDRE \dff0_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data_in_dly1[5]),
        .Q(data0[61]),
        .R(rst__0));
  FDRE \dff0_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data_in_dly1[6]),
        .Q(data0[62]),
        .R(rst__0));
  FDRE \dff0_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data_in_dly1[7]),
        .Q(data0[63]),
        .R(rst__0));
  FDRE \dff1_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[56]),
        .Q(data0[48]),
        .R(rst__0));
  FDRE \dff1_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[57]),
        .Q(data0[49]),
        .R(rst__0));
  FDRE \dff1_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[58]),
        .Q(data0[50]),
        .R(rst__0));
  FDRE \dff1_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[59]),
        .Q(data0[51]),
        .R(rst__0));
  FDRE \dff1_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[60]),
        .Q(data0[52]),
        .R(rst__0));
  FDRE \dff1_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[61]),
        .Q(data0[53]),
        .R(rst__0));
  FDRE \dff1_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[62]),
        .Q(data0[54]),
        .R(rst__0));
  FDRE \dff1_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[63]),
        .Q(data0[55]),
        .R(rst__0));
  FDRE \dff2_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[48]),
        .Q(data0[40]),
        .R(rst__0));
  FDRE \dff2_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[49]),
        .Q(data0[41]),
        .R(rst__0));
  FDRE \dff2_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[50]),
        .Q(data0[42]),
        .R(rst__0));
  FDRE \dff2_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[51]),
        .Q(data0[43]),
        .R(rst__0));
  FDRE \dff2_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[52]),
        .Q(data0[44]),
        .R(rst__0));
  FDRE \dff2_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[53]),
        .Q(data0[45]),
        .R(rst__0));
  FDRE \dff2_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[54]),
        .Q(data0[46]),
        .R(rst__0));
  FDRE \dff2_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[55]),
        .Q(data0[47]),
        .R(rst__0));
  FDRE \dff3_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[40]),
        .Q(data0[32]),
        .R(rst__0));
  FDRE \dff3_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[41]),
        .Q(data0[33]),
        .R(rst__0));
  FDRE \dff3_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[42]),
        .Q(data0[34]),
        .R(rst__0));
  FDRE \dff3_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[43]),
        .Q(data0[35]),
        .R(rst__0));
  FDRE \dff3_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[44]),
        .Q(data0[36]),
        .R(rst__0));
  FDRE \dff3_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[45]),
        .Q(data0[37]),
        .R(rst__0));
  FDRE \dff3_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[46]),
        .Q(data0[38]),
        .R(rst__0));
  FDRE \dff3_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[47]),
        .Q(data0[39]),
        .R(rst__0));
  FDRE \dff4_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[32]),
        .Q(data0[24]),
        .R(rst__0));
  FDRE \dff4_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[33]),
        .Q(data0[25]),
        .R(rst__0));
  FDRE \dff4_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[34]),
        .Q(data0[26]),
        .R(rst__0));
  FDRE \dff4_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[35]),
        .Q(data0[27]),
        .R(rst__0));
  FDRE \dff4_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[36]),
        .Q(data0[28]),
        .R(rst__0));
  FDRE \dff4_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[37]),
        .Q(data0[29]),
        .R(rst__0));
  FDRE \dff4_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[38]),
        .Q(data0[30]),
        .R(rst__0));
  FDRE \dff4_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[39]),
        .Q(data0[31]),
        .R(rst__0));
  FDRE \dff5_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[24]),
        .Q(data0[16]),
        .R(rst__0));
  FDRE \dff5_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[25]),
        .Q(data0[17]),
        .R(rst__0));
  FDRE \dff5_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[26]),
        .Q(data0[18]),
        .R(rst__0));
  FDRE \dff5_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[27]),
        .Q(data0[19]),
        .R(rst__0));
  FDRE \dff5_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[28]),
        .Q(data0[20]),
        .R(rst__0));
  FDRE \dff5_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[29]),
        .Q(data0[21]),
        .R(rst__0));
  FDRE \dff5_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[30]),
        .Q(data0[22]),
        .R(rst__0));
  FDRE \dff5_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[31]),
        .Q(data0[23]),
        .R(rst__0));
  FDRE \dff6_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[16]),
        .Q(data0[8]),
        .R(rst__0));
  FDRE \dff6_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[17]),
        .Q(data0[9]),
        .R(rst__0));
  FDRE \dff6_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[18]),
        .Q(data0[10]),
        .R(rst__0));
  FDRE \dff6_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[19]),
        .Q(data0[11]),
        .R(rst__0));
  FDRE \dff6_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[20]),
        .Q(data0[12]),
        .R(rst__0));
  FDRE \dff6_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[21]),
        .Q(data0[13]),
        .R(rst__0));
  FDRE \dff6_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[22]),
        .Q(data0[14]),
        .R(rst__0));
  FDRE \dff6_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[23]),
        .Q(data0[15]),
        .R(rst__0));
  FDRE \dff7_reg[0] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[8]),
        .Q(data0[0]),
        .R(rst__0));
  FDRE \dff7_reg[1] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[9]),
        .Q(data0[1]),
        .R(rst__0));
  FDRE \dff7_reg[2] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[10]),
        .Q(data0[2]),
        .R(rst__0));
  FDRE \dff7_reg[3] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[11]),
        .Q(data0[3]),
        .R(rst__0));
  FDRE \dff7_reg[4] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[12]),
        .Q(data0[4]),
        .R(rst__0));
  FDRE \dff7_reg[5] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[13]),
        .Q(data0[5]),
        .R(rst__0));
  FDRE \dff7_reg[6] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[14]),
        .Q(data0[6]),
        .R(rst__0));
  FDRE \dff7_reg[7] 
       (.C(lclk),
        .CE(\dff0[7]_i_1_n_0 ),
        .D(data0[15]),
        .Q(data0[7]),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h80AA8080AAAAAAAA)) 
    eof0_i_1__1
       (.I0(eof),
        .I1(eof0_i_2__1_n_0),
        .I2(eof4_i_3_n_0),
        .I3(eof0_i_3__1_n_0),
        .I4(eof0_i_4__0_n_0),
        .I5(eof0_i_5__0_n_0),
        .O(eof0_2));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    eof0_i_2__1
       (.I0(count[5]),
        .I1(count[6]),
        .I2(count[4]),
        .I3(fmac_speed[0]),
        .I4(fmac_speed[1]),
        .I5(count[2]),
        .O(eof0_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFBFFF)) 
    eof0_i_3__1
       (.I0(eof0_i_6__1_n_0),
        .I1(count[5]),
        .I2(count[4]),
        .I3(count[3]),
        .I4(count[2]),
        .I5(count[6]),
        .O(eof0_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair446" *) 
  LUT5 #(
    .INIT(32'h04000000)) 
    eof0_i_4__0
       (.I0(eof0_i_7__0_n_0),
        .I1(count[9]),
        .I2(count[8]),
        .I3(count[1]),
        .I4(count[0]),
        .O(eof0_i_4__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFBFFFF)) 
    eof0_i_5__0
       (.I0(pvld_i_2_n_0),
        .I1(count[2]),
        .I2(count[4]),
        .I3(fmac_speed[0]),
        .I4(fmac_speed[1]),
        .I5(eof5_i_6_n_0),
        .O(eof0_i_5__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair481" *) 
  LUT3 #(
    .INIT(8'h7D)) 
    eof0_i_6__1
       (.I0(count[7]),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .O(eof0_i_6__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    eof0_i_7__0
       (.I0(count[11]),
        .I1(count[10]),
        .I2(count[15]),
        .I3(count[13]),
        .I4(count[14]),
        .I5(count[12]),
        .O(eof0_i_7__0_n_0));
  FDRE eof0_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof0_2),
        .Q(eof0),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h88888A8888888888)) 
    eof1_i_1__1
       (.I0(eof),
        .I1(eof1_i_2__0_n_0),
        .I2(eof5_i_3_n_0),
        .I3(fmac_speed[0]),
        .I4(fmac_speed[1]),
        .I5(count[2]),
        .O(eof1_5));
  LUT6 #(
    .INIT(64'h0200FFFF02000200)) 
    eof1_i_2__0
       (.I0(count[3]),
        .I1(count[7]),
        .I2(eof1_i_3__1_n_0),
        .I3(eof5_i_5_n_0),
        .I4(eof1_i_4__1_n_0),
        .I5(eof0_i_4__0_n_0),
        .O(eof1_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFDFFFFF)) 
    eof1_i_3__1
       (.I0(count[4]),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .I3(count[2]),
        .I4(count[5]),
        .I5(count[6]),
        .O(eof1_i_3__1_n_0));
  LUT6 #(
    .INIT(64'hFFBFFFFFFFFFFFBF)) 
    eof1_i_4__1
       (.I0(eof5_i_6_n_0),
        .I1(count[4]),
        .I2(count[2]),
        .I3(count[7]),
        .I4(fmac_speed[0]),
        .I5(fmac_speed[1]),
        .O(eof1_i_4__1_n_0));
  FDRE eof1_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof1_5),
        .Q(eof1),
        .R(rst__0));
  LUT6 #(
    .INIT(64'hAAAA000200020002)) 
    eof2_i_1
       (.I0(eof),
        .I1(pvld_i_2_n_0),
        .I2(count[3]),
        .I3(eof2_i_2_n_0),
        .I4(eof2_i_3_n_0),
        .I5(eof2_i_4_n_0),
        .O(eof2_1));
  LUT6 #(
    .INIT(64'hFFFFFBFFFFFFFFDF)) 
    eof2_i_2
       (.I0(count[2]),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(count[4]),
        .I4(count[6]),
        .I5(count[5]),
        .O(eof2_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair443" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    eof2_i_3
       (.I0(count[7]),
        .I1(count[8]),
        .I2(count[1]),
        .I3(count[0]),
        .I4(\count[15]_i_6_n_0 ),
        .O(eof2_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000008000000000)) 
    eof2_i_4
       (.I0(count[5]),
        .I1(count[4]),
        .I2(count[6]),
        .I3(count[2]),
        .I4(count[3]),
        .I5(\count_reg[8]_0 ),
        .O(eof2_i_4_n_0));
  FDRE eof2_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof2_1),
        .Q(eof2),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h888888888888A888)) 
    eof3_i_1
       (.I0(eof),
        .I1(eof3_i_2_n_0),
        .I2(count[5]),
        .I3(eof4_i_3_n_0),
        .I4(eof3_i_3_n_0),
        .I5(count[6]),
        .O(eof3_4));
  LUT6 #(
    .INIT(64'h4F44444444444444)) 
    eof3_i_2
       (.I0(eof3_i_4_n_0),
        .I1(eof2_i_3_n_0),
        .I2(eof5_i_7_n_0),
        .I3(mode_1G),
        .I4(count[2]),
        .I5(eof3_i_5_n_0),
        .O(eof3_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair476" *) 
  LUT4 #(
    .INIT(16'hFDFF)) 
    eof3_i_3
       (.I0(count[2]),
        .I1(count[4]),
        .I2(fmac_speed[0]),
        .I3(fmac_speed[1]),
        .O(eof3_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFBFFFFFFFFFFFF)) 
    eof3_i_4
       (.I0(count[4]),
        .I1(count[2]),
        .I2(count[6]),
        .I3(count[5]),
        .I4(count[3]),
        .I5(\count_reg[8]_0 ),
        .O(eof3_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair465" *) 
  LUT3 #(
    .INIT(8'h04)) 
    eof3_i_5
       (.I0(count[1]),
        .I1(\count[15]_i_6_n_0 ),
        .I2(count[8]),
        .O(eof3_i_5_n_0));
  FDRE eof3_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof3_4),
        .Q(eof3),
        .R(rst__0));
  LUT6 #(
    .INIT(64'hAAAA0200AAAAAAAA)) 
    eof4_i_1
       (.I0(eof),
        .I1(\count[7]_i_2_n_0 ),
        .I2(eof4_i_2_n_0),
        .I3(eof4_i_3_n_0),
        .I4(eof4_i_4_n_0),
        .I5(eof4_i_5_n_0),
        .O(eof4_3));
  (* SOFT_HLUTNM = "soft_lutpair481" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    eof4_i_2
       (.I0(count[2]),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .O(eof4_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    eof4_i_3
       (.I0(count[8]),
        .I1(count[1]),
        .I2(count[0]),
        .I3(\count[15]_i_6_n_0 ),
        .I4(count[7]),
        .I5(count[3]),
        .O(eof4_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    eof4_i_4
       (.I0(eof4_i_6_n_0),
        .I1(count[3]),
        .I2(count[7]),
        .I3(count[5]),
        .I4(count[6]),
        .I5(eof4_i_7_n_0),
        .O(eof4_i_4_n_0));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    eof4_i_5
       (.I0(eof6_i_6_n_0),
        .I1(count[3]),
        .I2(pvld_i_2_n_0),
        .I3(count[4]),
        .I4(mode_100M),
        .I5(count[2]),
        .O(eof4_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair468" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    eof4_i_6
       (.I0(\count[15]_i_6_n_0 ),
        .I1(count[0]),
        .I2(count[1]),
        .I3(count[8]),
        .O(eof4_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair476" *) 
  LUT4 #(
    .INIT(16'hEFFE)) 
    eof4_i_7
       (.I0(count[4]),
        .I1(count[2]),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(eof4_i_7_n_0));
  FDRE eof4_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof4_3),
        .Q(eof4),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h888A8888AAAAAAAA)) 
    eof5_i_1
       (.I0(eof),
        .I1(eof5_i_2_n_0),
        .I2(eof5_i_3_n_0),
        .I3(count[2]),
        .I4(mode_1G),
        .I5(eof5_i_4_n_0),
        .O(eof5_6));
  LUT6 #(
    .INIT(64'h0008000000000000)) 
    eof5_i_2
       (.I0(eof5_i_5_n_0),
        .I1(count[2]),
        .I2(count[4]),
        .I3(eof5_i_6_n_0),
        .I4(count[7]),
        .I5(\count_reg[8]_0 ),
        .O(eof5_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair465" *) 
  LUT4 #(
    .INIT(16'hFFDF)) 
    eof5_i_3
       (.I0(\count[15]_i_6_n_0 ),
        .I1(count[8]),
        .I2(count[1]),
        .I3(eof5_i_7_n_0),
        .O(eof5_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFDFFF)) 
    eof5_i_4
       (.I0(eof4_i_3_n_0),
        .I1(count[2]),
        .I2(mode_100M),
        .I3(count[4]),
        .I4(count[5]),
        .I5(count[6]),
        .O(eof5_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair468" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    eof5_i_5
       (.I0(\count[15]_i_6_n_0 ),
        .I1(count[0]),
        .I2(count[1]),
        .I3(count[8]),
        .O(eof5_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair450" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    eof5_i_6
       (.I0(count[5]),
        .I1(count[6]),
        .I2(count[3]),
        .O(eof5_i_6_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    eof5_i_7
       (.I0(count[0]),
        .I1(count[3]),
        .I2(count[7]),
        .I3(count[4]),
        .I4(count[6]),
        .I5(count[5]),
        .O(eof5_i_7_n_0));
  FDRE eof5_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof5_6),
        .Q(eof5),
        .R(rst__0));
  LUT2 #(
    .INIT(4'hE)) 
    eof6_i_1
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .O(eof6_i_1_n_0));
  LUT6 #(
    .INIT(64'hA8A8A8A8A8AAA8A8)) 
    eof6_i_2
       (.I0(eof),
        .I1(eof6_i_3_n_0),
        .I2(eof6_i_4_n_0),
        .I3(eof6_i_5_n_0),
        .I4(mode_1G),
        .I5(count[2]),
        .O(eof6_0));
  LUT6 #(
    .INIT(64'h0000008000000000)) 
    eof6_i_3
       (.I0(count[5]),
        .I1(eof4_i_3_n_0),
        .I2(count[6]),
        .I3(count[4]),
        .I4(count[2]),
        .I5(\count_reg[8]_0 ),
        .O(eof6_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    eof6_i_4
       (.I0(eof6_i_6_n_0),
        .I1(count[3]),
        .I2(pvld_i_2_n_0),
        .I3(mode_100M),
        .I4(count[2]),
        .I5(count[4]),
        .O(eof6_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair450" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    eof6_i_5
       (.I0(count[5]),
        .I1(count[6]),
        .I2(count[4]),
        .I3(pvld_i_2_n_0),
        .I4(count[3]),
        .O(eof6_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair477" *) 
  LUT2 #(
    .INIT(4'hE)) 
    eof6_i_6
       (.I0(count[5]),
        .I1(count[6]),
        .O(eof6_i_6_n_0));
  FDRE eof6_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(eof6_0),
        .Q(eof6),
        .R(rst__0));
  FDRE eof_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof),
        .Q(eof_dly1),
        .R(rst__0));
  FDRE eof_dly2_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof_dly1),
        .Q(eof_dly2),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    eof_i_1
       (.I0(eof_i_2_n_0),
        .I1(data_in_dly1[3]),
        .I2(data_in_dly1[7]),
        .I3(data_in_dly1[5]),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(p_1_in));
  (* SOFT_HLUTNM = "soft_lutpair467" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    eof_i_2
       (.I0(data_in_dly1[0]),
        .I1(pdet_in_dly_reg_0),
        .I2(data_in_dly1[6]),
        .I3(data_in_dly1[4]),
        .O(eof_i_2_n_0));
  FDRE eof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(eof),
        .R(rst__0));
  FDRE first_data_dly_reg
       (.C(lclk),
        .CE(1'b1),
        .D(first_data),
        .Q(first_data_dly),
        .R(rst__0));
  FDRE first_data_reg
       (.C(lclk),
        .CE(1'b1),
        .D(first_data0),
        .Q(first_data),
        .R(rst__0));
  FDRE frame_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(frame_dly1_reg_0),
        .Q(frame_dly1),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0080)) 
    frame_i_2
       (.I0(data_in_dly1[5]),
        .I1(data_in_dly1[7]),
        .I2(data_in_dly1[3]),
        .I3(eof_i_2_n_0),
        .O(frame_reg_0));
  FDRE frame_reg
       (.C(lclk),
        .CE(1'b1),
        .D(\data_in_dly1_reg[2]_0 ),
        .Q(frame_dly1_reg_0),
        .R(rst__0));
  FDRE gmii_rx_dv_dly_reg
       (.C(lclk),
        .CE(1'b1),
        .D(out),
        .Q(gmii_rx_dv_dly),
        .R(rst__0));
  (* SOFT_HLUTNM = "soft_lutpair467" *) 
  LUT2 #(
    .INIT(4'hE)) 
    idle_detect_i_1
       (.I0(pdet_in_dly),
        .I1(pdet_in_dly_reg_0),
        .O(idle_detect0));
  FDRE idle_detect_reg
       (.C(lclk),
        .CE(1'b1),
        .D(idle_detect0),
        .Q(idle_detect),
        .R(rst__0));
  CARRY8 link_break1_carry
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({link_break1_carry_n_0,link_break1_carry_n_1,link_break1_carry_n_2,link_break1_carry_n_3,NLW_link_break1_carry_CO_UNCONNECTED[3],link_break1_carry_n_5,link_break1_carry_n_6,link_break1_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_link_break1_carry_O_UNCONNECTED[7:0]),
        .S({link_break1_carry_i_1_n_0,link_break1_carry_i_2_n_0,link_break1_carry_i_3_n_0,link_break1_carry_i_4_n_0,link_break1_carry_i_5_n_0,link_break1_carry_i_6_n_0,link_break1_carry_i_7_n_0,link_break1_carry_i_8_n_0}));
  CARRY8 link_break1_carry__0
       (.CI(link_break1_carry_n_0),
        .CI_TOP(1'b0),
        .CO({link_break1_carry__0_n_0,link_break1_carry__0_n_1,link_break1_carry__0_n_2,link_break1_carry__0_n_3,NLW_link_break1_carry__0_CO_UNCONNECTED[3],link_break1_carry__0_n_5,link_break1_carry__0_n_6,link_break1_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_link_break1_carry__0_O_UNCONNECTED[7:0]),
        .S({link_break1_carry__0_i_1_n_0,link_break1_carry__0_i_2_n_0,link_break1_carry__0_i_3_n_0,link_break1_carry__0_i_4_n_0,link_break1_carry__0_i_5_n_0,link_break1_carry__0_i_6_n_0,link_break1_carry__0_i_7_n_0,link_break1_carry__0_i_8_n_0}));
  LUT3 #(
    .INIT(8'h04)) 
    link_break1_carry__0_i_1
       (.I0(data0[45]),
        .I1(data0[46]),
        .I2(data0[47]),
        .O(link_break1_carry__0_i_1_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__0_i_2
       (.I0(data0[42]),
        .I1(data0[43]),
        .I2(data0[44]),
        .O(link_break1_carry__0_i_2_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    link_break1_carry__0_i_3
       (.I0(data0[39]),
        .I1(data0[41]),
        .I2(data0[40]),
        .O(link_break1_carry__0_i_3_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    link_break1_carry__0_i_4
       (.I0(data0[36]),
        .I1(data0[37]),
        .I2(data0[38]),
        .O(link_break1_carry__0_i_4_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    link_break1_carry__0_i_5
       (.I0(data0[34]),
        .I1(data0[35]),
        .I2(data0[33]),
        .O(link_break1_carry__0_i_5_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__0_i_6
       (.I0(data0[31]),
        .I1(data0[32]),
        .I2(data0[30]),
        .O(link_break1_carry__0_i_6_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__0_i_7
       (.I0(data0[28]),
        .I1(data0[29]),
        .I2(data0[27]),
        .O(link_break1_carry__0_i_7_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__0_i_8
       (.I0(data0[24]),
        .I1(data0[25]),
        .I2(data0[26]),
        .O(link_break1_carry__0_i_8_n_0));
  CARRY8 link_break1_carry__1
       (.CI(link_break1_carry__0_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_link_break1_carry__1_CO_UNCONNECTED[7:6],link_break1,link_break1_carry__1_n_3,NLW_link_break1_carry__1_CO_UNCONNECTED[3],link_break1_carry__1_n_5,link_break1_carry__1_n_6,link_break1_carry__1_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_link_break1_carry__1_O_UNCONNECTED[7:0]),
        .S({1'b0,1'b0,link_break1_carry__1_i_1_n_0,link_break1_carry__1_i_2_n_0,link_break1_carry__1_i_3_n_0,link_break1_carry__1_i_4_n_0,link_break1_carry__1_i_5_n_0,link_break1_carry__1_i_6_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    link_break1_carry__1_i_1
       (.I0(data0[63]),
        .O(link_break1_carry__1_i_1_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__1_i_2
       (.I0(data0[61]),
        .I1(data0[62]),
        .I2(data0[60]),
        .O(link_break1_carry__1_i_2_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__1_i_3
       (.I0(data0[58]),
        .I1(data0[59]),
        .I2(data0[57]),
        .O(link_break1_carry__1_i_3_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__1_i_4
       (.I0(data0[55]),
        .I1(data0[56]),
        .I2(data0[54]),
        .O(link_break1_carry__1_i_4_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__1_i_5
       (.I0(data0[52]),
        .I1(data0[53]),
        .I2(data0[51]),
        .O(link_break1_carry__1_i_5_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry__1_i_6
       (.I0(data0[49]),
        .I1(data0[50]),
        .I2(data0[48]),
        .O(link_break1_carry__1_i_6_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry_i_1
       (.I0(data0[22]),
        .I1(data0[23]),
        .I2(data0[21]),
        .O(link_break1_carry_i_1_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    link_break1_carry_i_2
       (.I0(data0[19]),
        .I1(data0[20]),
        .I2(data0[18]),
        .O(link_break1_carry_i_2_n_0));
  LUT3 #(
    .INIT(8'h04)) 
    link_break1_carry_i_3
       (.I0(data0[17]),
        .I1(data0[15]),
        .I2(data0[16]),
        .O(link_break1_carry_i_3_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    link_break1_carry_i_4
       (.I0(data0[12]),
        .I1(data0[13]),
        .I2(data0[14]),
        .O(link_break1_carry_i_4_n_0));
  LUT3 #(
    .INIT(8'h04)) 
    link_break1_carry_i_5
       (.I0(data0[11]),
        .I1(data0[10]),
        .I2(data0[9]),
        .O(link_break1_carry_i_5_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    link_break1_carry_i_6
       (.I0(data0[7]),
        .I1(data0[8]),
        .I2(data0[6]),
        .O(link_break1_carry_i_6_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    link_break1_carry_i_7
       (.I0(data0[3]),
        .I1(data0[4]),
        .I2(data0[5]),
        .O(link_break1_carry_i_7_n_0));
  LUT3 #(
    .INIT(8'h04)) 
    link_break1_carry_i_8
       (.I0(data0[1]),
        .I1(data0[2]),
        .I2(data0[0]),
        .O(link_break1_carry_i_8_n_0));
  FDRE link_break_reg
       (.C(lclk),
        .CE(1'b1),
        .D(link_break1),
        .Q(link_break),
        .R(rst__0));
  LUT5 #(
    .INIT(32'h00008000)) 
    link_ok_i_1
       (.I0(consec_idle[5]),
        .I1(consec_idle[4]),
        .I2(consec_idle[6]),
        .I3(consec_idle[7]),
        .I4(link_ok_i_2_n_0),
        .O(link_ok0__0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    link_ok_i_2
       (.I0(consec_idle[2]),
        .I1(consec_idle[3]),
        .I2(consec_idle[0]),
        .I3(consec_idle[1]),
        .O(link_ok_i_2_n_0));
  FDRE link_ok_reg
       (.C(lclk),
        .CE(1'b1),
        .D(link_ok0__0),
        .Q(link_ok),
        .R(rst__0));
  FDRE linkup_reg
       (.C(lclk),
        .CE(1'b1),
        .D(link_ok_reg_0),
        .Q(\consec_idle_reg[0]_0 ),
        .R(rst__0));
  FDRE pdet_in_dly_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pdet_in_dly_reg_0),
        .Q(pdet_in_dly),
        .R(rst__0));
  FDRE pulse100_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pulse100),
        .Q(pulse100_dly1),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0020)) 
    pulse100_i_1
       (.I0(\count100[15]_i_4_n_0 ),
        .I1(count100[0]),
        .I2(count100[1]),
        .I3(\count100[15]_i_3_n_0 ),
        .O(pulse100_i_1_n_0));
  FDRE pulse100_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pulse100_i_1_n_0),
        .Q(pulse100),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    pvld_i_1
       (.I0(count[2]),
        .I1(count[3]),
        .I2(pvld_i_2_n_0),
        .I3(count[4]),
        .I4(count[6]),
        .I5(count[5]),
        .O(pvld_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair443" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    pvld_i_2
       (.I0(count[0]),
        .I1(count[7]),
        .I2(count[8]),
        .I3(\count[15]_i_6_n_0 ),
        .I4(count[1]),
        .O(pvld_i_2_n_0));
  FDRE pvld_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pvld_i_1_n_0),
        .Q(pvld),
        .R(rst__0));
  LUT6 #(
    .INIT(64'h33AA0F3300AA0000)) 
    x_bcnt_we_i_1
       (.I0(eof_dly2),
        .I1(\dff0[7]_i_2_n_0 ),
        .I2(\dff0[7]_i_3_n_0 ),
        .I3(fmac_speed[1]),
        .I4(fmac_speed[0]),
        .I5(eof),
        .O(x_bcnt_we_i_1_n_0));
  FDRE x_bcnt_we_reg
       (.C(lclk),
        .CE(eof6_i_1_n_0),
        .D(x_bcnt_we_i_1_n_0),
        .Q(\count_reg[7]_0 ),
        .R(rst__0));
  LUT6 #(
    .INIT(64'hAFFFEFFFF8A8B8A8)) 
    \x_byte_cnt[0]_i_1 
       (.I0(\x_byte_cnt[15]_i_4_n_0 ),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(frame_dly1_reg_0),
        .I4(pulse100_dly1),
        .I5(x_byte_cnt[0]),
        .O(\x_byte_cnt[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA8FF)) 
    \x_byte_cnt[15]_i_1 
       (.I0(\x_byte_cnt[15]_i_4_n_0 ),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(rst_),
        .O(\x_byte_cnt[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hD000)) 
    \x_byte_cnt[15]_i_2 
       (.I0(fmac_speed[1]),
        .I1(pulse100_dly1),
        .I2(fmac_speed[0]),
        .I3(frame_dly1_reg_0),
        .O(\x_byte_cnt[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \x_byte_cnt[15]_i_4 
       (.I0(eof_i_2_n_0),
        .I1(data_in_dly1[3]),
        .I2(data_in_dly1[7]),
        .I3(data_in_dly1[5]),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\x_byte_cnt[15]_i_4_n_0 ));
  FDRE \x_byte_cnt_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\x_byte_cnt[0]_i_1_n_0 ),
        .Q(x_byte_cnt[0]),
        .R(rst__0));
  FDRE \x_byte_cnt_reg[10] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[10]),
        .Q(x_byte_cnt[10]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[11] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[11]),
        .Q(x_byte_cnt[11]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[12] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[12]),
        .Q(x_byte_cnt[12]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[13] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[13]),
        .Q(x_byte_cnt[13]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[14] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[14]),
        .Q(x_byte_cnt[14]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[15] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[15]),
        .Q(x_byte_cnt[15]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  CARRY8 \x_byte_cnt_reg[15]_i_3 
       (.CI(\x_byte_cnt_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_x_byte_cnt_reg[15]_i_3_CO_UNCONNECTED [7:6],\x_byte_cnt_reg[15]_i_3_n_2 ,\x_byte_cnt_reg[15]_i_3_n_3 ,\NLW_x_byte_cnt_reg[15]_i_3_CO_UNCONNECTED [3],\x_byte_cnt_reg[15]_i_3_n_5 ,\x_byte_cnt_reg[15]_i_3_n_6 ,\x_byte_cnt_reg[15]_i_3_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_x_byte_cnt_reg[15]_i_3_O_UNCONNECTED [7],p_3_in[15:9]}),
        .S({1'b0,x_byte_cnt[15:9]}));
  FDRE \x_byte_cnt_reg[1] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[1]),
        .Q(x_byte_cnt[1]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[2] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[2]),
        .Q(x_byte_cnt[2]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[3] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[3]),
        .Q(x_byte_cnt[3]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[4] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[4]),
        .Q(x_byte_cnt[4]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[5] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[5]),
        .Q(x_byte_cnt[5]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[6] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[6]),
        .Q(x_byte_cnt[6]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[7] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[7]),
        .Q(x_byte_cnt[7]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  FDRE \x_byte_cnt_reg[8] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[8]),
        .Q(x_byte_cnt[8]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  CARRY8 \x_byte_cnt_reg[8]_i_1 
       (.CI(x_byte_cnt[0]),
        .CI_TOP(1'b0),
        .CO({\x_byte_cnt_reg[8]_i_1_n_0 ,\x_byte_cnt_reg[8]_i_1_n_1 ,\x_byte_cnt_reg[8]_i_1_n_2 ,\x_byte_cnt_reg[8]_i_1_n_3 ,\NLW_x_byte_cnt_reg[8]_i_1_CO_UNCONNECTED [3],\x_byte_cnt_reg[8]_i_1_n_5 ,\x_byte_cnt_reg[8]_i_1_n_6 ,\x_byte_cnt_reg[8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(p_3_in[8:1]),
        .S(x_byte_cnt[8:1]));
  FDRE \x_byte_cnt_reg[9] 
       (.C(lclk),
        .CE(\x_byte_cnt[15]_i_2_n_0 ),
        .D(p_3_in[9]),
        .Q(x_byte_cnt[9]),
        .R(\x_byte_cnt[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFFFFFE)) 
    x_we_i_1
       (.I0(eof3),
        .I1(eof4),
        .I2(eof6),
        .I3(eof5),
        .I4(\data_out[41]_i_3_n_0 ),
        .I5(x_we_i_2_n_0),
        .O(x_we));
  LUT6 #(
    .INIT(64'h00000070FFFFFFFF)) 
    x_we_i_2
       (.I0(frame_dly1_reg_0),
        .I1(frame_dly1),
        .I2(pvld),
        .I3(eof),
        .I4(mode_1G),
        .I5(\consec_idle_reg[0]_0 ),
        .O(x_we_i_2_n_0));
  FDRE x_we_reg
       (.C(lclk),
        .CE(1'b1),
        .D(x_we),
        .Q(wr_en),
        .R(rst__0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gige_tx_encap
   (Q,
    rts,
    wsel_reg_0,
    rd_en,
    \bytes_remain_reg[15]_0 ,
    \count8_reg[1]_0 ,
    \crc_cnt_reg[12] ,
    \nbytes_reg_reg[15] ,
    \crc_cnt_reg[7] ,
    \crc_cnt_reg[12]_0 ,
    \bdin_reg[63] ,
    \bdata1_reg[63] ,
    \bdin_reg[47] ,
    \bdin_reg[55] ,
    \bdin_reg[54] ,
    \bdin_reg[53] ,
    \bdin_reg[52] ,
    \bdin_reg[51] ,
    \bdin_reg[50] ,
    \bdin_reg[49] ,
    \bdin_reg[48] ,
    \bdin_reg[47]_0 ,
    \bdin_reg[46] ,
    \bdin_reg[46]_0 ,
    \bdin_reg[45] ,
    \bdin_reg[45]_0 ,
    \bdin_reg[44] ,
    \bdin_reg[44]_0 ,
    \bdin_reg[43] ,
    \bdin_reg[43]_0 ,
    \bdin_reg[42] ,
    \bdin_reg[42]_0 ,
    \bdin_reg[41] ,
    \bdin_reg[41]_0 ,
    \bdin_reg[40] ,
    \bdin_reg[40]_0 ,
    \bdin_reg[39] ,
    \bdin_reg[39]_0 ,
    \bdin_reg[38] ,
    \bdin_reg[38]_0 ,
    \bdin_reg[37] ,
    \bdin_reg[37]_0 ,
    \bdin_reg[36] ,
    \bdin_reg[36]_0 ,
    \bdin_reg[35] ,
    \bdin_reg[35]_0 ,
    \bdin_reg[34] ,
    \bdin_reg[34]_0 ,
    \bdin_reg[33] ,
    \bdin_reg[33]_0 ,
    \bdin_reg[32] ,
    \bdin_reg[32]_0 ,
    \bcnt_reg[15] ,
    \bcnt_reg[11] ,
    \bcnt_reg[14] ,
    \bcnt_reg[13] ,
    \bcnt_reg[12] ,
    \bcnt_reg[6] ,
    \bcnt_reg[10] ,
    \bcnt_reg[9] ,
    \bcnt_reg[8] ,
    \bcnt_reg[7] ,
    \bcnt_reg[5] ,
    \bcnt_reg[4] ,
    \bcnt_reg[3] ,
    \bcnt_reg[2] ,
    \nbytes_reg_reg[15]_0 ,
    crc_cnt20_in,
    \crc_cnt_reg[14] ,
    \crc_cnt_reg[13] ,
    \crc_cnt_reg[10] ,
    \crc_cnt_reg[9] ,
    \crc_cnt_reg[8] ,
    \crc_cnt_reg[5] ,
    \crc_cnt_reg[4] ,
    SR,
    fmac_speed_0_sp_1,
    lclk,
    mode_1G,
    fmac_speed,
    rst_,
    dout,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_2 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_3 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_4 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_5 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_6 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_7 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_8 ,
    cts_1g,
    empty,
    fmac_speed_1_sp_1,
    D,
    pulse_0_reg_0,
    \crc_cnt_reg[12]_1 ,
    \crc_cnt_reg[5]_0 ,
    \crc_cnt_reg[10]_0 ,
    \rbytes_reg_reg[2] ,
    \rbytes_reg_reg[1]_rep ,
    \rbytes_reg_reg[0]_rep ,
    \rbytes_reg_reg[1]_rep__0 ,
    \rbytes_reg_reg[0]_rep__0 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_9 );
  output [0:0]Q;
  output rts;
  output wsel_reg_0;
  output rd_en;
  output \bytes_remain_reg[15]_0 ;
  output [0:0]\count8_reg[1]_0 ;
  output [2:0]\crc_cnt_reg[12] ;
  output [15:0]\nbytes_reg_reg[15] ;
  output \crc_cnt_reg[7] ;
  output \crc_cnt_reg[12]_0 ;
  output [7:0]\bdin_reg[63] ;
  output [63:0]\bdata1_reg[63] ;
  output \bdin_reg[47] ;
  output \bdin_reg[55] ;
  output \bdin_reg[54] ;
  output \bdin_reg[53] ;
  output \bdin_reg[52] ;
  output \bdin_reg[51] ;
  output \bdin_reg[50] ;
  output \bdin_reg[49] ;
  output \bdin_reg[48] ;
  output \bdin_reg[47]_0 ;
  output \bdin_reg[46] ;
  output \bdin_reg[46]_0 ;
  output \bdin_reg[45] ;
  output \bdin_reg[45]_0 ;
  output \bdin_reg[44] ;
  output \bdin_reg[44]_0 ;
  output \bdin_reg[43] ;
  output \bdin_reg[43]_0 ;
  output \bdin_reg[42] ;
  output \bdin_reg[42]_0 ;
  output \bdin_reg[41] ;
  output \bdin_reg[41]_0 ;
  output \bdin_reg[40] ;
  output \bdin_reg[40]_0 ;
  output \bdin_reg[39] ;
  output \bdin_reg[39]_0 ;
  output \bdin_reg[38] ;
  output \bdin_reg[38]_0 ;
  output \bdin_reg[37] ;
  output \bdin_reg[37]_0 ;
  output \bdin_reg[36] ;
  output \bdin_reg[36]_0 ;
  output \bdin_reg[35] ;
  output \bdin_reg[35]_0 ;
  output \bdin_reg[34] ;
  output \bdin_reg[34]_0 ;
  output \bdin_reg[33] ;
  output \bdin_reg[33]_0 ;
  output \bdin_reg[32] ;
  output \bdin_reg[32]_0 ;
  output \bcnt_reg[15] ;
  output \bcnt_reg[11] ;
  output \bcnt_reg[14] ;
  output \bcnt_reg[13] ;
  output \bcnt_reg[12] ;
  output \bcnt_reg[6] ;
  output \bcnt_reg[10] ;
  output \bcnt_reg[9] ;
  output \bcnt_reg[8] ;
  output \bcnt_reg[7] ;
  output \bcnt_reg[5] ;
  output \bcnt_reg[4] ;
  output \bcnt_reg[3] ;
  output \bcnt_reg[2] ;
  output [12:0]\nbytes_reg_reg[15]_0 ;
  output [0:0]crc_cnt20_in;
  output \crc_cnt_reg[14] ;
  output \crc_cnt_reg[13] ;
  output \crc_cnt_reg[10] ;
  output \crc_cnt_reg[9] ;
  output \crc_cnt_reg[8] ;
  output \crc_cnt_reg[5] ;
  output \crc_cnt_reg[4] ;
  input [0:0]SR;
  input fmac_speed_0_sp_1;
  input lclk;
  input mode_1G;
  input [1:0]fmac_speed;
  input rst_;
  input [38:0]dout;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_2 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_3 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_4 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_5 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_6 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_7 ;
  input \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_8 ;
  input cts_1g;
  input empty;
  input fmac_speed_1_sp_1;
  input [32:0]D;
  input pulse_0_reg_0;
  input [2:0]\crc_cnt_reg[12]_1 ;
  input \crc_cnt_reg[5]_0 ;
  input \crc_cnt_reg[10]_0 ;
  input [0:0]\rbytes_reg_reg[2] ;
  input \rbytes_reg_reg[1]_rep ;
  input \rbytes_reg_reg[0]_rep ;
  input \rbytes_reg_reg[1]_rep__0 ;
  input \rbytes_reg_reg[0]_rep__0 ;
  input [0:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_9 ;

  wire [32:0]D;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_2 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_3 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_4 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_5 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_6 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_7 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_8 ;
  wire [0:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_9 ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire \b2b_counter[0]_i_1_n_0 ;
  wire \b2b_counter[5]_i_2_n_0 ;
  wire \b2b_counter[8]_i_1_n_0 ;
  wire [8:0]b2b_counter_reg__0;
  wire b2b_ok;
  wire b2b_ok_i_1_n_0;
  wire b2b_ok_i_2_n_0;
  wire \bcnt_reg[10] ;
  wire \bcnt_reg[11] ;
  wire \bcnt_reg[12] ;
  wire \bcnt_reg[13] ;
  wire \bcnt_reg[14] ;
  wire \bcnt_reg[15] ;
  wire \bcnt_reg[2] ;
  wire \bcnt_reg[3] ;
  wire \bcnt_reg[4] ;
  wire \bcnt_reg[5] ;
  wire \bcnt_reg[6] ;
  wire \bcnt_reg[7] ;
  wire \bcnt_reg[8] ;
  wire \bcnt_reg[9] ;
  wire [63:0]\bdata1_reg[63] ;
  wire \bdin[56]_i_2_n_0 ;
  wire \bdin[56]_i_3_n_0 ;
  wire \bdin[57]_i_2_n_0 ;
  wire \bdin[57]_i_3_n_0 ;
  wire \bdin[58]_i_2_n_0 ;
  wire \bdin[58]_i_3_n_0 ;
  wire \bdin[59]_i_2_n_0 ;
  wire \bdin[59]_i_3_n_0 ;
  wire \bdin[60]_i_2_n_0 ;
  wire \bdin[60]_i_3_n_0 ;
  wire \bdin[61]_i_2_n_0 ;
  wire \bdin[61]_i_3_n_0 ;
  wire \bdin[62]_i_2_n_0 ;
  wire \bdin[62]_i_3_n_0 ;
  wire \bdin[63]_i_3_n_0 ;
  wire \bdin[63]_i_4_n_0 ;
  wire \bdin_reg[32] ;
  wire \bdin_reg[32]_0 ;
  wire \bdin_reg[33] ;
  wire \bdin_reg[33]_0 ;
  wire \bdin_reg[34] ;
  wire \bdin_reg[34]_0 ;
  wire \bdin_reg[35] ;
  wire \bdin_reg[35]_0 ;
  wire \bdin_reg[36] ;
  wire \bdin_reg[36]_0 ;
  wire \bdin_reg[37] ;
  wire \bdin_reg[37]_0 ;
  wire \bdin_reg[38] ;
  wire \bdin_reg[38]_0 ;
  wire \bdin_reg[39] ;
  wire \bdin_reg[39]_0 ;
  wire \bdin_reg[40] ;
  wire \bdin_reg[40]_0 ;
  wire \bdin_reg[41] ;
  wire \bdin_reg[41]_0 ;
  wire \bdin_reg[42] ;
  wire \bdin_reg[42]_0 ;
  wire \bdin_reg[43] ;
  wire \bdin_reg[43]_0 ;
  wire \bdin_reg[44] ;
  wire \bdin_reg[44]_0 ;
  wire \bdin_reg[45] ;
  wire \bdin_reg[45]_0 ;
  wire \bdin_reg[46] ;
  wire \bdin_reg[46]_0 ;
  wire \bdin_reg[47] ;
  wire \bdin_reg[47]_0 ;
  wire \bdin_reg[48] ;
  wire \bdin_reg[49] ;
  wire \bdin_reg[50] ;
  wire \bdin_reg[51] ;
  wire \bdin_reg[52] ;
  wire \bdin_reg[53] ;
  wire \bdin_reg[54] ;
  wire \bdin_reg[55] ;
  wire [7:0]\bdin_reg[63] ;
  wire bytes_remain;
  wire \bytes_remain[0]_i_1_n_0 ;
  wire \bytes_remain[10]_i_1_n_0 ;
  wire \bytes_remain[10]_i_2_n_0 ;
  wire \bytes_remain[11]_i_1_n_0 ;
  wire \bytes_remain[11]_i_2_n_0 ;
  wire \bytes_remain[12]_i_1_n_0 ;
  wire \bytes_remain[12]_i_2_n_0 ;
  wire \bytes_remain[13]_i_1_n_0 ;
  wire \bytes_remain[13]_i_2_n_0 ;
  wire \bytes_remain[14]_i_1_n_0 ;
  wire \bytes_remain[14]_i_2_n_0 ;
  wire \bytes_remain[1]_i_1_n_0 ;
  wire \bytes_remain[2]_i_1_n_0 ;
  wire \bytes_remain[3]_i_1_n_0 ;
  wire \bytes_remain[4]_i_1_n_0 ;
  wire \bytes_remain[5]_i_1_n_0 ;
  wire \bytes_remain[6]_i_1_n_0 ;
  wire \bytes_remain[6]_i_2_n_0 ;
  wire \bytes_remain[7]_i_1_n_0 ;
  wire \bytes_remain[7]_i_2_n_0 ;
  wire \bytes_remain[8]_i_1_n_0 ;
  wire \bytes_remain[8]_i_2_n_0 ;
  wire \bytes_remain[9]_i_1_n_0 ;
  wire \bytes_remain_reg[15]_0 ;
  wire \bytes_remain_reg_n_0_[0] ;
  wire \bytes_remain_reg_n_0_[10] ;
  wire \bytes_remain_reg_n_0_[11] ;
  wire \bytes_remain_reg_n_0_[12] ;
  wire \bytes_remain_reg_n_0_[13] ;
  wire \bytes_remain_reg_n_0_[14] ;
  wire \bytes_remain_reg_n_0_[1] ;
  wire \bytes_remain_reg_n_0_[2] ;
  wire \bytes_remain_reg_n_0_[3] ;
  wire \bytes_remain_reg_n_0_[4] ;
  wire \bytes_remain_reg_n_0_[5] ;
  wire \bytes_remain_reg_n_0_[6] ;
  wire \bytes_remain_reg_n_0_[7] ;
  wire \bytes_remain_reg_n_0_[8] ;
  wire \bytes_remain_reg_n_0_[9] ;
  wire count8;
  wire \count8[0]_i_1_n_0 ;
  wire \count8[1]_i_1_n_0 ;
  wire \count8[1]_i_2_n_0 ;
  wire \count8[2]_i_1_n_0 ;
  wire \count8[3]_i_2_n_0 ;
  wire \count8[3]_i_3_n_0 ;
  wire \count8[3]_i_4_n_0 ;
  wire [0:0]\count8_reg[1]_0 ;
  wire \count8_reg_n_0_[0] ;
  wire \count8_reg_n_0_[1] ;
  wire \count8_reg_n_0_[2] ;
  wire \count8_reg_n_0_[3] ;
  wire [6:0]counter;
  wire \counter[1]_i_2_n_0 ;
  wire \counter[2]_i_2_n_0 ;
  wire \counter[3]_i_2__0_n_0 ;
  wire \counter[3]_i_3_n_0 ;
  wire \counter[4]_i_2_n_0 ;
  wire \counter[5]_i_2__0_n_0 ;
  wire \counter[6]_i_1__0_n_0 ;
  wire \counter[6]_i_3_n_0 ;
  wire [0:0]crc_cnt20_in;
  wire \crc_cnt_reg[10] ;
  wire \crc_cnt_reg[10]_0 ;
  wire [2:0]\crc_cnt_reg[12] ;
  wire \crc_cnt_reg[12]_0 ;
  wire [2:0]\crc_cnt_reg[12]_1 ;
  wire \crc_cnt_reg[13] ;
  wire \crc_cnt_reg[14] ;
  wire \crc_cnt_reg[4] ;
  wire \crc_cnt_reg[5] ;
  wire \crc_cnt_reg[5]_0 ;
  wire \crc_cnt_reg[7] ;
  wire \crc_cnt_reg[8] ;
  wire \crc_cnt_reg[9] ;
  wire cts_1g;
  wire [38:0]dout;
  wire empty;
  wire [1:0]fmac_speed;
  wire fmac_speed_0_sn_1;
  wire fmac_speed_1_sn_1;
  wire lclk;
  wire mode_1G;
  wire \nbytes_reg[10]_i_2_n_0 ;
  wire \nbytes_reg[15]_i_2_n_0 ;
  wire [15:0]\nbytes_reg_reg[15] ;
  wire [12:0]\nbytes_reg_reg[15]_0 ;
  wire [8:1]p_0_in;
  wire p_0_in_0;
  wire [4:0]p_0_in__0;
  wire [6:0]p_1_in;
  wire [61:1]p_2_in;
  wire [5:0]p_reg_count0;
  wire \p_reg_count[5]_i_1_n_0 ;
  wire \p_reg_count[5]_i_3_n_0 ;
  wire [5:0]p_reg_count_reg__0;
  wire p_start;
  wire p_start_i_1_n_0;
  wire ptimer1;
  wire \ptimer[0]_i_10_n_0 ;
  wire \ptimer[0]_i_3_n_0 ;
  wire \ptimer[0]_i_4_n_0 ;
  wire \ptimer[0]_i_5_n_0 ;
  wire \ptimer[0]_i_6_n_0 ;
  wire \ptimer[0]_i_7_n_0 ;
  wire \ptimer[0]_i_8_n_0 ;
  wire \ptimer[0]_i_9_n_0 ;
  wire \ptimer[16]_i_2_n_0 ;
  wire \ptimer[8]_i_2_n_0 ;
  wire \ptimer[8]_i_3_n_0 ;
  wire \ptimer[8]_i_4_n_0 ;
  wire \ptimer[8]_i_5_n_0 ;
  wire \ptimer[8]_i_6_n_0 ;
  wire \ptimer[8]_i_7_n_0 ;
  wire \ptimer[8]_i_8_n_0 ;
  wire \ptimer[8]_i_9_n_0 ;
  wire \ptimer_reg[0]_i_2_n_0 ;
  wire \ptimer_reg[0]_i_2_n_1 ;
  wire \ptimer_reg[0]_i_2_n_10 ;
  wire \ptimer_reg[0]_i_2_n_11 ;
  wire \ptimer_reg[0]_i_2_n_12 ;
  wire \ptimer_reg[0]_i_2_n_13 ;
  wire \ptimer_reg[0]_i_2_n_14 ;
  wire \ptimer_reg[0]_i_2_n_15 ;
  wire \ptimer_reg[0]_i_2_n_2 ;
  wire \ptimer_reg[0]_i_2_n_3 ;
  wire \ptimer_reg[0]_i_2_n_5 ;
  wire \ptimer_reg[0]_i_2_n_6 ;
  wire \ptimer_reg[0]_i_2_n_7 ;
  wire \ptimer_reg[0]_i_2_n_8 ;
  wire \ptimer_reg[0]_i_2_n_9 ;
  wire \ptimer_reg[16]_i_1_n_15 ;
  wire \ptimer_reg[8]_i_1_n_0 ;
  wire \ptimer_reg[8]_i_1_n_1 ;
  wire \ptimer_reg[8]_i_1_n_10 ;
  wire \ptimer_reg[8]_i_1_n_11 ;
  wire \ptimer_reg[8]_i_1_n_12 ;
  wire \ptimer_reg[8]_i_1_n_13 ;
  wire \ptimer_reg[8]_i_1_n_14 ;
  wire \ptimer_reg[8]_i_1_n_15 ;
  wire \ptimer_reg[8]_i_1_n_2 ;
  wire \ptimer_reg[8]_i_1_n_3 ;
  wire \ptimer_reg[8]_i_1_n_5 ;
  wire \ptimer_reg[8]_i_1_n_6 ;
  wire \ptimer_reg[8]_i_1_n_7 ;
  wire \ptimer_reg[8]_i_1_n_8 ;
  wire \ptimer_reg[8]_i_1_n_9 ;
  wire \ptimer_reg_n_0_[0] ;
  wire \ptimer_reg_n_0_[10] ;
  wire \ptimer_reg_n_0_[11] ;
  wire \ptimer_reg_n_0_[12] ;
  wire \ptimer_reg_n_0_[13] ;
  wire \ptimer_reg_n_0_[14] ;
  wire \ptimer_reg_n_0_[15] ;
  wire \ptimer_reg_n_0_[1] ;
  wire \ptimer_reg_n_0_[2] ;
  wire \ptimer_reg_n_0_[3] ;
  wire \ptimer_reg_n_0_[4] ;
  wire \ptimer_reg_n_0_[5] ;
  wire \ptimer_reg_n_0_[6] ;
  wire \ptimer_reg_n_0_[7] ;
  wire \ptimer_reg_n_0_[8] ;
  wire \ptimer_reg_n_0_[9] ;
  wire pulse_0;
  wire pulse_0_reg_0;
  wire pulse_1;
  wire pulse_10;
  wire \rbytes[15]_i_1_n_0 ;
  wire \rbytes_reg_reg[0]_rep ;
  wire \rbytes_reg_reg[0]_rep__0 ;
  wire \rbytes_reg_reg[1]_rep ;
  wire \rbytes_reg_reg[1]_rep__0 ;
  wire [0:0]\rbytes_reg_reg[2] ;
  wire rd_en;
  wire rst_;
  wire rts;
  wire rts_i_1_n_0;
  wire st_mac_dat;
  wire st_readsize;
  wire \state[1]_i_2__0_n_0 ;
  wire \state[4]_i_2__0_n_0 ;
  wire \state[4]_i_3_n_0 ;
  wire \state_inferred__0/i___2_n_0 ;
  wire \state_reg_n_0_[0] ;
  wire \state_reg_n_0_[3] ;
  wire tx_dvld_i_1_n_0;
  wire tx_dvld_i_2_n_0;
  wire tx_dvld_i_3_n_0;
  wire tx_dvld_i_4_n_0;
  wire tx_dvld_reg_n_0;
  wire tx_rdy;
  wire txfifo_rd_en_i_1_n_0;
  wire txfifo_rd_en_i_2_n_0;
  wire txfifo_rd_en_i_3_n_0;
  wire txfifo_rd_en_i_4_n_0;
  wire txfifo_rd_en_i_5_n_0;
  wire txfifo_rd_en_i_6_n_0;
  wire txfifo_rd_en_i_7_n_0;
  wire \wdata[63]_i_1_n_0 ;
  wire \wdata[63]_i_2_n_0 ;
  wire wsel;
  wire wsel_i_1_n_0;
  wire wsel_i_2_n_0;
  wire wsel_reg_0;
  wire [3:3]\NLW_ptimer_reg[0]_i_2_CO_UNCONNECTED ;
  wire [7:0]\NLW_ptimer_reg[16]_i_1_CO_UNCONNECTED ;
  wire [7:1]\NLW_ptimer_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:3]\NLW_ptimer_reg[8]_i_1_CO_UNCONNECTED ;

  assign fmac_speed_0_sn_1 = fmac_speed_0_sp_1;
  assign fmac_speed_1_sn_1 = fmac_speed_1_sp_1;
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \b2b_counter[0]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[0]),
        .O(\b2b_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT3 #(
    .INIT(8'h41)) 
    \b2b_counter[1]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[0]),
        .I2(b2b_counter_reg__0[1]),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT4 #(
    .INIT(16'h5401)) 
    \b2b_counter[2]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[1]),
        .I2(b2b_counter_reg__0[0]),
        .I3(b2b_counter_reg__0[2]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT5 #(
    .INIT(32'h55540001)) 
    \b2b_counter[3]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[2]),
        .I2(b2b_counter_reg__0[0]),
        .I3(b2b_counter_reg__0[1]),
        .I4(b2b_counter_reg__0[3]),
        .O(p_0_in[3]));
  LUT6 #(
    .INIT(64'h5555555400000001)) 
    \b2b_counter[4]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[3]),
        .I2(b2b_counter_reg__0[1]),
        .I3(b2b_counter_reg__0[0]),
        .I4(b2b_counter_reg__0[2]),
        .I5(b2b_counter_reg__0[4]),
        .O(p_0_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT3 #(
    .INIT(8'h41)) 
    \b2b_counter[5]_i_1 
       (.I0(st_mac_dat),
        .I1(\b2b_counter[5]_i_2_n_0 ),
        .I2(b2b_counter_reg__0[5]),
        .O(p_0_in[5]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \b2b_counter[5]_i_2 
       (.I0(b2b_counter_reg__0[3]),
        .I1(b2b_counter_reg__0[1]),
        .I2(b2b_counter_reg__0[0]),
        .I3(b2b_counter_reg__0[2]),
        .I4(b2b_counter_reg__0[4]),
        .O(\b2b_counter[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT3 #(
    .INIT(8'h41)) 
    \b2b_counter[6]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_ok_i_2_n_0),
        .I2(b2b_counter_reg__0[6]),
        .O(p_0_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT4 #(
    .INIT(16'h5401)) 
    \b2b_counter[7]_i_1 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[6]),
        .I2(b2b_ok_i_2_n_0),
        .I3(b2b_counter_reg__0[7]),
        .O(p_0_in[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAAA8)) 
    \b2b_counter[8]_i_1 
       (.I0(\state_reg_n_0_[0] ),
        .I1(b2b_counter_reg__0[7]),
        .I2(b2b_ok_i_2_n_0),
        .I3(b2b_counter_reg__0[6]),
        .I4(b2b_counter_reg__0[8]),
        .I5(st_mac_dat),
        .O(\b2b_counter[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT5 #(
    .INIT(32'h55540001)) 
    \b2b_counter[8]_i_2 
       (.I0(st_mac_dat),
        .I1(b2b_counter_reg__0[7]),
        .I2(b2b_ok_i_2_n_0),
        .I3(b2b_counter_reg__0[6]),
        .I4(b2b_counter_reg__0[8]),
        .O(p_0_in[8]));
  FDRE \b2b_counter_reg[0] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(\b2b_counter[0]_i_1_n_0 ),
        .Q(b2b_counter_reg__0[0]),
        .R(SR));
  FDRE \b2b_counter_reg[1] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[1]),
        .Q(b2b_counter_reg__0[1]),
        .R(SR));
  FDRE \b2b_counter_reg[2] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[2]),
        .Q(b2b_counter_reg__0[2]),
        .R(SR));
  FDRE \b2b_counter_reg[3] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[3]),
        .Q(b2b_counter_reg__0[3]),
        .R(SR));
  FDRE \b2b_counter_reg[4] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[4]),
        .Q(b2b_counter_reg__0[4]),
        .R(SR));
  FDRE \b2b_counter_reg[5] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[5]),
        .Q(b2b_counter_reg__0[5]),
        .R(SR));
  FDRE \b2b_counter_reg[6] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[6]),
        .Q(b2b_counter_reg__0[6]),
        .R(SR));
  FDRE \b2b_counter_reg[7] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[7]),
        .Q(b2b_counter_reg__0[7]),
        .R(SR));
  FDRE \b2b_counter_reg[8] 
       (.C(lclk),
        .CE(\b2b_counter[8]_i_1_n_0 ),
        .D(p_0_in[8]),
        .Q(b2b_counter_reg__0[8]),
        .R(SR));
  LUT4 #(
    .INIT(16'h0001)) 
    b2b_ok_i_1
       (.I0(b2b_counter_reg__0[8]),
        .I1(b2b_counter_reg__0[6]),
        .I2(b2b_ok_i_2_n_0),
        .I3(b2b_counter_reg__0[7]),
        .O(b2b_ok_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    b2b_ok_i_2
       (.I0(b2b_counter_reg__0[4]),
        .I1(b2b_counter_reg__0[2]),
        .I2(b2b_counter_reg__0[0]),
        .I3(b2b_counter_reg__0[1]),
        .I4(b2b_counter_reg__0[3]),
        .I5(b2b_counter_reg__0[5]),
        .O(b2b_ok_i_2_n_0));
  FDSE b2b_ok_reg
       (.C(lclk),
        .CE(1'b1),
        .D(b2b_ok_i_1_n_0),
        .Q(b2b_ok),
        .S(SR));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \bcnt[10]_i_2 
       (.I0(\nbytes_reg_reg[15] [9]),
        .I1(\nbytes_reg_reg[15] [7]),
        .I2(\bcnt_reg[6] ),
        .I3(\nbytes_reg_reg[15] [6]),
        .I4(\nbytes_reg_reg[15] [8]),
        .O(\bcnt_reg[10] ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \bcnt[11]_i_2 
       (.I0(\nbytes_reg_reg[15] [10]),
        .I1(\nbytes_reg_reg[15] [8]),
        .I2(\nbytes_reg_reg[15] [6]),
        .I3(\bcnt_reg[6] ),
        .I4(\nbytes_reg_reg[15] [7]),
        .I5(\nbytes_reg_reg[15] [9]),
        .O(\bcnt_reg[11] ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bcnt[12]_i_2 
       (.I0(\nbytes_reg_reg[15] [11]),
        .I1(\bcnt_reg[11] ),
        .O(\bcnt_reg[12] ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \bcnt[13]_i_2 
       (.I0(\nbytes_reg_reg[15] [12]),
        .I1(\bcnt_reg[11] ),
        .I2(\nbytes_reg_reg[15] [11]),
        .O(\bcnt_reg[13] ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \bcnt[14]_i_2 
       (.I0(\nbytes_reg_reg[15] [13]),
        .I1(\nbytes_reg_reg[15] [11]),
        .I2(\bcnt_reg[11] ),
        .I3(\nbytes_reg_reg[15] [12]),
        .O(\bcnt_reg[14] ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \bcnt[15]_i_7 
       (.I0(\nbytes_reg_reg[15] [14]),
        .I1(\nbytes_reg_reg[15] [12]),
        .I2(\bcnt_reg[11] ),
        .I3(\nbytes_reg_reg[15] [11]),
        .I4(\nbytes_reg_reg[15] [13]),
        .O(\bcnt_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bcnt[2]_i_2 
       (.I0(\nbytes_reg_reg[15] [1]),
        .I1(\nbytes_reg_reg[15] [0]),
        .O(\bcnt_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \bcnt[3]_i_2 
       (.I0(\nbytes_reg_reg[15] [0]),
        .I1(\nbytes_reg_reg[15] [1]),
        .I2(\nbytes_reg_reg[15] [2]),
        .O(\bcnt_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'hFFEA)) 
    \bcnt[4]_i_2 
       (.I0(\nbytes_reg_reg[15] [2]),
        .I1(\nbytes_reg_reg[15] [1]),
        .I2(\nbytes_reg_reg[15] [0]),
        .I3(\nbytes_reg_reg[15] [3]),
        .O(\bcnt_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT5 #(
    .INIT(32'hAAAAA888)) 
    \bcnt[5]_i_2 
       (.I0(\nbytes_reg_reg[15] [4]),
        .I1(\nbytes_reg_reg[15] [3]),
        .I2(\nbytes_reg_reg[15] [0]),
        .I3(\nbytes_reg_reg[15] [1]),
        .I4(\nbytes_reg_reg[15] [2]),
        .O(\bcnt_reg[5] ));
  LUT6 #(
    .INIT(64'hAAAAA88800000000)) 
    \bcnt[6]_i_2 
       (.I0(\nbytes_reg_reg[15] [5]),
        .I1(\nbytes_reg_reg[15] [2]),
        .I2(\nbytes_reg_reg[15] [1]),
        .I3(\nbytes_reg_reg[15] [0]),
        .I4(\nbytes_reg_reg[15] [3]),
        .I5(\nbytes_reg_reg[15] [4]),
        .O(\bcnt_reg[6] ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bcnt[7]_i_2 
       (.I0(\nbytes_reg_reg[15] [6]),
        .I1(\bcnt_reg[6] ),
        .O(\bcnt_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \bcnt[8]_i_2 
       (.I0(\nbytes_reg_reg[15] [7]),
        .I1(\bcnt_reg[6] ),
        .I2(\nbytes_reg_reg[15] [6]),
        .O(\bcnt_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \bcnt[9]_i_2 
       (.I0(\nbytes_reg_reg[15] [8]),
        .I1(\nbytes_reg_reg[15] [6]),
        .I2(\bcnt_reg[6] ),
        .I3(\nbytes_reg_reg[15] [7]),
        .O(\bcnt_reg[9] ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[32]_i_4 
       (.I0(\bdata1_reg[63] [8]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [0]),
        .O(\bdin_reg[32] ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[32]_i_5 
       (.I0(\bdata1_reg[63] [24]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [16]),
        .O(\bdin_reg[32]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[33]_i_4 
       (.I0(\bdata1_reg[63] [9]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [1]),
        .O(\bdin_reg[33] ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[33]_i_5 
       (.I0(\bdata1_reg[63] [25]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [17]),
        .O(\bdin_reg[33]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[34]_i_4 
       (.I0(\bdata1_reg[63] [10]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [2]),
        .O(\bdin_reg[34] ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[34]_i_5 
       (.I0(\bdata1_reg[63] [26]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [18]),
        .O(\bdin_reg[34]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[35]_i_4 
       (.I0(\bdata1_reg[63] [11]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [3]),
        .O(\bdin_reg[35] ));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[35]_i_5 
       (.I0(\bdata1_reg[63] [27]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [19]),
        .O(\bdin_reg[35]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[36]_i_4 
       (.I0(\bdata1_reg[63] [12]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [4]),
        .O(\bdin_reg[36] ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[36]_i_5 
       (.I0(\bdata1_reg[63] [28]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [20]),
        .O(\bdin_reg[36]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[37]_i_4 
       (.I0(\bdata1_reg[63] [13]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [5]),
        .O(\bdin_reg[37] ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[37]_i_5 
       (.I0(\bdata1_reg[63] [29]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [21]),
        .O(\bdin_reg[37]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[38]_i_4 
       (.I0(\bdata1_reg[63] [14]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [6]),
        .O(\bdin_reg[38] ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[38]_i_5 
       (.I0(\bdata1_reg[63] [30]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [22]),
        .O(\bdin_reg[38]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[39]_i_4 
       (.I0(\bdata1_reg[63] [15]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [7]),
        .O(\bdin_reg[39] ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[39]_i_5 
       (.I0(\bdata1_reg[63] [31]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [23]),
        .O(\bdin_reg[39]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[40]_i_4 
       (.I0(\bdata1_reg[63] [16]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [8]),
        .O(\bdin_reg[40] ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[40]_i_5 
       (.I0(\bdata1_reg[63] [32]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [24]),
        .O(\bdin_reg[40]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[41]_i_4 
       (.I0(\bdata1_reg[63] [17]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [9]),
        .O(\bdin_reg[41] ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[41]_i_5 
       (.I0(\bdata1_reg[63] [33]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [25]),
        .O(\bdin_reg[41]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[42]_i_4 
       (.I0(\bdata1_reg[63] [18]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [10]),
        .O(\bdin_reg[42] ));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[42]_i_5 
       (.I0(\bdata1_reg[63] [34]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [26]),
        .O(\bdin_reg[42]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[43]_i_4 
       (.I0(\bdata1_reg[63] [19]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [11]),
        .O(\bdin_reg[43] ));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[43]_i_5 
       (.I0(\bdata1_reg[63] [35]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [27]),
        .O(\bdin_reg[43]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[44]_i_4 
       (.I0(\bdata1_reg[63] [20]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [12]),
        .O(\bdin_reg[44] ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[44]_i_5 
       (.I0(\bdata1_reg[63] [36]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [28]),
        .O(\bdin_reg[44]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[45]_i_4 
       (.I0(\bdata1_reg[63] [21]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [13]),
        .O(\bdin_reg[45] ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[45]_i_5 
       (.I0(\bdata1_reg[63] [37]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [29]),
        .O(\bdin_reg[45]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[46]_i_4 
       (.I0(\bdata1_reg[63] [22]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [14]),
        .O(\bdin_reg[46] ));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[46]_i_5 
       (.I0(\bdata1_reg[63] [38]),
        .I1(\rbytes_reg_reg[0]_rep__0 ),
        .I2(\bdata1_reg[63] [30]),
        .O(\bdin_reg[46]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[47]_i_4 
       (.I0(\bdata1_reg[63] [23]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [15]),
        .O(\bdin_reg[47] ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bdin[47]_i_5 
       (.I0(\bdata1_reg[63] [39]),
        .I1(\rbytes_reg_reg[0]_rep ),
        .I2(\bdata1_reg[63] [31]),
        .O(\bdin_reg[47]_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[48]_i_3 
       (.I0(\bdata1_reg[63] [16]),
        .I1(\bdata1_reg[63] [24]),
        .I2(\bdata1_reg[63] [32]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [40]),
        .O(\bdin_reg[48] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[49]_i_3 
       (.I0(\bdata1_reg[63] [17]),
        .I1(\bdata1_reg[63] [25]),
        .I2(\bdata1_reg[63] [33]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [41]),
        .O(\bdin_reg[49] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[50]_i_3 
       (.I0(\bdata1_reg[63] [18]),
        .I1(\bdata1_reg[63] [26]),
        .I2(\bdata1_reg[63] [34]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [42]),
        .O(\bdin_reg[50] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[51]_i_3 
       (.I0(\bdata1_reg[63] [19]),
        .I1(\bdata1_reg[63] [27]),
        .I2(\bdata1_reg[63] [35]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [43]),
        .O(\bdin_reg[51] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[52]_i_3 
       (.I0(\bdata1_reg[63] [20]),
        .I1(\bdata1_reg[63] [28]),
        .I2(\bdata1_reg[63] [36]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [44]),
        .O(\bdin_reg[52] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[53]_i_3 
       (.I0(\bdata1_reg[63] [21]),
        .I1(\bdata1_reg[63] [29]),
        .I2(\bdata1_reg[63] [37]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [45]),
        .O(\bdin_reg[53] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[54]_i_3 
       (.I0(\bdata1_reg[63] [22]),
        .I1(\bdata1_reg[63] [30]),
        .I2(\bdata1_reg[63] [38]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [46]),
        .O(\bdin_reg[54] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[55]_i_3 
       (.I0(\bdata1_reg[63] [23]),
        .I1(\bdata1_reg[63] [31]),
        .I2(\bdata1_reg[63] [39]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [47]),
        .O(\bdin_reg[55] ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[56]_i_2 
       (.I0(\bdata1_reg[63] [56]),
        .I1(\bdata1_reg[63] [0]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [16]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [8]),
        .O(\bdin[56]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[56]_i_3 
       (.I0(\bdata1_reg[63] [24]),
        .I1(\bdata1_reg[63] [32]),
        .I2(\bdata1_reg[63] [40]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [48]),
        .O(\bdin[56]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[57]_i_2 
       (.I0(\bdata1_reg[63] [57]),
        .I1(\bdata1_reg[63] [1]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [17]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [9]),
        .O(\bdin[57]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[57]_i_3 
       (.I0(\bdata1_reg[63] [25]),
        .I1(\bdata1_reg[63] [33]),
        .I2(\bdata1_reg[63] [41]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [49]),
        .O(\bdin[57]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[58]_i_2 
       (.I0(\bdata1_reg[63] [58]),
        .I1(\bdata1_reg[63] [2]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [18]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [10]),
        .O(\bdin[58]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[58]_i_3 
       (.I0(\bdata1_reg[63] [26]),
        .I1(\bdata1_reg[63] [34]),
        .I2(\bdata1_reg[63] [42]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [50]),
        .O(\bdin[58]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[59]_i_2 
       (.I0(\bdata1_reg[63] [59]),
        .I1(\bdata1_reg[63] [3]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [19]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [11]),
        .O(\bdin[59]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[59]_i_3 
       (.I0(\bdata1_reg[63] [27]),
        .I1(\bdata1_reg[63] [35]),
        .I2(\bdata1_reg[63] [43]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [51]),
        .O(\bdin[59]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[60]_i_2 
       (.I0(\bdata1_reg[63] [60]),
        .I1(\bdata1_reg[63] [4]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [20]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [12]),
        .O(\bdin[60]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[60]_i_3 
       (.I0(\bdata1_reg[63] [28]),
        .I1(\bdata1_reg[63] [36]),
        .I2(\bdata1_reg[63] [44]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [52]),
        .O(\bdin[60]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[61]_i_2 
       (.I0(\bdata1_reg[63] [61]),
        .I1(\bdata1_reg[63] [5]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [21]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [13]),
        .O(\bdin[61]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[61]_i_3 
       (.I0(\bdata1_reg[63] [29]),
        .I1(\bdata1_reg[63] [37]),
        .I2(\bdata1_reg[63] [45]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [53]),
        .O(\bdin[61]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[62]_i_2 
       (.I0(\bdata1_reg[63] [62]),
        .I1(\bdata1_reg[63] [6]),
        .I2(\rbytes_reg_reg[1]_rep__0 ),
        .I3(\bdata1_reg[63] [22]),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [14]),
        .O(\bdin[62]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[62]_i_3 
       (.I0(\bdata1_reg[63] [30]),
        .I1(\bdata1_reg[63] [38]),
        .I2(\bdata1_reg[63] [46]),
        .I3(\rbytes_reg_reg[1]_rep__0 ),
        .I4(\rbytes_reg_reg[0]_rep__0 ),
        .I5(\bdata1_reg[63] [54]),
        .O(\bdin[62]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CFAFAFC0C0A0A)) 
    \bdin[63]_i_3 
       (.I0(\bdata1_reg[63] [63]),
        .I1(\bdata1_reg[63] [7]),
        .I2(\rbytes_reg_reg[1]_rep ),
        .I3(\bdata1_reg[63] [23]),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [15]),
        .O(\bdin[63]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \bdin[63]_i_4 
       (.I0(\bdata1_reg[63] [31]),
        .I1(\bdata1_reg[63] [39]),
        .I2(\bdata1_reg[63] [47]),
        .I3(\rbytes_reg_reg[1]_rep ),
        .I4(\rbytes_reg_reg[0]_rep ),
        .I5(\bdata1_reg[63] [55]),
        .O(\bdin[63]_i_4_n_0 ));
  MUXF7 \bdin_reg[56]_i_1 
       (.I0(\bdin[56]_i_2_n_0 ),
        .I1(\bdin[56]_i_3_n_0 ),
        .O(\bdin_reg[63] [0]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[57]_i_1 
       (.I0(\bdin[57]_i_2_n_0 ),
        .I1(\bdin[57]_i_3_n_0 ),
        .O(\bdin_reg[63] [1]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[58]_i_1 
       (.I0(\bdin[58]_i_2_n_0 ),
        .I1(\bdin[58]_i_3_n_0 ),
        .O(\bdin_reg[63] [2]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[59]_i_1 
       (.I0(\bdin[59]_i_2_n_0 ),
        .I1(\bdin[59]_i_3_n_0 ),
        .O(\bdin_reg[63] [3]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[60]_i_1 
       (.I0(\bdin[60]_i_2_n_0 ),
        .I1(\bdin[60]_i_3_n_0 ),
        .O(\bdin_reg[63] [4]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[61]_i_1 
       (.I0(\bdin[61]_i_2_n_0 ),
        .I1(\bdin[61]_i_3_n_0 ),
        .O(\bdin_reg[63] [5]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[62]_i_1 
       (.I0(\bdin[62]_i_2_n_0 ),
        .I1(\bdin[62]_i_3_n_0 ),
        .O(\bdin_reg[63] [6]),
        .S(\rbytes_reg_reg[2] ));
  MUXF7 \bdin_reg[63]_i_2 
       (.I0(\bdin[63]_i_3_n_0 ),
        .I1(\bdin[63]_i_4_n_0 ),
        .O(\bdin_reg[63] [7]),
        .S(\rbytes_reg_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bytes_remain[0]_i_1 
       (.I0(dout[0]),
        .I1(Q),
        .I2(\bytes_remain_reg_n_0_[0] ),
        .O(\bytes_remain[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFA900A900A9FFA9)) 
    \bytes_remain[10]_i_1 
       (.I0(\bytes_remain_reg_n_0_[10] ),
        .I1(\bytes_remain[10]_i_2_n_0 ),
        .I2(\bytes_remain_reg_n_0_[9] ),
        .I3(Q),
        .I4(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_4 ),
        .I5(dout[10]),
        .O(\bytes_remain[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bytes_remain[10]_i_2 
       (.I0(\bytes_remain_reg_n_0_[7] ),
        .I1(\bytes_remain_reg_n_0_[5] ),
        .I2(\bytes_remain_reg_n_0_[3] ),
        .I3(\bytes_remain_reg_n_0_[4] ),
        .I4(\bytes_remain_reg_n_0_[6] ),
        .I5(\bytes_remain_reg_n_0_[8] ),
        .O(\bytes_remain[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[11]_i_1 
       (.I0(\bytes_remain_reg_n_0_[11] ),
        .I1(\bytes_remain[11]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_5 ),
        .I4(dout[11]),
        .O(\bytes_remain[11]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \bytes_remain[11]_i_2 
       (.I0(\bytes_remain_reg_n_0_[9] ),
        .I1(\bytes_remain[10]_i_2_n_0 ),
        .I2(\bytes_remain_reg_n_0_[10] ),
        .O(\bytes_remain[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[12]_i_1 
       (.I0(\bytes_remain_reg_n_0_[12] ),
        .I1(\bytes_remain[12]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_6 ),
        .I4(dout[12]),
        .O(\bytes_remain[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bytes_remain[12]_i_2 
       (.I0(\bytes_remain_reg_n_0_[10] ),
        .I1(\bytes_remain[10]_i_2_n_0 ),
        .I2(\bytes_remain_reg_n_0_[9] ),
        .I3(\bytes_remain_reg_n_0_[11] ),
        .O(\bytes_remain[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[13]_i_1 
       (.I0(\bytes_remain_reg_n_0_[13] ),
        .I1(\bytes_remain[13]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_7 ),
        .I4(dout[13]),
        .O(\bytes_remain[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bytes_remain[13]_i_2 
       (.I0(\bytes_remain_reg_n_0_[11] ),
        .I1(\bytes_remain_reg_n_0_[9] ),
        .I2(\bytes_remain[10]_i_2_n_0 ),
        .I3(\bytes_remain_reg_n_0_[10] ),
        .I4(\bytes_remain_reg_n_0_[12] ),
        .O(\bytes_remain[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[14]_i_1 
       (.I0(\bytes_remain_reg_n_0_[14] ),
        .I1(\bytes_remain[14]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_8 ),
        .I4(dout[14]),
        .O(\bytes_remain[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bytes_remain[14]_i_2 
       (.I0(\bytes_remain_reg_n_0_[12] ),
        .I1(\bytes_remain_reg_n_0_[10] ),
        .I2(\bytes_remain[10]_i_2_n_0 ),
        .I3(\bytes_remain_reg_n_0_[9] ),
        .I4(\bytes_remain_reg_n_0_[11] ),
        .I5(\bytes_remain_reg_n_0_[13] ),
        .O(\bytes_remain[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200020000)) 
    \bytes_remain[15]_i_1 
       (.I0(\state[4]_i_3_n_0 ),
        .I1(\state_reg_n_0_[3] ),
        .I2(st_readsize),
        .I3(\state_reg_n_0_[0] ),
        .I4(st_mac_dat),
        .I5(Q),
        .O(bytes_remain));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \bytes_remain[15]_i_4 
       (.I0(\bytes_remain[14]_i_2_n_0 ),
        .I1(\bytes_remain_reg_n_0_[14] ),
        .O(\bytes_remain_reg[15]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bytes_remain[1]_i_1 
       (.I0(dout[1]),
        .I1(Q),
        .I2(\bytes_remain_reg_n_0_[1] ),
        .O(\bytes_remain[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bytes_remain[2]_i_1 
       (.I0(dout[2]),
        .I1(Q),
        .I2(\bytes_remain_reg_n_0_[2] ),
        .O(\bytes_remain[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \bytes_remain[3]_i_1 
       (.I0(dout[3]),
        .I1(Q),
        .I2(\bytes_remain_reg_n_0_[3] ),
        .O(\bytes_remain[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[4]_i_1 
       (.I0(\bytes_remain_reg_n_0_[4] ),
        .I1(\bytes_remain_reg_n_0_[3] ),
        .I2(Q),
        .I3(dout[3]),
        .I4(dout[4]),
        .O(\bytes_remain[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFA900A900A9FFA9)) 
    \bytes_remain[5]_i_1 
       (.I0(\bytes_remain_reg_n_0_[5] ),
        .I1(\bytes_remain_reg_n_0_[3] ),
        .I2(\bytes_remain_reg_n_0_[4] ),
        .I3(Q),
        .I4(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .I5(dout[5]),
        .O(\bytes_remain[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[6]_i_1 
       (.I0(\bytes_remain_reg_n_0_[6] ),
        .I1(\bytes_remain[6]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .I4(dout[6]),
        .O(\bytes_remain[6]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \bytes_remain[6]_i_2 
       (.I0(\bytes_remain_reg_n_0_[4] ),
        .I1(\bytes_remain_reg_n_0_[3] ),
        .I2(\bytes_remain_reg_n_0_[5] ),
        .O(\bytes_remain[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[7]_i_1 
       (.I0(\bytes_remain_reg_n_0_[7] ),
        .I1(\bytes_remain[7]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ),
        .I4(dout[7]),
        .O(\bytes_remain[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bytes_remain[7]_i_2 
       (.I0(\bytes_remain_reg_n_0_[5] ),
        .I1(\bytes_remain_reg_n_0_[3] ),
        .I2(\bytes_remain_reg_n_0_[4] ),
        .I3(\bytes_remain_reg_n_0_[6] ),
        .O(\bytes_remain[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[8]_i_1 
       (.I0(\bytes_remain_reg_n_0_[8] ),
        .I1(\bytes_remain[8]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_2 ),
        .I4(dout[8]),
        .O(\bytes_remain[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bytes_remain[8]_i_2 
       (.I0(\bytes_remain_reg_n_0_[6] ),
        .I1(\bytes_remain_reg_n_0_[4] ),
        .I2(\bytes_remain_reg_n_0_[3] ),
        .I3(\bytes_remain_reg_n_0_[5] ),
        .I4(\bytes_remain_reg_n_0_[7] ),
        .O(\bytes_remain[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF90909F9)) 
    \bytes_remain[9]_i_1 
       (.I0(\bytes_remain_reg_n_0_[9] ),
        .I1(\bytes_remain[10]_i_2_n_0 ),
        .I2(Q),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_3 ),
        .I4(dout[9]),
        .O(\bytes_remain[9]_i_1_n_0 ));
  FDRE \bytes_remain_reg[0] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[0]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[0] ),
        .R(SR));
  FDRE \bytes_remain_reg[10] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[10]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[10] ),
        .R(SR));
  FDRE \bytes_remain_reg[11] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[11]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[11] ),
        .R(SR));
  FDRE \bytes_remain_reg[12] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[12]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[12] ),
        .R(SR));
  FDRE \bytes_remain_reg[13] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[13]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[13] ),
        .R(SR));
  FDRE \bytes_remain_reg[14] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[14]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[14] ),
        .R(SR));
  FDRE \bytes_remain_reg[15] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_9 ),
        .Q(\count8_reg[1]_0 ),
        .R(SR));
  FDRE \bytes_remain_reg[1] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[1]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[1] ),
        .R(SR));
  FDRE \bytes_remain_reg[2] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[2]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[2] ),
        .R(SR));
  FDRE \bytes_remain_reg[3] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[3]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[3] ),
        .R(SR));
  FDRE \bytes_remain_reg[4] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[4]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[4] ),
        .R(SR));
  FDRE \bytes_remain_reg[5] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[5]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[5] ),
        .R(SR));
  FDRE \bytes_remain_reg[6] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[6]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[6] ),
        .R(SR));
  FDRE \bytes_remain_reg[7] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[7]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[7] ),
        .R(SR));
  FDRE \bytes_remain_reg[8] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[8]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[8] ),
        .R(SR));
  FDRE \bytes_remain_reg[9] 
       (.C(lclk),
        .CE(bytes_remain),
        .D(\bytes_remain[9]_i_1_n_0 ),
        .Q(\bytes_remain_reg_n_0_[9] ),
        .R(SR));
  LUT2 #(
    .INIT(4'h2)) 
    \count8[0]_i_1 
       (.I0(\state_reg_n_0_[3] ),
        .I1(\count8_reg_n_0_[0] ),
        .O(\count8[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8282D782)) 
    \count8[1]_i_1 
       (.I0(\state_reg_n_0_[3] ),
        .I1(\count8_reg_n_0_[1] ),
        .I2(\count8_reg_n_0_[0] ),
        .I3(\count8[1]_i_2_n_0 ),
        .I4(\count8_reg[1]_0 ),
        .I5(Q),
        .O(\count8[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \count8[1]_i_2 
       (.I0(\bytes_remain_reg_n_0_[2] ),
        .I1(\bytes_remain_reg_n_0_[1] ),
        .I2(\bytes_remain_reg_n_0_[0] ),
        .I3(\bytes_remain_reg[15]_0 ),
        .O(\count8[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT4 #(
    .INIT(16'hDDD7)) 
    \count8[2]_i_1 
       (.I0(\state_reg_n_0_[3] ),
        .I1(\count8_reg_n_0_[2] ),
        .I2(\count8_reg_n_0_[0] ),
        .I3(\count8_reg_n_0_[1] ),
        .O(\count8[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000001000000062)) 
    \count8[3]_i_1 
       (.I0(Q),
        .I1(st_mac_dat),
        .I2(\state[4]_i_3_n_0 ),
        .I3(\state_reg_n_0_[0] ),
        .I4(st_readsize),
        .I5(\state_reg_n_0_[3] ),
        .O(count8));
  LUT5 #(
    .INIT(32'hF0880F88)) 
    \count8[3]_i_2 
       (.I0(st_mac_dat),
        .I1(\count8[3]_i_3_n_0 ),
        .I2(\count8[3]_i_4_n_0 ),
        .I3(\state_reg_n_0_[3] ),
        .I4(\count8_reg_n_0_[3] ),
        .O(\count8[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \count8[3]_i_3 
       (.I0(\bytes_remain_reg[15]_0 ),
        .I1(\bytes_remain_reg_n_0_[2] ),
        .I2(\bytes_remain_reg_n_0_[1] ),
        .I3(\bytes_remain_reg_n_0_[0] ),
        .I4(\count8_reg[1]_0 ),
        .O(\count8[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \count8[3]_i_4 
       (.I0(\count8_reg_n_0_[1] ),
        .I1(\count8_reg_n_0_[0] ),
        .I2(\count8_reg_n_0_[2] ),
        .O(\count8[3]_i_4_n_0 ));
  FDRE \count8_reg[0] 
       (.C(lclk),
        .CE(count8),
        .D(\count8[0]_i_1_n_0 ),
        .Q(\count8_reg_n_0_[0] ),
        .R(SR));
  FDSE \count8_reg[1] 
       (.C(lclk),
        .CE(count8),
        .D(\count8[1]_i_1_n_0 ),
        .Q(\count8_reg_n_0_[1] ),
        .S(SR));
  FDSE \count8_reg[2] 
       (.C(lclk),
        .CE(count8),
        .D(\count8[2]_i_1_n_0 ),
        .Q(\count8_reg_n_0_[2] ),
        .S(SR));
  FDRE \count8_reg[3] 
       (.C(lclk),
        .CE(count8),
        .D(\count8[3]_i_2_n_0 ),
        .Q(\count8_reg_n_0_[3] ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT4 #(
    .INIT(16'h7477)) 
    \counter[0]_i_1__0 
       (.I0(counter[0]),
        .I1(rst_),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'hF9F909090909F9D9)) 
    \counter[1]_i_1__0 
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .I2(rst_),
        .I3(\counter[1]_i_2_n_0 ),
        .I4(counter[1]),
        .I5(counter[0]),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \counter[1]_i_2 
       (.I0(counter[3]),
        .I1(counter[6]),
        .I2(counter[5]),
        .I3(counter[4]),
        .I4(counter[2]),
        .O(\counter[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT5 #(
    .INIT(32'hC0C0C008)) 
    \counter[2]_i_1__0 
       (.I0(\counter[2]_i_2_n_0 ),
        .I1(rst_),
        .I2(counter[2]),
        .I3(counter[0]),
        .I4(counter[1]),
        .O(p_1_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[2]_i_2 
       (.I0(counter[4]),
        .I1(counter[5]),
        .I2(counter[6]),
        .I3(counter[3]),
        .O(\counter[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF40404F4F4040444)) 
    \counter[3]_i_1__0 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(rst_),
        .I3(\counter[3]_i_2__0_n_0 ),
        .I4(counter[3]),
        .I5(\counter[3]_i_3_n_0 ),
        .O(p_1_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \counter[3]_i_2__0 
       (.I0(counter[1]),
        .I1(counter[0]),
        .I2(counter[2]),
        .O(\counter[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \counter[3]_i_3 
       (.I0(counter[6]),
        .I1(counter[5]),
        .I2(counter[4]),
        .O(\counter[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT5 #(
    .INIT(32'h90909080)) 
    \counter[4]_i_1__0 
       (.I0(\counter[4]_i_2_n_0 ),
        .I1(counter[4]),
        .I2(rst_),
        .I3(counter[5]),
        .I4(counter[6]),
        .O(p_1_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[4]_i_2 
       (.I0(counter[2]),
        .I1(counter[0]),
        .I2(counter[1]),
        .I3(counter[3]),
        .O(\counter[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hBAAABABB)) 
    \counter[5]_i_1__0 
       (.I0(\counter[5]_i_2__0_n_0 ),
        .I1(\counter[6]_i_3_n_0 ),
        .I2(rst_),
        .I3(fmac_speed[0]),
        .I4(fmac_speed[1]),
        .O(p_1_in[5]));
  LUT6 #(
    .INIT(64'hE2E2E22EE2E2E222)) 
    \counter[5]_i_2__0 
       (.I0(fmac_speed_1_sn_1),
        .I1(rst_),
        .I2(counter[5]),
        .I3(counter[4]),
        .I4(\counter[4]_i_2_n_0 ),
        .I5(counter[6]),
        .O(\counter[5]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hDF)) 
    \counter[6]_i_1__0 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(rst_),
        .O(\counter[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hF90909D9)) 
    \counter[6]_i_2__0 
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .I2(rst_),
        .I3(counter[6]),
        .I4(\counter[6]_i_3_n_0 ),
        .O(p_1_in[6]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \counter[6]_i_3 
       (.I0(counter[5]),
        .I1(counter[4]),
        .I2(counter[3]),
        .I3(counter[1]),
        .I4(counter[0]),
        .I5(counter[2]),
        .O(\counter[6]_i_3_n_0 ));
  FDRE \counter_reg[0] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[0]),
        .Q(counter[0]),
        .R(1'b0));
  FDRE \counter_reg[1] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[1]),
        .Q(counter[1]),
        .R(1'b0));
  FDRE \counter_reg[2] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[2]),
        .Q(counter[2]),
        .R(1'b0));
  FDRE \counter_reg[3] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[3]),
        .Q(counter[3]),
        .R(1'b0));
  FDRE \counter_reg[4] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[4]),
        .Q(counter[4]),
        .R(1'b0));
  FDRE \counter_reg[5] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[5]),
        .Q(counter[5]),
        .R(1'b0));
  FDRE \counter_reg[6] 
       (.C(lclk),
        .CE(\counter[6]_i_1__0_n_0 ),
        .D(p_1_in[6]),
        .Q(counter[6]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \crc_cnt[10]_i_2 
       (.I0(\nbytes_reg_reg[15] [9]),
        .I1(\nbytes_reg_reg[15] [7]),
        .I2(\crc_cnt_reg[7] ),
        .I3(\nbytes_reg_reg[15] [6]),
        .I4(\nbytes_reg_reg[15] [8]),
        .O(\crc_cnt_reg[10] ));
  LUT6 #(
    .INIT(64'h78FF7800780078FF)) 
    \crc_cnt[12]_i_1 
       (.I0(\crc_cnt_reg[12]_0 ),
        .I1(\nbytes_reg_reg[15] [11]),
        .I2(\nbytes_reg_reg[15] [12]),
        .I3(pulse_0_reg_0),
        .I4(\crc_cnt_reg[10]_0 ),
        .I5(\crc_cnt_reg[12]_1 [2]),
        .O(\crc_cnt_reg[12] [2]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \crc_cnt[12]_i_2 
       (.I0(\nbytes_reg_reg[15] [10]),
        .I1(\nbytes_reg_reg[15] [8]),
        .I2(\nbytes_reg_reg[15] [6]),
        .I3(\crc_cnt_reg[7] ),
        .I4(\nbytes_reg_reg[15] [7]),
        .I5(\nbytes_reg_reg[15] [9]),
        .O(\crc_cnt_reg[12]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \crc_cnt[13]_i_2 
       (.I0(\nbytes_reg_reg[15] [12]),
        .I1(\crc_cnt_reg[12]_0 ),
        .I2(\nbytes_reg_reg[15] [11]),
        .O(\crc_cnt_reg[13] ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \crc_cnt[14]_i_2 
       (.I0(\nbytes_reg_reg[15] [13]),
        .I1(\nbytes_reg_reg[15] [11]),
        .I2(\crc_cnt_reg[12]_0 ),
        .I3(\nbytes_reg_reg[15] [12]),
        .O(\crc_cnt_reg[14] ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \crc_cnt[15]_i_3 
       (.I0(\nbytes_reg_reg[15] [13]),
        .I1(\nbytes_reg_reg[15] [11]),
        .I2(\crc_cnt_reg[12]_0 ),
        .I3(\nbytes_reg_reg[15] [12]),
        .I4(\nbytes_reg_reg[15] [14]),
        .I5(\nbytes_reg_reg[15] [15]),
        .O(crc_cnt20_in));
  LUT6 #(
    .INIT(64'h01FE000001FEFFFF)) 
    \crc_cnt[3]_i_1 
       (.I0(\nbytes_reg_reg[15] [2]),
        .I1(\nbytes_reg_reg[15] [0]),
        .I2(\nbytes_reg_reg[15] [1]),
        .I3(\nbytes_reg_reg[15] [3]),
        .I4(pulse_0_reg_0),
        .I5(\crc_cnt_reg[12]_1 [0]),
        .O(\crc_cnt_reg[12] [0]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT4 #(
    .INIT(16'hAAA8)) 
    \crc_cnt[4]_i_2 
       (.I0(\nbytes_reg_reg[15] [3]),
        .I1(\nbytes_reg_reg[15] [2]),
        .I2(\nbytes_reg_reg[15] [0]),
        .I3(\nbytes_reg_reg[15] [1]),
        .O(\crc_cnt_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT5 #(
    .INIT(32'hAAA80000)) 
    \crc_cnt[5]_i_2 
       (.I0(\nbytes_reg_reg[15] [4]),
        .I1(\nbytes_reg_reg[15] [1]),
        .I2(\nbytes_reg_reg[15] [0]),
        .I3(\nbytes_reg_reg[15] [2]),
        .I4(\nbytes_reg_reg[15] [3]),
        .O(\crc_cnt_reg[5] ));
  LUT6 #(
    .INIT(64'h78FF7800780078FF)) 
    \crc_cnt[7]_i_1 
       (.I0(\crc_cnt_reg[7] ),
        .I1(\nbytes_reg_reg[15] [6]),
        .I2(\nbytes_reg_reg[15] [7]),
        .I3(pulse_0_reg_0),
        .I4(\crc_cnt_reg[5]_0 ),
        .I5(\crc_cnt_reg[12]_1 [1]),
        .O(\crc_cnt_reg[12] [1]));
  LUT6 #(
    .INIT(64'h8888888000000000)) 
    \crc_cnt[7]_i_2 
       (.I0(\nbytes_reg_reg[15] [5]),
        .I1(\nbytes_reg_reg[15] [3]),
        .I2(\nbytes_reg_reg[15] [2]),
        .I3(\nbytes_reg_reg[15] [0]),
        .I4(\nbytes_reg_reg[15] [1]),
        .I5(\nbytes_reg_reg[15] [4]),
        .O(\crc_cnt_reg[7] ));
  LUT3 #(
    .INIT(8'h80)) 
    \crc_cnt[8]_i_2 
       (.I0(\nbytes_reg_reg[15] [7]),
        .I1(\crc_cnt_reg[7] ),
        .I2(\nbytes_reg_reg[15] [6]),
        .O(\crc_cnt_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \crc_cnt[9]_i_2 
       (.I0(\nbytes_reg_reg[15] [8]),
        .I1(\nbytes_reg_reg[15] [6]),
        .I2(\crc_cnt_reg[7] ),
        .I3(\nbytes_reg_reg[15] [7]),
        .O(\crc_cnt_reg[9] ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \nbytes_reg[10]_i_1 
       (.I0(\nbytes_reg_reg[15] [8]),
        .I1(\nbytes_reg_reg[15] [6]),
        .I2(\nbytes_reg[10]_i_2_n_0 ),
        .I3(\nbytes_reg_reg[15] [7]),
        .I4(\nbytes_reg_reg[15] [9]),
        .I5(\nbytes_reg_reg[15] [10]),
        .O(\nbytes_reg_reg[15]_0 [7]));
  LUT6 #(
    .INIT(64'hAAA8000000000000)) 
    \nbytes_reg[10]_i_2 
       (.I0(\nbytes_reg_reg[15] [5]),
        .I1(\nbytes_reg_reg[15] [0]),
        .I2(\nbytes_reg_reg[15] [1]),
        .I3(\nbytes_reg_reg[15] [2]),
        .I4(\nbytes_reg_reg[15] [3]),
        .I5(\nbytes_reg_reg[15] [4]),
        .O(\nbytes_reg[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \nbytes_reg[11]_i_1 
       (.I0(\nbytes_reg[15]_i_2_n_0 ),
        .I1(\nbytes_reg_reg[15] [11]),
        .O(\nbytes_reg_reg[15]_0 [8]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \nbytes_reg[12]_i_1 
       (.I0(\nbytes_reg[15]_i_2_n_0 ),
        .I1(\nbytes_reg_reg[15] [11]),
        .I2(\nbytes_reg_reg[15] [12]),
        .O(\nbytes_reg_reg[15]_0 [9]));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \nbytes_reg[13]_i_1 
       (.I0(\nbytes_reg_reg[15] [11]),
        .I1(\nbytes_reg[15]_i_2_n_0 ),
        .I2(\nbytes_reg_reg[15] [12]),
        .I3(\nbytes_reg_reg[15] [13]),
        .O(\nbytes_reg_reg[15]_0 [10]));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \nbytes_reg[14]_i_1 
       (.I0(\nbytes_reg_reg[15] [12]),
        .I1(\nbytes_reg[15]_i_2_n_0 ),
        .I2(\nbytes_reg_reg[15] [11]),
        .I3(\nbytes_reg_reg[15] [13]),
        .I4(\nbytes_reg_reg[15] [14]),
        .O(\nbytes_reg_reg[15]_0 [11]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \nbytes_reg[15]_i_1 
       (.I0(\nbytes_reg_reg[15] [13]),
        .I1(\nbytes_reg_reg[15] [11]),
        .I2(\nbytes_reg[15]_i_2_n_0 ),
        .I3(\nbytes_reg_reg[15] [12]),
        .I4(\nbytes_reg_reg[15] [14]),
        .I5(\nbytes_reg_reg[15] [15]),
        .O(\nbytes_reg_reg[15]_0 [12]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \nbytes_reg[15]_i_2 
       (.I0(\nbytes_reg_reg[15] [10]),
        .I1(\nbytes_reg_reg[15] [8]),
        .I2(\nbytes_reg_reg[15] [6]),
        .I3(\nbytes_reg[10]_i_2_n_0 ),
        .I4(\nbytes_reg_reg[15] [7]),
        .I5(\nbytes_reg_reg[15] [9]),
        .O(\nbytes_reg[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT4 #(
    .INIT(16'h5556)) 
    \nbytes_reg[3]_i_1 
       (.I0(\nbytes_reg_reg[15] [3]),
        .I1(\nbytes_reg_reg[15] [0]),
        .I2(\nbytes_reg_reg[15] [1]),
        .I3(\nbytes_reg_reg[15] [2]),
        .O(\nbytes_reg_reg[15]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT5 #(
    .INIT(32'h5557AAA8)) 
    \nbytes_reg[4]_i_1 
       (.I0(\nbytes_reg_reg[15] [3]),
        .I1(\nbytes_reg_reg[15] [2]),
        .I2(\nbytes_reg_reg[15] [1]),
        .I3(\nbytes_reg_reg[15] [0]),
        .I4(\nbytes_reg_reg[15] [4]),
        .O(\nbytes_reg_reg[15]_0 [1]));
  LUT6 #(
    .INIT(64'h01FFFFFFFE000000)) 
    \nbytes_reg[5]_i_1 
       (.I0(\nbytes_reg_reg[15] [0]),
        .I1(\nbytes_reg_reg[15] [1]),
        .I2(\nbytes_reg_reg[15] [2]),
        .I3(\nbytes_reg_reg[15] [3]),
        .I4(\nbytes_reg_reg[15] [4]),
        .I5(\nbytes_reg_reg[15] [5]),
        .O(\nbytes_reg_reg[15]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \nbytes_reg[6]_i_1 
       (.I0(\nbytes_reg[10]_i_2_n_0 ),
        .I1(\nbytes_reg_reg[15] [6]),
        .O(\nbytes_reg_reg[15]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \nbytes_reg[7]_i_1 
       (.I0(\nbytes_reg[10]_i_2_n_0 ),
        .I1(\nbytes_reg_reg[15] [6]),
        .I2(\nbytes_reg_reg[15] [7]),
        .O(\nbytes_reg_reg[15]_0 [4]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \nbytes_reg[8]_i_1 
       (.I0(\nbytes_reg_reg[15] [6]),
        .I1(\nbytes_reg[10]_i_2_n_0 ),
        .I2(\nbytes_reg_reg[15] [7]),
        .I3(\nbytes_reg_reg[15] [8]),
        .O(\nbytes_reg_reg[15]_0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \nbytes_reg[9]_i_1 
       (.I0(\nbytes_reg_reg[15] [7]),
        .I1(\nbytes_reg[10]_i_2_n_0 ),
        .I2(\nbytes_reg_reg[15] [6]),
        .I3(\nbytes_reg_reg[15] [8]),
        .I4(\nbytes_reg_reg[15] [9]),
        .O(\nbytes_reg_reg[15]_0 [6]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \p_reg_count[0]_i_1 
       (.I0(p_reg_count_reg__0[0]),
        .O(p_reg_count0[0]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \p_reg_count[1]_i_1 
       (.I0(p_reg_count_reg__0[1]),
        .I1(p_reg_count_reg__0[0]),
        .O(p_reg_count0[1]));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \p_reg_count[2]_i_1 
       (.I0(p_reg_count_reg__0[2]),
        .I1(p_reg_count_reg__0[0]),
        .I2(p_reg_count_reg__0[1]),
        .O(p_reg_count0[2]));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'hAAA9)) 
    \p_reg_count[3]_i_1 
       (.I0(p_reg_count_reg__0[3]),
        .I1(p_reg_count_reg__0[1]),
        .I2(p_reg_count_reg__0[0]),
        .I3(p_reg_count_reg__0[2]),
        .O(p_reg_count0[3]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT5 #(
    .INIT(32'hAAAAAAA9)) 
    \p_reg_count[4]_i_1 
       (.I0(p_reg_count_reg__0[4]),
        .I1(p_reg_count_reg__0[2]),
        .I2(p_reg_count_reg__0[0]),
        .I3(p_reg_count_reg__0[1]),
        .I4(p_reg_count_reg__0[3]),
        .O(p_reg_count0[4]));
  LUT4 #(
    .INIT(16'h777F)) 
    \p_reg_count[5]_i_1 
       (.I0(rst_),
        .I1(p_start),
        .I2(p_reg_count_reg__0[5]),
        .I3(\p_reg_count[5]_i_3_n_0 ),
        .O(\p_reg_count[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000001)) 
    \p_reg_count[5]_i_2 
       (.I0(p_reg_count_reg__0[4]),
        .I1(p_reg_count_reg__0[2]),
        .I2(p_reg_count_reg__0[0]),
        .I3(p_reg_count_reg__0[1]),
        .I4(p_reg_count_reg__0[3]),
        .I5(p_reg_count_reg__0[5]),
        .O(p_reg_count0[5]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \p_reg_count[5]_i_3 
       (.I0(p_reg_count_reg__0[3]),
        .I1(p_reg_count_reg__0[1]),
        .I2(p_reg_count_reg__0[0]),
        .I3(p_reg_count_reg__0[2]),
        .I4(p_reg_count_reg__0[4]),
        .O(\p_reg_count[5]_i_3_n_0 ));
  FDSE \p_reg_count_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_reg_count0[0]),
        .Q(p_reg_count_reg__0[0]),
        .S(\p_reg_count[5]_i_1_n_0 ));
  FDSE \p_reg_count_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_reg_count0[1]),
        .Q(p_reg_count_reg__0[1]),
        .S(\p_reg_count[5]_i_1_n_0 ));
  FDSE \p_reg_count_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_reg_count0[2]),
        .Q(p_reg_count_reg__0[2]),
        .S(\p_reg_count[5]_i_1_n_0 ));
  FDSE \p_reg_count_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_reg_count0[3]),
        .Q(p_reg_count_reg__0[3]),
        .S(\p_reg_count[5]_i_1_n_0 ));
  FDSE \p_reg_count_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_reg_count0[4]),
        .Q(p_reg_count_reg__0[4]),
        .S(\p_reg_count[5]_i_1_n_0 ));
  FDSE \p_reg_count_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_reg_count0[5]),
        .Q(p_reg_count_reg__0[5]),
        .S(\p_reg_count[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    p_start_i_1
       (.I0(rst_),
        .I1(p_0_in_0),
        .O(p_start_i_1_n_0));
  FDRE p_start_reg
       (.C(lclk),
        .CE(1'b1),
        .D(p_start_i_1_n_0),
        .Q(p_start),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h01)) 
    \ptimer[0]_i_1 
       (.I0(p_0_in_0),
        .I1(p_reg_count_reg__0[5]),
        .I2(\p_reg_count[5]_i_3_n_0 ),
        .O(ptimer1));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_10 
       (.I0(\ptimer_reg_n_0_[0] ),
        .O(\ptimer[0]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_3 
       (.I0(\ptimer_reg_n_0_[7] ),
        .O(\ptimer[0]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_4 
       (.I0(\ptimer_reg_n_0_[6] ),
        .O(\ptimer[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_5 
       (.I0(\ptimer_reg_n_0_[5] ),
        .O(\ptimer[0]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_6 
       (.I0(\ptimer_reg_n_0_[4] ),
        .O(\ptimer[0]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_7 
       (.I0(\ptimer_reg_n_0_[3] ),
        .O(\ptimer[0]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_8 
       (.I0(\ptimer_reg_n_0_[2] ),
        .O(\ptimer[0]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[0]_i_9 
       (.I0(\ptimer_reg_n_0_[1] ),
        .O(\ptimer[0]_i_9_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[16]_i_2 
       (.I0(p_0_in_0),
        .O(\ptimer[16]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_2 
       (.I0(\ptimer_reg_n_0_[15] ),
        .O(\ptimer[8]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_3 
       (.I0(\ptimer_reg_n_0_[14] ),
        .O(\ptimer[8]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_4 
       (.I0(\ptimer_reg_n_0_[13] ),
        .O(\ptimer[8]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_5 
       (.I0(\ptimer_reg_n_0_[12] ),
        .O(\ptimer[8]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_6 
       (.I0(\ptimer_reg_n_0_[11] ),
        .O(\ptimer[8]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_7 
       (.I0(\ptimer_reg_n_0_[10] ),
        .O(\ptimer[8]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_8 
       (.I0(\ptimer_reg_n_0_[9] ),
        .O(\ptimer[8]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ptimer[8]_i_9 
       (.I0(\ptimer_reg_n_0_[8] ),
        .O(\ptimer[8]_i_9_n_0 ));
  FDSE \ptimer_reg[0] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_15 ),
        .Q(\ptimer_reg_n_0_[0] ),
        .S(SR));
  CARRY8 \ptimer_reg[0]_i_2 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\ptimer_reg[0]_i_2_n_0 ,\ptimer_reg[0]_i_2_n_1 ,\ptimer_reg[0]_i_2_n_2 ,\ptimer_reg[0]_i_2_n_3 ,\NLW_ptimer_reg[0]_i_2_CO_UNCONNECTED [3],\ptimer_reg[0]_i_2_n_5 ,\ptimer_reg[0]_i_2_n_6 ,\ptimer_reg[0]_i_2_n_7 }),
        .DI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .O({\ptimer_reg[0]_i_2_n_8 ,\ptimer_reg[0]_i_2_n_9 ,\ptimer_reg[0]_i_2_n_10 ,\ptimer_reg[0]_i_2_n_11 ,\ptimer_reg[0]_i_2_n_12 ,\ptimer_reg[0]_i_2_n_13 ,\ptimer_reg[0]_i_2_n_14 ,\ptimer_reg[0]_i_2_n_15 }),
        .S({\ptimer[0]_i_3_n_0 ,\ptimer[0]_i_4_n_0 ,\ptimer[0]_i_5_n_0 ,\ptimer[0]_i_6_n_0 ,\ptimer[0]_i_7_n_0 ,\ptimer[0]_i_8_n_0 ,\ptimer[0]_i_9_n_0 ,\ptimer[0]_i_10_n_0 }));
  FDSE \ptimer_reg[10] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_13 ),
        .Q(\ptimer_reg_n_0_[10] ),
        .S(SR));
  FDSE \ptimer_reg[11] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_12 ),
        .Q(\ptimer_reg_n_0_[11] ),
        .S(SR));
  FDSE \ptimer_reg[12] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_11 ),
        .Q(\ptimer_reg_n_0_[12] ),
        .S(SR));
  FDSE \ptimer_reg[13] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_10 ),
        .Q(\ptimer_reg_n_0_[13] ),
        .S(SR));
  FDSE \ptimer_reg[14] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_9 ),
        .Q(\ptimer_reg_n_0_[14] ),
        .S(SR));
  FDSE \ptimer_reg[15] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_8 ),
        .Q(\ptimer_reg_n_0_[15] ),
        .S(SR));
  FDSE \ptimer_reg[16] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[16]_i_1_n_15 ),
        .Q(p_0_in_0),
        .S(SR));
  CARRY8 \ptimer_reg[16]_i_1 
       (.CI(\ptimer_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO(\NLW_ptimer_reg[16]_i_1_CO_UNCONNECTED [7:0]),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_ptimer_reg[16]_i_1_O_UNCONNECTED [7:1],\ptimer_reg[16]_i_1_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\ptimer[16]_i_2_n_0 }));
  FDSE \ptimer_reg[1] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_14 ),
        .Q(\ptimer_reg_n_0_[1] ),
        .S(SR));
  FDSE \ptimer_reg[2] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_13 ),
        .Q(\ptimer_reg_n_0_[2] ),
        .S(SR));
  FDSE \ptimer_reg[3] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_12 ),
        .Q(\ptimer_reg_n_0_[3] ),
        .S(SR));
  FDSE \ptimer_reg[4] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_11 ),
        .Q(\ptimer_reg_n_0_[4] ),
        .S(SR));
  FDSE \ptimer_reg[5] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_10 ),
        .Q(\ptimer_reg_n_0_[5] ),
        .S(SR));
  FDSE \ptimer_reg[6] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_9 ),
        .Q(\ptimer_reg_n_0_[6] ),
        .S(SR));
  FDSE \ptimer_reg[7] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[0]_i_2_n_8 ),
        .Q(\ptimer_reg_n_0_[7] ),
        .S(SR));
  FDSE \ptimer_reg[8] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_15 ),
        .Q(\ptimer_reg_n_0_[8] ),
        .S(SR));
  CARRY8 \ptimer_reg[8]_i_1 
       (.CI(\ptimer_reg[0]_i_2_n_0 ),
        .CI_TOP(1'b0),
        .CO({\ptimer_reg[8]_i_1_n_0 ,\ptimer_reg[8]_i_1_n_1 ,\ptimer_reg[8]_i_1_n_2 ,\ptimer_reg[8]_i_1_n_3 ,\NLW_ptimer_reg[8]_i_1_CO_UNCONNECTED [3],\ptimer_reg[8]_i_1_n_5 ,\ptimer_reg[8]_i_1_n_6 ,\ptimer_reg[8]_i_1_n_7 }),
        .DI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .O({\ptimer_reg[8]_i_1_n_8 ,\ptimer_reg[8]_i_1_n_9 ,\ptimer_reg[8]_i_1_n_10 ,\ptimer_reg[8]_i_1_n_11 ,\ptimer_reg[8]_i_1_n_12 ,\ptimer_reg[8]_i_1_n_13 ,\ptimer_reg[8]_i_1_n_14 ,\ptimer_reg[8]_i_1_n_15 }),
        .S({\ptimer[8]_i_2_n_0 ,\ptimer[8]_i_3_n_0 ,\ptimer[8]_i_4_n_0 ,\ptimer[8]_i_5_n_0 ,\ptimer[8]_i_6_n_0 ,\ptimer[8]_i_7_n_0 ,\ptimer[8]_i_8_n_0 ,\ptimer[8]_i_9_n_0 }));
  FDSE \ptimer_reg[9] 
       (.C(lclk),
        .CE(ptimer1),
        .D(\ptimer_reg[8]_i_1_n_14 ),
        .Q(\ptimer_reg_n_0_[9] ),
        .S(SR));
  FDRE pulse_0_reg
       (.C(lclk),
        .CE(fmac_speed_0_sn_1),
        .D(pulse_1),
        .Q(pulse_0),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'h04)) 
    pulse_1_i_1
       (.I0(counter[0]),
        .I1(counter[1]),
        .I2(\counter[1]_i_2_n_0 ),
        .O(pulse_10));
  FDRE pulse_1_reg
       (.C(lclk),
        .CE(fmac_speed_0_sn_1),
        .D(pulse_10),
        .Q(pulse_1),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    \rbytes[15]_i_1 
       (.I0(st_mac_dat),
        .I1(Q),
        .I2(\state[4]_i_3_n_0 ),
        .I3(\state_reg_n_0_[3] ),
        .I4(st_readsize),
        .I5(\state_reg_n_0_[0] ),
        .O(\rbytes[15]_i_1_n_0 ));
  FDRE \rbytes_reg[0] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[0]),
        .Q(\nbytes_reg_reg[15] [0]),
        .R(SR));
  FDRE \rbytes_reg[10] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[10]),
        .Q(\nbytes_reg_reg[15] [10]),
        .R(SR));
  FDRE \rbytes_reg[11] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[11]),
        .Q(\nbytes_reg_reg[15] [11]),
        .R(SR));
  FDRE \rbytes_reg[12] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[12]),
        .Q(\nbytes_reg_reg[15] [12]),
        .R(SR));
  FDRE \rbytes_reg[13] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[13]),
        .Q(\nbytes_reg_reg[15] [13]),
        .R(SR));
  FDRE \rbytes_reg[14] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[14]),
        .Q(\nbytes_reg_reg[15] [14]),
        .R(SR));
  FDRE \rbytes_reg[15] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[15]),
        .Q(\nbytes_reg_reg[15] [15]),
        .R(SR));
  FDRE \rbytes_reg[1] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[1]),
        .Q(\nbytes_reg_reg[15] [1]),
        .R(SR));
  FDRE \rbytes_reg[2] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[2]),
        .Q(\nbytes_reg_reg[15] [2]),
        .R(SR));
  FDRE \rbytes_reg[3] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[3]),
        .Q(\nbytes_reg_reg[15] [3]),
        .R(SR));
  FDRE \rbytes_reg[4] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[4]),
        .Q(\nbytes_reg_reg[15] [4]),
        .R(SR));
  FDRE \rbytes_reg[5] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[5]),
        .Q(\nbytes_reg_reg[15] [5]),
        .R(SR));
  FDRE \rbytes_reg[6] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[6]),
        .Q(\nbytes_reg_reg[15] [6]),
        .R(SR));
  FDRE \rbytes_reg[7] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[7]),
        .Q(\nbytes_reg_reg[15] [7]),
        .R(SR));
  FDRE \rbytes_reg[8] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[8]),
        .Q(\nbytes_reg_reg[15] [8]),
        .R(SR));
  FDRE \rbytes_reg[9] 
       (.C(lclk),
        .CE(\rbytes[15]_i_1_n_0 ),
        .D(dout[9]),
        .Q(\nbytes_reg_reg[15] [9]),
        .R(SR));
  LUT5 #(
    .INIT(32'hEF202020)) 
    rts_i_1
       (.I0(st_readsize),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(Q),
        .I4(pulse_1),
        .O(rts_i_1_n_0));
  FDRE rts_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rts_i_1_n_0),
        .Q(rts),
        .R(SR));
  LUT6 #(
    .INIT(64'hD5D5D5D5D5FFD5D5)) 
    \state[0]_i_1__1 
       (.I0(\state_inferred__0/i___2_n_0 ),
        .I1(\state[1]_i_2__0_n_0 ),
        .I2(\state_reg_n_0_[0] ),
        .I3(\state[4]_i_2__0_n_0 ),
        .I4(\state_reg_n_0_[3] ),
        .I5(tx_dvld_reg_n_0),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h444F000044440000)) 
    \state[1]_i_1__1 
       (.I0(\state[1]_i_2__0_n_0 ),
        .I1(\state_reg_n_0_[0] ),
        .I2(pulse_0),
        .I3(mode_1G),
        .I4(\state_inferred__0/i___2_n_0 ),
        .I5(st_readsize),
        .O(p_0_in__0[1]));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \state[1]_i_2__0 
       (.I0(tx_rdy),
        .I1(empty),
        .I2(cts_1g),
        .I3(b2b_ok),
        .O(\state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hBBAB000088A80000)) 
    \state[2]_i_1__1 
       (.I0(st_readsize),
        .I1(pulse_0),
        .I2(fmac_speed[0]),
        .I3(fmac_speed[1]),
        .I4(\state_inferred__0/i___2_n_0 ),
        .I5(Q),
        .O(p_0_in__0[2]));
  LUT6 #(
    .INIT(64'hFFA80000A8A80000)) 
    \state[3]_i_1__0 
       (.I0(\state[4]_i_3_n_0 ),
        .I1(st_mac_dat),
        .I2(Q),
        .I3(\state[4]_i_2__0_n_0 ),
        .I4(\state_inferred__0/i___2_n_0 ),
        .I5(\state_reg_n_0_[3] ),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'h40FF000040400000)) 
    \state[4]_i_1__0 
       (.I0(\state[4]_i_2__0_n_0 ),
        .I1(tx_dvld_reg_n_0),
        .I2(\state_reg_n_0_[3] ),
        .I3(\state[4]_i_3_n_0 ),
        .I4(\state_inferred__0/i___2_n_0 ),
        .I5(st_mac_dat),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFEFFFF)) 
    \state[4]_i_2__0 
       (.I0(\count8_reg_n_0_[3] ),
        .I1(\count8_reg_n_0_[1] ),
        .I2(\count8_reg_n_0_[0] ),
        .I3(\count8_reg_n_0_[2] ),
        .I4(mode_1G),
        .I5(pulse_0),
        .O(\state[4]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hAE)) 
    \state[4]_i_3 
       (.I0(pulse_0),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .O(\state[4]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \state_inferred__0/i___2 
       (.I0(\state_reg_n_0_[0] ),
        .I1(st_readsize),
        .I2(Q),
        .I3(\state_reg_n_0_[3] ),
        .I4(st_mac_dat),
        .O(\state_inferred__0/i___2_n_0 ));
  (* FSM_ENCODED_STATES = "P_PREAM:01000000,P_REQ:00100000,READSIZE:00000010,READ1:00000100,MAC_DAT:00010000,WAIT:00001000,P_PKT:10000000,IDLE:00000001" *) 
  FDSE \state_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(\state_reg_n_0_[0] ),
        .S(SR));
  (* FSM_ENCODED_STATES = "P_PREAM:01000000,P_REQ:00100000,READSIZE:00000010,READ1:00000100,MAC_DAT:00010000,WAIT:00001000,P_PKT:10000000,IDLE:00000001" *) 
  FDRE \state_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(st_readsize),
        .R(SR));
  (* FSM_ENCODED_STATES = "P_PREAM:01000000,P_REQ:00100000,READSIZE:00000010,READ1:00000100,MAC_DAT:00010000,WAIT:00001000,P_PKT:10000000,IDLE:00000001" *) 
  FDRE \state_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(Q),
        .R(SR));
  (* FSM_ENCODED_STATES = "P_PREAM:01000000,P_REQ:00100000,READSIZE:00000010,READ1:00000100,MAC_DAT:00010000,WAIT:00001000,P_PKT:10000000,IDLE:00000001" *) 
  FDRE \state_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\state_reg_n_0_[3] ),
        .R(SR));
  (* FSM_ENCODED_STATES = "P_PREAM:01000000,P_REQ:00100000,READSIZE:00000010,READ1:00000100,MAC_DAT:00010000,WAIT:00001000,P_PKT:10000000,IDLE:00000001" *) 
  FDRE \state_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(st_mac_dat),
        .R(SR));
  LUT6 #(
    .INIT(64'hAAAAABFFAAAAA800)) 
    tx_dvld_i_1
       (.I0(tx_dvld_i_2_n_0),
        .I1(\count8[3]_i_3_n_0 ),
        .I2(mode_1G),
        .I3(tx_dvld_i_3_n_0),
        .I4(\rbytes[15]_i_1_n_0 ),
        .I5(tx_dvld_reg_n_0),
        .O(tx_dvld_i_1_n_0));
  LUT6 #(
    .INIT(64'hFF0DFF0DFF0000FF)) 
    tx_dvld_i_2
       (.I0(tx_dvld_i_4_n_0),
        .I1(\bytes_remain_reg[15]_0 ),
        .I2(\count8_reg[1]_0 ),
        .I3(Q),
        .I4(pulse_0),
        .I5(mode_1G),
        .O(tx_dvld_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT5 #(
    .INIT(32'h00000004)) 
    tx_dvld_i_3
       (.I0(Q),
        .I1(st_mac_dat),
        .I2(\state_reg_n_0_[0] ),
        .I3(st_readsize),
        .I4(\state_reg_n_0_[3] ),
        .O(tx_dvld_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT3 #(
    .INIT(8'h01)) 
    tx_dvld_i_4
       (.I0(\bytes_remain_reg_n_0_[2] ),
        .I1(\bytes_remain_reg_n_0_[1] ),
        .I2(\bytes_remain_reg_n_0_[0] ),
        .O(tx_dvld_i_4_n_0));
  FDRE tx_dvld_reg
       (.C(lclk),
        .CE(1'b1),
        .D(tx_dvld_i_1_n_0),
        .Q(tx_dvld_reg_n_0),
        .R(SR));
  FDRE tx_rdy_reg
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in_0),
        .Q(tx_rdy),
        .R(SR));
  LUT6 #(
    .INIT(64'hBAAAFFFFBAAA0000)) 
    txfifo_rd_en_i_1
       (.I0(txfifo_rd_en_i_2_n_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(txfifo_rd_en_i_3_n_0),
        .I4(txfifo_rd_en_i_4_n_0),
        .I5(rd_en),
        .O(txfifo_rd_en_i_1_n_0));
  LUT6 #(
    .INIT(64'h5500550000FC0000)) 
    txfifo_rd_en_i_2
       (.I0(\state[1]_i_2__0_n_0 ),
        .I1(txfifo_rd_en_i_5_n_0),
        .I2(st_readsize),
        .I3(\state_reg_n_0_[0] ),
        .I4(pulse_1),
        .I5(mode_1G),
        .O(txfifo_rd_en_i_2_n_0));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    txfifo_rd_en_i_3
       (.I0(tx_dvld_reg_n_0),
        .I1(\count8_reg_n_0_[3] ),
        .I2(\count8_reg_n_0_[2] ),
        .I3(\count8_reg_n_0_[1] ),
        .I4(\count8_reg_n_0_[0] ),
        .I5(txfifo_rd_en_i_6_n_0),
        .O(txfifo_rd_en_i_3_n_0));
  LUT6 #(
    .INIT(64'h000000020003033C)) 
    txfifo_rd_en_i_4
       (.I0(txfifo_rd_en_i_7_n_0),
        .I1(Q),
        .I2(st_mac_dat),
        .I3(\state_reg_n_0_[3] ),
        .I4(st_readsize),
        .I5(\state_reg_n_0_[0] ),
        .O(txfifo_rd_en_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    txfifo_rd_en_i_5
       (.I0(tx_dvld_reg_n_0),
        .I1(\state_reg_n_0_[3] ),
        .I2(\count8_reg_n_0_[3] ),
        .I3(\count8_reg_n_0_[1] ),
        .I4(\count8_reg_n_0_[0] ),
        .I5(\count8_reg_n_0_[2] ),
        .O(txfifo_rd_en_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT3 #(
    .INIT(8'h02)) 
    txfifo_rd_en_i_6
       (.I0(\state_reg_n_0_[3] ),
        .I1(st_readsize),
        .I2(\state_reg_n_0_[0] ),
        .O(txfifo_rd_en_i_6_n_0));
  LUT6 #(
    .INIT(64'hF7FFF7FFFFFFF7FF)) 
    txfifo_rd_en_i_7
       (.I0(b2b_ok),
        .I1(cts_1g),
        .I2(empty),
        .I3(tx_rdy),
        .I4(fmac_speed[0]),
        .I5(fmac_speed[1]),
        .O(txfifo_rd_en_i_7_n_0));
  FDRE txfifo_rd_en_reg
       (.C(lclk),
        .CE(1'b1),
        .D(txfifo_rd_en_i_1_n_0),
        .Q(rd_en),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[11]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[11]),
        .O(p_2_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[13]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[13]),
        .O(p_2_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[15]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[15]),
        .O(p_2_in[15]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[17]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[16]),
        .O(p_2_in[17]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[19]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[17]),
        .O(p_2_in[19]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[1]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[1]),
        .O(p_2_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[21]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[18]),
        .O(p_2_in[21]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[23]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[19]),
        .O(p_2_in[23]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[25]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[20]),
        .O(p_2_in[25]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[27]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[21]),
        .O(p_2_in[27]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[29]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[22]),
        .O(p_2_in[29]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[31]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[23]),
        .O(p_2_in[31]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[33]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[24]),
        .O(p_2_in[33]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[35]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[25]),
        .O(p_2_in[35]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[37]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[26]),
        .O(p_2_in[37]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[39]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[27]),
        .O(p_2_in[39]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[3]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[3]),
        .O(p_2_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[41]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[28]),
        .O(p_2_in[41]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[43]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[29]),
        .O(p_2_in[43]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[45]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[30]),
        .O(p_2_in[45]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[47]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[31]),
        .O(p_2_in[47]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[49]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[32]),
        .O(p_2_in[49]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[51]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[33]),
        .O(p_2_in[51]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[53]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[34]),
        .O(p_2_in[53]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[55]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[35]),
        .O(p_2_in[55]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[57]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[36]),
        .O(p_2_in[57]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[59]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[37]),
        .O(p_2_in[59]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[5]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[5]),
        .O(p_2_in[5]));
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[61]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[38]),
        .O(p_2_in[61]));
  LUT4 #(
    .INIT(16'h40FF)) 
    \wdata[63]_i_1 
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .I2(wsel_reg_0),
        .I3(rst_),
        .O(\wdata[63]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF4444444F44444)) 
    \wdata[63]_i_2 
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .I2(st_mac_dat),
        .I3(wsel_reg_0),
        .I4(pulse_0),
        .I5(\state_reg_n_0_[0] ),
        .O(\wdata[63]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[7]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[7]),
        .O(p_2_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \wdata[9]_i_1 
       (.I0(wsel_reg_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(dout[9]),
        .O(p_2_in[9]));
  FDSE \wdata_reg[0] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[0]),
        .Q(\bdata1_reg[63] [0]),
        .S(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[10] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[5]),
        .Q(\bdata1_reg[63] [10]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[11] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[11]),
        .Q(\bdata1_reg[63] [11]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[12] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[6]),
        .Q(\bdata1_reg[63] [12]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[13] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[13]),
        .Q(\bdata1_reg[63] [13]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[14] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[7]),
        .Q(\bdata1_reg[63] [14]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[15] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[15]),
        .Q(\bdata1_reg[63] [15]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[16] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[8]),
        .Q(\bdata1_reg[63] [16]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[17] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[17]),
        .Q(\bdata1_reg[63] [17]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[18] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[9]),
        .Q(\bdata1_reg[63] [18]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[19] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[19]),
        .Q(\bdata1_reg[63] [19]),
        .R(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[1] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[1]),
        .Q(\bdata1_reg[63] [1]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[20] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[10]),
        .Q(\bdata1_reg[63] [20]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[21] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[21]),
        .Q(\bdata1_reg[63] [21]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[22] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[11]),
        .Q(\bdata1_reg[63] [22]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[23] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[23]),
        .Q(\bdata1_reg[63] [23]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[24] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[12]),
        .Q(\bdata1_reg[63] [24]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[25] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[25]),
        .Q(\bdata1_reg[63] [25]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[26] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[13]),
        .Q(\bdata1_reg[63] [26]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[27] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[27]),
        .Q(\bdata1_reg[63] [27]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[28] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[14]),
        .Q(\bdata1_reg[63] [28]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[29] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[29]),
        .Q(\bdata1_reg[63] [29]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[2] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[1]),
        .Q(\bdata1_reg[63] [2]),
        .S(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[30] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[15]),
        .Q(\bdata1_reg[63] [30]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[31] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[31]),
        .Q(\bdata1_reg[63] [31]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[32] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[16]),
        .Q(\bdata1_reg[63] [32]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[33] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[33]),
        .Q(\bdata1_reg[63] [33]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[34] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[17]),
        .Q(\bdata1_reg[63] [34]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[35] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[35]),
        .Q(\bdata1_reg[63] [35]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[36] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[18]),
        .Q(\bdata1_reg[63] [36]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[37] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[37]),
        .Q(\bdata1_reg[63] [37]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[38] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[19]),
        .Q(\bdata1_reg[63] [38]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[39] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[39]),
        .Q(\bdata1_reg[63] [39]),
        .R(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[3] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[3]),
        .Q(\bdata1_reg[63] [3]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[40] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[20]),
        .Q(\bdata1_reg[63] [40]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[41] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[41]),
        .Q(\bdata1_reg[63] [41]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[42] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[21]),
        .Q(\bdata1_reg[63] [42]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[43] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[43]),
        .Q(\bdata1_reg[63] [43]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[44] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[22]),
        .Q(\bdata1_reg[63] [44]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[45] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[45]),
        .Q(\bdata1_reg[63] [45]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[46] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[23]),
        .Q(\bdata1_reg[63] [46]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[47] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[47]),
        .Q(\bdata1_reg[63] [47]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[48] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[24]),
        .Q(\bdata1_reg[63] [48]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[49] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[49]),
        .Q(\bdata1_reg[63] [49]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[4] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[2]),
        .Q(\bdata1_reg[63] [4]),
        .S(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[50] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[25]),
        .Q(\bdata1_reg[63] [50]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[51] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[51]),
        .Q(\bdata1_reg[63] [51]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[52] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[26]),
        .Q(\bdata1_reg[63] [52]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[53] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[53]),
        .Q(\bdata1_reg[63] [53]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[54] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[27]),
        .Q(\bdata1_reg[63] [54]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[55] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[55]),
        .Q(\bdata1_reg[63] [55]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[56] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[28]),
        .Q(\bdata1_reg[63] [56]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[57] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[57]),
        .Q(\bdata1_reg[63] [57]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[58] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[29]),
        .Q(\bdata1_reg[63] [58]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[59] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[59]),
        .Q(\bdata1_reg[63] [59]),
        .R(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[5] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[5]),
        .Q(\bdata1_reg[63] [5]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[60] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[30]),
        .Q(\bdata1_reg[63] [60]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[61] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[61]),
        .Q(\bdata1_reg[63] [61]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[62] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[31]),
        .Q(\bdata1_reg[63] [62]),
        .S(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[63] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[32]),
        .Q(\bdata1_reg[63] [63]),
        .S(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[6] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[3]),
        .Q(\bdata1_reg[63] [6]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[7] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[7]),
        .Q(\bdata1_reg[63] [7]),
        .R(\wdata[63]_i_1_n_0 ));
  FDSE \wdata_reg[8] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(D[4]),
        .Q(\bdata1_reg[63] [8]),
        .S(\wdata[63]_i_1_n_0 ));
  FDRE \wdata_reg[9] 
       (.C(lclk),
        .CE(\wdata[63]_i_2_n_0 ),
        .D(p_2_in[9]),
        .Q(\bdata1_reg[63] [9]),
        .R(\wdata[63]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEFFFFFEEEF0000)) 
    wsel_i_1
       (.I0(Q),
        .I1(wsel_i_2_n_0),
        .I2(tx_dvld_reg_n_0),
        .I3(st_mac_dat),
        .I4(wsel),
        .I5(wsel_reg_0),
        .O(wsel_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'hE)) 
    wsel_i_2
       (.I0(\state_reg_n_0_[0] ),
        .I1(st_readsize),
        .O(wsel_i_2_n_0));
  LUT6 #(
    .INIT(64'h000000030003013C)) 
    wsel_i_3
       (.I0(\state[4]_i_2__0_n_0 ),
        .I1(\state_reg_n_0_[0] ),
        .I2(st_readsize),
        .I3(\state_reg_n_0_[3] ),
        .I4(st_mac_dat),
        .I5(Q),
        .O(wsel));
  FDSE wsel_reg
       (.C(lclk),
        .CE(1'b1),
        .D(wsel_i_1_n_0),
        .Q(wsel_reg_0),
        .S(SR));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gige_tx_gmii
   (SR,
    cts_1g,
    in0,
    gmii_tx_en,
    Q,
    \crc_cnt_reg[4]_0 ,
    \new_crc_reg[21] ,
    \txd_reg[27]_0 ,
    \txd_reg[48]_0 ,
    \bdin_reg[47] ,
    \bdin_reg[24] ,
    \crc_cnt_reg[12]_0 ,
    \crc_cnt_reg[7]_0 ,
    gmii_txd,
    lclk,
    fmac_speed_0_sp_1,
    rst_,
    \rbytes_reg[15] ,
    \rbytes_reg[14] ,
    \rbytes_reg[13] ,
    \rbytes_reg[12] ,
    \rbytes_reg[11] ,
    \rbytes_reg[10] ,
    \rbytes_reg[9] ,
    \rbytes_reg[8] ,
    \rbytes_reg[7] ,
    \rbytes_reg[6] ,
    \rbytes_reg[5] ,
    \rbytes_reg[4] ,
    \rbytes_reg[2] ,
    \rbytes_reg[1] ,
    \rbytes_reg[0] ,
    fmac_speed,
    rts,
    mode_1G,
    \rbytes_reg[3] ,
    \rbytes_reg[4]_0 ,
    \rbytes_reg[5]_0 ,
    \rbytes_reg[7]_0 ,
    \rbytes_reg[8]_0 ,
    \rbytes_reg[9]_0 ,
    \rbytes_reg[10]_0 ,
    \rbytes_reg[12]_0 ,
    \rbytes_reg[13]_0 ,
    crc_cnt20_in,
    D,
    \wdata_reg[23] ,
    \wdata_reg[39] ,
    \wdata_reg[63] ,
    \wdata_reg[8] ,
    \wdata_reg[9] ,
    \wdata_reg[10] ,
    \wdata_reg[11] ,
    \wdata_reg[12] ,
    \wdata_reg[13] ,
    \wdata_reg[14] ,
    \wdata_reg[15] ,
    \wdata_reg[16] ,
    \wdata_reg[17] ,
    \wdata_reg[18] ,
    \wdata_reg[19] ,
    \wdata_reg[20] ,
    \wdata_reg[21] ,
    \wdata_reg[22] ,
    \wdata_reg[24] ,
    \wdata_reg[25] ,
    \wdata_reg[26] ,
    \wdata_reg[27] ,
    \wdata_reg[28] ,
    \wdata_reg[29] ,
    \wdata_reg[30] ,
    \wdata_reg[31] ,
    \wdata_reg[32] ,
    \wdata_reg[33] ,
    \wdata_reg[34] ,
    \wdata_reg[35] ,
    \wdata_reg[36] ,
    \wdata_reg[37] ,
    \wdata_reg[38] ,
    \wdata_reg[16]_0 ,
    \wdata_reg[17]_0 ,
    \wdata_reg[18]_0 ,
    \wdata_reg[19]_0 ,
    \wdata_reg[20]_0 ,
    \wdata_reg[21]_0 ,
    \wdata_reg[22]_0 ,
    \wdata_reg[23]_0 ,
    \rbytes_reg[13]_1 ,
    \rbytes_reg[11]_0 );
  output [0:0]SR;
  output cts_1g;
  output in0;
  output gmii_tx_en;
  output [2:0]Q;
  output \crc_cnt_reg[4]_0 ;
  output \new_crc_reg[21] ;
  output \txd_reg[27]_0 ;
  output [0:0]\txd_reg[48]_0 ;
  output \bdin_reg[47] ;
  output \bdin_reg[24] ;
  output \crc_cnt_reg[12]_0 ;
  output \crc_cnt_reg[7]_0 ;
  output [7:0]gmii_txd;
  input lclk;
  input fmac_speed_0_sp_1;
  input rst_;
  input [15:0]\rbytes_reg[15] ;
  input \rbytes_reg[14] ;
  input \rbytes_reg[13] ;
  input \rbytes_reg[12] ;
  input \rbytes_reg[11] ;
  input \rbytes_reg[10] ;
  input \rbytes_reg[9] ;
  input \rbytes_reg[8] ;
  input \rbytes_reg[7] ;
  input \rbytes_reg[6] ;
  input \rbytes_reg[5] ;
  input \rbytes_reg[4] ;
  input \rbytes_reg[2] ;
  input \rbytes_reg[1] ;
  input \rbytes_reg[0] ;
  input [1:0]fmac_speed;
  input rts;
  input mode_1G;
  input \rbytes_reg[3] ;
  input \rbytes_reg[4]_0 ;
  input \rbytes_reg[5]_0 ;
  input \rbytes_reg[7]_0 ;
  input \rbytes_reg[8]_0 ;
  input \rbytes_reg[9]_0 ;
  input \rbytes_reg[10]_0 ;
  input \rbytes_reg[12]_0 ;
  input \rbytes_reg[13]_0 ;
  input [0:0]crc_cnt20_in;
  input [7:0]D;
  input \wdata_reg[23] ;
  input \wdata_reg[39] ;
  input [63:0]\wdata_reg[63] ;
  input \wdata_reg[8] ;
  input \wdata_reg[9] ;
  input \wdata_reg[10] ;
  input \wdata_reg[11] ;
  input \wdata_reg[12] ;
  input \wdata_reg[13] ;
  input \wdata_reg[14] ;
  input \wdata_reg[15] ;
  input \wdata_reg[16] ;
  input \wdata_reg[17] ;
  input \wdata_reg[18] ;
  input \wdata_reg[19] ;
  input \wdata_reg[20] ;
  input \wdata_reg[21] ;
  input \wdata_reg[22] ;
  input \wdata_reg[24] ;
  input \wdata_reg[25] ;
  input \wdata_reg[26] ;
  input \wdata_reg[27] ;
  input \wdata_reg[28] ;
  input \wdata_reg[29] ;
  input \wdata_reg[30] ;
  input \wdata_reg[31] ;
  input \wdata_reg[32] ;
  input \wdata_reg[33] ;
  input \wdata_reg[34] ;
  input \wdata_reg[35] ;
  input \wdata_reg[36] ;
  input \wdata_reg[37] ;
  input \wdata_reg[38] ;
  input \wdata_reg[16]_0 ;
  input \wdata_reg[17]_0 ;
  input \wdata_reg[18]_0 ;
  input \wdata_reg[19]_0 ;
  input \wdata_reg[20]_0 ;
  input \wdata_reg[21]_0 ;
  input \wdata_reg[22]_0 ;
  input \wdata_reg[23]_0 ;
  input [12:0]\rbytes_reg[13]_1 ;
  input [2:0]\rbytes_reg[11]_0 ;

  wire [7:0]D;
  wire [2:0]Q;
  wire [0:0]SR;
  wire bcnt;
  wire bcnt0;
  wire \bcnt[0]_i_1__0_n_0 ;
  wire \bcnt[10]_i_1_n_0 ;
  wire \bcnt[10]_i_3_n_0 ;
  wire \bcnt[11]_i_1_n_0 ;
  wire \bcnt[11]_i_3_n_0 ;
  wire \bcnt[12]_i_1_n_0 ;
  wire \bcnt[12]_i_3_n_0 ;
  wire \bcnt[13]_i_1_n_0 ;
  wire \bcnt[13]_i_3_n_0 ;
  wire \bcnt[14]_i_1_n_0 ;
  wire \bcnt[14]_i_3_n_0 ;
  wire \bcnt[15]_i_10_n_0 ;
  wire \bcnt[15]_i_11_n_0 ;
  wire \bcnt[15]_i_12_n_0 ;
  wire \bcnt[15]_i_13_n_0 ;
  wire \bcnt[15]_i_14_n_0 ;
  wire \bcnt[15]_i_2_n_0 ;
  wire \bcnt[15]_i_3_n_0 ;
  wire \bcnt[15]_i_4_n_0 ;
  wire \bcnt[15]_i_6_n_0 ;
  wire \bcnt[15]_i_8_n_0 ;
  wire \bcnt[15]_i_9_n_0 ;
  wire \bcnt[1]_i_1__0_n_0 ;
  wire \bcnt[2]_i_1__0_n_0 ;
  wire \bcnt[2]_i_3_n_0 ;
  wire \bcnt[3]_i_1__0_n_0 ;
  wire \bcnt[3]_i_3_n_0 ;
  wire \bcnt[4]_i_1_n_0 ;
  wire \bcnt[4]_i_3_n_0 ;
  wire \bcnt[5]_i_1_n_0 ;
  wire \bcnt[5]_i_3_n_0 ;
  wire \bcnt[6]_i_1_n_0 ;
  wire \bcnt[6]_i_3_n_0 ;
  wire \bcnt[7]_i_1_n_0 ;
  wire \bcnt[7]_i_3_n_0 ;
  wire \bcnt[8]_i_1_n_0 ;
  wire \bcnt[8]_i_3_n_0 ;
  wire \bcnt[9]_i_1_n_0 ;
  wire \bcnt[9]_i_3_n_0 ;
  wire \bcnt_reg_n_0_[0] ;
  wire \bcnt_reg_n_0_[10] ;
  wire \bcnt_reg_n_0_[11] ;
  wire \bcnt_reg_n_0_[12] ;
  wire \bcnt_reg_n_0_[13] ;
  wire \bcnt_reg_n_0_[14] ;
  wire \bcnt_reg_n_0_[15] ;
  wire \bcnt_reg_n_0_[1] ;
  wire \bcnt_reg_n_0_[2] ;
  wire \bcnt_reg_n_0_[3] ;
  wire \bcnt_reg_n_0_[4] ;
  wire \bcnt_reg_n_0_[5] ;
  wire \bcnt_reg_n_0_[6] ;
  wire \bcnt_reg_n_0_[7] ;
  wire \bcnt_reg_n_0_[8] ;
  wire \bcnt_reg_n_0_[9] ;
  wire [63:0]bdata1;
  wire [63:0]bdata2;
  wire \bdin_reg[24] ;
  wire \bdin_reg[47] ;
  wire [8:0]counter;
  wire \counter[3]_i_2_n_0 ;
  wire \counter[5]_i_2_n_0 ;
  wire \counter[6]_i_2_n_0 ;
  wire \counter[7]_i_2_n_0 ;
  wire \counter[8]_i_1_n_0 ;
  wire \counter[8]_i_3_n_0 ;
  wire \counter[8]_i_4_n_0 ;
  wire \counter[8]_i_5_n_0 ;
  wire crc_clr_;
  wire crc_clr_1;
  wire crc_clr__i_1_n_0;
  wire crc_clr__i_2_n_0;
  wire [15:4]crc_cnt;
  wire [0:0]crc_cnt20_in;
  wire \crc_cnt[10]_i_1_n_0 ;
  wire \crc_cnt[10]_i_3_n_0 ;
  wire \crc_cnt[11]_i_1_n_0 ;
  wire \crc_cnt[11]_i_2_n_0 ;
  wire \crc_cnt[13]_i_1_n_0 ;
  wire \crc_cnt[13]_i_3_n_0 ;
  wire \crc_cnt[14]_i_1_n_0 ;
  wire \crc_cnt[15]_i_1_n_0 ;
  wire \crc_cnt[15]_i_2_n_0 ;
  wire \crc_cnt[15]_i_5_n_0 ;
  wire \crc_cnt[4]_i_1_n_0 ;
  wire \crc_cnt[5]_i_1_n_0 ;
  wire \crc_cnt[6]_i_1_n_0 ;
  wire \crc_cnt[6]_i_2_n_0 ;
  wire \crc_cnt[8]_i_1_n_0 ;
  wire \crc_cnt[8]_i_3_n_0 ;
  wire \crc_cnt[9]_i_1_n_0 ;
  wire \crc_cnt_reg[12]_0 ;
  wire \crc_cnt_reg[4]_0 ;
  wire \crc_cnt_reg[7]_0 ;
  wire crc_last_;
  wire crc_last__i_1_n_0;
  wire crc_we_;
  wire crc_we__i_1_n_0;
  wire cts_1g;
  wire cts_i_1_n_0;
  wire cts_i_2_n_0;
  wire cts_i_3_n_0;
  wire cts_i_4_n_0;
  wire [1:0]fmac_speed;
  wire fmac_speed_0_sn_1;
  wire gmii_start;
  wire gmii_start_i_1_n_0;
  wire gmii_start_i_2_n_0;
  wire gmii_tx_en;
  wire gmii_tx_en35_in;
  wire gmii_tx_en_i_1_n_0;
  wire gmii_tx_en_i_2_n_0;
  wire gmii_tx_en_i_3_n_0;
  wire gmii_tx_en_i_4_n_0;
  wire gmii_tx_en_i_5_n_0;
  wire gmii_tx_en_i_6_n_0;
  wire gmii_tx_en_i_7_n_0;
  wire gmii_tx_en_i_8_n_0;
  wire gmii_tx_en_i_9_n_0;
  wire gmii_txc_i_1_n_0;
  wire gmii_txc_i_2_n_0;
  wire gmii_txc_i_3_n_0;
  wire gmii_txc_i_4_n_0;
  wire gmii_txc_i_5_n_0;
  wire [7:0]gmii_txd;
  wire \gmii_txd[0]_i_1_n_0 ;
  wire \gmii_txd[0]_i_2_n_0 ;
  wire \gmii_txd[0]_i_3_n_0 ;
  wire \gmii_txd[0]_i_4_n_0 ;
  wire \gmii_txd[1]_i_1_n_0 ;
  wire \gmii_txd[1]_i_2_n_0 ;
  wire \gmii_txd[1]_i_3_n_0 ;
  wire \gmii_txd[1]_i_4_n_0 ;
  wire \gmii_txd[2]_i_1_n_0 ;
  wire \gmii_txd[2]_i_2_n_0 ;
  wire \gmii_txd[2]_i_3_n_0 ;
  wire \gmii_txd[2]_i_4_n_0 ;
  wire \gmii_txd[3]_i_1_n_0 ;
  wire \gmii_txd[3]_i_2_n_0 ;
  wire \gmii_txd[3]_i_3_n_0 ;
  wire \gmii_txd[3]_i_4_n_0 ;
  wire \gmii_txd[4]_i_1_n_0 ;
  wire \gmii_txd[4]_i_2_n_0 ;
  wire \gmii_txd[4]_i_3_n_0 ;
  wire \gmii_txd[4]_i_4_n_0 ;
  wire \gmii_txd[5]_i_1_n_0 ;
  wire \gmii_txd[5]_i_2_n_0 ;
  wire \gmii_txd[5]_i_3_n_0 ;
  wire \gmii_txd[5]_i_4_n_0 ;
  wire \gmii_txd[6]_i_1_n_0 ;
  wire \gmii_txd[6]_i_2_n_0 ;
  wire \gmii_txd[6]_i_3_n_0 ;
  wire \gmii_txd[6]_i_4_n_0 ;
  wire \gmii_txd[7]_i_1_n_0 ;
  wire \gmii_txd[7]_i_2_n_0 ;
  wire \gmii_txd[7]_i_3_n_0 ;
  wire \gmii_txd[7]_i_4_n_0 ;
  wire \gmii_txd[7]_i_5_n_0 ;
  wire \gmii_txd[7]_i_6_n_0 ;
  wire \gmii_txd[7]_i_7_n_0 ;
  wire \gmii_txd[7]_i_8_n_0 ;
  wire \gstate[4]_i_2_n_0 ;
  wire \gstate[4]_i_3_n_0 ;
  wire \gstate[8]_i_2_n_0 ;
  wire \gstate[8]_i_3_n_0 ;
  wire \gstate[8]_i_4_n_0 ;
  wire \gstate[8]_i_5_n_0 ;
  wire \gstate[8]_i_6_n_0 ;
  wire \gstate_reg_n_0_[0] ;
  wire \gstate_reg_n_0_[3] ;
  wire \gstate_reg_n_0_[4] ;
  wire [7:0]idle1;
  wire [7:0]idle2;
  wire [7:0]idle3;
  wire idle4;
  wire \idle4_reg_n_0_[0] ;
  wire \idle4_reg_n_0_[2] ;
  wire \idle4_reg_n_0_[3] ;
  wire \idle4_reg_n_0_[4] ;
  wire \idle4_reg_n_0_[5] ;
  wire \idle4_reg_n_0_[6] ;
  wire \idle4_reg_n_0_[7] ;
  wire in0;
  wire [7:0]in26;
  wire [7:0]in27;
  wire [7:0]in28;
  wire [7:0]in29;
  wire [7:0]in30;
  wire [7:0]in31;
  wire [7:0]in32;
  wire insert_crc;
  wire insert_crc_i_1_n_0;
  wire last_dat_i_1_n_0;
  wire last_dat_i_2_n_0;
  wire last_dat_reg_n_0;
  wire lclk;
  wire mode_1G;
  wire [15:3]nbytes_reg;
  wire \new_crc_reg[21] ;
  wire p_0_in11_in;
  wire [5:0]p_0_in__0;
  wire [8:0]p_0_in__1;
  wire [8:0]p_1_in;
  wire p_1_in2_in;
  wire [63:0]p_2_in;
  wire [63:8]pdin;
  wire \pdin[63]_i_1_n_0 ;
  wire pulse_0;
  wire pulse_1;
  wire pulse_1_i_3_n_0;
  wire [1:0]rbytes_reg;
  wire \rbytes_reg[10] ;
  wire \rbytes_reg[10]_0 ;
  wire \rbytes_reg[11] ;
  wire [2:0]\rbytes_reg[11]_0 ;
  wire \rbytes_reg[12] ;
  wire \rbytes_reg[12]_0 ;
  wire \rbytes_reg[13] ;
  wire \rbytes_reg[13]_0 ;
  wire [12:0]\rbytes_reg[13]_1 ;
  wire \rbytes_reg[14] ;
  wire [15:0]\rbytes_reg[15] ;
  wire \rbytes_reg[2] ;
  wire \rbytes_reg[3] ;
  wire \rbytes_reg[4] ;
  wire \rbytes_reg[4]_0 ;
  wire \rbytes_reg[5] ;
  wire \rbytes_reg[5]_0 ;
  wire \rbytes_reg[6] ;
  wire \rbytes_reg[7] ;
  wire \rbytes_reg[7]_0 ;
  wire \rbytes_reg[8] ;
  wire \rbytes_reg[8]_0 ;
  wire \rbytes_reg[9] ;
  wire \rbytes_reg[9]_0 ;
  wire rbytes_reg_0_sn_1;
  wire rbytes_reg_1_sn_1;
  wire \rbytes_reg_reg[0]_rep__1_n_0 ;
  wire rst_;
  wire rts;
  wire st_DAT_0;
  wire st_DAT_1;
  wire st_DAT_4;
  wire st_DAT_5;
  wire st_DAT_6;
  wire st_DAT_7;
  wire st_GET_WAIT1;
  wire st_GET_WAIT2;
  wire st_TX_CRC;
  wire st_TX_DAT;
  wire st_WAIT_S;
  wire \state[1]_i_2_n_0 ;
  wire \state[3]_i_2_n_0 ;
  wire \state[4]_i_2_n_0 ;
  wire \state[5]_i_2_n_0 ;
  wire \state[5]_i_3_n_0 ;
  wire \state_reg_n_0_[0] ;
  wire [7:0]txc;
  wire \txc[7]_i_1_n_0 ;
  wire txc_int;
  wire \txc_int[0]_i_1_n_0 ;
  wire \txc_int[1]_i_1_n_0 ;
  wire \txc_int[2]_i_1_n_0 ;
  wire \txc_int[3]_i_1_n_0 ;
  wire \txc_int[4]_i_1_n_0 ;
  wire \txc_int[5]_i_1_n_0 ;
  wire \txc_int[6]_i_1_n_0 ;
  wire \txc_int[7]_i_2_n_0 ;
  wire \txc_int[7]_i_3_n_0 ;
  wire \txc_int[7]_i_4_n_0 ;
  wire \txc_int_reg_n_0_[0] ;
  wire \txc_int_reg_n_0_[1] ;
  wire \txc_int_reg_n_0_[2] ;
  wire \txc_int_reg_n_0_[3] ;
  wire \txc_int_reg_n_0_[4] ;
  wire \txc_int_reg_n_0_[5] ;
  wire \txc_int_reg_n_0_[6] ;
  wire \txc_int_reg_n_0_[7] ;
  wire txd1;
  wire \txd[31]_i_2_n_0 ;
  wire \txd[31]_i_3_n_0 ;
  wire \txd[35]_i_4_n_0 ;
  wire \txd[63]_i_1_n_0 ;
  wire \txd[7]_i_2_n_0 ;
  wire \txd_reg[27]_0 ;
  wire [0:0]\txd_reg[48]_0 ;
  wire \txd_reg_n_0_[0] ;
  wire \txd_reg_n_0_[1] ;
  wire \txd_reg_n_0_[2] ;
  wire \txd_reg_n_0_[3] ;
  wire \txd_reg_n_0_[4] ;
  wire \txd_reg_n_0_[5] ;
  wire \txd_reg_n_0_[6] ;
  wire \txd_reg_n_0_[7] ;
  wire wcnt;
  wire \wcnt[10]_i_1_n_0 ;
  wire \wcnt[10]_i_2_n_0 ;
  wire \wcnt[10]_i_3_n_0 ;
  wire \wcnt[11]_i_1_n_0 ;
  wire \wcnt[11]_i_2_n_0 ;
  wire \wcnt[11]_i_3_n_0 ;
  wire \wcnt[12]_i_1_n_0 ;
  wire \wcnt[12]_i_2_n_0 ;
  wire \wcnt[12]_i_3_n_0 ;
  wire \wcnt[13]_i_1_n_0 ;
  wire \wcnt[13]_i_2_n_0 ;
  wire \wcnt[13]_i_3_n_0 ;
  wire \wcnt[14]_i_1_n_0 ;
  wire \wcnt[14]_i_2_n_0 ;
  wire \wcnt[15]_i_2_n_0 ;
  wire \wcnt[15]_i_4_n_0 ;
  wire \wcnt[15]_i_5_n_0 ;
  wire \wcnt[3]_i_1_n_0 ;
  wire \wcnt[4]_i_1_n_0 ;
  wire \wcnt[5]_i_1_n_0 ;
  wire \wcnt[5]_i_2_n_0 ;
  wire \wcnt[6]_i_1_n_0 ;
  wire \wcnt[6]_i_2_n_0 ;
  wire \wcnt[6]_i_3_n_0 ;
  wire \wcnt[7]_i_1_n_0 ;
  wire \wcnt[7]_i_2_n_0 ;
  wire \wcnt[7]_i_3_n_0 ;
  wire \wcnt[8]_i_1_n_0 ;
  wire \wcnt[8]_i_2_n_0 ;
  wire \wcnt[8]_i_3_n_0 ;
  wire \wcnt[9]_i_1_n_0 ;
  wire \wcnt[9]_i_2_n_0 ;
  wire \wcnt_reg_n_0_[10] ;
  wire \wcnt_reg_n_0_[11] ;
  wire \wcnt_reg_n_0_[12] ;
  wire \wcnt_reg_n_0_[13] ;
  wire \wcnt_reg_n_0_[14] ;
  wire \wcnt_reg_n_0_[3] ;
  wire \wcnt_reg_n_0_[4] ;
  wire \wcnt_reg_n_0_[5] ;
  wire \wcnt_reg_n_0_[6] ;
  wire \wcnt_reg_n_0_[7] ;
  wire \wcnt_reg_n_0_[8] ;
  wire \wcnt_reg_n_0_[9] ;
  wire \wdata_reg[10] ;
  wire \wdata_reg[11] ;
  wire \wdata_reg[12] ;
  wire \wdata_reg[13] ;
  wire \wdata_reg[14] ;
  wire \wdata_reg[15] ;
  wire \wdata_reg[16] ;
  wire \wdata_reg[16]_0 ;
  wire \wdata_reg[17] ;
  wire \wdata_reg[17]_0 ;
  wire \wdata_reg[18] ;
  wire \wdata_reg[18]_0 ;
  wire \wdata_reg[19] ;
  wire \wdata_reg[19]_0 ;
  wire \wdata_reg[20] ;
  wire \wdata_reg[20]_0 ;
  wire \wdata_reg[21] ;
  wire \wdata_reg[21]_0 ;
  wire \wdata_reg[22] ;
  wire \wdata_reg[22]_0 ;
  wire \wdata_reg[23] ;
  wire \wdata_reg[23]_0 ;
  wire \wdata_reg[24] ;
  wire \wdata_reg[25] ;
  wire \wdata_reg[26] ;
  wire \wdata_reg[27] ;
  wire \wdata_reg[28] ;
  wire \wdata_reg[29] ;
  wire \wdata_reg[30] ;
  wire \wdata_reg[31] ;
  wire \wdata_reg[32] ;
  wire \wdata_reg[33] ;
  wire \wdata_reg[34] ;
  wire \wdata_reg[35] ;
  wire \wdata_reg[36] ;
  wire \wdata_reg[37] ;
  wire \wdata_reg[38] ;
  wire \wdata_reg[39] ;
  wire [63:0]\wdata_reg[63] ;
  wire \wdata_reg[8] ;
  wire \wdata_reg[9] ;

  assign fmac_speed_0_sn_1 = fmac_speed_0_sp_1;
  assign rbytes_reg_0_sn_1 = \rbytes_reg[0] ;
  assign rbytes_reg_1_sn_1 = \rbytes_reg[1] ;
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT4 #(
    .INIT(16'h0C2E)) 
    \bcnt[0]_i_1__0 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [0]),
        .I3(\bcnt_reg_n_0_[0] ),
        .O(\bcnt[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[10]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [10]),
        .I3(\rbytes_reg[9] ),
        .I4(\bcnt_reg_n_0_[10] ),
        .I5(\bcnt[10]_i_3_n_0 ),
        .O(\bcnt[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bcnt[10]_i_3 
       (.I0(\bcnt_reg_n_0_[8] ),
        .I1(\bcnt_reg_n_0_[6] ),
        .I2(\bcnt[6]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[7] ),
        .I4(\bcnt_reg_n_0_[9] ),
        .O(\bcnt[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[11]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [11]),
        .I3(\rbytes_reg[10] ),
        .I4(\bcnt_reg_n_0_[11] ),
        .I5(\bcnt[11]_i_3_n_0 ),
        .O(\bcnt[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bcnt[11]_i_3 
       (.I0(\bcnt_reg_n_0_[9] ),
        .I1(\bcnt_reg_n_0_[7] ),
        .I2(\bcnt[6]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[6] ),
        .I4(\bcnt_reg_n_0_[8] ),
        .I5(\bcnt_reg_n_0_[10] ),
        .O(\bcnt[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[12]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [12]),
        .I3(\rbytes_reg[11] ),
        .I4(\bcnt_reg_n_0_[12] ),
        .I5(\bcnt[12]_i_3_n_0 ),
        .O(\bcnt[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bcnt[12]_i_3 
       (.I0(\bcnt_reg_n_0_[10] ),
        .I1(\bcnt[9]_i_3_n_0 ),
        .I2(\bcnt_reg_n_0_[9] ),
        .I3(\bcnt_reg_n_0_[11] ),
        .O(\bcnt[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[13]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [13]),
        .I3(\rbytes_reg[12] ),
        .I4(\bcnt_reg_n_0_[13] ),
        .I5(\bcnt[13]_i_3_n_0 ),
        .O(\bcnt[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bcnt[13]_i_3 
       (.I0(\bcnt_reg_n_0_[11] ),
        .I1(\bcnt_reg_n_0_[9] ),
        .I2(\bcnt[9]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[10] ),
        .I4(\bcnt_reg_n_0_[12] ),
        .O(\bcnt[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[14]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [14]),
        .I3(\rbytes_reg[13] ),
        .I4(\bcnt_reg_n_0_[14] ),
        .I5(\bcnt[14]_i_3_n_0 ),
        .O(\bcnt[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bcnt[14]_i_3 
       (.I0(\bcnt_reg_n_0_[12] ),
        .I1(\bcnt_reg_n_0_[10] ),
        .I2(\bcnt[9]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[9] ),
        .I4(\bcnt_reg_n_0_[11] ),
        .I5(\bcnt_reg_n_0_[13] ),
        .O(\bcnt[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F001F0F11001100)) 
    \bcnt[15]_i_1 
       (.I0(\bcnt[15]_i_3_n_0 ),
        .I1(\bcnt[15]_i_4_n_0 ),
        .I2(\gstate_reg_n_0_[0] ),
        .I3(bcnt0),
        .I4(gmii_tx_en35_in),
        .I5(\bcnt[15]_i_6_n_0 ),
        .O(bcnt));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bcnt[15]_i_10 
       (.I0(\bcnt_reg_n_0_[6] ),
        .I1(\bcnt_reg_n_0_[7] ),
        .I2(\bcnt_reg_n_0_[8] ),
        .I3(\bcnt_reg_n_0_[9] ),
        .O(\bcnt[15]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bcnt[15]_i_11 
       (.I0(\bcnt_reg_n_0_[13] ),
        .I1(\bcnt_reg_n_0_[12] ),
        .I2(\bcnt_reg_n_0_[11] ),
        .I3(\bcnt_reg_n_0_[10] ),
        .I4(\bcnt[2]_i_3_n_0 ),
        .I5(\bcnt[15]_i_14_n_0 ),
        .O(\bcnt[15]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \bcnt[15]_i_12 
       (.I0(st_DAT_4),
        .I1(\gstate_reg_n_0_[4] ),
        .I2(st_DAT_5),
        .I3(st_DAT_7),
        .I4(st_DAT_6),
        .O(\bcnt[15]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \bcnt[15]_i_13 
       (.I0(st_DAT_6),
        .I1(st_DAT_7),
        .I2(st_DAT_5),
        .I3(st_DAT_4),
        .I4(\gstate_reg_n_0_[4] ),
        .O(\bcnt[15]_i_13_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \bcnt[15]_i_14 
       (.I0(\bcnt_reg_n_0_[14] ),
        .I1(\bcnt_reg_n_0_[15] ),
        .O(\bcnt[15]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[15]_i_2 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [15]),
        .I3(\rbytes_reg[14] ),
        .I4(\bcnt_reg_n_0_[15] ),
        .I5(\bcnt[15]_i_8_n_0 ),
        .O(\bcnt[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFEFF)) 
    \bcnt[15]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(st_DAT_4),
        .I2(\gstate_reg_n_0_[3] ),
        .I3(\gstate_reg_n_0_[0] ),
        .I4(\bcnt[15]_i_9_n_0 ),
        .O(\bcnt[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \bcnt[15]_i_4 
       (.I0(st_DAT_0),
        .I1(st_DAT_1),
        .O(\bcnt[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bcnt[15]_i_5 
       (.I0(\bcnt[15]_i_10_n_0 ),
        .I1(\bcnt_reg_n_0_[2] ),
        .I2(\bcnt_reg_n_0_[3] ),
        .I3(\bcnt_reg_n_0_[4] ),
        .I4(\bcnt_reg_n_0_[5] ),
        .I5(\bcnt[15]_i_11_n_0 ),
        .O(gmii_tx_en35_in));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT5 #(
    .INIT(32'h000A0AAC)) 
    \bcnt[15]_i_6 
       (.I0(\bcnt[15]_i_12_n_0 ),
        .I1(\bcnt[15]_i_13_n_0 ),
        .I2(st_DAT_1),
        .I3(st_DAT_0),
        .I4(\gstate_reg_n_0_[3] ),
        .O(\bcnt[15]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bcnt[15]_i_8 
       (.I0(\bcnt_reg_n_0_[13] ),
        .I1(\bcnt_reg_n_0_[11] ),
        .I2(\bcnt[11]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[12] ),
        .I4(\bcnt_reg_n_0_[14] ),
        .O(\bcnt[15]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \bcnt[15]_i_9 
       (.I0(st_DAT_6),
        .I1(st_DAT_7),
        .I2(st_DAT_5),
        .O(\bcnt[15]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[1]_i_1__0 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [1]),
        .I3(\rbytes_reg[15] [0]),
        .I4(\bcnt_reg_n_0_[0] ),
        .I5(\bcnt_reg_n_0_[1] ),
        .O(\bcnt[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hE22EC00CC00CE22E)) 
    \bcnt[2]_i_1__0 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [2]),
        .I3(rbytes_reg_1_sn_1),
        .I4(\bcnt_reg_n_0_[2] ),
        .I5(\bcnt[2]_i_3_n_0 ),
        .O(\bcnt[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \bcnt[2]_i_3 
       (.I0(\bcnt_reg_n_0_[1] ),
        .I1(\bcnt_reg_n_0_[0] ),
        .O(\bcnt[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hE22EC00CC00CE22E)) 
    \bcnt[3]_i_1__0 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [3]),
        .I3(rbytes_reg_0_sn_1),
        .I4(\bcnt_reg_n_0_[3] ),
        .I5(\bcnt[3]_i_3_n_0 ),
        .O(\bcnt[3]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \bcnt[3]_i_3 
       (.I0(\bcnt_reg_n_0_[0] ),
        .I1(\bcnt_reg_n_0_[1] ),
        .I2(\bcnt_reg_n_0_[2] ),
        .O(\bcnt[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[4]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [4]),
        .I3(\rbytes_reg[2] ),
        .I4(\bcnt_reg_n_0_[4] ),
        .I5(\bcnt[4]_i_3_n_0 ),
        .O(\bcnt[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bcnt[4]_i_3 
       (.I0(\bcnt_reg_n_0_[2] ),
        .I1(\bcnt_reg_n_0_[1] ),
        .I2(\bcnt_reg_n_0_[0] ),
        .I3(\bcnt_reg_n_0_[3] ),
        .O(\bcnt[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[5]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [5]),
        .I3(\rbytes_reg[4] ),
        .I4(\bcnt_reg_n_0_[5] ),
        .I5(\bcnt[5]_i_3_n_0 ),
        .O(\bcnt[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bcnt[5]_i_3 
       (.I0(\bcnt_reg_n_0_[3] ),
        .I1(\bcnt_reg_n_0_[0] ),
        .I2(\bcnt_reg_n_0_[1] ),
        .I3(\bcnt_reg_n_0_[2] ),
        .I4(\bcnt_reg_n_0_[4] ),
        .O(\bcnt[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[6]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [6]),
        .I3(\rbytes_reg[5] ),
        .I4(\bcnt_reg_n_0_[6] ),
        .I5(\bcnt[6]_i_3_n_0 ),
        .O(\bcnt[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bcnt[6]_i_3 
       (.I0(\bcnt_reg_n_0_[4] ),
        .I1(\bcnt_reg_n_0_[2] ),
        .I2(\bcnt_reg_n_0_[1] ),
        .I3(\bcnt_reg_n_0_[0] ),
        .I4(\bcnt_reg_n_0_[3] ),
        .I5(\bcnt_reg_n_0_[5] ),
        .O(\bcnt[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[7]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [7]),
        .I3(\rbytes_reg[6] ),
        .I4(\bcnt_reg_n_0_[7] ),
        .I5(\bcnt[7]_i_3_n_0 ),
        .O(\bcnt[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bcnt[7]_i_3 
       (.I0(\bcnt_reg_n_0_[5] ),
        .I1(\bcnt[4]_i_3_n_0 ),
        .I2(\bcnt_reg_n_0_[4] ),
        .I3(\bcnt_reg_n_0_[6] ),
        .O(\bcnt[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[8]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [8]),
        .I3(\rbytes_reg[7] ),
        .I4(\bcnt_reg_n_0_[8] ),
        .I5(\bcnt[8]_i_3_n_0 ),
        .O(\bcnt[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bcnt[8]_i_3 
       (.I0(\bcnt_reg_n_0_[6] ),
        .I1(\bcnt_reg_n_0_[4] ),
        .I2(\bcnt[4]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[5] ),
        .I4(\bcnt_reg_n_0_[7] ),
        .O(\bcnt[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2EE20CC00CC02EE2)) 
    \bcnt[9]_i_1 
       (.I0(gmii_tx_en35_in),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\rbytes_reg[15] [9]),
        .I3(\rbytes_reg[8] ),
        .I4(\bcnt_reg_n_0_[9] ),
        .I5(\bcnt[9]_i_3_n_0 ),
        .O(\bcnt[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bcnt[9]_i_3 
       (.I0(\bcnt_reg_n_0_[7] ),
        .I1(\bcnt_reg_n_0_[5] ),
        .I2(\bcnt[4]_i_3_n_0 ),
        .I3(\bcnt_reg_n_0_[4] ),
        .I4(\bcnt_reg_n_0_[6] ),
        .I5(\bcnt_reg_n_0_[8] ),
        .O(\bcnt[9]_i_3_n_0 ));
  FDRE \bcnt_reg[0] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[0]_i_1__0_n_0 ),
        .Q(\bcnt_reg_n_0_[0] ),
        .R(SR));
  FDRE \bcnt_reg[10] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[10]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[10] ),
        .R(SR));
  FDRE \bcnt_reg[11] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[11]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[11] ),
        .R(SR));
  FDRE \bcnt_reg[12] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[12]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[12] ),
        .R(SR));
  FDRE \bcnt_reg[13] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[13]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[13] ),
        .R(SR));
  FDRE \bcnt_reg[14] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[14]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[14] ),
        .R(SR));
  FDRE \bcnt_reg[15] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[15]_i_2_n_0 ),
        .Q(\bcnt_reg_n_0_[15] ),
        .R(SR));
  FDRE \bcnt_reg[1] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[1]_i_1__0_n_0 ),
        .Q(\bcnt_reg_n_0_[1] ),
        .R(SR));
  FDRE \bcnt_reg[2] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[2]_i_1__0_n_0 ),
        .Q(\bcnt_reg_n_0_[2] ),
        .R(SR));
  FDRE \bcnt_reg[3] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[3]_i_1__0_n_0 ),
        .Q(\bcnt_reg_n_0_[3] ),
        .R(SR));
  FDRE \bcnt_reg[4] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[4]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[4] ),
        .R(SR));
  FDRE \bcnt_reg[5] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[5]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[5] ),
        .R(SR));
  FDRE \bcnt_reg[6] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[6]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[6] ),
        .R(SR));
  FDRE \bcnt_reg[7] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[7]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[7] ),
        .R(SR));
  FDRE \bcnt_reg[8] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[8]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[8] ),
        .R(SR));
  FDRE \bcnt_reg[9] 
       (.C(lclk),
        .CE(bcnt),
        .D(\bcnt[9]_i_1_n_0 ),
        .Q(\bcnt_reg_n_0_[9] ),
        .R(SR));
  FDSE \bdata1_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [0]),
        .Q(bdata1[0]),
        .S(SR));
  FDSE \bdata1_reg[10] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [10]),
        .Q(bdata1[10]),
        .S(SR));
  FDRE \bdata1_reg[11] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [11]),
        .Q(bdata1[11]),
        .R(SR));
  FDSE \bdata1_reg[12] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [12]),
        .Q(bdata1[12]),
        .S(SR));
  FDRE \bdata1_reg[13] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [13]),
        .Q(bdata1[13]),
        .R(SR));
  FDSE \bdata1_reg[14] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [14]),
        .Q(bdata1[14]),
        .S(SR));
  FDRE \bdata1_reg[15] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [15]),
        .Q(bdata1[15]),
        .R(SR));
  FDSE \bdata1_reg[16] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [16]),
        .Q(bdata1[16]),
        .S(SR));
  FDRE \bdata1_reg[17] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [17]),
        .Q(bdata1[17]),
        .R(SR));
  FDSE \bdata1_reg[18] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [18]),
        .Q(bdata1[18]),
        .S(SR));
  FDRE \bdata1_reg[19] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [19]),
        .Q(bdata1[19]),
        .R(SR));
  FDRE \bdata1_reg[1] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [1]),
        .Q(bdata1[1]),
        .R(SR));
  FDSE \bdata1_reg[20] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [20]),
        .Q(bdata1[20]),
        .S(SR));
  FDRE \bdata1_reg[21] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [21]),
        .Q(bdata1[21]),
        .R(SR));
  FDSE \bdata1_reg[22] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [22]),
        .Q(bdata1[22]),
        .S(SR));
  FDRE \bdata1_reg[23] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [23]),
        .Q(bdata1[23]),
        .R(SR));
  FDSE \bdata1_reg[24] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [24]),
        .Q(bdata1[24]),
        .S(SR));
  FDRE \bdata1_reg[25] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [25]),
        .Q(bdata1[25]),
        .R(SR));
  FDSE \bdata1_reg[26] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [26]),
        .Q(bdata1[26]),
        .S(SR));
  FDRE \bdata1_reg[27] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [27]),
        .Q(bdata1[27]),
        .R(SR));
  FDSE \bdata1_reg[28] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [28]),
        .Q(bdata1[28]),
        .S(SR));
  FDRE \bdata1_reg[29] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [29]),
        .Q(bdata1[29]),
        .R(SR));
  FDSE \bdata1_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [2]),
        .Q(bdata1[2]),
        .S(SR));
  FDSE \bdata1_reg[30] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [30]),
        .Q(bdata1[30]),
        .S(SR));
  FDRE \bdata1_reg[31] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [31]),
        .Q(bdata1[31]),
        .R(SR));
  FDSE \bdata1_reg[32] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [32]),
        .Q(bdata1[32]),
        .S(SR));
  FDRE \bdata1_reg[33] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [33]),
        .Q(bdata1[33]),
        .R(SR));
  FDSE \bdata1_reg[34] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [34]),
        .Q(bdata1[34]),
        .S(SR));
  FDRE \bdata1_reg[35] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [35]),
        .Q(bdata1[35]),
        .R(SR));
  FDSE \bdata1_reg[36] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [36]),
        .Q(bdata1[36]),
        .S(SR));
  FDRE \bdata1_reg[37] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [37]),
        .Q(bdata1[37]),
        .R(SR));
  FDSE \bdata1_reg[38] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [38]),
        .Q(bdata1[38]),
        .S(SR));
  FDRE \bdata1_reg[39] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [39]),
        .Q(bdata1[39]),
        .R(SR));
  FDRE \bdata1_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [3]),
        .Q(bdata1[3]),
        .R(SR));
  FDSE \bdata1_reg[40] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [40]),
        .Q(bdata1[40]),
        .S(SR));
  FDRE \bdata1_reg[41] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [41]),
        .Q(bdata1[41]),
        .R(SR));
  FDSE \bdata1_reg[42] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [42]),
        .Q(bdata1[42]),
        .S(SR));
  FDRE \bdata1_reg[43] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [43]),
        .Q(bdata1[43]),
        .R(SR));
  FDSE \bdata1_reg[44] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [44]),
        .Q(bdata1[44]),
        .S(SR));
  FDRE \bdata1_reg[45] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [45]),
        .Q(bdata1[45]),
        .R(SR));
  FDSE \bdata1_reg[46] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [46]),
        .Q(bdata1[46]),
        .S(SR));
  FDRE \bdata1_reg[47] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [47]),
        .Q(bdata1[47]),
        .R(SR));
  FDSE \bdata1_reg[48] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [48]),
        .Q(bdata1[48]),
        .S(SR));
  FDRE \bdata1_reg[49] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [49]),
        .Q(bdata1[49]),
        .R(SR));
  FDSE \bdata1_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [4]),
        .Q(bdata1[4]),
        .S(SR));
  FDSE \bdata1_reg[50] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [50]),
        .Q(bdata1[50]),
        .S(SR));
  FDRE \bdata1_reg[51] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [51]),
        .Q(bdata1[51]),
        .R(SR));
  FDSE \bdata1_reg[52] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [52]),
        .Q(bdata1[52]),
        .S(SR));
  FDRE \bdata1_reg[53] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [53]),
        .Q(bdata1[53]),
        .R(SR));
  FDSE \bdata1_reg[54] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [54]),
        .Q(bdata1[54]),
        .S(SR));
  FDRE \bdata1_reg[55] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [55]),
        .Q(bdata1[55]),
        .R(SR));
  FDSE \bdata1_reg[56] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [56]),
        .Q(bdata1[56]),
        .S(SR));
  FDRE \bdata1_reg[57] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [57]),
        .Q(bdata1[57]),
        .R(SR));
  FDSE \bdata1_reg[58] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [58]),
        .Q(bdata1[58]),
        .S(SR));
  FDRE \bdata1_reg[59] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [59]),
        .Q(bdata1[59]),
        .R(SR));
  FDRE \bdata1_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [5]),
        .Q(bdata1[5]),
        .R(SR));
  FDSE \bdata1_reg[60] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [60]),
        .Q(bdata1[60]),
        .S(SR));
  FDRE \bdata1_reg[61] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [61]),
        .Q(bdata1[61]),
        .R(SR));
  FDSE \bdata1_reg[62] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [62]),
        .Q(bdata1[62]),
        .S(SR));
  FDSE \bdata1_reg[63] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [63]),
        .Q(bdata1[63]),
        .S(SR));
  FDSE \bdata1_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [6]),
        .Q(bdata1[6]),
        .S(SR));
  FDRE \bdata1_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [7]),
        .Q(bdata1[7]),
        .R(SR));
  FDSE \bdata1_reg[8] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [8]),
        .Q(bdata1[8]),
        .S(SR));
  FDRE \bdata1_reg[9] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\wdata_reg[63] [9]),
        .Q(bdata1[9]),
        .R(SR));
  FDSE \bdata2_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[0]),
        .Q(bdata2[0]),
        .S(SR));
  FDSE \bdata2_reg[10] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[10]),
        .Q(bdata2[10]),
        .S(SR));
  FDRE \bdata2_reg[11] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[11]),
        .Q(bdata2[11]),
        .R(SR));
  FDSE \bdata2_reg[12] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[12]),
        .Q(bdata2[12]),
        .S(SR));
  FDRE \bdata2_reg[13] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[13]),
        .Q(bdata2[13]),
        .R(SR));
  FDSE \bdata2_reg[14] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[14]),
        .Q(bdata2[14]),
        .S(SR));
  FDRE \bdata2_reg[15] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[15]),
        .Q(bdata2[15]),
        .R(SR));
  FDSE \bdata2_reg[16] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[16]),
        .Q(bdata2[16]),
        .S(SR));
  FDRE \bdata2_reg[17] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[17]),
        .Q(bdata2[17]),
        .R(SR));
  FDSE \bdata2_reg[18] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[18]),
        .Q(bdata2[18]),
        .S(SR));
  FDRE \bdata2_reg[19] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[19]),
        .Q(bdata2[19]),
        .R(SR));
  FDRE \bdata2_reg[1] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[1]),
        .Q(bdata2[1]),
        .R(SR));
  FDSE \bdata2_reg[20] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[20]),
        .Q(bdata2[20]),
        .S(SR));
  FDRE \bdata2_reg[21] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[21]),
        .Q(bdata2[21]),
        .R(SR));
  FDSE \bdata2_reg[22] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[22]),
        .Q(bdata2[22]),
        .S(SR));
  FDRE \bdata2_reg[23] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[23]),
        .Q(bdata2[23]),
        .R(SR));
  FDSE \bdata2_reg[24] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[24]),
        .Q(bdata2[24]),
        .S(SR));
  FDRE \bdata2_reg[25] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[25]),
        .Q(bdata2[25]),
        .R(SR));
  FDSE \bdata2_reg[26] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[26]),
        .Q(bdata2[26]),
        .S(SR));
  FDRE \bdata2_reg[27] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[27]),
        .Q(bdata2[27]),
        .R(SR));
  FDSE \bdata2_reg[28] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[28]),
        .Q(bdata2[28]),
        .S(SR));
  FDRE \bdata2_reg[29] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[29]),
        .Q(bdata2[29]),
        .R(SR));
  FDSE \bdata2_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[2]),
        .Q(bdata2[2]),
        .S(SR));
  FDSE \bdata2_reg[30] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[30]),
        .Q(bdata2[30]),
        .S(SR));
  FDRE \bdata2_reg[31] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[31]),
        .Q(bdata2[31]),
        .R(SR));
  FDSE \bdata2_reg[32] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[32]),
        .Q(bdata2[32]),
        .S(SR));
  FDRE \bdata2_reg[33] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[33]),
        .Q(bdata2[33]),
        .R(SR));
  FDSE \bdata2_reg[34] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[34]),
        .Q(bdata2[34]),
        .S(SR));
  FDRE \bdata2_reg[35] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[35]),
        .Q(bdata2[35]),
        .R(SR));
  FDSE \bdata2_reg[36] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[36]),
        .Q(bdata2[36]),
        .S(SR));
  FDRE \bdata2_reg[37] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[37]),
        .Q(bdata2[37]),
        .R(SR));
  FDSE \bdata2_reg[38] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[38]),
        .Q(bdata2[38]),
        .S(SR));
  FDRE \bdata2_reg[39] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[39]),
        .Q(bdata2[39]),
        .R(SR));
  FDRE \bdata2_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[3]),
        .Q(bdata2[3]),
        .R(SR));
  FDSE \bdata2_reg[40] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[40]),
        .Q(bdata2[40]),
        .S(SR));
  FDRE \bdata2_reg[41] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[41]),
        .Q(bdata2[41]),
        .R(SR));
  FDSE \bdata2_reg[42] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[42]),
        .Q(bdata2[42]),
        .S(SR));
  FDRE \bdata2_reg[43] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[43]),
        .Q(bdata2[43]),
        .R(SR));
  FDSE \bdata2_reg[44] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[44]),
        .Q(bdata2[44]),
        .S(SR));
  FDRE \bdata2_reg[45] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[45]),
        .Q(bdata2[45]),
        .R(SR));
  FDSE \bdata2_reg[46] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[46]),
        .Q(bdata2[46]),
        .S(SR));
  FDRE \bdata2_reg[47] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[47]),
        .Q(bdata2[47]),
        .R(SR));
  FDSE \bdata2_reg[48] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[48]),
        .Q(bdata2[48]),
        .S(SR));
  FDRE \bdata2_reg[49] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[49]),
        .Q(bdata2[49]),
        .R(SR));
  FDSE \bdata2_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[4]),
        .Q(bdata2[4]),
        .S(SR));
  FDSE \bdata2_reg[50] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[50]),
        .Q(bdata2[50]),
        .S(SR));
  FDRE \bdata2_reg[51] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[51]),
        .Q(bdata2[51]),
        .R(SR));
  FDSE \bdata2_reg[52] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[52]),
        .Q(bdata2[52]),
        .S(SR));
  FDRE \bdata2_reg[53] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[53]),
        .Q(bdata2[53]),
        .R(SR));
  FDSE \bdata2_reg[54] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[54]),
        .Q(bdata2[54]),
        .S(SR));
  FDRE \bdata2_reg[55] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[55]),
        .Q(bdata2[55]),
        .R(SR));
  FDSE \bdata2_reg[56] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[56]),
        .Q(bdata2[56]),
        .S(SR));
  FDRE \bdata2_reg[57] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[57]),
        .Q(bdata2[57]),
        .R(SR));
  FDSE \bdata2_reg[58] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[58]),
        .Q(bdata2[58]),
        .S(SR));
  FDRE \bdata2_reg[59] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[59]),
        .Q(bdata2[59]),
        .R(SR));
  FDRE \bdata2_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[5]),
        .Q(bdata2[5]),
        .R(SR));
  FDSE \bdata2_reg[60] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[60]),
        .Q(bdata2[60]),
        .S(SR));
  FDRE \bdata2_reg[61] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[61]),
        .Q(bdata2[61]),
        .R(SR));
  FDSE \bdata2_reg[62] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[62]),
        .Q(bdata2[62]),
        .S(SR));
  FDSE \bdata2_reg[63] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[63]),
        .Q(bdata2[63]),
        .S(SR));
  FDSE \bdata2_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[6]),
        .Q(bdata2[6]),
        .S(SR));
  FDRE \bdata2_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[7]),
        .Q(bdata2[7]),
        .R(SR));
  FDSE \bdata2_reg[8] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[8]),
        .Q(bdata2[8]),
        .S(SR));
  FDRE \bdata2_reg[9] 
       (.C(lclk),
        .CE(bcnt0),
        .D(bdata1[9]),
        .Q(bdata2[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT5 #(
    .INIT(32'h0FFFBBBB)) 
    \counter[0]_i_1 
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .I2(counter[0]),
        .I3(\gstate[4]_i_2_n_0 ),
        .I4(rst_),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'h9FFF9F0090009FFF)) 
    \counter[1]_i_1 
       (.I0(counter[1]),
        .I1(counter[0]),
        .I2(\gstate[4]_i_2_n_0 ),
        .I3(rst_),
        .I4(fmac_speed[1]),
        .I5(fmac_speed[0]),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT4 #(
    .INIT(16'hA802)) 
    \counter[2]_i_1 
       (.I0(\counter[8]_i_4_n_0 ),
        .I1(counter[1]),
        .I2(counter[0]),
        .I3(counter[2]),
        .O(p_1_in[2]));
  LUT6 #(
    .INIT(64'h60606F600000FF00)) 
    \counter[3]_i_1 
       (.I0(\counter[3]_i_2_n_0 ),
        .I1(counter[3]),
        .I2(\gstate[4]_i_2_n_0 ),
        .I3(fmac_speed[1]),
        .I4(fmac_speed[0]),
        .I5(rst_),
        .O(p_1_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \counter[3]_i_2 
       (.I0(counter[1]),
        .I1(counter[0]),
        .I2(counter[2]),
        .O(\counter[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE000000010000)) 
    \counter[4]_i_1 
       (.I0(counter[3]),
        .I1(counter[2]),
        .I2(counter[0]),
        .I3(counter[1]),
        .I4(\counter[8]_i_4_n_0 ),
        .I5(counter[4]),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'h9FFF9F0090009FFF)) 
    \counter[5]_i_1 
       (.I0(\counter[5]_i_2_n_0 ),
        .I1(counter[5]),
        .I2(\gstate[4]_i_2_n_0 ),
        .I3(rst_),
        .I4(fmac_speed[1]),
        .I5(fmac_speed[0]),
        .O(p_1_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \counter[5]_i_2 
       (.I0(counter[1]),
        .I1(counter[0]),
        .I2(counter[2]),
        .I3(counter[3]),
        .I4(counter[4]),
        .O(\counter[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9FFF9F0090009FFF)) 
    \counter[6]_i_1 
       (.I0(\counter[6]_i_2_n_0 ),
        .I1(counter[6]),
        .I2(\gstate[4]_i_2_n_0 ),
        .I3(rst_),
        .I4(fmac_speed[1]),
        .I5(fmac_speed[0]),
        .O(p_1_in[6]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \counter[6]_i_2 
       (.I0(counter[4]),
        .I1(counter[3]),
        .I2(counter[2]),
        .I3(counter[0]),
        .I4(counter[1]),
        .I5(counter[5]),
        .O(\counter[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE000000010000)) 
    \counter[7]_i_1 
       (.I0(counter[5]),
        .I1(\counter[7]_i_2_n_0 ),
        .I2(counter[4]),
        .I3(counter[6]),
        .I4(\counter[8]_i_4_n_0 ),
        .I5(counter[7]),
        .O(p_1_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \counter[7]_i_2 
       (.I0(counter[3]),
        .I1(counter[2]),
        .I2(counter[0]),
        .I3(counter[1]),
        .O(\counter[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hBF)) 
    \counter[8]_i_1 
       (.I0(fmac_speed[1]),
        .I1(fmac_speed[0]),
        .I2(rst_),
        .O(\counter[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE010)) 
    \counter[8]_i_2 
       (.I0(\counter[8]_i_3_n_0 ),
        .I1(counter[7]),
        .I2(\counter[8]_i_4_n_0 ),
        .I3(counter[8]),
        .O(p_1_in[8]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \counter[8]_i_3 
       (.I0(counter[5]),
        .I1(\counter[8]_i_5_n_0 ),
        .I2(counter[2]),
        .I3(counter[3]),
        .I4(counter[4]),
        .I5(counter[6]),
        .O(\counter[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \counter[8]_i_4 
       (.I0(rst_),
        .I1(\gstate[4]_i_2_n_0 ),
        .O(\counter[8]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \counter[8]_i_5 
       (.I0(counter[0]),
        .I1(counter[1]),
        .O(\counter[8]_i_5_n_0 ));
  FDRE \counter_reg[0] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[0]),
        .Q(counter[0]),
        .R(1'b0));
  FDRE \counter_reg[1] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[1]),
        .Q(counter[1]),
        .R(1'b0));
  FDRE \counter_reg[2] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[2]),
        .Q(counter[2]),
        .R(1'b0));
  FDRE \counter_reg[3] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[3]),
        .Q(counter[3]),
        .R(1'b0));
  FDRE \counter_reg[4] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[4]),
        .Q(counter[4]),
        .R(1'b0));
  FDRE \counter_reg[5] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[5]),
        .Q(counter[5]),
        .R(1'b0));
  FDRE \counter_reg[6] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[6]),
        .Q(counter[6]),
        .R(1'b0));
  FDRE \counter_reg[7] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[7]),
        .Q(counter[7]),
        .R(1'b0));
  FDRE \counter_reg[8] 
       (.C(lclk),
        .CE(\counter[8]_i_1_n_0 ),
        .D(p_1_in[8]),
        .Q(counter[8]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFDFDDDDDDDDDDDD)) 
    crc_clr__i_1
       (.I0(rst_),
        .I1(crc_clr__i_2_n_0),
        .I2(fmac_speed[0]),
        .I3(fmac_speed[1]),
        .I4(pulse_0),
        .I5(st_GET_WAIT1),
        .O(crc_clr__i_1_n_0));
  LUT6 #(
    .INIT(64'h0333777700004444)) 
    crc_clr__i_2
       (.I0(\state_reg_n_0_[0] ),
        .I1(mode_1G),
        .I2(st_DAT_7),
        .I3(pulse_0),
        .I4(st_TX_CRC),
        .I5(crc_clr_),
        .O(crc_clr__i_2_n_0));
  FDRE crc_clr__reg
       (.C(lclk),
        .CE(1'b1),
        .D(crc_clr__i_1_n_0),
        .Q(crc_clr_),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6F6F6F606060606F)) 
    \crc_cnt[10]_i_1 
       (.I0(\rbytes_reg[9]_0 ),
        .I1(\rbytes_reg[15] [10]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(crc_cnt[9]),
        .I4(\crc_cnt[10]_i_3_n_0 ),
        .I5(crc_cnt[10]),
        .O(\crc_cnt[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \crc_cnt[10]_i_3 
       (.I0(Q[1]),
        .I1(crc_cnt[5]),
        .I2(Q[0]),
        .I3(crc_cnt[4]),
        .I4(crc_cnt[6]),
        .I5(crc_cnt[8]),
        .O(\crc_cnt[10]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[11]_i_1 
       (.I0(\rbytes_reg[10]_0 ),
        .I1(\rbytes_reg[15] [11]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(\crc_cnt[11]_i_2_n_0 ),
        .I4(crc_cnt[11]),
        .O(\crc_cnt[11]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \crc_cnt[11]_i_2 
       (.I0(crc_cnt[9]),
        .I1(\crc_cnt[10]_i_3_n_0 ),
        .I2(crc_cnt[10]),
        .O(\crc_cnt[11]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \crc_cnt[12]_i_3 
       (.I0(crc_cnt[10]),
        .I1(\crc_cnt[10]_i_3_n_0 ),
        .I2(crc_cnt[9]),
        .I3(crc_cnt[11]),
        .O(\crc_cnt_reg[12]_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[13]_i_1 
       (.I0(\rbytes_reg[12]_0 ),
        .I1(\rbytes_reg[15] [13]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(\crc_cnt[13]_i_3_n_0 ),
        .I4(crc_cnt[13]),
        .O(\crc_cnt[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \crc_cnt[13]_i_3 
       (.I0(crc_cnt[11]),
        .I1(crc_cnt[9]),
        .I2(\crc_cnt[10]_i_3_n_0 ),
        .I3(crc_cnt[10]),
        .I4(Q[2]),
        .O(\crc_cnt[13]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[14]_i_1 
       (.I0(\rbytes_reg[13]_0 ),
        .I1(\rbytes_reg[15] [14]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(\crc_cnt[15]_i_5_n_0 ),
        .I4(crc_cnt[14]),
        .O(\crc_cnt[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE0EEE0E0)) 
    \crc_cnt[15]_i_1 
       (.I0(st_TX_DAT),
        .I1(st_GET_WAIT1),
        .I2(pulse_0),
        .I3(fmac_speed[1]),
        .I4(fmac_speed[0]),
        .O(\crc_cnt[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hBBB8888B)) 
    \crc_cnt[15]_i_2 
       (.I0(crc_cnt20_in),
        .I1(\crc_cnt_reg[4]_0 ),
        .I2(crc_cnt[14]),
        .I3(\crc_cnt[15]_i_5_n_0 ),
        .I4(crc_cnt[15]),
        .O(\crc_cnt[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT4 #(
    .INIT(16'hF200)) 
    \crc_cnt[15]_i_4 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(pulse_0),
        .I3(st_GET_WAIT1),
        .O(\crc_cnt_reg[4]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \crc_cnt[15]_i_5 
       (.I0(Q[2]),
        .I1(crc_cnt[10]),
        .I2(\crc_cnt[10]_i_3_n_0 ),
        .I3(crc_cnt[9]),
        .I4(crc_cnt[11]),
        .I5(crc_cnt[13]),
        .O(\crc_cnt[15]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[4]_i_1 
       (.I0(\rbytes_reg[3] ),
        .I1(\rbytes_reg[15] [4]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(Q[0]),
        .I4(crc_cnt[4]),
        .O(\crc_cnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6F6F6F606060606F)) 
    \crc_cnt[5]_i_1 
       (.I0(\rbytes_reg[4]_0 ),
        .I1(\rbytes_reg[15] [5]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(crc_cnt[4]),
        .I4(Q[0]),
        .I5(crc_cnt[5]),
        .O(\crc_cnt[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[6]_i_1 
       (.I0(\rbytes_reg[5]_0 ),
        .I1(\rbytes_reg[15] [6]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(\crc_cnt[6]_i_2_n_0 ),
        .I4(crc_cnt[6]),
        .O(\crc_cnt[6]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \crc_cnt[6]_i_2 
       (.I0(crc_cnt[4]),
        .I1(Q[0]),
        .I2(crc_cnt[5]),
        .O(\crc_cnt[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \crc_cnt[7]_i_3 
       (.I0(crc_cnt[5]),
        .I1(Q[0]),
        .I2(crc_cnt[4]),
        .I3(crc_cnt[6]),
        .O(\crc_cnt_reg[7]_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[8]_i_1 
       (.I0(\rbytes_reg[7]_0 ),
        .I1(\rbytes_reg[15] [8]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(\crc_cnt[8]_i_3_n_0 ),
        .I4(crc_cnt[8]),
        .O(\crc_cnt[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \crc_cnt[8]_i_3 
       (.I0(crc_cnt[6]),
        .I1(crc_cnt[4]),
        .I2(Q[0]),
        .I3(crc_cnt[5]),
        .I4(Q[1]),
        .O(\crc_cnt[8]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h6F60606F)) 
    \crc_cnt[9]_i_1 
       (.I0(\rbytes_reg[8]_0 ),
        .I1(\rbytes_reg[15] [9]),
        .I2(\crc_cnt_reg[4]_0 ),
        .I3(\crc_cnt[10]_i_3_n_0 ),
        .I4(crc_cnt[9]),
        .O(\crc_cnt[9]_i_1_n_0 ));
  FDRE \crc_cnt_reg[10] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[10]_i_1_n_0 ),
        .Q(crc_cnt[10]),
        .R(SR));
  FDRE \crc_cnt_reg[11] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[11]_i_1_n_0 ),
        .Q(crc_cnt[11]),
        .R(SR));
  FDRE \crc_cnt_reg[12] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\rbytes_reg[11]_0 [2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \crc_cnt_reg[13] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[13]_i_1_n_0 ),
        .Q(crc_cnt[13]),
        .R(SR));
  FDRE \crc_cnt_reg[14] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[14]_i_1_n_0 ),
        .Q(crc_cnt[14]),
        .R(SR));
  FDRE \crc_cnt_reg[15] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[15]_i_2_n_0 ),
        .Q(crc_cnt[15]),
        .R(SR));
  FDRE \crc_cnt_reg[3] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\rbytes_reg[11]_0 [0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \crc_cnt_reg[4] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[4]_i_1_n_0 ),
        .Q(crc_cnt[4]),
        .R(SR));
  FDRE \crc_cnt_reg[5] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[5]_i_1_n_0 ),
        .Q(crc_cnt[5]),
        .R(SR));
  FDRE \crc_cnt_reg[6] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[6]_i_1_n_0 ),
        .Q(crc_cnt[6]),
        .R(SR));
  FDRE \crc_cnt_reg[7] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\rbytes_reg[11]_0 [1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \crc_cnt_reg[8] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[8]_i_1_n_0 ),
        .Q(crc_cnt[8]),
        .R(SR));
  FDRE \crc_cnt_reg[9] 
       (.C(lclk),
        .CE(\crc_cnt[15]_i_1_n_0 ),
        .D(\crc_cnt[9]_i_1_n_0 ),
        .Q(crc_cnt[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFF07F7FFFFFFFF)) 
    crc_last__i_1
       (.I0(st_DAT_5),
        .I1(pulse_1),
        .I2(mode_1G),
        .I3(st_DAT_4),
        .I4(crc_cnt[15]),
        .I5(p_0_in11_in),
        .O(crc_last__i_1_n_0));
  FDSE crc_last__reg
       (.C(lclk),
        .CE(1'b1),
        .D(crc_last__i_1_n_0),
        .Q(crc_last_),
        .S(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFF04F7F7F7)) 
    crc_we__i_1
       (.I0(st_DAT_4),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .I3(st_DAT_5),
        .I4(pulse_1),
        .I5(crc_cnt[15]),
        .O(crc_we__i_1_n_0));
  FDSE crc_we__reg
       (.C(lclk),
        .CE(1'b1),
        .D(crc_we__i_1_n_0),
        .Q(crc_we_),
        .S(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000020)) 
    cts_i_1
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(cts_i_2_n_0),
        .I3(idle3[0]),
        .I4(idle3[2]),
        .I5(cts_i_3_n_0),
        .O(cts_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    cts_i_2
       (.I0(idle3[4]),
        .I1(idle3[3]),
        .I2(idle3[6]),
        .I3(idle3[5]),
        .I4(idle3[7]),
        .I5(\gstate_reg_n_0_[0] ),
        .O(cts_i_2_n_0));
  LUT6 #(
    .INIT(64'h1000101000000000)) 
    cts_i_3
       (.I0(idle2[2]),
        .I1(idle2[0]),
        .I2(pulse_1),
        .I3(fmac_speed[1]),
        .I4(fmac_speed[0]),
        .I5(cts_i_4_n_0),
        .O(cts_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    cts_i_4
       (.I0(idle2[4]),
        .I1(idle2[3]),
        .I2(idle2[6]),
        .I3(idle2[5]),
        .I4(idle2[7]),
        .I5(\gstate_reg_n_0_[0] ),
        .O(cts_i_4_n_0));
  FDRE cts_reg
       (.C(lclk),
        .CE(1'b1),
        .D(cts_i_1_n_0),
        .Q(cts_1g),
        .R(SR));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gige_crc32x64 gige_crc32x64
       (.D(p_2_in),
        .Q(st_DAT_6),
        .bcnt0(bcnt0),
        .\bdata2_reg[63] (bdata2),
        .crc_clr_(crc_clr_),
        .\crc_cnt_reg[15] (crc_cnt[15]),
        .crc_last_(crc_last_),
        .crc_we_(crc_we_),
        .fmac_speed(fmac_speed),
        .insert_crc(insert_crc),
        .lclk(lclk),
        .mode_1G(mode_1G),
        .\new_crc_reg[0]_0 (SR),
        .\pdin_reg[63] (pdin),
        .pulse_0(pulse_0),
        .pulse_1(pulse_1),
        .\rbytes_reg_reg[0]_rep (\bdin_reg[24] ),
        .\rbytes_reg_reg[0]_rep__0 (\new_crc_reg[21] ),
        .\rbytes_reg_reg[0]_rep__1 (\rbytes_reg_reg[0]_rep__1_n_0 ),
        .\rbytes_reg_reg[0]_rep__1_0 (\txd[31]_i_2_n_0 ),
        .\rbytes_reg_reg[0]_rep__1_1 (\txd[7]_i_2_n_0 ),
        .\rbytes_reg_reg[1]_rep (\bdin_reg[47] ),
        .\rbytes_reg_reg[1]_rep__0 (\txd_reg[27]_0 ),
        .\rbytes_reg_reg[1]_rep__0_0 (\txd[35]_i_4_n_0 ),
        .\rbytes_reg_reg[2] ({\txd_reg[48]_0 ,rbytes_reg[1]}),
        .\rbytes_reg_reg[2]_0 (\txd[31]_i_3_n_0 ),
        .\rbytes_reg_reg[2]_1 (D),
        .rst_(rst_),
        .txd1(txd1),
        .\wcnt_reg[15] (p_0_in11_in),
        .\wdata_reg[10] (\wdata_reg[10] ),
        .\wdata_reg[11] (\wdata_reg[11] ),
        .\wdata_reg[12] (\wdata_reg[12] ),
        .\wdata_reg[13] (\wdata_reg[13] ),
        .\wdata_reg[14] (\wdata_reg[14] ),
        .\wdata_reg[15] (\wdata_reg[15] ),
        .\wdata_reg[16] (\wdata_reg[16] ),
        .\wdata_reg[16]_0 (\wdata_reg[16]_0 ),
        .\wdata_reg[17] (\wdata_reg[17] ),
        .\wdata_reg[17]_0 (\wdata_reg[17]_0 ),
        .\wdata_reg[18] (\wdata_reg[18] ),
        .\wdata_reg[18]_0 (\wdata_reg[18]_0 ),
        .\wdata_reg[19] (\wdata_reg[19] ),
        .\wdata_reg[19]_0 (\wdata_reg[19]_0 ),
        .\wdata_reg[20] (\wdata_reg[20] ),
        .\wdata_reg[20]_0 (\wdata_reg[20]_0 ),
        .\wdata_reg[21] (\wdata_reg[21] ),
        .\wdata_reg[21]_0 (\wdata_reg[21]_0 ),
        .\wdata_reg[22] (\wdata_reg[22] ),
        .\wdata_reg[22]_0 (\wdata_reg[22]_0 ),
        .\wdata_reg[23] (\wdata_reg[23] ),
        .\wdata_reg[23]_0 (\wdata_reg[23]_0 ),
        .\wdata_reg[24] (\wdata_reg[24] ),
        .\wdata_reg[25] (\wdata_reg[25] ),
        .\wdata_reg[26] (\wdata_reg[26] ),
        .\wdata_reg[27] (\wdata_reg[27] ),
        .\wdata_reg[28] (\wdata_reg[28] ),
        .\wdata_reg[29] (\wdata_reg[29] ),
        .\wdata_reg[30] (\wdata_reg[30] ),
        .\wdata_reg[31] (\wdata_reg[31] ),
        .\wdata_reg[32] (\wdata_reg[32] ),
        .\wdata_reg[33] (\wdata_reg[33] ),
        .\wdata_reg[34] (\wdata_reg[34] ),
        .\wdata_reg[35] (\wdata_reg[35] ),
        .\wdata_reg[36] (\wdata_reg[36] ),
        .\wdata_reg[37] (\wdata_reg[37] ),
        .\wdata_reg[38] (\wdata_reg[38] ),
        .\wdata_reg[39] (\wdata_reg[39] ),
        .\wdata_reg[55] (\wdata_reg[63] [55:0]),
        .\wdata_reg[8] (\wdata_reg[8] ),
        .\wdata_reg[9] (\wdata_reg[9] ));
  LUT6 #(
    .INIT(64'hFFFFFFFF30202020)) 
    gmii_start_i_1
       (.I0(st_GET_WAIT2),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .I3(st_DAT_6),
        .I4(st_WAIT_S),
        .I5(gmii_start_i_2_n_0),
        .O(gmii_start_i_1_n_0));
  LUT6 #(
    .INIT(64'hF8000000F800F800)) 
    gmii_start_i_2
       (.I0(st_TX_CRC),
        .I1(st_DAT_7),
        .I2(st_TX_DAT),
        .I3(pulse_1),
        .I4(fmac_speed[1]),
        .I5(fmac_speed[0]),
        .O(gmii_start_i_2_n_0));
  FDRE gmii_start_reg
       (.C(lclk),
        .CE(1'b1),
        .D(gmii_start_i_1_n_0),
        .Q(gmii_start),
        .R(SR));
  LUT6 #(
    .INIT(64'h0A0A0F0B0A0A0F08)) 
    gmii_tx_en_i_1
       (.I0(gmii_tx_en_i_2_n_0),
        .I1(gmii_tx_en_i_3_n_0),
        .I2(gmii_tx_en_i_4_n_0),
        .I3(gmii_tx_en_i_5_n_0),
        .I4(mode_1G),
        .I5(gmii_tx_en),
        .O(gmii_tx_en_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT3 #(
    .INIT(8'h02)) 
    gmii_tx_en_i_2
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(gmii_tx_en_i_6_n_0),
        .O(gmii_tx_en_i_2_n_0));
  LUT6 #(
    .INIT(64'h0808080808080800)) 
    gmii_tx_en_i_3
       (.I0(pulse_0),
        .I1(gmii_tx_en_i_6_n_0),
        .I2(\bcnt_reg_n_0_[0] ),
        .I3(st_WAIT_S),
        .I4(st_TX_CRC),
        .I5(\state_reg_n_0_[0] ),
        .O(gmii_tx_en_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    gmii_tx_en_i_4
       (.I0(\bcnt[15]_i_9_n_0 ),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(\gstate_reg_n_0_[3] ),
        .I3(st_DAT_4),
        .I4(\gstate_reg_n_0_[4] ),
        .I5(\bcnt[15]_i_4_n_0 ),
        .O(gmii_tx_en_i_4_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    gmii_tx_en_i_5
       (.I0(st_DAT_0),
        .I1(pulse_0),
        .I2(gmii_tx_en35_in),
        .O(gmii_tx_en_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    gmii_tx_en_i_6
       (.I0(gmii_tx_en_i_7_n_0),
        .I1(gmii_tx_en_i_8_n_0),
        .I2(\bcnt_reg_n_0_[15] ),
        .I3(\bcnt_reg_n_0_[14] ),
        .I4(\bcnt_reg_n_0_[12] ),
        .I5(\bcnt_reg_n_0_[13] ),
        .O(gmii_tx_en_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    gmii_tx_en_i_7
       (.I0(\bcnt_reg_n_0_[1] ),
        .I1(\bcnt_reg_n_0_[3] ),
        .I2(\bcnt_reg_n_0_[2] ),
        .I3(gmii_tx_en_i_9_n_0),
        .I4(\bcnt_reg_n_0_[7] ),
        .I5(\bcnt_reg_n_0_[6] ),
        .O(gmii_tx_en_i_7_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    gmii_tx_en_i_8
       (.I0(\bcnt_reg_n_0_[10] ),
        .I1(\bcnt_reg_n_0_[11] ),
        .I2(\bcnt_reg_n_0_[8] ),
        .I3(\bcnt_reg_n_0_[9] ),
        .O(gmii_tx_en_i_8_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    gmii_tx_en_i_9
       (.I0(\bcnt_reg_n_0_[5] ),
        .I1(\bcnt_reg_n_0_[4] ),
        .O(gmii_tx_en_i_9_n_0));
  FDRE gmii_tx_en_reg
       (.C(lclk),
        .CE(1'b1),
        .D(gmii_tx_en_i_1_n_0),
        .Q(gmii_tx_en),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    gmii_txc_i_1
       (.I0(gmii_txc_i_2_n_0),
        .I1(txc[6]),
        .I2(st_DAT_6),
        .I3(txc[5]),
        .I4(st_DAT_5),
        .I5(gmii_txc_i_3_n_0),
        .O(gmii_txc_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF88F88888)) 
    gmii_txc_i_2
       (.I0(txc[2]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(gmii_txc_i_4_n_0),
        .I3(idle1[0]),
        .I4(idle1[2]),
        .I5(gmii_txc_i_5_n_0),
        .O(gmii_txc_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    gmii_txc_i_3
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(txc[3]),
        .I2(st_DAT_4),
        .I3(txc[4]),
        .I4(txc[7]),
        .I5(st_DAT_7),
        .O(gmii_txc_i_3_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    gmii_txc_i_4
       (.I0(idle1[3]),
        .I1(idle1[4]),
        .I2(idle1[5]),
        .I3(idle1[6]),
        .I4(\gstate_reg_n_0_[0] ),
        .I5(idle1[7]),
        .O(gmii_txc_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    gmii_txc_i_5
       (.I0(txc[1]),
        .I1(st_DAT_1),
        .I2(txc[0]),
        .I3(st_DAT_0),
        .O(gmii_txc_i_5_n_0));
  FDSE gmii_txc_reg
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(gmii_txc_i_1_n_0),
        .Q(in0),
        .S(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[0]_i_1 
       (.I0(in31[0]),
        .I1(st_DAT_6),
        .I2(in30[0]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[0]_i_2_n_0 ),
        .I5(\gmii_txd[0]_i_3_n_0 ),
        .O(\gmii_txd[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[0]_i_2 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[0]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[0] ),
        .I4(in32[0]),
        .I5(st_DAT_7),
        .O(\gmii_txd[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[0]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[0]),
        .I2(st_DAT_4),
        .I3(in29[0]),
        .I4(\gmii_txd[0]_i_4_n_0 ),
        .O(\gmii_txd[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[0]_i_4 
       (.I0(in27[0]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[0]),
        .I3(st_DAT_1),
        .O(\gmii_txd[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \gmii_txd[1]_i_1 
       (.I0(\gmii_txd[1]_i_2_n_0 ),
        .I1(\txd_reg_n_0_[1] ),
        .I2(st_DAT_0),
        .I3(in32[1]),
        .I4(st_DAT_7),
        .I5(\gmii_txd[1]_i_3_n_0 ),
        .O(\gmii_txd[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[1]_i_2 
       (.I0(in31[1]),
        .I1(st_DAT_6),
        .I2(in30[1]),
        .I3(st_DAT_5),
        .O(\gmii_txd[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[1]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[1]),
        .I2(st_DAT_4),
        .I3(in29[1]),
        .I4(\gmii_txd[1]_i_4_n_0 ),
        .O(\gmii_txd[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[1]_i_4 
       (.I0(in27[1]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[1]),
        .I3(st_DAT_1),
        .O(\gmii_txd[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[2]_i_1 
       (.I0(in31[2]),
        .I1(st_DAT_6),
        .I2(in30[2]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[2]_i_2_n_0 ),
        .I5(\gmii_txd[2]_i_3_n_0 ),
        .O(\gmii_txd[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[2]_i_2 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[2]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[2] ),
        .I4(in32[2]),
        .I5(st_DAT_7),
        .O(\gmii_txd[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[2]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[2]),
        .I2(st_DAT_4),
        .I3(in29[2]),
        .I4(\gmii_txd[2]_i_4_n_0 ),
        .O(\gmii_txd[2]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[2]_i_4 
       (.I0(in27[2]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[2]),
        .I3(st_DAT_1),
        .O(\gmii_txd[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[3]_i_1 
       (.I0(in31[3]),
        .I1(st_DAT_6),
        .I2(in30[3]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[3]_i_2_n_0 ),
        .I5(\gmii_txd[3]_i_3_n_0 ),
        .O(\gmii_txd[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[3]_i_2 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[3]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[3] ),
        .I4(in32[3]),
        .I5(st_DAT_7),
        .O(\gmii_txd[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[3]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[3]),
        .I2(st_DAT_4),
        .I3(in29[3]),
        .I4(\gmii_txd[3]_i_4_n_0 ),
        .O(\gmii_txd[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[3]_i_4 
       (.I0(in27[3]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[3]),
        .I3(st_DAT_1),
        .O(\gmii_txd[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[4]_i_1 
       (.I0(in31[4]),
        .I1(st_DAT_6),
        .I2(in30[4]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[4]_i_2_n_0 ),
        .I5(\gmii_txd[4]_i_3_n_0 ),
        .O(\gmii_txd[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[4]_i_2 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[4]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[4] ),
        .I4(in32[4]),
        .I5(st_DAT_7),
        .O(\gmii_txd[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[4]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[4]),
        .I2(st_DAT_4),
        .I3(in29[4]),
        .I4(\gmii_txd[4]_i_4_n_0 ),
        .O(\gmii_txd[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[4]_i_4 
       (.I0(in27[4]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[4]),
        .I3(st_DAT_1),
        .O(\gmii_txd[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[5]_i_1 
       (.I0(in31[5]),
        .I1(st_DAT_6),
        .I2(in30[5]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[5]_i_2_n_0 ),
        .I5(\gmii_txd[5]_i_3_n_0 ),
        .O(\gmii_txd[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[5]_i_2 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[5]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[5] ),
        .I4(in32[5]),
        .I5(st_DAT_7),
        .O(\gmii_txd[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[5]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[5]),
        .I2(st_DAT_4),
        .I3(in29[5]),
        .I4(\gmii_txd[5]_i_4_n_0 ),
        .O(\gmii_txd[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[5]_i_4 
       (.I0(in27[5]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[5]),
        .I3(st_DAT_1),
        .O(\gmii_txd[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[6]_i_1 
       (.I0(in31[6]),
        .I1(st_DAT_6),
        .I2(in30[6]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[6]_i_2_n_0 ),
        .I5(\gmii_txd[6]_i_3_n_0 ),
        .O(\gmii_txd[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[6]_i_2 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[6]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[6] ),
        .I4(in32[6]),
        .I5(st_DAT_7),
        .O(\gmii_txd[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[6]_i_3 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[6]),
        .I2(st_DAT_4),
        .I3(in29[6]),
        .I4(\gmii_txd[6]_i_4_n_0 ),
        .O(\gmii_txd[6]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[6]_i_4 
       (.I0(in27[6]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[6]),
        .I3(st_DAT_1),
        .O(\gmii_txd[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000A8A8AA00A8A8)) 
    \gmii_txd[7]_i_1 
       (.I0(bcnt0),
        .I1(\gmii_txd[7]_i_3_n_0 ),
        .I2(\gmii_txd[7]_i_4_n_0 ),
        .I3(\gmii_txd[7]_i_5_n_0 ),
        .I4(\gstate_reg_n_0_[0] ),
        .I5(st_DAT_0),
        .O(\gmii_txd[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    \gmii_txd[7]_i_2 
       (.I0(in31[7]),
        .I1(st_DAT_6),
        .I2(in30[7]),
        .I3(st_DAT_5),
        .I4(\gmii_txd[7]_i_6_n_0 ),
        .I5(\gmii_txd[7]_i_7_n_0 ),
        .O(\gmii_txd[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000016)) 
    \gmii_txd[7]_i_3 
       (.I0(st_DAT_0),
        .I1(st_DAT_1),
        .I2(\gstate_reg_n_0_[3] ),
        .I3(\bcnt[15]_i_9_n_0 ),
        .I4(\gstate_reg_n_0_[4] ),
        .I5(st_DAT_4),
        .O(\gmii_txd[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \gmii_txd[7]_i_4 
       (.I0(\gstate_reg_n_0_[3] ),
        .I1(st_DAT_0),
        .I2(st_DAT_1),
        .I3(\bcnt[15]_i_13_n_0 ),
        .O(\gmii_txd[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \gmii_txd[7]_i_5 
       (.I0(\gstate_reg_n_0_[3] ),
        .I1(st_DAT_1),
        .I2(\bcnt[15]_i_9_n_0 ),
        .I3(\gstate_reg_n_0_[4] ),
        .I4(st_DAT_4),
        .O(\gmii_txd[7]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gmii_txd[7]_i_6 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(idle1[7]),
        .I2(st_DAT_0),
        .I3(\txd_reg_n_0_[7] ),
        .I4(in32[7]),
        .I5(st_DAT_7),
        .O(\gmii_txd[7]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \gmii_txd[7]_i_7 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(in28[7]),
        .I2(st_DAT_4),
        .I3(in29[7]),
        .I4(\gmii_txd[7]_i_8_n_0 ),
        .O(\gmii_txd[7]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \gmii_txd[7]_i_8 
       (.I0(in27[7]),
        .I1(\gstate_reg_n_0_[3] ),
        .I2(in26[7]),
        .I3(st_DAT_1),
        .O(\gmii_txd[7]_i_8_n_0 ));
  FDRE \gmii_txd_reg[0] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[0]_i_1_n_0 ),
        .Q(gmii_txd[0]),
        .R(SR));
  FDRE \gmii_txd_reg[1] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[1]_i_1_n_0 ),
        .Q(gmii_txd[1]),
        .R(SR));
  FDSE \gmii_txd_reg[2] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[2]_i_1_n_0 ),
        .Q(gmii_txd[2]),
        .S(SR));
  FDSE \gmii_txd_reg[3] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[3]_i_1_n_0 ),
        .Q(gmii_txd[3]),
        .S(SR));
  FDSE \gmii_txd_reg[4] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[4]_i_1_n_0 ),
        .Q(gmii_txd[4]),
        .S(SR));
  FDSE \gmii_txd_reg[5] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[5]_i_1_n_0 ),
        .Q(gmii_txd[5]),
        .S(SR));
  FDRE \gmii_txd_reg[6] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[6]_i_1_n_0 ),
        .Q(gmii_txd[6]),
        .R(SR));
  FDSE \gmii_txd_reg[7] 
       (.C(lclk),
        .CE(\gmii_txd[7]_i_1_n_0 ),
        .D(\gmii_txd[7]_i_2_n_0 ),
        .Q(gmii_txd[7]),
        .S(SR));
  LUT5 #(
    .INIT(32'h5540FFFF)) 
    \gstate[0]_i_1 
       (.I0(gmii_start),
        .I1(st_DAT_7),
        .I2(bcnt0),
        .I3(\gstate_reg_n_0_[0] ),
        .I4(\gstate[8]_i_2_n_0 ),
        .O(p_0_in__1[0]));
  LUT6 #(
    .INIT(64'hAA8A0A0AA8880000)) 
    \gstate[1]_i_1 
       (.I0(\gstate[8]_i_2_n_0 ),
        .I1(\gstate_reg_n_0_[0] ),
        .I2(bcnt0),
        .I3(st_DAT_7),
        .I4(gmii_start),
        .I5(st_DAT_0),
        .O(p_0_in__1[1]));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \gstate[2]_i_1 
       (.I0(st_DAT_0),
        .I1(st_DAT_1),
        .I2(\gstate[8]_i_2_n_0 ),
        .I3(bcnt0),
        .O(p_0_in__1[2]));
  LUT6 #(
    .INIT(64'hFF40000040400000)) 
    \gstate[3]_i_1 
       (.I0(mode_1G),
        .I1(\gstate[4]_i_2_n_0 ),
        .I2(\gstate_reg_n_0_[3] ),
        .I3(st_DAT_1),
        .I4(\gstate[8]_i_2_n_0 ),
        .I5(bcnt0),
        .O(p_0_in__1[3]));
  LUT6 #(
    .INIT(64'hF2FF000022220000)) 
    \gstate[4]_i_1 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(bcnt0),
        .I2(mode_1G),
        .I3(\gstate[4]_i_2_n_0 ),
        .I4(\gstate[8]_i_2_n_0 ),
        .I5(\gstate_reg_n_0_[3] ),
        .O(p_0_in__1[4]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gstate[4]_i_2 
       (.I0(\gstate[4]_i_3_n_0 ),
        .I1(counter[4]),
        .I2(counter[2]),
        .I3(counter[5]),
        .I4(counter[6]),
        .O(\gstate[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gstate[4]_i_3 
       (.I0(counter[8]),
        .I1(counter[7]),
        .I2(counter[0]),
        .I3(counter[1]),
        .I4(counter[3]),
        .O(\gstate[4]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT4 #(
    .INIT(16'hA0C0)) 
    \gstate[5]_i_1 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(st_DAT_4),
        .I2(\gstate[8]_i_2_n_0 ),
        .I3(bcnt0),
        .O(p_0_in__1[5]));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT4 #(
    .INIT(16'hA0C0)) 
    \gstate[6]_i_1 
       (.I0(st_DAT_4),
        .I1(st_DAT_5),
        .I2(\gstate[8]_i_2_n_0 ),
        .I3(bcnt0),
        .O(p_0_in__1[6]));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT4 #(
    .INIT(16'hA0C0)) 
    \gstate[7]_i_1 
       (.I0(st_DAT_5),
        .I1(st_DAT_6),
        .I2(\gstate[8]_i_2_n_0 ),
        .I3(bcnt0),
        .O(p_0_in__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT4 #(
    .INIT(16'hA0C0)) 
    \gstate[8]_i_1 
       (.I0(st_DAT_6),
        .I1(st_DAT_7),
        .I2(\gstate[8]_i_2_n_0 ),
        .I3(bcnt0),
        .O(p_0_in__1[8]));
  LUT4 #(
    .INIT(16'h0012)) 
    \gstate[8]_i_2 
       (.I0(\gstate[8]_i_3_n_0 ),
        .I1(\gstate[8]_i_4_n_0 ),
        .I2(\gstate[8]_i_5_n_0 ),
        .I3(\gstate[8]_i_6_n_0 ),
        .O(\gstate[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT4 #(
    .INIT(16'h0116)) 
    \gstate[8]_i_3 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(st_DAT_0),
        .I2(st_DAT_1),
        .I3(\gstate_reg_n_0_[3] ),
        .O(\gstate[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT4 #(
    .INIT(16'hFEE8)) 
    \gstate[8]_i_4 
       (.I0(\gstate_reg_n_0_[0] ),
        .I1(st_DAT_0),
        .I2(st_DAT_1),
        .I3(\gstate_reg_n_0_[3] ),
        .O(\gstate[8]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \gstate[8]_i_5 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(st_DAT_4),
        .I2(st_DAT_5),
        .I3(st_DAT_6),
        .I4(st_DAT_7),
        .O(\gstate[8]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT5 #(
    .INIT(32'hFFFEFEE8)) 
    \gstate[8]_i_6 
       (.I0(\gstate_reg_n_0_[4] ),
        .I1(st_DAT_4),
        .I2(st_DAT_5),
        .I3(st_DAT_6),
        .I4(st_DAT_7),
        .O(\gstate[8]_i_6_n_0 ));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDSE \gstate_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(\gstate_reg_n_0_[0] ),
        .S(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(st_DAT_0),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(st_DAT_1),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(\gstate_reg_n_0_[3] ),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(\gstate_reg_n_0_[4] ),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[5]),
        .Q(st_DAT_4),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[6]),
        .Q(st_DAT_5),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[7]),
        .Q(st_DAT_6),
        .R(SR));
  (* FSM_ENCODED_STATES = "DAT_1:000000100,DAT_6:010000000,DAT_0:000000010,DAT_5:001000000,DAT_3:000010000,DAT_I:000000001,DAT_4:000100000,DAT_2:000001000,DAT_7:100000000" *) 
  FDRE \gstate_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__1[8]),
        .Q(st_DAT_7),
        .R(SR));
  LUT2 #(
    .INIT(4'h7)) 
    \idle1[7]_i_1 
       (.I0(rst_),
        .I1(\gstate_reg_n_0_[0] ),
        .O(idle4));
  FDRE \idle1_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[0]),
        .Q(idle1[0]),
        .R(idle4));
  FDSE \idle1_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[2]),
        .Q(idle1[2]),
        .S(idle4));
  FDSE \idle1_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[3]),
        .Q(idle1[3]),
        .S(idle4));
  FDSE \idle1_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[4]),
        .Q(idle1[4]),
        .S(idle4));
  FDSE \idle1_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[5]),
        .Q(idle1[5]),
        .S(idle4));
  FDRE \idle1_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[6]),
        .Q(idle1[6]),
        .R(idle4));
  FDSE \idle1_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle2[7]),
        .Q(idle1[7]),
        .S(idle4));
  FDSE \idle2_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[0]),
        .Q(idle2[0]),
        .S(idle4));
  FDSE \idle2_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[2]),
        .Q(idle2[2]),
        .S(idle4));
  FDRE \idle2_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[3]),
        .Q(idle2[3]),
        .R(idle4));
  FDRE \idle2_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[4]),
        .Q(idle2[4]),
        .R(idle4));
  FDRE \idle2_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[5]),
        .Q(idle2[5]),
        .R(idle4));
  FDSE \idle2_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[6]),
        .Q(idle2[6]),
        .S(idle4));
  FDSE \idle2_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle3[7]),
        .Q(idle2[7]),
        .S(idle4));
  FDRE \idle3_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[0] ),
        .Q(idle3[0]),
        .R(idle4));
  FDSE \idle3_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[2] ),
        .Q(idle3[2]),
        .S(idle4));
  FDSE \idle3_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[3] ),
        .Q(idle3[3]),
        .S(idle4));
  FDSE \idle3_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[4] ),
        .Q(idle3[4]),
        .S(idle4));
  FDSE \idle3_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[5] ),
        .Q(idle3[5]),
        .S(idle4));
  FDRE \idle3_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[6] ),
        .Q(idle3[6]),
        .R(idle4));
  FDSE \idle3_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\idle4_reg_n_0_[7] ),
        .Q(idle3[7]),
        .S(idle4));
  FDRE \idle4_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[0]),
        .Q(\idle4_reg_n_0_[0] ),
        .R(idle4));
  FDRE \idle4_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[2]),
        .Q(\idle4_reg_n_0_[2] ),
        .R(idle4));
  FDRE \idle4_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[3]),
        .Q(\idle4_reg_n_0_[3] ),
        .R(idle4));
  FDSE \idle4_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[4]),
        .Q(\idle4_reg_n_0_[4] ),
        .S(idle4));
  FDRE \idle4_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[5]),
        .Q(\idle4_reg_n_0_[5] ),
        .R(idle4));
  FDSE \idle4_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[6]),
        .Q(\idle4_reg_n_0_[6] ),
        .S(idle4));
  FDRE \idle4_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(idle1[7]),
        .Q(\idle4_reg_n_0_[7] ),
        .R(idle4));
  LUT6 #(
    .INIT(64'hCACC00000A000000)) 
    insert_crc_i_1
       (.I0(st_DAT_6),
        .I1(pulse_1),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .I4(last_dat_reg_n_0),
        .I5(st_DAT_7),
        .O(insert_crc_i_1_n_0));
  FDRE insert_crc_reg
       (.C(lclk),
        .CE(1'b1),
        .D(insert_crc_i_1_n_0),
        .Q(insert_crc),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFF200000002)) 
    last_dat_i_1
       (.I0(p_0_in11_in),
        .I1(st_TX_CRC),
        .I2(st_WAIT_S),
        .I3(st_GET_WAIT1),
        .I4(last_dat_i_2_n_0),
        .I5(last_dat_reg_n_0),
        .O(last_dat_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT5 #(
    .INIT(32'hFFFFFFD7)) 
    last_dat_i_2
       (.I0(bcnt0),
        .I1(st_TX_DAT),
        .I2(st_TX_CRC),
        .I3(st_GET_WAIT2),
        .I4(\state_reg_n_0_[0] ),
        .O(last_dat_i_2_n_0));
  FDRE last_dat_reg
       (.C(lclk),
        .CE(1'b1),
        .D(last_dat_i_1_n_0),
        .Q(last_dat_reg_n_0),
        .R(SR));
  FDRE \nbytes_reg_reg[10] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [7]),
        .Q(nbytes_reg[10]),
        .R(SR));
  FDRE \nbytes_reg_reg[11] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [8]),
        .Q(nbytes_reg[11]),
        .R(SR));
  FDRE \nbytes_reg_reg[12] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [9]),
        .Q(nbytes_reg[12]),
        .R(SR));
  FDRE \nbytes_reg_reg[13] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [10]),
        .Q(nbytes_reg[13]),
        .R(SR));
  FDRE \nbytes_reg_reg[14] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [11]),
        .Q(nbytes_reg[14]),
        .R(SR));
  FDRE \nbytes_reg_reg[15] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [12]),
        .Q(nbytes_reg[15]),
        .R(SR));
  FDRE \nbytes_reg_reg[3] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [0]),
        .Q(nbytes_reg[3]),
        .R(SR));
  FDRE \nbytes_reg_reg[4] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [1]),
        .Q(nbytes_reg[4]),
        .R(SR));
  FDRE \nbytes_reg_reg[5] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [2]),
        .Q(nbytes_reg[5]),
        .R(SR));
  FDRE \nbytes_reg_reg[6] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [3]),
        .Q(nbytes_reg[6]),
        .R(SR));
  FDRE \nbytes_reg_reg[7] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [4]),
        .Q(nbytes_reg[7]),
        .R(SR));
  FDRE \nbytes_reg_reg[8] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [5]),
        .Q(nbytes_reg[8]),
        .R(SR));
  FDRE \nbytes_reg_reg[9] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[13]_1 [6]),
        .Q(nbytes_reg[9]),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \pdin[63]_i_1 
       (.I0(crc_we_),
        .O(\pdin[63]_i_1_n_0 ));
  FDRE \pdin_reg[10] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [10]),
        .Q(pdin[10]),
        .R(SR));
  FDRE \pdin_reg[11] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [11]),
        .Q(pdin[11]),
        .R(SR));
  FDRE \pdin_reg[12] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [12]),
        .Q(pdin[12]),
        .R(SR));
  FDRE \pdin_reg[13] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [13]),
        .Q(pdin[13]),
        .R(SR));
  FDRE \pdin_reg[14] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [14]),
        .Q(pdin[14]),
        .R(SR));
  FDRE \pdin_reg[15] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [15]),
        .Q(pdin[15]),
        .R(SR));
  FDRE \pdin_reg[16] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [16]),
        .Q(pdin[16]),
        .R(SR));
  FDRE \pdin_reg[17] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [17]),
        .Q(pdin[17]),
        .R(SR));
  FDRE \pdin_reg[18] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [18]),
        .Q(pdin[18]),
        .R(SR));
  FDRE \pdin_reg[19] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [19]),
        .Q(pdin[19]),
        .R(SR));
  FDRE \pdin_reg[20] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [20]),
        .Q(pdin[20]),
        .R(SR));
  FDRE \pdin_reg[21] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [21]),
        .Q(pdin[21]),
        .R(SR));
  FDRE \pdin_reg[22] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [22]),
        .Q(pdin[22]),
        .R(SR));
  FDRE \pdin_reg[23] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [23]),
        .Q(pdin[23]),
        .R(SR));
  FDRE \pdin_reg[24] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [24]),
        .Q(pdin[24]),
        .R(SR));
  FDRE \pdin_reg[25] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [25]),
        .Q(pdin[25]),
        .R(SR));
  FDRE \pdin_reg[26] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [26]),
        .Q(pdin[26]),
        .R(SR));
  FDRE \pdin_reg[27] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [27]),
        .Q(pdin[27]),
        .R(SR));
  FDRE \pdin_reg[28] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [28]),
        .Q(pdin[28]),
        .R(SR));
  FDRE \pdin_reg[29] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [29]),
        .Q(pdin[29]),
        .R(SR));
  FDRE \pdin_reg[30] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [30]),
        .Q(pdin[30]),
        .R(SR));
  FDRE \pdin_reg[31] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [31]),
        .Q(pdin[31]),
        .R(SR));
  FDRE \pdin_reg[32] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [32]),
        .Q(pdin[32]),
        .R(SR));
  FDRE \pdin_reg[33] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [33]),
        .Q(pdin[33]),
        .R(SR));
  FDRE \pdin_reg[34] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [34]),
        .Q(pdin[34]),
        .R(SR));
  FDRE \pdin_reg[35] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [35]),
        .Q(pdin[35]),
        .R(SR));
  FDRE \pdin_reg[36] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [36]),
        .Q(pdin[36]),
        .R(SR));
  FDRE \pdin_reg[37] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [37]),
        .Q(pdin[37]),
        .R(SR));
  FDRE \pdin_reg[38] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [38]),
        .Q(pdin[38]),
        .R(SR));
  FDRE \pdin_reg[39] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [39]),
        .Q(pdin[39]),
        .R(SR));
  FDRE \pdin_reg[40] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [40]),
        .Q(pdin[40]),
        .R(SR));
  FDRE \pdin_reg[41] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [41]),
        .Q(pdin[41]),
        .R(SR));
  FDRE \pdin_reg[42] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [42]),
        .Q(pdin[42]),
        .R(SR));
  FDRE \pdin_reg[43] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [43]),
        .Q(pdin[43]),
        .R(SR));
  FDRE \pdin_reg[44] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [44]),
        .Q(pdin[44]),
        .R(SR));
  FDRE \pdin_reg[45] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [45]),
        .Q(pdin[45]),
        .R(SR));
  FDRE \pdin_reg[46] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [46]),
        .Q(pdin[46]),
        .R(SR));
  FDRE \pdin_reg[47] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [47]),
        .Q(pdin[47]),
        .R(SR));
  FDRE \pdin_reg[48] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [48]),
        .Q(pdin[48]),
        .R(SR));
  FDRE \pdin_reg[49] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [49]),
        .Q(pdin[49]),
        .R(SR));
  FDRE \pdin_reg[50] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [50]),
        .Q(pdin[50]),
        .R(SR));
  FDRE \pdin_reg[51] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [51]),
        .Q(pdin[51]),
        .R(SR));
  FDRE \pdin_reg[52] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [52]),
        .Q(pdin[52]),
        .R(SR));
  FDRE \pdin_reg[53] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [53]),
        .Q(pdin[53]),
        .R(SR));
  FDRE \pdin_reg[54] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [54]),
        .Q(pdin[54]),
        .R(SR));
  FDRE \pdin_reg[55] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [55]),
        .Q(pdin[55]),
        .R(SR));
  FDRE \pdin_reg[56] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [56]),
        .Q(pdin[56]),
        .R(SR));
  FDRE \pdin_reg[57] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [57]),
        .Q(pdin[57]),
        .R(SR));
  FDRE \pdin_reg[58] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [58]),
        .Q(pdin[58]),
        .R(SR));
  FDRE \pdin_reg[59] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [59]),
        .Q(pdin[59]),
        .R(SR));
  FDRE \pdin_reg[60] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [60]),
        .Q(pdin[60]),
        .R(SR));
  FDRE \pdin_reg[61] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [61]),
        .Q(pdin[61]),
        .R(SR));
  FDRE \pdin_reg[62] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [62]),
        .Q(pdin[62]),
        .R(SR));
  FDRE \pdin_reg[63] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [63]),
        .Q(pdin[63]),
        .R(SR));
  FDRE \pdin_reg[8] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [8]),
        .Q(pdin[8]),
        .R(SR));
  FDRE \pdin_reg[9] 
       (.C(lclk),
        .CE(\pdin[63]_i_1_n_0 ),
        .D(\wdata_reg[63] [9]),
        .Q(pdin[9]),
        .R(SR));
  FDRE pulse_0_reg
       (.C(lclk),
        .CE(fmac_speed_0_sn_1),
        .D(pulse_1),
        .Q(pulse_0),
        .R(SR));
  LUT4 #(
    .INIT(16'h0020)) 
    pulse_1_i_2
       (.I0(pulse_1_i_3_n_0),
        .I1(counter[0]),
        .I2(counter[1]),
        .I3(counter[2]),
        .O(p_1_in2_in));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    pulse_1_i_3
       (.I0(counter[5]),
        .I1(counter[6]),
        .I2(counter[3]),
        .I3(counter[4]),
        .I4(counter[8]),
        .I5(counter[7]),
        .O(pulse_1_i_3_n_0));
  FDRE pulse_1_reg
       (.C(lclk),
        .CE(fmac_speed_0_sn_1),
        .D(p_1_in2_in),
        .Q(pulse_1),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[0]" *) 
  FDRE \rbytes_reg_reg[0] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [0]),
        .Q(rbytes_reg[0]),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[0]" *) 
  FDRE \rbytes_reg_reg[0]_rep 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [0]),
        .Q(\bdin_reg[24] ),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[0]" *) 
  FDRE \rbytes_reg_reg[0]_rep__0 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [0]),
        .Q(\new_crc_reg[21] ),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[0]" *) 
  FDRE \rbytes_reg_reg[0]_rep__1 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [0]),
        .Q(\rbytes_reg_reg[0]_rep__1_n_0 ),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[1]" *) 
  FDRE \rbytes_reg_reg[1] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [1]),
        .Q(rbytes_reg[1]),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[1]" *) 
  FDRE \rbytes_reg_reg[1]_rep 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [1]),
        .Q(\bdin_reg[47] ),
        .R(SR));
  (* ORIG_CELL_NAME = "rbytes_reg_reg[1]" *) 
  FDRE \rbytes_reg_reg[1]_rep__0 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [1]),
        .Q(\txd_reg[27]_0 ),
        .R(SR));
  FDRE \rbytes_reg_reg[2] 
       (.C(lclk),
        .CE(bcnt0),
        .D(\rbytes_reg[15] [2]),
        .Q(\txd_reg[48]_0 ),
        .R(SR));
  LUT3 #(
    .INIT(8'h4F)) 
    \state[0]_i_1 
       (.I0(rts),
        .I1(\state[1]_i_2_n_0 ),
        .I2(\state[5]_i_2_n_0 ),
        .O(p_0_in__0[0]));
  LUT5 #(
    .INIT(32'h8080AA80)) 
    \state[1]_i_1 
       (.I0(\state[5]_i_2_n_0 ),
        .I1(\state[1]_i_2_n_0 ),
        .I2(rts),
        .I3(st_GET_WAIT1),
        .I4(bcnt0),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFF0200000)) 
    \state[1]_i_2 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(st_DAT_4),
        .I3(pulse_0),
        .I4(st_TX_CRC),
        .I5(\state_reg_n_0_[0] ),
        .O(\state[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hB080)) 
    \state[2]_i_1 
       (.I0(st_GET_WAIT1),
        .I1(bcnt0),
        .I2(\state[5]_i_2_n_0 ),
        .I3(st_GET_WAIT2),
        .O(p_0_in__0[2]));
  LUT5 #(
    .INIT(32'hA8AAA888)) 
    \state[3]_i_1 
       (.I0(\state[5]_i_2_n_0 ),
        .I1(\state[3]_i_2_n_0 ),
        .I2(st_GET_WAIT2),
        .I3(bcnt0),
        .I4(st_TX_DAT),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'h0040000040404040)) 
    \state[3]_i_2 
       (.I0(last_dat_reg_n_0),
        .I1(st_WAIT_S),
        .I2(st_DAT_6),
        .I3(fmac_speed[1]),
        .I4(fmac_speed[0]),
        .I5(\gstate[4]_i_2_n_0 ),
        .O(\state[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h80808080AA808080)) 
    \state[4]_i_1 
       (.I0(\state[5]_i_2_n_0 ),
        .I1(\state[4]_i_2_n_0 ),
        .I2(st_TX_CRC),
        .I3(st_WAIT_S),
        .I4(last_dat_reg_n_0),
        .I5(\state[5]_i_3_n_0 ),
        .O(p_0_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT4 #(
    .INIT(16'h0FDF)) 
    \state[4]_i_2 
       (.I0(fmac_speed[0]),
        .I1(fmac_speed[1]),
        .I2(st_DAT_4),
        .I3(pulse_0),
        .O(\state[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA808080)) 
    \state[5]_i_1 
       (.I0(\state[5]_i_2_n_0 ),
        .I1(st_TX_DAT),
        .I2(bcnt0),
        .I3(\state[5]_i_3_n_0 ),
        .I4(st_WAIT_S),
        .O(p_0_in__0[5]));
  LUT6 #(
    .INIT(64'h0000000100010116)) 
    \state[5]_i_2 
       (.I0(\state_reg_n_0_[0] ),
        .I1(st_GET_WAIT1),
        .I2(st_GET_WAIT2),
        .I3(st_TX_DAT),
        .I4(st_TX_CRC),
        .I5(st_WAIT_S),
        .O(\state[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT4 #(
    .INIT(16'hA2FF)) 
    \state[5]_i_3 
       (.I0(\gstate[4]_i_2_n_0 ),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .I3(st_DAT_6),
        .O(\state[5]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "GET_WAIT2:000100,WAIT_S:100000,TX_DAT:001000,TX_CRC:010000,IDLE:000001,GET_WAIT1:000010" *) 
  FDSE \state_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(\state_reg_n_0_[0] ),
        .S(SR));
  (* FSM_ENCODED_STATES = "GET_WAIT2:000100,WAIT_S:100000,TX_DAT:001000,TX_CRC:010000,IDLE:000001,GET_WAIT1:000010" *) 
  FDRE \state_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(st_GET_WAIT1),
        .R(SR));
  (* FSM_ENCODED_STATES = "GET_WAIT2:000100,WAIT_S:100000,TX_DAT:001000,TX_CRC:010000,IDLE:000001,GET_WAIT1:000010" *) 
  FDRE \state_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(st_GET_WAIT2),
        .R(SR));
  (* FSM_ENCODED_STATES = "GET_WAIT2:000100,WAIT_S:100000,TX_DAT:001000,TX_CRC:010000,IDLE:000001,GET_WAIT1:000010" *) 
  FDRE \state_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(st_TX_DAT),
        .R(SR));
  (* FSM_ENCODED_STATES = "GET_WAIT2:000100,WAIT_S:100000,TX_DAT:001000,TX_CRC:010000,IDLE:000001,GET_WAIT1:000010" *) 
  FDRE \state_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(st_TX_CRC),
        .R(SR));
  (* FSM_ENCODED_STATES = "GET_WAIT2:000100,WAIT_S:100000,TX_DAT:001000,TX_CRC:010000,IDLE:000001,GET_WAIT1:000010" *) 
  FDRE \state_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(st_WAIT_S),
        .R(SR));
  LUT5 #(
    .INIT(32'hFF0CAE0C)) 
    \txc[7]_i_1 
       (.I0(st_TX_DAT),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .I3(pulse_0),
        .I4(st_TX_CRC),
        .O(\txc[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFAAAAAABEAAAAAA)) 
    \txc_int[0]_i_1 
       (.I0(st_GET_WAIT2),
        .I1(rbytes_reg[1]),
        .I2(\txd_reg[48]_0 ),
        .I3(p_0_in11_in),
        .I4(last_dat_reg_n_0),
        .I5(rbytes_reg[0]),
        .O(\txc_int[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0080808000808000)) 
    \txc_int[1]_i_1 
       (.I0(p_0_in11_in),
        .I1(last_dat_reg_n_0),
        .I2(st_WAIT_S),
        .I3(\txd_reg[48]_0 ),
        .I4(rbytes_reg[1]),
        .I5(rbytes_reg[0]),
        .O(\txc_int[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7E00000000000000)) 
    \txc_int[2]_i_1 
       (.I0(\txd_reg[48]_0 ),
        .I1(rbytes_reg[0]),
        .I2(rbytes_reg[1]),
        .I3(p_0_in11_in),
        .I4(last_dat_reg_n_0),
        .I5(st_WAIT_S),
        .O(\txc_int[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8080808080808000)) 
    \txc_int[3]_i_1 
       (.I0(st_WAIT_S),
        .I1(last_dat_reg_n_0),
        .I2(p_0_in11_in),
        .I3(\txd_reg[48]_0 ),
        .I4(rbytes_reg[1]),
        .I5(rbytes_reg[0]),
        .O(\txc_int[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \txc_int[4]_i_1 
       (.I0(p_0_in11_in),
        .I1(last_dat_reg_n_0),
        .I2(st_WAIT_S),
        .O(\txc_int[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00040000000000)) 
    \txc_int[5]_i_1 
       (.I0(\txd_reg[48]_0 ),
        .I1(rbytes_reg[0]),
        .I2(rbytes_reg[1]),
        .I3(st_WAIT_S),
        .I4(last_dat_reg_n_0),
        .I5(p_0_in11_in),
        .O(\txc_int[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00060000000000)) 
    \txc_int[6]_i_1 
       (.I0(rbytes_reg[0]),
        .I1(rbytes_reg[1]),
        .I2(\txd_reg[48]_0 ),
        .I3(st_WAIT_S),
        .I4(last_dat_reg_n_0),
        .I5(p_0_in11_in),
        .O(\txc_int[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2808200020002000)) 
    \txc_int[7]_i_1 
       (.I0(\txc_int[7]_i_3_n_0 ),
        .I1(st_WAIT_S),
        .I2(st_GET_WAIT2),
        .I3(bcnt0),
        .I4(st_DAT_6),
        .I5(\txc_int[7]_i_4_n_0 ),
        .O(txc_int));
  LUT6 #(
    .INIT(64'hFF000E0000000000)) 
    \txc_int[7]_i_2 
       (.I0(rbytes_reg[0]),
        .I1(rbytes_reg[1]),
        .I2(\txd_reg[48]_0 ),
        .I3(st_WAIT_S),
        .I4(last_dat_reg_n_0),
        .I5(p_0_in11_in),
        .O(\txc_int[7]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txc_int[7]_i_3 
       (.I0(st_GET_WAIT1),
        .I1(\state_reg_n_0_[0] ),
        .I2(st_TX_CRC),
        .I3(st_TX_DAT),
        .O(\txc_int[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \txc_int[7]_i_4 
       (.I0(pulse_0),
        .I1(fmac_speed[1]),
        .I2(fmac_speed[0]),
        .O(\txc_int[7]_i_4_n_0 ));
  FDSE \txc_int_reg[0] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[0]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[0] ),
        .S(SR));
  FDSE \txc_int_reg[1] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[1]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[1] ),
        .S(SR));
  FDSE \txc_int_reg[2] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[2]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[2] ),
        .S(SR));
  FDSE \txc_int_reg[3] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[3]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[3] ),
        .S(SR));
  FDSE \txc_int_reg[4] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[4]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[4] ),
        .S(SR));
  FDSE \txc_int_reg[5] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[5]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[5] ),
        .S(SR));
  FDSE \txc_int_reg[6] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[6]_i_1_n_0 ),
        .Q(\txc_int_reg_n_0_[6] ),
        .S(SR));
  FDSE \txc_int_reg[7] 
       (.C(lclk),
        .CE(txc_int),
        .D(\txc_int[7]_i_2_n_0 ),
        .Q(\txc_int_reg_n_0_[7] ),
        .S(SR));
  FDSE \txc_reg[0] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[0] ),
        .Q(txc[0]),
        .S(SR));
  FDSE \txc_reg[1] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[1] ),
        .Q(txc[1]),
        .S(SR));
  FDSE \txc_reg[2] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[2] ),
        .Q(txc[2]),
        .S(SR));
  FDSE \txc_reg[3] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[3] ),
        .Q(txc[3]),
        .S(SR));
  FDSE \txc_reg[4] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[4] ),
        .Q(txc[4]),
        .S(SR));
  FDSE \txc_reg[5] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[5] ),
        .Q(txc[5]),
        .S(SR));
  FDSE \txc_reg[6] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[6] ),
        .Q(txc[6]),
        .S(SR));
  FDSE \txc_reg[7] 
       (.C(lclk),
        .CE(\txc[7]_i_1_n_0 ),
        .D(\txc_int_reg_n_0_[7] ),
        .Q(txc[7]),
        .S(SR));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \txd[31]_i_2 
       (.I0(\rbytes_reg_reg[0]_rep__1_n_0 ),
        .I1(\txd_reg[27]_0 ),
        .I2(\txd_reg[48]_0 ),
        .O(\txd[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBABFFFFFFFFFFFFF)) 
    \txd[31]_i_3 
       (.I0(\txd_reg[48]_0 ),
        .I1(pulse_0),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .I4(st_TX_DAT),
        .I5(p_0_in11_in),
        .O(\txd[31]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \txd[35]_i_4 
       (.I0(\txd_reg[27]_0 ),
        .I1(\rbytes_reg_reg[0]_rep__1_n_0 ),
        .O(\txd[35]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFAA08)) 
    \txd[63]_i_1 
       (.I0(st_TX_DAT),
        .I1(fmac_speed[0]),
        .I2(fmac_speed[1]),
        .I3(pulse_0),
        .I4(insert_crc),
        .O(\txd[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT5 #(
    .INIT(32'h88800080)) 
    \txd[63]_i_3 
       (.I0(p_0_in11_in),
        .I1(st_TX_DAT),
        .I2(fmac_speed[0]),
        .I3(fmac_speed[1]),
        .I4(pulse_0),
        .O(txd1));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \txd[7]_i_2 
       (.I0(\rbytes_reg_reg[0]_rep__1_n_0 ),
        .I1(\txd_reg[27]_0 ),
        .I2(\txd_reg[48]_0 ),
        .O(\txd[7]_i_2_n_0 ));
  FDSE \txd_reg[0] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[0]),
        .Q(\txd_reg_n_0_[0] ),
        .S(SR));
  FDSE \txd_reg[10] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[10]),
        .Q(in26[2]),
        .S(SR));
  FDRE \txd_reg[11] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[11]),
        .Q(in26[3]),
        .R(SR));
  FDSE \txd_reg[12] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[12]),
        .Q(in26[4]),
        .S(SR));
  FDSE \txd_reg[13] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[13]),
        .Q(in26[5]),
        .S(SR));
  FDSE \txd_reg[14] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[14]),
        .Q(in26[6]),
        .S(SR));
  FDSE \txd_reg[15] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[15]),
        .Q(in26[7]),
        .S(SR));
  FDSE \txd_reg[16] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[16]),
        .Q(in27[0]),
        .S(SR));
  FDSE \txd_reg[17] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[17]),
        .Q(in27[1]),
        .S(SR));
  FDSE \txd_reg[18] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[18]),
        .Q(in27[2]),
        .S(SR));
  FDRE \txd_reg[19] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[19]),
        .Q(in27[3]),
        .R(SR));
  FDSE \txd_reg[1] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[1]),
        .Q(\txd_reg_n_0_[1] ),
        .S(SR));
  FDSE \txd_reg[20] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[20]),
        .Q(in27[4]),
        .S(SR));
  FDSE \txd_reg[21] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[21]),
        .Q(in27[5]),
        .S(SR));
  FDSE \txd_reg[22] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[22]),
        .Q(in27[6]),
        .S(SR));
  FDSE \txd_reg[23] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[23]),
        .Q(in27[7]),
        .S(SR));
  FDSE \txd_reg[24] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[24]),
        .Q(in28[0]),
        .S(SR));
  FDSE \txd_reg[25] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[25]),
        .Q(in28[1]),
        .S(SR));
  FDSE \txd_reg[26] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[26]),
        .Q(in28[2]),
        .S(SR));
  FDRE \txd_reg[27] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[27]),
        .Q(in28[3]),
        .R(SR));
  FDSE \txd_reg[28] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[28]),
        .Q(in28[4]),
        .S(SR));
  FDSE \txd_reg[29] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[29]),
        .Q(in28[5]),
        .S(SR));
  FDSE \txd_reg[2] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[2]),
        .Q(\txd_reg_n_0_[2] ),
        .S(SR));
  FDSE \txd_reg[30] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[30]),
        .Q(in28[6]),
        .S(SR));
  FDSE \txd_reg[31] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[31]),
        .Q(in28[7]),
        .S(SR));
  FDSE \txd_reg[32] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[32]),
        .Q(in29[0]),
        .S(SR));
  FDSE \txd_reg[33] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[33]),
        .Q(in29[1]),
        .S(SR));
  FDSE \txd_reg[34] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[34]),
        .Q(in29[2]),
        .S(SR));
  FDRE \txd_reg[35] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[35]),
        .Q(in29[3]),
        .R(SR));
  FDSE \txd_reg[36] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[36]),
        .Q(in29[4]),
        .S(SR));
  FDSE \txd_reg[37] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[37]),
        .Q(in29[5]),
        .S(SR));
  FDSE \txd_reg[38] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[38]),
        .Q(in29[6]),
        .S(SR));
  FDSE \txd_reg[39] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[39]),
        .Q(in29[7]),
        .S(SR));
  FDRE \txd_reg[3] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[3]),
        .Q(\txd_reg_n_0_[3] ),
        .R(SR));
  FDSE \txd_reg[40] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[40]),
        .Q(in30[0]),
        .S(SR));
  FDSE \txd_reg[41] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[41]),
        .Q(in30[1]),
        .S(SR));
  FDSE \txd_reg[42] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[42]),
        .Q(in30[2]),
        .S(SR));
  FDRE \txd_reg[43] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[43]),
        .Q(in30[3]),
        .R(SR));
  FDSE \txd_reg[44] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[44]),
        .Q(in30[4]),
        .S(SR));
  FDSE \txd_reg[45] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[45]),
        .Q(in30[5]),
        .S(SR));
  FDSE \txd_reg[46] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[46]),
        .Q(in30[6]),
        .S(SR));
  FDSE \txd_reg[47] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[47]),
        .Q(in30[7]),
        .S(SR));
  FDSE \txd_reg[48] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[48]),
        .Q(in31[0]),
        .S(SR));
  FDSE \txd_reg[49] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[49]),
        .Q(in31[1]),
        .S(SR));
  FDSE \txd_reg[4] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[4]),
        .Q(\txd_reg_n_0_[4] ),
        .S(SR));
  FDSE \txd_reg[50] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[50]),
        .Q(in31[2]),
        .S(SR));
  FDRE \txd_reg[51] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[51]),
        .Q(in31[3]),
        .R(SR));
  FDSE \txd_reg[52] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[52]),
        .Q(in31[4]),
        .S(SR));
  FDSE \txd_reg[53] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[53]),
        .Q(in31[5]),
        .S(SR));
  FDSE \txd_reg[54] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[54]),
        .Q(in31[6]),
        .S(SR));
  FDSE \txd_reg[55] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[55]),
        .Q(in31[7]),
        .S(SR));
  FDSE \txd_reg[56] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[56]),
        .Q(in32[0]),
        .S(SR));
  FDSE \txd_reg[57] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[57]),
        .Q(in32[1]),
        .S(SR));
  FDSE \txd_reg[58] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[58]),
        .Q(in32[2]),
        .S(SR));
  FDRE \txd_reg[59] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[59]),
        .Q(in32[3]),
        .R(SR));
  FDSE \txd_reg[5] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[5]),
        .Q(\txd_reg_n_0_[5] ),
        .S(SR));
  FDSE \txd_reg[60] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[60]),
        .Q(in32[4]),
        .S(SR));
  FDSE \txd_reg[61] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[61]),
        .Q(in32[5]),
        .S(SR));
  FDSE \txd_reg[62] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[62]),
        .Q(in32[6]),
        .S(SR));
  FDSE \txd_reg[63] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[63]),
        .Q(in32[7]),
        .S(SR));
  FDSE \txd_reg[6] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[6]),
        .Q(\txd_reg_n_0_[6] ),
        .S(SR));
  FDSE \txd_reg[7] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[7]),
        .Q(\txd_reg_n_0_[7] ),
        .S(SR));
  FDSE \txd_reg[8] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[8]),
        .Q(in26[0]),
        .S(SR));
  FDSE \txd_reg[9] 
       (.C(lclk),
        .CE(\txd[63]_i_1_n_0 ),
        .D(p_2_in[9]),
        .Q(in26[1]),
        .S(SR));
  LUT6 #(
    .INIT(64'hA9A9FF00A9A900FF)) 
    \wcnt[10]_i_1 
       (.I0(nbytes_reg[10]),
        .I1(nbytes_reg[9]),
        .I2(\wcnt[10]_i_2_n_0 ),
        .I3(\wcnt_reg_n_0_[10] ),
        .I4(st_GET_WAIT2),
        .I5(\wcnt[10]_i_3_n_0 ),
        .O(\wcnt[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[10]_i_2 
       (.I0(nbytes_reg[7]),
        .I1(nbytes_reg[5]),
        .I2(nbytes_reg[3]),
        .I3(nbytes_reg[4]),
        .I4(nbytes_reg[6]),
        .I5(nbytes_reg[8]),
        .O(\wcnt[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[10]_i_3 
       (.I0(\wcnt_reg_n_0_[8] ),
        .I1(\wcnt_reg_n_0_[6] ),
        .I2(\wcnt[5]_i_2_n_0 ),
        .I3(\wcnt_reg_n_0_[5] ),
        .I4(\wcnt_reg_n_0_[7] ),
        .I5(\wcnt_reg_n_0_[9] ),
        .O(\wcnt[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hA9A9FF00A9A900FF)) 
    \wcnt[11]_i_1 
       (.I0(nbytes_reg[11]),
        .I1(nbytes_reg[10]),
        .I2(\wcnt[11]_i_2_n_0 ),
        .I3(\wcnt_reg_n_0_[11] ),
        .I4(st_GET_WAIT2),
        .I5(\wcnt[11]_i_3_n_0 ),
        .O(\wcnt[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[11]_i_2 
       (.I0(nbytes_reg[8]),
        .I1(nbytes_reg[6]),
        .I2(\wcnt[6]_i_2_n_0 ),
        .I3(nbytes_reg[5]),
        .I4(nbytes_reg[7]),
        .I5(nbytes_reg[9]),
        .O(\wcnt[11]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \wcnt[11]_i_3 
       (.I0(\wcnt_reg_n_0_[9] ),
        .I1(\wcnt[9]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[10] ),
        .O(\wcnt[11]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99F0990F)) 
    \wcnt[12]_i_1 
       (.I0(nbytes_reg[12]),
        .I1(\wcnt[12]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[12] ),
        .I3(st_GET_WAIT2),
        .I4(\wcnt[12]_i_3_n_0 ),
        .O(\wcnt[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wcnt[12]_i_2 
       (.I0(nbytes_reg[10]),
        .I1(\wcnt[10]_i_2_n_0 ),
        .I2(nbytes_reg[9]),
        .I3(nbytes_reg[11]),
        .O(\wcnt[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wcnt[12]_i_3 
       (.I0(\wcnt_reg_n_0_[10] ),
        .I1(\wcnt[9]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[9] ),
        .I3(\wcnt_reg_n_0_[11] ),
        .O(\wcnt[12]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99F0990F)) 
    \wcnt[13]_i_1 
       (.I0(nbytes_reg[13]),
        .I1(\wcnt[13]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[13] ),
        .I3(st_GET_WAIT2),
        .I4(\wcnt[13]_i_3_n_0 ),
        .O(\wcnt[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \wcnt[13]_i_2 
       (.I0(nbytes_reg[11]),
        .I1(nbytes_reg[9]),
        .I2(\wcnt[10]_i_2_n_0 ),
        .I3(nbytes_reg[10]),
        .I4(nbytes_reg[12]),
        .O(\wcnt[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \wcnt[13]_i_3 
       (.I0(\wcnt_reg_n_0_[11] ),
        .I1(\wcnt_reg_n_0_[9] ),
        .I2(\wcnt[9]_i_2_n_0 ),
        .I3(\wcnt_reg_n_0_[10] ),
        .I4(\wcnt_reg_n_0_[12] ),
        .O(\wcnt[13]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99F0990F)) 
    \wcnt[14]_i_1 
       (.I0(nbytes_reg[14]),
        .I1(\wcnt[15]_i_4_n_0 ),
        .I2(\wcnt_reg_n_0_[14] ),
        .I3(st_GET_WAIT2),
        .I4(\wcnt[14]_i_2_n_0 ),
        .O(\wcnt[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[14]_i_2 
       (.I0(\wcnt_reg_n_0_[12] ),
        .I1(\wcnt_reg_n_0_[10] ),
        .I2(\wcnt[9]_i_2_n_0 ),
        .I3(\wcnt_reg_n_0_[9] ),
        .I4(\wcnt_reg_n_0_[11] ),
        .I5(\wcnt_reg_n_0_[13] ),
        .O(\wcnt[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000011000000000)) 
    \wcnt[15]_i_1 
       (.I0(st_WAIT_S),
        .I1(st_GET_WAIT1),
        .I2(st_GET_WAIT2),
        .I3(st_TX_DAT),
        .I4(crc_clr_1),
        .I5(bcnt0),
        .O(wcnt));
  LUT6 #(
    .INIT(64'hA9A9FF00A9A900FF)) 
    \wcnt[15]_i_2 
       (.I0(nbytes_reg[15]),
        .I1(nbytes_reg[14]),
        .I2(\wcnt[15]_i_4_n_0 ),
        .I3(p_0_in11_in),
        .I4(st_GET_WAIT2),
        .I5(\wcnt[15]_i_5_n_0 ),
        .O(\wcnt[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \wcnt[15]_i_3 
       (.I0(st_TX_CRC),
        .I1(\state_reg_n_0_[0] ),
        .O(crc_clr_1));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[15]_i_4 
       (.I0(nbytes_reg[12]),
        .I1(nbytes_reg[10]),
        .I2(\wcnt[10]_i_2_n_0 ),
        .I3(nbytes_reg[9]),
        .I4(nbytes_reg[11]),
        .I5(nbytes_reg[13]),
        .O(\wcnt[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[15]_i_5 
       (.I0(\wcnt_reg_n_0_[13] ),
        .I1(\wcnt_reg_n_0_[11] ),
        .I2(\wcnt[10]_i_3_n_0 ),
        .I3(\wcnt_reg_n_0_[10] ),
        .I4(\wcnt_reg_n_0_[12] ),
        .I5(\wcnt_reg_n_0_[14] ),
        .O(\wcnt[15]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \wcnt[3]_i_1 
       (.I0(nbytes_reg[3]),
        .I1(st_GET_WAIT2),
        .I2(\wcnt_reg_n_0_[3] ),
        .O(\wcnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT5 #(
    .INIT(32'h9999F00F)) 
    \wcnt[4]_i_1 
       (.I0(nbytes_reg[4]),
        .I1(nbytes_reg[3]),
        .I2(\wcnt_reg_n_0_[4] ),
        .I3(\wcnt_reg_n_0_[3] ),
        .I4(st_GET_WAIT2),
        .O(\wcnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA9A9FF00A9A900FF)) 
    \wcnt[5]_i_1 
       (.I0(nbytes_reg[5]),
        .I1(nbytes_reg[4]),
        .I2(nbytes_reg[3]),
        .I3(\wcnt_reg_n_0_[5] ),
        .I4(st_GET_WAIT2),
        .I5(\wcnt[5]_i_2_n_0 ),
        .O(\wcnt[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \wcnt[5]_i_2 
       (.I0(\wcnt_reg_n_0_[3] ),
        .I1(\wcnt_reg_n_0_[4] ),
        .O(\wcnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA9A9FF00A9A900FF)) 
    \wcnt[6]_i_1 
       (.I0(nbytes_reg[6]),
        .I1(nbytes_reg[5]),
        .I2(\wcnt[6]_i_2_n_0 ),
        .I3(\wcnt_reg_n_0_[6] ),
        .I4(st_GET_WAIT2),
        .I5(\wcnt[6]_i_3_n_0 ),
        .O(\wcnt[6]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \wcnt[6]_i_2 
       (.I0(nbytes_reg[3]),
        .I1(nbytes_reg[4]),
        .O(\wcnt[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \wcnt[6]_i_3 
       (.I0(\wcnt_reg_n_0_[4] ),
        .I1(\wcnt_reg_n_0_[3] ),
        .I2(\wcnt_reg_n_0_[5] ),
        .O(\wcnt[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99F0990F)) 
    \wcnt[7]_i_1 
       (.I0(nbytes_reg[7]),
        .I1(\wcnt[7]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[7] ),
        .I3(st_GET_WAIT2),
        .I4(\wcnt[7]_i_3_n_0 ),
        .O(\wcnt[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wcnt[7]_i_2 
       (.I0(nbytes_reg[5]),
        .I1(nbytes_reg[3]),
        .I2(nbytes_reg[4]),
        .I3(nbytes_reg[6]),
        .O(\wcnt[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wcnt[7]_i_3 
       (.I0(\wcnt_reg_n_0_[5] ),
        .I1(\wcnt_reg_n_0_[3] ),
        .I2(\wcnt_reg_n_0_[4] ),
        .I3(\wcnt_reg_n_0_[6] ),
        .O(\wcnt[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99F0990F)) 
    \wcnt[8]_i_1 
       (.I0(nbytes_reg[8]),
        .I1(\wcnt[8]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[8] ),
        .I3(st_GET_WAIT2),
        .I4(\wcnt[8]_i_3_n_0 ),
        .O(\wcnt[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \wcnt[8]_i_2 
       (.I0(nbytes_reg[6]),
        .I1(nbytes_reg[4]),
        .I2(nbytes_reg[3]),
        .I3(nbytes_reg[5]),
        .I4(nbytes_reg[7]),
        .O(\wcnt[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \wcnt[8]_i_3 
       (.I0(\wcnt_reg_n_0_[6] ),
        .I1(\wcnt_reg_n_0_[4] ),
        .I2(\wcnt_reg_n_0_[3] ),
        .I3(\wcnt_reg_n_0_[5] ),
        .I4(\wcnt_reg_n_0_[7] ),
        .O(\wcnt[8]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99F0990F)) 
    \wcnt[9]_i_1 
       (.I0(nbytes_reg[9]),
        .I1(\wcnt[10]_i_2_n_0 ),
        .I2(\wcnt_reg_n_0_[9] ),
        .I3(st_GET_WAIT2),
        .I4(\wcnt[9]_i_2_n_0 ),
        .O(\wcnt[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wcnt[9]_i_2 
       (.I0(\wcnt_reg_n_0_[7] ),
        .I1(\wcnt_reg_n_0_[5] ),
        .I2(\wcnt_reg_n_0_[3] ),
        .I3(\wcnt_reg_n_0_[4] ),
        .I4(\wcnt_reg_n_0_[6] ),
        .I5(\wcnt_reg_n_0_[8] ),
        .O(\wcnt[9]_i_2_n_0 ));
  FDRE \wcnt_reg[10] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[10]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[10] ),
        .R(SR));
  FDRE \wcnt_reg[11] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[11]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[11] ),
        .R(SR));
  FDRE \wcnt_reg[12] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[12]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[12] ),
        .R(SR));
  FDRE \wcnt_reg[13] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[13]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[13] ),
        .R(SR));
  FDRE \wcnt_reg[14] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[14]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[14] ),
        .R(SR));
  FDRE \wcnt_reg[15] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[15]_i_2_n_0 ),
        .Q(p_0_in11_in),
        .R(SR));
  FDRE \wcnt_reg[3] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[3]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[3] ),
        .R(SR));
  FDRE \wcnt_reg[4] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[4]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[4] ),
        .R(SR));
  FDRE \wcnt_reg[5] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[5]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[5] ),
        .R(SR));
  FDRE \wcnt_reg[6] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[6]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[6] ),
        .R(SR));
  FDRE \wcnt_reg[7] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[7]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[7] ),
        .R(SR));
  FDRE \wcnt_reg[8] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[8]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[8] ),
        .R(SR));
  FDRE \wcnt_reg[9] 
       (.C(lclk),
        .CE(wcnt),
        .D(\wcnt[9]_i_1_n_0 ),
        .Q(\wcnt_reg_n_0_[9] ),
        .R(SR));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_bcnt_fifo256x16
   (dout,
    \gf_state_reg[0] ,
    \qwd_cnt_reg[1] ,
    \qwd_cnt_reg[10] ,
    \qwd_cnt_reg[8] ,
    \qwd_cnt_reg[12] ,
    \qwd_cnt_reg[11] ,
    \qwd_cnt_reg[9] ,
    \qwd_cnt_reg[3] ,
    \qwd_cnt_reg[7] ,
    \qwd_cnt_reg[6] ,
    \qwd_cnt_reg[5] ,
    \qwd_cnt_reg[4] ,
    \qwd_cnt_reg[2] ,
    \qwd_cnt_reg[0] ,
    lclk,
    rst_,
    x_byte_cnt,
    x_bcnt_we_reg,
    gige_bcnt_fifo_re_reg);
  output [11:0]dout;
  output \gf_state_reg[0] ;
  output \qwd_cnt_reg[1] ;
  output \qwd_cnt_reg[10] ;
  output \qwd_cnt_reg[8] ;
  output \qwd_cnt_reg[12] ;
  output \qwd_cnt_reg[11] ;
  output \qwd_cnt_reg[9] ;
  output \qwd_cnt_reg[3] ;
  output \qwd_cnt_reg[7] ;
  output \qwd_cnt_reg[6] ;
  output \qwd_cnt_reg[5] ;
  output \qwd_cnt_reg[4] ;
  output \qwd_cnt_reg[2] ;
  output \qwd_cnt_reg[0] ;
  input lclk;
  input rst_;
  input [15:0]x_byte_cnt;
  input x_bcnt_we_reg;
  input gige_bcnt_fifo_re_reg;

  wire [13:0]bcnt_in;
  wire [11:0]dout;
  wire \gf_state_reg[0] ;
  wire gige_bcnt_fifo_re_reg;
  wire gigerx_bcnt_fifo_ip_256x16_n_16;
  wire gigerx_bcnt_fifo_ip_256x16_n_18;
  wire gigerx_bcnt_fifo_ip_256x16_n_19;
  wire gigerx_bcnt_fifo_ip_256x16_n_20;
  wire gigerx_bcnt_fifo_ip_256x16_n_21;
  wire gigerx_bcnt_fifo_ip_256x16_n_22;
  wire gigerx_bcnt_fifo_ip_256x16_n_23;
  wire gigerx_bcnt_fifo_ip_256x16_n_24;
  wire gigerx_bcnt_fifo_ip_256x16_n_25;
  wire lclk;
  wire \qwd_cnt_reg[0] ;
  wire \qwd_cnt_reg[10] ;
  wire \qwd_cnt_reg[11] ;
  wire \qwd_cnt_reg[12] ;
  wire \qwd_cnt_reg[1] ;
  wire \qwd_cnt_reg[2] ;
  wire \qwd_cnt_reg[3] ;
  wire \qwd_cnt_reg[4] ;
  wire \qwd_cnt_reg[5] ;
  wire \qwd_cnt_reg[6] ;
  wire \qwd_cnt_reg[7] ;
  wire \qwd_cnt_reg[8] ;
  wire \qwd_cnt_reg[9] ;
  wire rst_;
  wire x_bcnt_we_reg;
  wire [15:0]x_byte_cnt;
  wire NLW_gigerx_bcnt_fifo_ip_256x16_rd_rst_busy_UNCONNECTED;
  wire NLW_gigerx_bcnt_fifo_ip_256x16_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "gigerx_bcnt_fifo_ip_256x16,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_bcnt_fifo_ip_256x16 gigerx_bcnt_fifo_ip_256x16
       (.clk(lclk),
        .data_count({gigerx_bcnt_fifo_ip_256x16_n_18,gigerx_bcnt_fifo_ip_256x16_n_19,gigerx_bcnt_fifo_ip_256x16_n_20,gigerx_bcnt_fifo_ip_256x16_n_21,gigerx_bcnt_fifo_ip_256x16_n_22,gigerx_bcnt_fifo_ip_256x16_n_23,gigerx_bcnt_fifo_ip_256x16_n_24,gigerx_bcnt_fifo_ip_256x16_n_25}),
        .din(x_byte_cnt),
        .dout({dout[11:10],bcnt_in[13],dout[9:0],bcnt_in[2:0]}),
        .empty(\gf_state_reg[0] ),
        .full(gigerx_bcnt_fifo_ip_256x16_n_16),
        .rd_en(gige_bcnt_fifo_re_reg),
        .rd_rst_busy(NLW_gigerx_bcnt_fifo_ip_256x16_rd_rst_busy_UNCONNECTED),
        .srst(rst_),
        .wr_en(x_bcnt_we_reg),
        .wr_rst_busy(NLW_gigerx_bcnt_fifo_ip_256x16_wr_rst_busy_UNCONNECTED));
  LUT3 #(
    .INIT(8'h01)) 
    \qwd_cnt[0]_i_2 
       (.I0(bcnt_in[1]),
        .I1(bcnt_in[2]),
        .I2(bcnt_in[0]),
        .O(\qwd_cnt_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair504" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \qwd_cnt[10]_i_2 
       (.I0(bcnt_in[13]),
        .I1(dout[8]),
        .I2(\qwd_cnt_reg[8] ),
        .I3(dout[9]),
        .O(\qwd_cnt_reg[10] ));
  (* SOFT_HLUTNM = "soft_lutpair506" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \qwd_cnt[11]_i_2 
       (.I0(bcnt_in[13]),
        .I1(dout[8]),
        .I2(\qwd_cnt_reg[8] ),
        .I3(dout[9]),
        .O(\qwd_cnt_reg[11] ));
  (* SOFT_HLUTNM = "soft_lutpair504" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \qwd_cnt[13]_i_2 
       (.I0(dout[10]),
        .I1(dout[9]),
        .I2(\qwd_cnt_reg[8] ),
        .I3(dout[8]),
        .I4(bcnt_in[13]),
        .O(\qwd_cnt_reg[12] ));
  (* SOFT_HLUTNM = "soft_lutpair505" *) 
  LUT4 #(
    .INIT(16'h01FF)) 
    \qwd_cnt[1]_i_2 
       (.I0(bcnt_in[0]),
        .I1(bcnt_in[2]),
        .I2(bcnt_in[1]),
        .I3(dout[0]),
        .O(\qwd_cnt_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair505" *) 
  LUT5 #(
    .INIT(32'h5557FFFF)) 
    \qwd_cnt[2]_i_2 
       (.I0(dout[0]),
        .I1(bcnt_in[1]),
        .I2(bcnt_in[2]),
        .I3(bcnt_in[0]),
        .I4(dout[1]),
        .O(\qwd_cnt_reg[2] ));
  LUT6 #(
    .INIT(64'h5557FFFFFFFFFFFF)) 
    \qwd_cnt[3]_i_2 
       (.I0(dout[1]),
        .I1(bcnt_in[0]),
        .I2(bcnt_in[2]),
        .I3(bcnt_in[1]),
        .I4(dout[0]),
        .I5(dout[2]),
        .O(\qwd_cnt_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair507" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \qwd_cnt[4]_i_2 
       (.I0(\qwd_cnt_reg[3] ),
        .I1(dout[3]),
        .O(\qwd_cnt_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair507" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    \qwd_cnt[5]_i_2 
       (.I0(dout[3]),
        .I1(\qwd_cnt_reg[3] ),
        .I2(dout[4]),
        .O(\qwd_cnt_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair503" *) 
  LUT4 #(
    .INIT(16'hDFFF)) 
    \qwd_cnt[6]_i_2 
       (.I0(dout[4]),
        .I1(\qwd_cnt_reg[3] ),
        .I2(dout[3]),
        .I3(dout[5]),
        .O(\qwd_cnt_reg[6] ));
  (* SOFT_HLUTNM = "soft_lutpair503" *) 
  LUT5 #(
    .INIT(32'hF7FFFFFF)) 
    \qwd_cnt[7]_i_2 
       (.I0(dout[5]),
        .I1(dout[3]),
        .I2(\qwd_cnt_reg[3] ),
        .I3(dout[4]),
        .I4(dout[6]),
        .O(\qwd_cnt_reg[7] ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \qwd_cnt[8]_i_2 
       (.I0(dout[7]),
        .I1(dout[6]),
        .I2(dout[4]),
        .I3(\qwd_cnt_reg[3] ),
        .I4(dout[3]),
        .I5(dout[5]),
        .O(\qwd_cnt_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair506" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \qwd_cnt[9]_i_2 
       (.I0(dout[8]),
        .I1(\qwd_cnt_reg[8] ),
        .O(\qwd_cnt_reg[9] ));
endmodule

(* CHECK_LICENSE_TYPE = "gigerx_bcnt_fifo_ip_256x16,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_bcnt_fifo_ip_256x16
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [15:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [15:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [7:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [7:0]data_count;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [7:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [7:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "8" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "16" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "16" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "254" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "253" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "8" *) 
  (* C_RD_DEPTH = "256" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "8" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "8" *) 
  (* C_WR_DEPTH = "256" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "8" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized19 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[7:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo256x64_2clk
   (dout,
    lclk,
    rst_,
    \data_out_reg[63] ,
    wr_en,
    rd_en);
  output [63:0]dout;
  input lclk;
  input rst_;
  input [63:0]\data_out_reg[63] ;
  input wr_en;
  input rd_en;

  wire [63:0]\data_out_reg[63] ;
  wire [63:0]dout;
  wire gigerx_fifo_ip_256x64_n_64;
  wire gigerx_fifo_ip_256x64_n_65;
  wire gigerx_fifo_ip_256x64_n_66;
  wire gigerx_fifo_ip_256x64_n_67;
  wire gigerx_fifo_ip_256x64_n_68;
  wire gigerx_fifo_ip_256x64_n_69;
  wire gigerx_fifo_ip_256x64_n_70;
  wire gigerx_fifo_ip_256x64_n_71;
  wire gigerx_fifo_ip_256x64_n_72;
  wire gigerx_fifo_ip_256x64_n_73;
  wire lclk;
  wire rd_en;
  wire rst_;
  wire wr_en;
  wire NLW_gigerx_fifo_ip_256x64_rd_rst_busy_UNCONNECTED;
  wire NLW_gigerx_fifo_ip_256x64_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "gigerx_fifo_ip_256x64,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo_ip_256x64 gigerx_fifo_ip_256x64
       (.clk(lclk),
        .data_count({gigerx_fifo_ip_256x64_n_66,gigerx_fifo_ip_256x64_n_67,gigerx_fifo_ip_256x64_n_68,gigerx_fifo_ip_256x64_n_69,gigerx_fifo_ip_256x64_n_70,gigerx_fifo_ip_256x64_n_71,gigerx_fifo_ip_256x64_n_72,gigerx_fifo_ip_256x64_n_73}),
        .din(\data_out_reg[63] ),
        .dout(dout),
        .empty(gigerx_fifo_ip_256x64_n_65),
        .full(gigerx_fifo_ip_256x64_n_64),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_gigerx_fifo_ip_256x64_rd_rst_busy_UNCONNECTED),
        .srst(rst_),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_gigerx_fifo_ip_256x64_wr_rst_busy_UNCONNECTED));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo256x8
   (dout,
    lclk,
    rst_,
    \ctrl_out_reg[7] ,
    wr_en,
    rd_en);
  output [7:0]dout;
  input lclk;
  input rst_;
  input [7:0]\ctrl_out_reg[7] ;
  input wr_en;
  input rd_en;

  wire [7:0]\ctrl_out_reg[7] ;
  wire [7:0]dout;
  wire gigerx_fifo_ip_256x8_n_10;
  wire gigerx_fifo_ip_256x8_n_11;
  wire gigerx_fifo_ip_256x8_n_12;
  wire gigerx_fifo_ip_256x8_n_13;
  wire gigerx_fifo_ip_256x8_n_14;
  wire gigerx_fifo_ip_256x8_n_15;
  wire gigerx_fifo_ip_256x8_n_16;
  wire gigerx_fifo_ip_256x8_n_17;
  wire gigerx_fifo_ip_256x8_n_8;
  wire gigerx_fifo_ip_256x8_n_9;
  wire lclk;
  wire rd_en;
  wire rst_;
  wire wr_en;
  wire NLW_gigerx_fifo_ip_256x8_rd_rst_busy_UNCONNECTED;
  wire NLW_gigerx_fifo_ip_256x8_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "gigerx_fifo_ip_256x8,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo_ip_256x8 gigerx_fifo_ip_256x8
       (.clk(lclk),
        .data_count({gigerx_fifo_ip_256x8_n_10,gigerx_fifo_ip_256x8_n_11,gigerx_fifo_ip_256x8_n_12,gigerx_fifo_ip_256x8_n_13,gigerx_fifo_ip_256x8_n_14,gigerx_fifo_ip_256x8_n_15,gigerx_fifo_ip_256x8_n_16,gigerx_fifo_ip_256x8_n_17}),
        .din(\ctrl_out_reg[7] ),
        .dout(dout),
        .empty(gigerx_fifo_ip_256x8_n_9),
        .full(gigerx_fifo_ip_256x8_n_8),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_gigerx_fifo_ip_256x8_rd_rst_busy_UNCONNECTED),
        .srst(rst_),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_gigerx_fifo_ip_256x8_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "gigerx_fifo_ip_256x64,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo_ip_256x64
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [63:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [63:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [7:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [7:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [7:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [7:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "8" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "64" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "64" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "254" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "253" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "8" *) 
  (* C_RD_DEPTH = "256" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "8" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "8" *) 
  (* C_WR_DEPTH = "256" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "8" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized15 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[7:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "gigerx_fifo_ip_256x8,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_gigerx_fifo_ip_256x8
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [7:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [7:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [7:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [7:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [7:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [7:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "8" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "8" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "8" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "254" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "253" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "8" *) 
  (* C_RD_DEPTH = "256" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "8" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "8" *) 
  (* C_WR_DEPTH = "256" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "8" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized17 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[7:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "ipcs_fifo_ip,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_ipcs_fifo_ip
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [63:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [63:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [8:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [8:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [8:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [8:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "9" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "64" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "64" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "510" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "509" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "9" *) 
  (* C_RD_DEPTH = "512" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "9" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "9" *) 
  (* C_WR_DEPTH = "512" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "9" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized11 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[8:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[8:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "pktctrl_fifo_ip,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_pktctrl_fifo_ip
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [7:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [7:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [11:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [11:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [11:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [11:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "12" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "8" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "8" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "4kx9" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "4094" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "4093" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "12" *) 
  (* C_RD_DEPTH = "4096" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "12" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "12" *) 
  (* C_WR_DEPTH = "4096" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "12" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized9 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[11:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[11:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "ps_emio_eth_1g_AXIS_LMAC_0_1,LMAC_DFIFO_TOP,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* IP_DEFINITION_SOURCE = "package_project" *) 
(* X_CORE_INFO = "LMAC_DFIFO_TOP,Vivado 2018.2" *) 
(* NotValidForBitStream *)
module ps_emio_eth_1g_AXIS_LMAC_0_1
   (dclk,
    lclk,
    rst_,
    fmac_speed,
    gmii_txd,
    gmii_tx_en,
    gmii_tx_er,
    gmii_rxd,
    gmii_rx_er,
    gmii_rx_dv,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tkeep,
    s_axis_tlast,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tkeep,
    m_axis_tlast);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dclk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dclk, ASSOCIATED_BUSIF m_axis:s_axis, ASSOCIATED_RESET rst_, FREQ_HZ 49999500, PHASE 0.000, CLK_DOMAIN ps_emio_eth_1g_zynq_ultra_ps_e_0_0_pl_clk0" *) input dclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 lclk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME lclk, ASSOCIATED_BUSIF gmii_rtl, FREQ_HZ 125000000, PHASE 0, CLK_DOMAIN ps_emio_eth_1g_gig_ethernet_pcs_pma_0_0_userclk2_out" *) input lclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 rst_ RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME rst_, POLARITY ACTIVE_LOW" *) input rst_;
  input [1:0]fmac_speed;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gmii:1.0 gmii_rtl TXD" *) output [7:0]gmii_txd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gmii:1.0 gmii_rtl TX_EN" *) output gmii_tx_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gmii:1.0 gmii_rtl TX_ER" *) output gmii_tx_er;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gmii:1.0 gmii_rtl RXD" *) (* keep = "true" *) input [7:0]gmii_rxd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gmii:1.0 gmii_rtl RX_ER" *) (* keep = "true" *) input gmii_rx_er;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gmii:1.0 gmii_rtl RX_DV" *) (* keep = "true" *) input gmii_rx_dv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TVALID" *) input s_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TREADY" *) output s_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TDATA" *) input [31:0]s_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TKEEP" *) input [3:0]s_axis_tkeep;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TLAST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axis, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 1, HAS_TLAST 1, FREQ_HZ 49999500, PHASE 0.000, CLK_DOMAIN ps_emio_eth_1g_zynq_ultra_ps_e_0_0_pl_clk0, LAYERED_METADATA undef" *) input s_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TVALID" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TREADY" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TDATA" *) output [31:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TKEEP" *) output [3:0]m_axis_tkeep;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TLAST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 1, HAS_TLAST 1, FREQ_HZ 49999500, PHASE 0.000, CLK_DOMAIN ps_emio_eth_1g_zynq_ultra_ps_e_0_0_pl_clk0, LAYERED_METADATA undef" *) output m_axis_tlast;

  wire dclk;
  wire [1:0]fmac_speed;
  wire gmii_rx_dv;
  wire gmii_rx_er;
  wire [7:0]gmii_rxd;
  wire gmii_tx_en;
  wire gmii_tx_er;
  wire [7:0]gmii_txd;
  wire lclk;
  wire [31:0]m_axis_tdata;
  wire [3:0]m_axis_tkeep;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire n_0_2416;
  wire rst_;
  wire [31:0]s_axis_tdata;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  LUT1 #(
    .INIT(2'h1)) 
    i_2416
       (.I0(rst_),
        .O(n_0_2416));
  ps_emio_eth_1g_AXIS_LMAC_0_1_LMAC_DFIFO_TOP inst
       (.dclk(dclk),
        .fmac_speed(fmac_speed),
        .gmii_rx_dv(gmii_rx_dv),
        .gmii_rx_er(gmii_rx_er),
        .gmii_rxd(gmii_rxd),
        .gmii_tx_en(gmii_tx_en),
        .gmii_tx_er(gmii_tx_er),
        .gmii_txd(gmii_txd),
        .lclk(lclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tkeep(m_axis_tkeep),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .rst_(rst_),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tkeep(s_axis_tkeep),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* CHECK_LICENSE_TYPE = "rxfifo_ip_4Kx64,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rxfifo_ip_4Kx64
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [63:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [63:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [11:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [11:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [11:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [11:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "12" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "64" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "64" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "4094" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "4093" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "12" *) 
  (* C_RD_DEPTH = "4096" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "12" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "12" *) 
  (* C_WR_DEPTH = "4096" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "12" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized7 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[11:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[11:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_tcore_byte_reordering
   (full,
    empty,
    \gcc0.gc0.count_reg[3] ,
    ram_full_fb_i_reg,
    br_sof4_reg_0,
    sof0,
    bad_frame_reg_0,
    \data_out_reg[31]_0 ,
    \data_out_reg[63]_0 ,
    \data_out_reg[31]_1 ,
    bad_frame_noeof_reg_0,
    \ctrl_out_reg[4]_0 ,
    \ctrl_out_reg[3]_0 ,
    \bdata1_reg[63] ,
    pre_sof0,
    D,
    pre_eof0,
    type_reject_reg,
    lclk,
    rst_,
    wr_en,
    rd_en,
    ram_full_i_reg,
    ram_empty_i_reg,
    shift0,
    sof00,
    eof10,
    eof00,
    sof30,
    sof60,
    sof50,
    sof70,
    sof20,
    sof10,
    eof0_reg_0,
    sof4_reg_0,
    sof0_reg_0,
    Q,
    xaui_mode,
    \data_out_reg[63]_1 ,
    sof,
    type_reject,
    SS,
    xaui_mode_reg,
    \ctrl_out_reg[2]_0 ,
    \ctrl_out_reg[1]_0 );
  output full;
  output empty;
  output \gcc0.gc0.count_reg[3] ;
  output ram_full_fb_i_reg;
  output br_sof4_reg_0;
  output sof0;
  output bad_frame_reg_0;
  output \data_out_reg[31]_0 ;
  output \data_out_reg[63]_0 ;
  output \data_out_reg[31]_1 ;
  output bad_frame_noeof_reg_0;
  output \ctrl_out_reg[4]_0 ;
  output [2:0]\ctrl_out_reg[3]_0 ;
  output [63:0]\bdata1_reg[63] ;
  output pre_sof0;
  output [7:0]D;
  output pre_eof0;
  output type_reject_reg;
  input lclk;
  input rst_;
  input wr_en;
  input rd_en;
  input ram_full_i_reg;
  input ram_empty_i_reg;
  input shift0;
  input sof00;
  input eof10;
  input eof00;
  input sof30;
  input sof60;
  input sof50;
  input sof70;
  input sof20;
  input sof10;
  input eof0_reg_0;
  input sof4_reg_0;
  input sof0_reg_0;
  input [7:0]Q;
  input xaui_mode;
  input [63:0]\data_out_reg[63]_1 ;
  input sof;
  input type_reject;
  input [1:0]SS;
  input xaui_mode_reg;
  input \ctrl_out_reg[2]_0 ;
  input \ctrl_out_reg[1]_0 ;

  wire [7:0]D;
  wire [7:0]Q;
  wire [1:0]SS;
  wire bad_frame;
  wire bad_frame0;
  wire bad_frame_noeof;
  wire bad_frame_noeof0;
  wire bad_frame_noeof_reg_0;
  wire bad_frame_reg_0;
  wire bad_framesof_cnt1560;
  wire \bad_framesof_cnt156[0]_i_3_n_0 ;
  wire [30:0]bad_framesof_cnt156_reg;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_0 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_1 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_10 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_11 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_12 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_13 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_14 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_15 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_2 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_3 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_5 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_6 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_7 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_8 ;
  wire \bad_framesof_cnt156_reg[0]_i_2_n_9 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_0 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_1 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_10 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_11 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_12 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_13 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_14 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_15 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_2 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_3 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_5 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_6 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_7 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_8 ;
  wire \bad_framesof_cnt156_reg[16]_i_1_n_9 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_10 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_11 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_12 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_13 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_14 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_15 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_2 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_3 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_5 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_6 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_7 ;
  wire \bad_framesof_cnt156_reg[24]_i_1_n_9 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_0 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_1 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_10 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_11 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_12 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_13 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_14 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_15 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_2 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_3 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_5 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_6 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_7 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_8 ;
  wire \bad_framesof_cnt156_reg[8]_i_1_n_9 ;
  wire [63:0]\bdata1_reg[63] ;
  wire br_sof4;
  wire br_sof4_reg_0;
  wire \ctrl_in_dly_reg_n_0_[0] ;
  wire \ctrl_in_dly_reg_n_0_[1] ;
  wire \ctrl_in_dly_reg_n_0_[2] ;
  wire \ctrl_in_dly_reg_n_0_[3] ;
  wire \ctrl_out[0]_i_1_n_0 ;
  wire \ctrl_out[1]_i_1_n_0 ;
  wire \ctrl_out[2]_i_1_n_0 ;
  wire \ctrl_out[3]_i_1_n_0 ;
  wire \ctrl_out[3]_i_2_n_0 ;
  wire \ctrl_out[3]_i_3_n_0 ;
  wire \ctrl_out[4]_i_1_n_0 ;
  wire \ctrl_out_reg[1]_0 ;
  wire \ctrl_out_reg[2]_0 ;
  wire [2:0]\ctrl_out_reg[3]_0 ;
  wire \ctrl_out_reg[4]_0 ;
  wire [63:40]data_in_dly;
  wire [39:0]data_in_dly__0;
  wire \data_out[0]_i_2_n_0 ;
  wire \data_out[10]_i_2_n_0 ;
  wire \data_out[11]_i_2_n_0 ;
  wire \data_out[12]_i_2_n_0 ;
  wire \data_out[13]_i_2_n_0 ;
  wire \data_out[14]_i_2_n_0 ;
  wire \data_out[15]_i_2_n_0 ;
  wire \data_out[16]_i_2_n_0 ;
  wire \data_out[17]_i_2_n_0 ;
  wire \data_out[18]_i_2_n_0 ;
  wire \data_out[19]_i_2_n_0 ;
  wire \data_out[1]_i_2_n_0 ;
  wire \data_out[20]_i_2_n_0 ;
  wire \data_out[21]_i_2_n_0 ;
  wire \data_out[22]_i_2_n_0 ;
  wire \data_out[23]_i_2_n_0 ;
  wire \data_out[24]_i_2_n_0 ;
  wire \data_out[25]_i_2_n_0 ;
  wire \data_out[26]_i_2_n_0 ;
  wire \data_out[27]_i_2_n_0 ;
  wire \data_out[28]_i_2_n_0 ;
  wire \data_out[29]_i_2_n_0 ;
  wire \data_out[2]_i_2_n_0 ;
  wire \data_out[30]_i_2_n_0 ;
  wire \data_out[31]_i_2_n_0 ;
  wire \data_out[3]_i_2_n_0 ;
  wire \data_out[4]_i_2_n_0 ;
  wire \data_out[5]_i_2_n_0 ;
  wire \data_out[6]_i_2_n_0 ;
  wire \data_out[7]_i_2_n_0 ;
  wire \data_out[8]_i_2_n_0 ;
  wire \data_out[9]_i_2_n_0 ;
  wire \data_out_reg[31]_0 ;
  wire \data_out_reg[31]_1 ;
  wire \data_out_reg[63]_0 ;
  wire [63:0]\data_out_reg[63]_1 ;
  wire empty;
  wire eof00;
  wire eof0_reg_0;
  wire eof10;
  wire frame_done;
  wire frame_done0;
  wire full;
  wire \gcc0.gc0.count_reg[3] ;
  wire lclk;
  wire [63:0]p_1_in;
  wire [0:0]p_1_in__1;
  wire pre_eof0;
  wire pre_eof_i_10_n_0;
  wire pre_eof_i_11_n_0;
  wire pre_eof_i_12_n_0;
  wire pre_eof_i_13_n_0;
  wire pre_eof_i_14_n_0;
  wire pre_eof_i_15_n_0;
  wire pre_eof_i_16_n_0;
  wire pre_eof_i_2_n_0;
  wire pre_eof_i_3_n_0;
  wire pre_eof_i_4_n_0;
  wire pre_eof_i_5_n_0;
  wire pre_eof_i_6_n_0;
  wire pre_eof_i_7_n_0;
  wire pre_eof_i_8_n_0;
  wire pre_eof_i_9_n_0;
  wire pre_sof0;
  wire pre_sof_i_2_n_0;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire \raw_frame_cnt156[0]_i_2_n_0 ;
  wire [31:0]raw_frame_cnt156_reg;
  wire \raw_frame_cnt156_reg[0]_i_1_n_0 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_1 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_10 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_11 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_12 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_13 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_14 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_15 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_2 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_3 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_5 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_6 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_7 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_8 ;
  wire \raw_frame_cnt156_reg[0]_i_1_n_9 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_0 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_1 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_10 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_11 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_12 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_13 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_14 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_15 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_2 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_3 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_5 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_6 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_7 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_8 ;
  wire \raw_frame_cnt156_reg[16]_i_1_n_9 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_1 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_10 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_11 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_12 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_13 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_14 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_15 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_2 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_3 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_5 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_6 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_7 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_8 ;
  wire \raw_frame_cnt156_reg[24]_i_1_n_9 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_0 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_1 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_10 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_11 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_12 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_13 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_14 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_15 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_2 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_3 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_5 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_6 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_7 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_8 ;
  wire \raw_frame_cnt156_reg[8]_i_1_n_9 ;
  wire rd_en;
  wire rst_;
  wire shift0;
  wire sof;
  wire sof0;
  wire sof00;
  wire sof0_reg_0;
  wire sof1;
  wire sof10;
  wire sof2;
  wire sof20;
  wire sof3;
  wire sof30;
  wire sof4_reg_0;
  wire sof5;
  wire sof50;
  wire sof6;
  wire sof60;
  wire sof7;
  wire sof70;
  wire type_reject;
  wire type_reject_i_10_n_0;
  wire type_reject_i_11_n_0;
  wire type_reject_i_12_n_0;
  wire type_reject_i_13_n_0;
  wire type_reject_i_2_n_0;
  wire type_reject_i_3_n_0;
  wire type_reject_i_4_n_0;
  wire type_reject_i_5_n_0;
  wire type_reject_i_6_n_0;
  wire type_reject_i_7_n_0;
  wire type_reject_i_8_n_0;
  wire type_reject_i_9_n_0;
  wire type_reject_reg;
  wire unknown_sof_sticky;
  wire unknown_sof_sticky0;
  wire unknown_sof_sticky_i_1_n_0;
  wire wr_en;
  wire xaui_mode;
  wire xaui_mode_reg;
  wire [3:3]\NLW_bad_framesof_cnt156_reg[0]_i_2_CO_UNCONNECTED ;
  wire [3:3]\NLW_bad_framesof_cnt156_reg[16]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_bad_framesof_cnt156_reg[24]_i_1_CO_UNCONNECTED ;
  wire [7:7]\NLW_bad_framesof_cnt156_reg[24]_i_1_O_UNCONNECTED ;
  wire [3:3]\NLW_bad_framesof_cnt156_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_raw_frame_cnt156_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_raw_frame_cnt156_reg[16]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_raw_frame_cnt156_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_raw_frame_cnt156_reg[8]_i_1_CO_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'h54)) 
    bad_frame_i_1
       (.I0(bad_frame_noeof_reg_0),
        .I1(\data_out_reg[31]_0 ),
        .I2(bad_frame_reg_0),
        .O(bad_frame0));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'hAAA8)) 
    bad_frame_noeof_i_1
       (.I0(bad_frame_noeof_reg_0),
        .I1(unknown_sof_sticky0),
        .I2(br_sof4_reg_0),
        .I3(sof0),
        .O(bad_frame_noeof0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    bad_frame_noeof_i_2
       (.I0(sof2),
        .I1(sof7),
        .I2(sof3),
        .I3(sof1),
        .I4(sof6),
        .I5(sof5),
        .O(unknown_sof_sticky0));
  FDRE bad_frame_noeof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(bad_frame_noeof0),
        .Q(bad_frame_noeof),
        .R(rst_));
  FDRE bad_frame_reg
       (.C(lclk),
        .CE(1'b1),
        .D(bad_frame0),
        .Q(bad_frame),
        .R(rst_));
  LUT2 #(
    .INIT(4'hE)) 
    \bad_framesof_cnt156[0]_i_1 
       (.I0(bad_frame_noeof),
        .I1(bad_frame),
        .O(bad_framesof_cnt1560));
  LUT1 #(
    .INIT(2'h1)) 
    \bad_framesof_cnt156[0]_i_3 
       (.I0(bad_framesof_cnt156_reg[0]),
        .O(\bad_framesof_cnt156[0]_i_3_n_0 ));
  FDRE \bad_framesof_cnt156_reg[0] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_15 ),
        .Q(bad_framesof_cnt156_reg[0]),
        .R(rst_));
  CARRY8 \bad_framesof_cnt156_reg[0]_i_2 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\bad_framesof_cnt156_reg[0]_i_2_n_0 ,\bad_framesof_cnt156_reg[0]_i_2_n_1 ,\bad_framesof_cnt156_reg[0]_i_2_n_2 ,\bad_framesof_cnt156_reg[0]_i_2_n_3 ,\NLW_bad_framesof_cnt156_reg[0]_i_2_CO_UNCONNECTED [3],\bad_framesof_cnt156_reg[0]_i_2_n_5 ,\bad_framesof_cnt156_reg[0]_i_2_n_6 ,\bad_framesof_cnt156_reg[0]_i_2_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .O({\bad_framesof_cnt156_reg[0]_i_2_n_8 ,\bad_framesof_cnt156_reg[0]_i_2_n_9 ,\bad_framesof_cnt156_reg[0]_i_2_n_10 ,\bad_framesof_cnt156_reg[0]_i_2_n_11 ,\bad_framesof_cnt156_reg[0]_i_2_n_12 ,\bad_framesof_cnt156_reg[0]_i_2_n_13 ,\bad_framesof_cnt156_reg[0]_i_2_n_14 ,\bad_framesof_cnt156_reg[0]_i_2_n_15 }),
        .S({bad_framesof_cnt156_reg[7:1],\bad_framesof_cnt156[0]_i_3_n_0 }));
  FDRE \bad_framesof_cnt156_reg[10] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_13 ),
        .Q(bad_framesof_cnt156_reg[10]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[11] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_12 ),
        .Q(bad_framesof_cnt156_reg[11]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[12] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_11 ),
        .Q(bad_framesof_cnt156_reg[12]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[13] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_10 ),
        .Q(bad_framesof_cnt156_reg[13]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[14] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_9 ),
        .Q(bad_framesof_cnt156_reg[14]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[15] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_8 ),
        .Q(bad_framesof_cnt156_reg[15]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[16] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_15 ),
        .Q(bad_framesof_cnt156_reg[16]),
        .R(rst_));
  CARRY8 \bad_framesof_cnt156_reg[16]_i_1 
       (.CI(\bad_framesof_cnt156_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\bad_framesof_cnt156_reg[16]_i_1_n_0 ,\bad_framesof_cnt156_reg[16]_i_1_n_1 ,\bad_framesof_cnt156_reg[16]_i_1_n_2 ,\bad_framesof_cnt156_reg[16]_i_1_n_3 ,\NLW_bad_framesof_cnt156_reg[16]_i_1_CO_UNCONNECTED [3],\bad_framesof_cnt156_reg[16]_i_1_n_5 ,\bad_framesof_cnt156_reg[16]_i_1_n_6 ,\bad_framesof_cnt156_reg[16]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\bad_framesof_cnt156_reg[16]_i_1_n_8 ,\bad_framesof_cnt156_reg[16]_i_1_n_9 ,\bad_framesof_cnt156_reg[16]_i_1_n_10 ,\bad_framesof_cnt156_reg[16]_i_1_n_11 ,\bad_framesof_cnt156_reg[16]_i_1_n_12 ,\bad_framesof_cnt156_reg[16]_i_1_n_13 ,\bad_framesof_cnt156_reg[16]_i_1_n_14 ,\bad_framesof_cnt156_reg[16]_i_1_n_15 }),
        .S(bad_framesof_cnt156_reg[23:16]));
  FDRE \bad_framesof_cnt156_reg[17] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_14 ),
        .Q(bad_framesof_cnt156_reg[17]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[18] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_13 ),
        .Q(bad_framesof_cnt156_reg[18]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[19] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_12 ),
        .Q(bad_framesof_cnt156_reg[19]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[1] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_14 ),
        .Q(bad_framesof_cnt156_reg[1]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[20] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_11 ),
        .Q(bad_framesof_cnt156_reg[20]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[21] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_10 ),
        .Q(bad_framesof_cnt156_reg[21]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[22] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_9 ),
        .Q(bad_framesof_cnt156_reg[22]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[23] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[16]_i_1_n_8 ),
        .Q(bad_framesof_cnt156_reg[23]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[24] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_15 ),
        .Q(bad_framesof_cnt156_reg[24]),
        .R(rst_));
  CARRY8 \bad_framesof_cnt156_reg[24]_i_1 
       (.CI(\bad_framesof_cnt156_reg[16]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_bad_framesof_cnt156_reg[24]_i_1_CO_UNCONNECTED [7:6],\bad_framesof_cnt156_reg[24]_i_1_n_2 ,\bad_framesof_cnt156_reg[24]_i_1_n_3 ,\NLW_bad_framesof_cnt156_reg[24]_i_1_CO_UNCONNECTED [3],\bad_framesof_cnt156_reg[24]_i_1_n_5 ,\bad_framesof_cnt156_reg[24]_i_1_n_6 ,\bad_framesof_cnt156_reg[24]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_bad_framesof_cnt156_reg[24]_i_1_O_UNCONNECTED [7],\bad_framesof_cnt156_reg[24]_i_1_n_9 ,\bad_framesof_cnt156_reg[24]_i_1_n_10 ,\bad_framesof_cnt156_reg[24]_i_1_n_11 ,\bad_framesof_cnt156_reg[24]_i_1_n_12 ,\bad_framesof_cnt156_reg[24]_i_1_n_13 ,\bad_framesof_cnt156_reg[24]_i_1_n_14 ,\bad_framesof_cnt156_reg[24]_i_1_n_15 }),
        .S({1'b0,bad_framesof_cnt156_reg[30:24]}));
  FDRE \bad_framesof_cnt156_reg[25] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_14 ),
        .Q(bad_framesof_cnt156_reg[25]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[26] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_13 ),
        .Q(bad_framesof_cnt156_reg[26]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[27] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_12 ),
        .Q(bad_framesof_cnt156_reg[27]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[28] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_11 ),
        .Q(bad_framesof_cnt156_reg[28]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[29] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_10 ),
        .Q(bad_framesof_cnt156_reg[29]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[2] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_13 ),
        .Q(bad_framesof_cnt156_reg[2]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[30] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[24]_i_1_n_9 ),
        .Q(bad_framesof_cnt156_reg[30]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[3] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_12 ),
        .Q(bad_framesof_cnt156_reg[3]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[4] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_11 ),
        .Q(bad_framesof_cnt156_reg[4]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[5] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_10 ),
        .Q(bad_framesof_cnt156_reg[5]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[6] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_9 ),
        .Q(bad_framesof_cnt156_reg[6]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[7] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[0]_i_2_n_8 ),
        .Q(bad_framesof_cnt156_reg[7]),
        .R(rst_));
  FDRE \bad_framesof_cnt156_reg[8] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_15 ),
        .Q(bad_framesof_cnt156_reg[8]),
        .R(rst_));
  CARRY8 \bad_framesof_cnt156_reg[8]_i_1 
       (.CI(\bad_framesof_cnt156_reg[0]_i_2_n_0 ),
        .CI_TOP(1'b0),
        .CO({\bad_framesof_cnt156_reg[8]_i_1_n_0 ,\bad_framesof_cnt156_reg[8]_i_1_n_1 ,\bad_framesof_cnt156_reg[8]_i_1_n_2 ,\bad_framesof_cnt156_reg[8]_i_1_n_3 ,\NLW_bad_framesof_cnt156_reg[8]_i_1_CO_UNCONNECTED [3],\bad_framesof_cnt156_reg[8]_i_1_n_5 ,\bad_framesof_cnt156_reg[8]_i_1_n_6 ,\bad_framesof_cnt156_reg[8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\bad_framesof_cnt156_reg[8]_i_1_n_8 ,\bad_framesof_cnt156_reg[8]_i_1_n_9 ,\bad_framesof_cnt156_reg[8]_i_1_n_10 ,\bad_framesof_cnt156_reg[8]_i_1_n_11 ,\bad_framesof_cnt156_reg[8]_i_1_n_12 ,\bad_framesof_cnt156_reg[8]_i_1_n_13 ,\bad_framesof_cnt156_reg[8]_i_1_n_14 ,\bad_framesof_cnt156_reg[8]_i_1_n_15 }),
        .S(bad_framesof_cnt156_reg[15:8]));
  FDRE \bad_framesof_cnt156_reg[9] 
       (.C(lclk),
        .CE(bad_framesof_cnt1560),
        .D(\bad_framesof_cnt156_reg[8]_i_1_n_14 ),
        .Q(bad_framesof_cnt156_reg[9]),
        .R(rst_));
  ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo4x32__xdcDup__1 bfsof_sfifo
       (.din({unknown_sof_sticky,bad_framesof_cnt156_reg}),
        .\gcc0.gc0.count_reg[3] (\gcc0.gc0.count_reg[3] ),
        .lclk(lclk),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .ram_full_i_reg(ram_full_i_reg),
        .rst_(rst_));
  FDRE br_sof4_reg
       (.C(lclk),
        .CE(1'b1),
        .D(br_sof4_reg_0),
        .Q(br_sof4),
        .R(rst_));
  FDSE \ctrl_in_dly_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(\ctrl_in_dly_reg_n_0_[0] ),
        .S(SS[0]));
  FDSE \ctrl_in_dly_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(\ctrl_in_dly_reg_n_0_[1] ),
        .S(SS[0]));
  FDSE \ctrl_in_dly_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[2]),
        .Q(\ctrl_in_dly_reg_n_0_[2] ),
        .S(SS[0]));
  FDSE \ctrl_in_dly_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[3]),
        .Q(\ctrl_in_dly_reg_n_0_[3] ),
        .S(SS[0]));
  FDSE \ctrl_in_dly_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[4]),
        .Q(p_1_in__1),
        .S(SS[1]));
  FDSE \ctrl_in_dly_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[5]),
        .Q(\ctrl_out_reg[3]_0 [0]),
        .S(SS[1]));
  FDSE \ctrl_in_dly_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[6]),
        .Q(\ctrl_out_reg[3]_0 [1]),
        .S(SS[1]));
  FDSE \ctrl_in_dly_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(Q[7]),
        .Q(\ctrl_out_reg[3]_0 [2]),
        .S(SS[1]));
  LUT6 #(
    .INIT(64'hFFB8FFB8FFB80000)) 
    \ctrl_out[0]_i_1 
       (.I0(p_1_in__1),
        .I1(\ctrl_out[3]_i_3_n_0 ),
        .I2(\ctrl_in_dly_reg_n_0_[0] ),
        .I3(\ctrl_out[3]_i_2_n_0 ),
        .I4(xaui_mode),
        .I5(Q[0]),
        .O(\ctrl_out[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFB8FFB8FFB80000)) 
    \ctrl_out[1]_i_1 
       (.I0(\ctrl_out_reg[3]_0 [0]),
        .I1(\ctrl_out[3]_i_3_n_0 ),
        .I2(\ctrl_in_dly_reg_n_0_[1] ),
        .I3(\ctrl_out[3]_i_2_n_0 ),
        .I4(xaui_mode),
        .I5(Q[1]),
        .O(\ctrl_out[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFB8FFB8FFB80000)) 
    \ctrl_out[2]_i_1 
       (.I0(\ctrl_out_reg[3]_0 [1]),
        .I1(\ctrl_out[3]_i_3_n_0 ),
        .I2(\ctrl_in_dly_reg_n_0_[2] ),
        .I3(\ctrl_out[3]_i_2_n_0 ),
        .I4(xaui_mode),
        .I5(Q[2]),
        .O(\ctrl_out[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEE0EEEEEEE0E0E0)) 
    \ctrl_out[3]_i_1 
       (.I0(xaui_mode),
        .I1(Q[3]),
        .I2(\ctrl_out[3]_i_2_n_0 ),
        .I3(\ctrl_out_reg[3]_0 [2]),
        .I4(\ctrl_out[3]_i_3_n_0 ),
        .I5(\ctrl_in_dly_reg_n_0_[3] ),
        .O(\ctrl_out[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'hD5DDD5D5)) 
    \ctrl_out[3]_i_2 
       (.I0(xaui_mode),
        .I1(\data_out_reg[31]_0 ),
        .I2(\data_out_reg[31]_1 ),
        .I3(br_sof4_reg_0),
        .I4(\data_out_reg[63]_0 ),
        .O(\ctrl_out[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ctrl_out[3]_i_3 
       (.I0(\data_out_reg[63]_0 ),
        .I1(br_sof4_reg_0),
        .O(\ctrl_out[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDFD5DFD5DFD50000)) 
    \ctrl_out[4]_i_1 
       (.I0(\ctrl_out_reg[4]_0 ),
        .I1(Q[0]),
        .I2(\data_out_reg[63]_0 ),
        .I3(p_1_in__1),
        .I4(xaui_mode),
        .I5(Q[4]),
        .O(\ctrl_out[4]_i_1_n_0 ));
  FDSE \ctrl_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[0]_i_1_n_0 ),
        .Q(D[0]),
        .S(rst_));
  FDSE \ctrl_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[1]_i_1_n_0 ),
        .Q(D[1]),
        .S(rst_));
  FDSE \ctrl_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[2]_i_1_n_0 ),
        .Q(D[2]),
        .S(rst_));
  FDSE \ctrl_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[3]_i_1_n_0 ),
        .Q(D[3]),
        .S(rst_));
  FDSE \ctrl_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out[4]_i_1_n_0 ),
        .Q(D[4]),
        .S(rst_));
  FDSE \ctrl_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[1]_0 ),
        .Q(D[5]),
        .S(rst_));
  FDSE \ctrl_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[2]_0 ),
        .Q(D[6]),
        .S(rst_));
  FDSE \ctrl_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(xaui_mode_reg),
        .Q(D[7]),
        .S(rst_));
  FDRE \data_in_dly_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [0]),
        .Q(data_in_dly__0[0]),
        .R(1'b0));
  FDRE \data_in_dly_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [10]),
        .Q(data_in_dly__0[10]),
        .R(1'b0));
  FDRE \data_in_dly_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [11]),
        .Q(data_in_dly__0[11]),
        .R(1'b0));
  FDRE \data_in_dly_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [12]),
        .Q(data_in_dly__0[12]),
        .R(1'b0));
  FDRE \data_in_dly_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [13]),
        .Q(data_in_dly__0[13]),
        .R(1'b0));
  FDRE \data_in_dly_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [14]),
        .Q(data_in_dly__0[14]),
        .R(1'b0));
  FDRE \data_in_dly_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [15]),
        .Q(data_in_dly__0[15]),
        .R(1'b0));
  FDRE \data_in_dly_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [16]),
        .Q(data_in_dly__0[16]),
        .R(1'b0));
  FDRE \data_in_dly_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [17]),
        .Q(data_in_dly__0[17]),
        .R(1'b0));
  FDRE \data_in_dly_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [18]),
        .Q(data_in_dly__0[18]),
        .R(1'b0));
  FDRE \data_in_dly_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [19]),
        .Q(data_in_dly__0[19]),
        .R(1'b0));
  FDRE \data_in_dly_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [1]),
        .Q(data_in_dly__0[1]),
        .R(1'b0));
  FDRE \data_in_dly_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [20]),
        .Q(data_in_dly__0[20]),
        .R(1'b0));
  FDRE \data_in_dly_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [21]),
        .Q(data_in_dly__0[21]),
        .R(1'b0));
  FDRE \data_in_dly_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [22]),
        .Q(data_in_dly__0[22]),
        .R(1'b0));
  FDRE \data_in_dly_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [23]),
        .Q(data_in_dly__0[23]),
        .R(1'b0));
  FDRE \data_in_dly_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [24]),
        .Q(data_in_dly__0[24]),
        .R(1'b0));
  FDRE \data_in_dly_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [25]),
        .Q(data_in_dly__0[25]),
        .R(1'b0));
  FDRE \data_in_dly_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [26]),
        .Q(data_in_dly__0[26]),
        .R(1'b0));
  FDRE \data_in_dly_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [27]),
        .Q(data_in_dly__0[27]),
        .R(1'b0));
  FDRE \data_in_dly_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [28]),
        .Q(data_in_dly__0[28]),
        .R(1'b0));
  FDRE \data_in_dly_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [29]),
        .Q(data_in_dly__0[29]),
        .R(1'b0));
  FDRE \data_in_dly_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [2]),
        .Q(data_in_dly__0[2]),
        .R(1'b0));
  FDRE \data_in_dly_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [30]),
        .Q(data_in_dly__0[30]),
        .R(1'b0));
  FDRE \data_in_dly_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [31]),
        .Q(data_in_dly__0[31]),
        .R(1'b0));
  FDRE \data_in_dly_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [32]),
        .Q(data_in_dly__0[32]),
        .R(1'b0));
  FDRE \data_in_dly_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [33]),
        .Q(data_in_dly__0[33]),
        .R(1'b0));
  FDRE \data_in_dly_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [34]),
        .Q(data_in_dly__0[34]),
        .R(1'b0));
  FDRE \data_in_dly_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [35]),
        .Q(data_in_dly__0[35]),
        .R(1'b0));
  FDRE \data_in_dly_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [36]),
        .Q(data_in_dly__0[36]),
        .R(1'b0));
  FDRE \data_in_dly_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [37]),
        .Q(data_in_dly__0[37]),
        .R(1'b0));
  FDRE \data_in_dly_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [38]),
        .Q(data_in_dly__0[38]),
        .R(1'b0));
  FDRE \data_in_dly_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [39]),
        .Q(data_in_dly__0[39]),
        .R(1'b0));
  FDRE \data_in_dly_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [3]),
        .Q(data_in_dly__0[3]),
        .R(1'b0));
  FDRE \data_in_dly_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [40]),
        .Q(data_in_dly[40]),
        .R(1'b0));
  FDRE \data_in_dly_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [41]),
        .Q(data_in_dly[41]),
        .R(1'b0));
  FDRE \data_in_dly_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [42]),
        .Q(data_in_dly[42]),
        .R(1'b0));
  FDRE \data_in_dly_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [43]),
        .Q(data_in_dly[43]),
        .R(1'b0));
  FDRE \data_in_dly_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [44]),
        .Q(data_in_dly[44]),
        .R(1'b0));
  FDRE \data_in_dly_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [45]),
        .Q(data_in_dly[45]),
        .R(1'b0));
  FDRE \data_in_dly_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [46]),
        .Q(data_in_dly[46]),
        .R(1'b0));
  FDRE \data_in_dly_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [47]),
        .Q(data_in_dly[47]),
        .R(1'b0));
  FDRE \data_in_dly_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [48]),
        .Q(data_in_dly[48]),
        .R(1'b0));
  FDRE \data_in_dly_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [49]),
        .Q(data_in_dly[49]),
        .R(1'b0));
  FDRE \data_in_dly_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [4]),
        .Q(data_in_dly__0[4]),
        .R(1'b0));
  FDRE \data_in_dly_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [50]),
        .Q(data_in_dly[50]),
        .R(1'b0));
  FDRE \data_in_dly_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [51]),
        .Q(data_in_dly[51]),
        .R(1'b0));
  FDRE \data_in_dly_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [52]),
        .Q(data_in_dly[52]),
        .R(1'b0));
  FDRE \data_in_dly_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [53]),
        .Q(data_in_dly[53]),
        .R(1'b0));
  FDRE \data_in_dly_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [54]),
        .Q(data_in_dly[54]),
        .R(1'b0));
  FDRE \data_in_dly_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [55]),
        .Q(data_in_dly[55]),
        .R(1'b0));
  FDRE \data_in_dly_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [56]),
        .Q(data_in_dly[56]),
        .R(1'b0));
  FDRE \data_in_dly_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [57]),
        .Q(data_in_dly[57]),
        .R(1'b0));
  FDRE \data_in_dly_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [58]),
        .Q(data_in_dly[58]),
        .R(1'b0));
  FDRE \data_in_dly_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [59]),
        .Q(data_in_dly[59]),
        .R(1'b0));
  FDRE \data_in_dly_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [5]),
        .Q(data_in_dly__0[5]),
        .R(1'b0));
  FDRE \data_in_dly_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [60]),
        .Q(data_in_dly[60]),
        .R(1'b0));
  FDRE \data_in_dly_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [61]),
        .Q(data_in_dly[61]),
        .R(1'b0));
  FDRE \data_in_dly_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [62]),
        .Q(data_in_dly[62]),
        .R(1'b0));
  FDRE \data_in_dly_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [63]),
        .Q(data_in_dly[63]),
        .R(1'b0));
  FDRE \data_in_dly_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [6]),
        .Q(data_in_dly__0[6]),
        .R(1'b0));
  FDRE \data_in_dly_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [7]),
        .Q(data_in_dly__0[7]),
        .R(1'b0));
  FDRE \data_in_dly_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [8]),
        .Q(data_in_dly__0[8]),
        .R(1'b0));
  FDRE \data_in_dly_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(\data_out_reg[63]_1 [9]),
        .Q(data_in_dly__0[9]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[0]_i_1 
       (.I0(\data_out_reg[63]_1 [0]),
        .I1(\data_out[0]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[0]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[0]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[32]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[0]),
        .O(\data_out[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[10]_i_1 
       (.I0(\data_out_reg[63]_1 [10]),
        .I1(\data_out[10]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[10]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[10]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[42]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[10]),
        .O(\data_out[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[11]_i_1 
       (.I0(\data_out_reg[63]_1 [11]),
        .I1(\data_out[11]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[11]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[11]_i_2 
       (.I0(data_in_dly__0[11]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[43]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[12]_i_1 
       (.I0(\data_out_reg[63]_1 [12]),
        .I1(\data_out[12]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[12]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[12]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[44]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[12]),
        .O(\data_out[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[13]_i_1 
       (.I0(\data_out_reg[63]_1 [13]),
        .I1(\data_out[13]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[13]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[13]_i_2 
       (.I0(data_in_dly__0[13]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[45]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[14]_i_1 
       (.I0(\data_out_reg[63]_1 [14]),
        .I1(\data_out[14]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[14]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[14]_i_2 
       (.I0(data_in_dly__0[14]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[46]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[15]_i_1 
       (.I0(\data_out_reg[63]_1 [15]),
        .I1(\data_out[15]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[15]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[15]_i_2 
       (.I0(data_in_dly__0[15]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[47]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[16]_i_1 
       (.I0(\data_out_reg[63]_1 [16]),
        .I1(\data_out[16]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[16]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[16]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[48]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[16]),
        .O(\data_out[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[17]_i_1 
       (.I0(\data_out_reg[63]_1 [17]),
        .I1(\data_out[17]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[17]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[17]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[49]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[17]),
        .O(\data_out[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[18]_i_1 
       (.I0(\data_out_reg[63]_1 [18]),
        .I1(\data_out[18]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[18]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[18]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[50]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[18]),
        .O(\data_out[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[19]_i_1 
       (.I0(\data_out_reg[63]_1 [19]),
        .I1(\data_out[19]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[19]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[19]_i_2 
       (.I0(data_in_dly__0[19]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[51]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[19]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[1]_i_1 
       (.I0(\data_out_reg[63]_1 [1]),
        .I1(\data_out[1]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[1]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[1]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[33]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[1]),
        .O(\data_out[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[20]_i_1 
       (.I0(\data_out_reg[63]_1 [20]),
        .I1(\data_out[20]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[20]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[20]_i_2 
       (.I0(data_in_dly__0[20]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[52]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[20]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[21]_i_1 
       (.I0(\data_out_reg[63]_1 [21]),
        .I1(\data_out[21]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[21]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[21]_i_2 
       (.I0(data_in_dly__0[21]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[53]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[21]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[22]_i_1 
       (.I0(\data_out_reg[63]_1 [22]),
        .I1(\data_out[22]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[22]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[22]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[54]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[22]),
        .O(\data_out[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[23]_i_1 
       (.I0(\data_out_reg[63]_1 [23]),
        .I1(\data_out[23]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[23]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[23]_i_2 
       (.I0(data_in_dly__0[23]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly[55]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[23]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[24]_i_1 
       (.I0(\data_out_reg[63]_1 [24]),
        .I1(\data_out[24]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[24]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[24]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[56]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[24]),
        .O(\data_out[24]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[25]_i_1 
       (.I0(\data_out_reg[63]_1 [25]),
        .I1(\data_out[25]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[25]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[25]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[57]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[25]),
        .O(\data_out[25]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[26]_i_1 
       (.I0(\data_out_reg[63]_1 [26]),
        .I1(\data_out[26]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[26]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[26]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[58]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[26]),
        .O(\data_out[26]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[27]_i_1 
       (.I0(\data_out_reg[63]_1 [27]),
        .I1(\data_out[27]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[27]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[27]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[59]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[27]),
        .O(\data_out[27]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[28]_i_1 
       (.I0(\data_out_reg[63]_1 [28]),
        .I1(\data_out[28]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[28]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[28]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[60]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[28]),
        .O(\data_out[28]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[29]_i_1 
       (.I0(\data_out_reg[63]_1 [29]),
        .I1(\data_out[29]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[29]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[29]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[61]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[29]),
        .O(\data_out[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[2]_i_1 
       (.I0(\data_out_reg[63]_1 [2]),
        .I1(\data_out[2]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[2]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[2]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[34]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[2]),
        .O(\data_out[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[30]_i_1 
       (.I0(\data_out_reg[63]_1 [30]),
        .I1(\data_out[30]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[30]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[30]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[62]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[30]),
        .O(\data_out[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[31]_i_1 
       (.I0(\data_out_reg[63]_1 [31]),
        .I1(\data_out[31]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[31]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[31]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[63]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[31]),
        .O(\data_out[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[32]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [32]),
        .I2(\data_out_reg[63]_1 [0]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[32]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[32]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[33]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [33]),
        .I2(\data_out_reg[63]_1 [1]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[33]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[33]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[34]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [34]),
        .I2(\data_out_reg[63]_1 [2]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[34]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[34]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[35]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [35]),
        .I2(\data_out_reg[63]_1 [3]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[35]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[35]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[36]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [36]),
        .I2(\data_out_reg[63]_1 [4]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[36]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[36]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[37]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [37]),
        .I2(\data_out_reg[63]_1 [5]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[37]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[37]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[38]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [38]),
        .I2(\data_out_reg[63]_1 [6]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[38]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[38]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[39]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [39]),
        .I2(\data_out_reg[63]_1 [7]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly__0[39]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[39]));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[3]_i_1 
       (.I0(\data_out_reg[63]_1 [3]),
        .I1(\data_out[3]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[3]));
  LUT5 #(
    .INIT(32'h5555CF55)) 
    \data_out[3]_i_2 
       (.I0(data_in_dly__0[3]),
        .I1(\data_out_reg[31]_0 ),
        .I2(data_in_dly__0[35]),
        .I3(\data_out_reg[63]_0 ),
        .I4(br_sof4_reg_0),
        .O(\data_out[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[40]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [40]),
        .I2(\data_out_reg[63]_1 [8]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[40]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[40]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[41]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [41]),
        .I2(\data_out_reg[63]_1 [9]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[41]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[41]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[42]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [42]),
        .I2(\data_out_reg[63]_1 [10]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[42]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[42]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[43]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [43]),
        .I2(\data_out_reg[63]_1 [11]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[43]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[43]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[44]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [44]),
        .I2(\data_out_reg[63]_1 [12]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[44]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[44]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[45]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [45]),
        .I2(\data_out_reg[63]_1 [13]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[45]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[45]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[46]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [46]),
        .I2(\data_out_reg[63]_1 [14]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[46]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[46]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[47]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [47]),
        .I2(\data_out_reg[63]_1 [15]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[47]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[47]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[48]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [48]),
        .I2(\data_out_reg[63]_1 [16]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[48]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[48]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[49]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [49]),
        .I2(\data_out_reg[63]_1 [17]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[49]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[49]));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[4]_i_1 
       (.I0(\data_out_reg[63]_1 [4]),
        .I1(\data_out[4]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[4]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[4]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[36]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[4]),
        .O(\data_out[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[50]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [50]),
        .I2(\data_out_reg[63]_1 [18]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[50]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[50]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[51]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [51]),
        .I2(\data_out_reg[63]_1 [19]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[51]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[51]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[52]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [52]),
        .I2(\data_out_reg[63]_1 [20]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[52]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[52]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[53]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [53]),
        .I2(\data_out_reg[63]_1 [21]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[53]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[53]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[54]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [54]),
        .I2(\data_out_reg[63]_1 [22]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[54]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[54]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[55]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [55]),
        .I2(\data_out_reg[63]_1 [23]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[55]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[55]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[56]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [56]),
        .I2(\data_out_reg[63]_1 [24]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[56]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[56]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[57]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [57]),
        .I2(\data_out_reg[63]_1 [25]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[57]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[57]));
  LUT6 #(
    .INIT(64'hE0EEE000EEEEEEEE)) 
    \data_out[58]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [58]),
        .I2(\data_out_reg[63]_1 [26]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[58]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[58]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[59]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [59]),
        .I2(\data_out_reg[63]_1 [27]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[59]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[59]));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[5]_i_1 
       (.I0(\data_out_reg[63]_1 [5]),
        .I1(\data_out[5]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[5]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[5]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[37]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[5]),
        .O(\data_out[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[60]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [60]),
        .I2(\data_out_reg[63]_1 [28]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[60]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[60]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[61]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [61]),
        .I2(\data_out_reg[63]_1 [29]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[61]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[61]));
  LUT6 #(
    .INIT(64'hF4FFF44444444444)) 
    \data_out[62]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [62]),
        .I2(\data_out_reg[63]_1 [30]),
        .I3(\data_out_reg[63]_0 ),
        .I4(data_in_dly[62]),
        .I5(\ctrl_out_reg[4]_0 ),
        .O(p_1_in[62]));
  LUT6 #(
    .INIT(64'hF444F4F4F4444444)) 
    \data_out[63]_i_1 
       (.I0(xaui_mode),
        .I1(\data_out_reg[63]_1 [63]),
        .I2(\ctrl_out_reg[4]_0 ),
        .I3(\data_out_reg[63]_1 [31]),
        .I4(\data_out_reg[63]_0 ),
        .I5(data_in_dly[63]),
        .O(p_1_in[63]));
  LUT6 #(
    .INIT(64'h00020A0A0002AAAA)) 
    \data_out[63]_i_2 
       (.I0(xaui_mode),
        .I1(bad_frame_reg_0),
        .I2(\data_out_reg[31]_0 ),
        .I3(br_sof4_reg_0),
        .I4(\data_out_reg[63]_0 ),
        .I5(\data_out_reg[31]_1 ),
        .O(\ctrl_out_reg[4]_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[6]_i_1 
       (.I0(\data_out_reg[63]_1 [6]),
        .I1(\data_out[6]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[6]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[6]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[38]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[6]),
        .O(\data_out[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A3A3A3A)) 
    \data_out[7]_i_1 
       (.I0(\data_out_reg[63]_1 [7]),
        .I1(\data_out[7]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[7]));
  LUT5 #(
    .INIT(32'h00B0FFBF)) 
    \data_out[7]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly__0[39]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[7]),
        .O(\data_out[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[8]_i_1 
       (.I0(\data_out_reg[63]_1 [8]),
        .I1(\data_out[8]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[8]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[8]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[40]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[8]),
        .O(\data_out[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFACACACA)) 
    \data_out[9]_i_1 
       (.I0(\data_out_reg[63]_1 [9]),
        .I1(\data_out[9]_i_2_n_0 ),
        .I2(xaui_mode),
        .I3(\data_out_reg[31]_1 ),
        .I4(\data_out_reg[31]_0 ),
        .O(p_1_in[9]));
  LUT5 #(
    .INIT(32'hFFEF00E0)) 
    \data_out[9]_i_2 
       (.I0(\data_out_reg[31]_0 ),
        .I1(data_in_dly[41]),
        .I2(\data_out_reg[63]_0 ),
        .I3(br_sof4_reg_0),
        .I4(data_in_dly__0[9]),
        .O(\data_out[9]_i_2_n_0 ));
  FDSE \data_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[0]),
        .Q(\bdata1_reg[63] [0]),
        .S(rst_));
  FDSE \data_out_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[10]),
        .Q(\bdata1_reg[63] [10]),
        .S(rst_));
  FDRE \data_out_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[11]),
        .Q(\bdata1_reg[63] [11]),
        .R(rst_));
  FDRE \data_out_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[12]),
        .Q(\bdata1_reg[63] [12]),
        .R(rst_));
  FDRE \data_out_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[13]),
        .Q(\bdata1_reg[63] [13]),
        .R(rst_));
  FDRE \data_out_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[14]),
        .Q(\bdata1_reg[63] [14]),
        .R(rst_));
  FDRE \data_out_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[15]),
        .Q(\bdata1_reg[63] [15]),
        .R(rst_));
  FDSE \data_out_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[16]),
        .Q(\bdata1_reg[63] [16]),
        .S(rst_));
  FDSE \data_out_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[17]),
        .Q(\bdata1_reg[63] [17]),
        .S(rst_));
  FDSE \data_out_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[18]),
        .Q(\bdata1_reg[63] [18]),
        .S(rst_));
  FDRE \data_out_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[19]),
        .Q(\bdata1_reg[63] [19]),
        .R(rst_));
  FDSE \data_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[1]),
        .Q(\bdata1_reg[63] [1]),
        .S(rst_));
  FDRE \data_out_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[20]),
        .Q(\bdata1_reg[63] [20]),
        .R(rst_));
  FDRE \data_out_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[21]),
        .Q(\bdata1_reg[63] [21]),
        .R(rst_));
  FDRE \data_out_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[22]),
        .Q(\bdata1_reg[63] [22]),
        .R(rst_));
  FDRE \data_out_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[23]),
        .Q(\bdata1_reg[63] [23]),
        .R(rst_));
  FDSE \data_out_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[24]),
        .Q(\bdata1_reg[63] [24]),
        .S(rst_));
  FDSE \data_out_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[25]),
        .Q(\bdata1_reg[63] [25]),
        .S(rst_));
  FDSE \data_out_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[26]),
        .Q(\bdata1_reg[63] [26]),
        .S(rst_));
  FDRE \data_out_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[27]),
        .Q(\bdata1_reg[63] [27]),
        .R(rst_));
  FDRE \data_out_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[28]),
        .Q(\bdata1_reg[63] [28]),
        .R(rst_));
  FDRE \data_out_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[29]),
        .Q(\bdata1_reg[63] [29]),
        .R(rst_));
  FDSE \data_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[2]),
        .Q(\bdata1_reg[63] [2]),
        .S(rst_));
  FDRE \data_out_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[30]),
        .Q(\bdata1_reg[63] [30]),
        .R(rst_));
  FDRE \data_out_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[31]),
        .Q(\bdata1_reg[63] [31]),
        .R(rst_));
  FDSE \data_out_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[32]),
        .Q(\bdata1_reg[63] [32]),
        .S(rst_));
  FDSE \data_out_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[33]),
        .Q(\bdata1_reg[63] [33]),
        .S(rst_));
  FDSE \data_out_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[34]),
        .Q(\bdata1_reg[63] [34]),
        .S(rst_));
  FDRE \data_out_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[35]),
        .Q(\bdata1_reg[63] [35]),
        .R(rst_));
  FDRE \data_out_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[36]),
        .Q(\bdata1_reg[63] [36]),
        .R(rst_));
  FDRE \data_out_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[37]),
        .Q(\bdata1_reg[63] [37]),
        .R(rst_));
  FDRE \data_out_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[38]),
        .Q(\bdata1_reg[63] [38]),
        .R(rst_));
  FDRE \data_out_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[39]),
        .Q(\bdata1_reg[63] [39]),
        .R(rst_));
  FDRE \data_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[3]),
        .Q(\bdata1_reg[63] [3]),
        .R(rst_));
  FDSE \data_out_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[40]),
        .Q(\bdata1_reg[63] [40]),
        .S(rst_));
  FDSE \data_out_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[41]),
        .Q(\bdata1_reg[63] [41]),
        .S(rst_));
  FDSE \data_out_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[42]),
        .Q(\bdata1_reg[63] [42]),
        .S(rst_));
  FDRE \data_out_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[43]),
        .Q(\bdata1_reg[63] [43]),
        .R(rst_));
  FDRE \data_out_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[44]),
        .Q(\bdata1_reg[63] [44]),
        .R(rst_));
  FDRE \data_out_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[45]),
        .Q(\bdata1_reg[63] [45]),
        .R(rst_));
  FDRE \data_out_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[46]),
        .Q(\bdata1_reg[63] [46]),
        .R(rst_));
  FDRE \data_out_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[47]),
        .Q(\bdata1_reg[63] [47]),
        .R(rst_));
  FDSE \data_out_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[48]),
        .Q(\bdata1_reg[63] [48]),
        .S(rst_));
  FDSE \data_out_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[49]),
        .Q(\bdata1_reg[63] [49]),
        .S(rst_));
  FDRE \data_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[4]),
        .Q(\bdata1_reg[63] [4]),
        .R(rst_));
  FDSE \data_out_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[50]),
        .Q(\bdata1_reg[63] [50]),
        .S(rst_));
  FDRE \data_out_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[51]),
        .Q(\bdata1_reg[63] [51]),
        .R(rst_));
  FDRE \data_out_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[52]),
        .Q(\bdata1_reg[63] [52]),
        .R(rst_));
  FDRE \data_out_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[53]),
        .Q(\bdata1_reg[63] [53]),
        .R(rst_));
  FDRE \data_out_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[54]),
        .Q(\bdata1_reg[63] [54]),
        .R(rst_));
  FDRE \data_out_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[55]),
        .Q(\bdata1_reg[63] [55]),
        .R(rst_));
  FDSE \data_out_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[56]),
        .Q(\bdata1_reg[63] [56]),
        .S(rst_));
  FDSE \data_out_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[57]),
        .Q(\bdata1_reg[63] [57]),
        .S(rst_));
  FDSE \data_out_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[58]),
        .Q(\bdata1_reg[63] [58]),
        .S(rst_));
  FDRE \data_out_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[59]),
        .Q(\bdata1_reg[63] [59]),
        .R(rst_));
  FDRE \data_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[5]),
        .Q(\bdata1_reg[63] [5]),
        .R(rst_));
  FDRE \data_out_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[60]),
        .Q(\bdata1_reg[63] [60]),
        .R(rst_));
  FDRE \data_out_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[61]),
        .Q(\bdata1_reg[63] [61]),
        .R(rst_));
  FDRE \data_out_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[62]),
        .Q(\bdata1_reg[63] [62]),
        .R(rst_));
  FDRE \data_out_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[63]),
        .Q(\bdata1_reg[63] [63]),
        .R(rst_));
  FDRE \data_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[6]),
        .Q(\bdata1_reg[63] [6]),
        .R(rst_));
  FDRE \data_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[7]),
        .Q(\bdata1_reg[63] [7]),
        .R(rst_));
  FDSE \data_out_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[8]),
        .Q(\bdata1_reg[63] [8]),
        .S(rst_));
  FDSE \data_out_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[9]),
        .Q(\bdata1_reg[63] [9]),
        .S(rst_));
  FDRE eof0_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof00),
        .Q(\data_out_reg[31]_0 ),
        .R(rst_));
  FDRE eof1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof10),
        .Q(bad_frame_reg_0),
        .R(rst_));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT4 #(
    .INIT(16'h4440)) 
    frame_done_i_1
       (.I0(frame_done),
        .I1(bad_frame_noeof_reg_0),
        .I2(\data_out_reg[31]_0 ),
        .I3(bad_frame_reg_0),
        .O(frame_done0));
  FDRE frame_done_reg
       (.C(lclk),
        .CE(1'b1),
        .D(frame_done0),
        .Q(frame_done),
        .R(rst_));
  FDRE has_sof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof0_reg_0),
        .Q(bad_frame_noeof_reg_0),
        .R(rst_));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF0080)) 
    pre_eof_i_1
       (.I0(pre_eof_i_2_n_0),
        .I1(D[5]),
        .I2(\bdata1_reg[63] [40]),
        .I3(\bdata1_reg[63] [41]),
        .I4(pre_eof_i_3_n_0),
        .I5(pre_eof_i_4_n_0),
        .O(pre_eof0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_10
       (.I0(\bdata1_reg[63] [58]),
        .I1(\bdata1_reg[63] [59]),
        .I2(\bdata1_reg[63] [60]),
        .I3(\bdata1_reg[63] [61]),
        .I4(\bdata1_reg[63] [63]),
        .I5(\bdata1_reg[63] [62]),
        .O(pre_eof_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h40)) 
    pre_eof_i_11
       (.I0(\bdata1_reg[63] [1]),
        .I1(\bdata1_reg[63] [0]),
        .I2(D[0]),
        .O(pre_eof_i_11_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_12
       (.I0(\bdata1_reg[63] [2]),
        .I1(\bdata1_reg[63] [3]),
        .I2(\bdata1_reg[63] [4]),
        .I3(\bdata1_reg[63] [5]),
        .I4(\bdata1_reg[63] [7]),
        .I5(\bdata1_reg[63] [6]),
        .O(pre_eof_i_12_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_13
       (.I0(\bdata1_reg[63] [26]),
        .I1(\bdata1_reg[63] [27]),
        .I2(\bdata1_reg[63] [28]),
        .I3(\bdata1_reg[63] [29]),
        .I4(\bdata1_reg[63] [31]),
        .I5(\bdata1_reg[63] [30]),
        .O(pre_eof_i_13_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    pre_eof_i_14
       (.I0(\bdata1_reg[63] [33]),
        .I1(\bdata1_reg[63] [32]),
        .I2(D[4]),
        .O(pre_eof_i_14_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_15
       (.I0(\bdata1_reg[63] [34]),
        .I1(\bdata1_reg[63] [35]),
        .I2(\bdata1_reg[63] [36]),
        .I3(\bdata1_reg[63] [37]),
        .I4(\bdata1_reg[63] [39]),
        .I5(\bdata1_reg[63] [38]),
        .O(pre_eof_i_15_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_16
       (.I0(\bdata1_reg[63] [10]),
        .I1(\bdata1_reg[63] [11]),
        .I2(\bdata1_reg[63] [12]),
        .I3(\bdata1_reg[63] [13]),
        .I4(\bdata1_reg[63] [15]),
        .I5(\bdata1_reg[63] [14]),
        .O(pre_eof_i_16_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_2
       (.I0(\bdata1_reg[63] [42]),
        .I1(\bdata1_reg[63] [43]),
        .I2(\bdata1_reg[63] [44]),
        .I3(\bdata1_reg[63] [45]),
        .I4(\bdata1_reg[63] [47]),
        .I5(\bdata1_reg[63] [46]),
        .O(pre_eof_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    pre_eof_i_3
       (.I0(\bdata1_reg[63] [49]),
        .I1(\bdata1_reg[63] [48]),
        .I2(D[6]),
        .I3(pre_eof_i_5_n_0),
        .I4(pre_eof_i_6_n_0),
        .O(pre_eof_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAEAAA)) 
    pre_eof_i_4
       (.I0(pre_eof_i_7_n_0),
        .I1(pre_eof_i_8_n_0),
        .I2(D[2]),
        .I3(\bdata1_reg[63] [16]),
        .I4(\bdata1_reg[63] [17]),
        .I5(pre_eof_i_9_n_0),
        .O(pre_eof_i_4_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_5
       (.I0(\bdata1_reg[63] [50]),
        .I1(\bdata1_reg[63] [51]),
        .I2(\bdata1_reg[63] [52]),
        .I3(\bdata1_reg[63] [53]),
        .I4(\bdata1_reg[63] [55]),
        .I5(\bdata1_reg[63] [54]),
        .O(pre_eof_i_5_n_0));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    pre_eof_i_6
       (.I0(\bdata1_reg[63] [57]),
        .I1(\bdata1_reg[63] [56]),
        .I2(D[7]),
        .I3(pre_eof_i_10_n_0),
        .I4(pre_eof_i_11_n_0),
        .I5(pre_eof_i_12_n_0),
        .O(pre_eof_i_6_n_0));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    pre_eof_i_7
       (.I0(\bdata1_reg[63] [25]),
        .I1(\bdata1_reg[63] [24]),
        .I2(D[3]),
        .I3(pre_eof_i_13_n_0),
        .I4(pre_eof_i_14_n_0),
        .I5(pre_eof_i_15_n_0),
        .O(pre_eof_i_7_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    pre_eof_i_8
       (.I0(\bdata1_reg[63] [18]),
        .I1(\bdata1_reg[63] [19]),
        .I2(\bdata1_reg[63] [20]),
        .I3(\bdata1_reg[63] [21]),
        .I4(\bdata1_reg[63] [23]),
        .I5(\bdata1_reg[63] [22]),
        .O(pre_eof_i_8_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    pre_eof_i_9
       (.I0(pre_eof_i_16_n_0),
        .I1(D[1]),
        .I2(\bdata1_reg[63] [8]),
        .I3(\bdata1_reg[63] [9]),
        .O(pre_eof_i_9_n_0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    pre_sof_i_1
       (.I0(\bdata1_reg[63] [1]),
        .I1(\bdata1_reg[63] [0]),
        .I2(D[0]),
        .I3(pre_sof_i_2_n_0),
        .I4(br_sof4),
        .O(pre_sof0));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    pre_sof_i_2
       (.I0(\bdata1_reg[63] [3]),
        .I1(\bdata1_reg[63] [2]),
        .I2(\bdata1_reg[63] [4]),
        .I3(\bdata1_reg[63] [5]),
        .I4(\bdata1_reg[63] [7]),
        .I5(\bdata1_reg[63] [6]),
        .O(pre_sof_i_2_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \raw_frame_cnt156[0]_i_2 
       (.I0(raw_frame_cnt156_reg[0]),
        .O(\raw_frame_cnt156[0]_i_2_n_0 ));
  FDRE \raw_frame_cnt156_reg[0] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_15 ),
        .Q(raw_frame_cnt156_reg[0]),
        .R(rst_));
  CARRY8 \raw_frame_cnt156_reg[0]_i_1 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\raw_frame_cnt156_reg[0]_i_1_n_0 ,\raw_frame_cnt156_reg[0]_i_1_n_1 ,\raw_frame_cnt156_reg[0]_i_1_n_2 ,\raw_frame_cnt156_reg[0]_i_1_n_3 ,\NLW_raw_frame_cnt156_reg[0]_i_1_CO_UNCONNECTED [3],\raw_frame_cnt156_reg[0]_i_1_n_5 ,\raw_frame_cnt156_reg[0]_i_1_n_6 ,\raw_frame_cnt156_reg[0]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .O({\raw_frame_cnt156_reg[0]_i_1_n_8 ,\raw_frame_cnt156_reg[0]_i_1_n_9 ,\raw_frame_cnt156_reg[0]_i_1_n_10 ,\raw_frame_cnt156_reg[0]_i_1_n_11 ,\raw_frame_cnt156_reg[0]_i_1_n_12 ,\raw_frame_cnt156_reg[0]_i_1_n_13 ,\raw_frame_cnt156_reg[0]_i_1_n_14 ,\raw_frame_cnt156_reg[0]_i_1_n_15 }),
        .S({raw_frame_cnt156_reg[7:1],\raw_frame_cnt156[0]_i_2_n_0 }));
  FDRE \raw_frame_cnt156_reg[10] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_13 ),
        .Q(raw_frame_cnt156_reg[10]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[11] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_12 ),
        .Q(raw_frame_cnt156_reg[11]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[12] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_11 ),
        .Q(raw_frame_cnt156_reg[12]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[13] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_10 ),
        .Q(raw_frame_cnt156_reg[13]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[14] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_9 ),
        .Q(raw_frame_cnt156_reg[14]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[15] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_8 ),
        .Q(raw_frame_cnt156_reg[15]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[16] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_15 ),
        .Q(raw_frame_cnt156_reg[16]),
        .R(rst_));
  CARRY8 \raw_frame_cnt156_reg[16]_i_1 
       (.CI(\raw_frame_cnt156_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\raw_frame_cnt156_reg[16]_i_1_n_0 ,\raw_frame_cnt156_reg[16]_i_1_n_1 ,\raw_frame_cnt156_reg[16]_i_1_n_2 ,\raw_frame_cnt156_reg[16]_i_1_n_3 ,\NLW_raw_frame_cnt156_reg[16]_i_1_CO_UNCONNECTED [3],\raw_frame_cnt156_reg[16]_i_1_n_5 ,\raw_frame_cnt156_reg[16]_i_1_n_6 ,\raw_frame_cnt156_reg[16]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\raw_frame_cnt156_reg[16]_i_1_n_8 ,\raw_frame_cnt156_reg[16]_i_1_n_9 ,\raw_frame_cnt156_reg[16]_i_1_n_10 ,\raw_frame_cnt156_reg[16]_i_1_n_11 ,\raw_frame_cnt156_reg[16]_i_1_n_12 ,\raw_frame_cnt156_reg[16]_i_1_n_13 ,\raw_frame_cnt156_reg[16]_i_1_n_14 ,\raw_frame_cnt156_reg[16]_i_1_n_15 }),
        .S(raw_frame_cnt156_reg[23:16]));
  FDRE \raw_frame_cnt156_reg[17] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_14 ),
        .Q(raw_frame_cnt156_reg[17]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[18] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_13 ),
        .Q(raw_frame_cnt156_reg[18]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[19] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_12 ),
        .Q(raw_frame_cnt156_reg[19]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[1] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_14 ),
        .Q(raw_frame_cnt156_reg[1]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[20] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_11 ),
        .Q(raw_frame_cnt156_reg[20]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[21] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_10 ),
        .Q(raw_frame_cnt156_reg[21]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[22] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_9 ),
        .Q(raw_frame_cnt156_reg[22]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[23] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[16]_i_1_n_8 ),
        .Q(raw_frame_cnt156_reg[23]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[24] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_15 ),
        .Q(raw_frame_cnt156_reg[24]),
        .R(rst_));
  CARRY8 \raw_frame_cnt156_reg[24]_i_1 
       (.CI(\raw_frame_cnt156_reg[16]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_raw_frame_cnt156_reg[24]_i_1_CO_UNCONNECTED [7],\raw_frame_cnt156_reg[24]_i_1_n_1 ,\raw_frame_cnt156_reg[24]_i_1_n_2 ,\raw_frame_cnt156_reg[24]_i_1_n_3 ,\NLW_raw_frame_cnt156_reg[24]_i_1_CO_UNCONNECTED [3],\raw_frame_cnt156_reg[24]_i_1_n_5 ,\raw_frame_cnt156_reg[24]_i_1_n_6 ,\raw_frame_cnt156_reg[24]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\raw_frame_cnt156_reg[24]_i_1_n_8 ,\raw_frame_cnt156_reg[24]_i_1_n_9 ,\raw_frame_cnt156_reg[24]_i_1_n_10 ,\raw_frame_cnt156_reg[24]_i_1_n_11 ,\raw_frame_cnt156_reg[24]_i_1_n_12 ,\raw_frame_cnt156_reg[24]_i_1_n_13 ,\raw_frame_cnt156_reg[24]_i_1_n_14 ,\raw_frame_cnt156_reg[24]_i_1_n_15 }),
        .S(raw_frame_cnt156_reg[31:24]));
  FDRE \raw_frame_cnt156_reg[25] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_14 ),
        .Q(raw_frame_cnt156_reg[25]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[26] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_13 ),
        .Q(raw_frame_cnt156_reg[26]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[27] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_12 ),
        .Q(raw_frame_cnt156_reg[27]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[28] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_11 ),
        .Q(raw_frame_cnt156_reg[28]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[29] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_10 ),
        .Q(raw_frame_cnt156_reg[29]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[2] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_13 ),
        .Q(raw_frame_cnt156_reg[2]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[30] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_9 ),
        .Q(raw_frame_cnt156_reg[30]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[31] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[24]_i_1_n_8 ),
        .Q(raw_frame_cnt156_reg[31]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[3] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_12 ),
        .Q(raw_frame_cnt156_reg[3]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[4] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_11 ),
        .Q(raw_frame_cnt156_reg[4]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[5] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_10 ),
        .Q(raw_frame_cnt156_reg[5]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[6] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_9 ),
        .Q(raw_frame_cnt156_reg[6]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[7] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[0]_i_1_n_8 ),
        .Q(raw_frame_cnt156_reg[7]),
        .R(rst_));
  FDRE \raw_frame_cnt156_reg[8] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_15 ),
        .Q(raw_frame_cnt156_reg[8]),
        .R(rst_));
  CARRY8 \raw_frame_cnt156_reg[8]_i_1 
       (.CI(\raw_frame_cnt156_reg[0]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\raw_frame_cnt156_reg[8]_i_1_n_0 ,\raw_frame_cnt156_reg[8]_i_1_n_1 ,\raw_frame_cnt156_reg[8]_i_1_n_2 ,\raw_frame_cnt156_reg[8]_i_1_n_3 ,\NLW_raw_frame_cnt156_reg[8]_i_1_CO_UNCONNECTED [3],\raw_frame_cnt156_reg[8]_i_1_n_5 ,\raw_frame_cnt156_reg[8]_i_1_n_6 ,\raw_frame_cnt156_reg[8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\raw_frame_cnt156_reg[8]_i_1_n_8 ,\raw_frame_cnt156_reg[8]_i_1_n_9 ,\raw_frame_cnt156_reg[8]_i_1_n_10 ,\raw_frame_cnt156_reg[8]_i_1_n_11 ,\raw_frame_cnt156_reg[8]_i_1_n_12 ,\raw_frame_cnt156_reg[8]_i_1_n_13 ,\raw_frame_cnt156_reg[8]_i_1_n_14 ,\raw_frame_cnt156_reg[8]_i_1_n_15 }),
        .S(raw_frame_cnt156_reg[15:8]));
  FDRE \raw_frame_cnt156_reg[9] 
       (.C(lclk),
        .CE(frame_done),
        .D(\raw_frame_cnt156_reg[8]_i_1_n_14 ),
        .Q(raw_frame_cnt156_reg[9]),
        .R(rst_));
  ps_emio_eth_1g_AXIS_LMAC_0_1_br_sfifo4x32 rf_sfifo
       (.empty(empty),
        .full(full),
        .lclk(lclk),
        .out(raw_frame_cnt156_reg),
        .rd_en(rd_en),
        .rst_(rst_),
        .wr_en(wr_en));
  FDRE shift_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof0_reg_0),
        .Q(\data_out_reg[63]_0 ),
        .R(rst_));
  FDRE sof0_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof00),
        .Q(sof0),
        .R(rst_));
  FDRE sof1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof10),
        .Q(sof1),
        .R(rst_));
  FDRE sof2_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof20),
        .Q(sof2),
        .R(rst_));
  FDRE sof3_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof30),
        .Q(sof3),
        .R(rst_));
  FDRE sof4_cycle_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof4_reg_0),
        .Q(\data_out_reg[31]_1 ),
        .R(rst_));
  FDRE sof4_reg
       (.C(lclk),
        .CE(1'b1),
        .D(shift0),
        .Q(br_sof4_reg_0),
        .R(rst_));
  FDRE sof5_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof50),
        .Q(sof5),
        .R(rst_));
  FDRE sof6_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof60),
        .Q(sof6),
        .R(rst_));
  FDRE sof7_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof70),
        .Q(sof7),
        .R(rst_));
  LUT5 #(
    .INIT(32'h0DFF0D00)) 
    type_reject_i_1
       (.I0(type_reject_i_2_n_0),
        .I1(type_reject_i_3_n_0),
        .I2(type_reject_i_4_n_0),
        .I3(sof),
        .I4(type_reject),
        .O(type_reject_reg));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    type_reject_i_10
       (.I0(\bdata1_reg[63] [33]),
        .I1(\bdata1_reg[63] [34]),
        .I2(\bdata1_reg[63] [36]),
        .I3(type_reject_i_13_n_0),
        .I4(\bdata1_reg[63] [40]),
        .I5(\bdata1_reg[63] [41]),
        .O(type_reject_i_10_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    type_reject_i_11
       (.I0(\bdata1_reg[63] [44]),
        .I1(\bdata1_reg[63] [43]),
        .I2(\bdata1_reg[63] [42]),
        .I3(\bdata1_reg[63] [41]),
        .O(type_reject_i_11_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    type_reject_i_12
       (.I0(\bdata1_reg[63] [60]),
        .I1(\bdata1_reg[63] [61]),
        .I2(\bdata1_reg[63] [63]),
        .I3(\bdata1_reg[63] [62]),
        .O(type_reject_i_12_n_0));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h1)) 
    type_reject_i_13
       (.I0(\bdata1_reg[63] [37]),
        .I1(\bdata1_reg[63] [38]),
        .O(type_reject_i_13_n_0));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    type_reject_i_2
       (.I0(type_reject_i_5_n_0),
        .I1(\bdata1_reg[63] [33]),
        .I2(\bdata1_reg[63] [32]),
        .I3(\bdata1_reg[63] [36]),
        .I4(\bdata1_reg[63] [35]),
        .I5(type_reject_i_6_n_0),
        .O(type_reject_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    type_reject_i_3
       (.I0(type_reject_i_7_n_0),
        .I1(\bdata1_reg[63] [48]),
        .I2(\bdata1_reg[63] [49]),
        .I3(\bdata1_reg[63] [50]),
        .I4(\bdata1_reg[63] [51]),
        .I5(type_reject_i_8_n_0),
        .O(type_reject_i_3_n_0));
  LUT5 #(
    .INIT(32'h00800800)) 
    type_reject_i_4
       (.I0(type_reject_i_9_n_0),
        .I1(type_reject_i_10_n_0),
        .I2(\bdata1_reg[63] [39]),
        .I3(\bdata1_reg[63] [35]),
        .I4(\bdata1_reg[63] [32]),
        .O(type_reject_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    type_reject_i_5
       (.I0(\bdata1_reg[63] [40]),
        .I1(\bdata1_reg[63] [39]),
        .I2(\bdata1_reg[63] [38]),
        .I3(\bdata1_reg[63] [37]),
        .O(type_reject_i_5_n_0));
  LUT5 #(
    .INIT(32'h00100000)) 
    type_reject_i_6
       (.I0(\bdata1_reg[63] [45]),
        .I1(\bdata1_reg[63] [46]),
        .I2(\bdata1_reg[63] [56]),
        .I3(\bdata1_reg[63] [47]),
        .I4(type_reject_i_11_n_0),
        .O(type_reject_i_6_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    type_reject_i_7
       (.I0(\bdata1_reg[63] [52]),
        .I1(\bdata1_reg[63] [53]),
        .I2(\bdata1_reg[63] [54]),
        .I3(\bdata1_reg[63] [55]),
        .O(type_reject_i_7_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    type_reject_i_8
       (.I0(\bdata1_reg[63] [59]),
        .I1(\bdata1_reg[63] [58]),
        .I2(\bdata1_reg[63] [57]),
        .I3(\bdata1_reg[63] [34]),
        .I4(type_reject_i_12_n_0),
        .O(type_reject_i_8_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    type_reject_i_9
       (.I0(\bdata1_reg[63] [42]),
        .I1(\bdata1_reg[63] [43]),
        .I2(\bdata1_reg[63] [44]),
        .I3(\bdata1_reg[63] [45]),
        .I4(\bdata1_reg[63] [47]),
        .I5(\bdata1_reg[63] [46]),
        .O(type_reject_i_9_n_0));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT2 #(
    .INIT(4'hE)) 
    unknown_sof_sticky_i_1
       (.I0(unknown_sof_sticky0),
        .I1(unknown_sof_sticky),
        .O(unknown_sof_sticky_i_1_n_0));
  FDRE unknown_sof_sticky_reg
       (.C(lclk),
        .CE(1'b1),
        .D(unknown_sof_sticky_i_1_n_0),
        .Q(unknown_sof_sticky),
        .R(rst_));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_tcore_fmac_core
   (\new_crc_reg[0] ,
    rxfifo_dout,
    rx_mac_empty,
    ipcs_fifo_dout,
    cs_fifo_empty,
    sof,
    type_reject,
    tx_rd_state26_out,
    gmii_txd,
    in0,
    gmii_tx_en,
    lclk,
    txfifo_din,
    tx_mac_wr,
    rx_mac_rd,
    cs_fifo_rd_en,
    pre_sof0,
    pre_eof0,
    sof_reg,
    fmac_speed_0_sp_1,
    rst_,
    ram_full_i_reg,
    ram_empty_i_reg,
    mode_1G,
    fmac_speed,
    D,
    \ctrl_out_reg[7] ,
    fmac_speed_1_sp_1);
  output \new_crc_reg[0] ;
  output [63:0]rxfifo_dout;
  output rx_mac_empty;
  output [15:0]ipcs_fifo_dout;
  output cs_fifo_empty;
  output sof;
  output type_reject;
  output tx_rd_state26_out;
  output [7:0]gmii_txd;
  output in0;
  output gmii_tx_en;
  input lclk;
  input [63:0]txfifo_din;
  input tx_mac_wr;
  input rx_mac_rd;
  input cs_fifo_rd_en;
  input pre_sof0;
  input pre_eof0;
  input sof_reg;
  input fmac_speed_0_sp_1;
  input rst_;
  input ram_full_i_reg;
  input ram_empty_i_reg;
  input mode_1G;
  input [1:0]fmac_speed;
  input [63:0]D;
  input [7:0]\ctrl_out_reg[7] ;
  input fmac_speed_1_sp_1;

  wire [63:0]D;
  wire [12:3]crc_cnt;
  wire [15:15]crc_cnt20_in;
  wire cs_fifo_empty;
  wire cs_fifo_rd_en;
  wire cs_fifo_rst;
  wire [7:0]\ctrl_out_reg[7] ;
  wire cts_1g;
  wire [63:0]entx2ram_wdata;
  wire [1:0]fmac_speed;
  wire fmac_speed_0_sn_1;
  wire fmac_speed_1_sn_1;
  wire [63:56]\gige_crc32x64/bdin ;
  wire gige_tx_encap_n_100;
  wire gige_tx_encap_n_101;
  wire gige_tx_encap_n_102;
  wire gige_tx_encap_n_103;
  wire gige_tx_encap_n_104;
  wire gige_tx_encap_n_105;
  wire gige_tx_encap_n_106;
  wire gige_tx_encap_n_107;
  wire gige_tx_encap_n_108;
  wire gige_tx_encap_n_109;
  wire gige_tx_encap_n_110;
  wire gige_tx_encap_n_111;
  wire gige_tx_encap_n_112;
  wire gige_tx_encap_n_113;
  wire gige_tx_encap_n_114;
  wire gige_tx_encap_n_115;
  wire gige_tx_encap_n_116;
  wire gige_tx_encap_n_117;
  wire gige_tx_encap_n_118;
  wire gige_tx_encap_n_119;
  wire gige_tx_encap_n_120;
  wire gige_tx_encap_n_121;
  wire gige_tx_encap_n_122;
  wire gige_tx_encap_n_123;
  wire gige_tx_encap_n_124;
  wire gige_tx_encap_n_125;
  wire gige_tx_encap_n_126;
  wire gige_tx_encap_n_127;
  wire gige_tx_encap_n_128;
  wire gige_tx_encap_n_129;
  wire gige_tx_encap_n_130;
  wire gige_tx_encap_n_131;
  wire gige_tx_encap_n_132;
  wire gige_tx_encap_n_133;
  wire gige_tx_encap_n_134;
  wire gige_tx_encap_n_135;
  wire gige_tx_encap_n_136;
  wire gige_tx_encap_n_137;
  wire gige_tx_encap_n_138;
  wire gige_tx_encap_n_139;
  wire gige_tx_encap_n_140;
  wire gige_tx_encap_n_141;
  wire gige_tx_encap_n_142;
  wire gige_tx_encap_n_143;
  wire gige_tx_encap_n_144;
  wire gige_tx_encap_n_145;
  wire gige_tx_encap_n_146;
  wire gige_tx_encap_n_147;
  wire gige_tx_encap_n_148;
  wire gige_tx_encap_n_149;
  wire gige_tx_encap_n_150;
  wire gige_tx_encap_n_151;
  wire gige_tx_encap_n_152;
  wire gige_tx_encap_n_167;
  wire gige_tx_encap_n_168;
  wire gige_tx_encap_n_169;
  wire gige_tx_encap_n_170;
  wire gige_tx_encap_n_171;
  wire gige_tx_encap_n_172;
  wire gige_tx_encap_n_173;
  wire gige_tx_encap_n_2;
  wire gige_tx_encap_n_25;
  wire gige_tx_encap_n_26;
  wire gige_tx_encap_n_4;
  wire gige_tx_encap_n_5;
  wire gige_tx_encap_n_6;
  wire gige_tx_encap_n_7;
  wire gige_tx_encap_n_8;
  wire gige_tx_encap_n_99;
  wire gige_tx_gmii_n_11;
  wire gige_tx_gmii_n_12;
  wire gige_tx_gmii_n_13;
  wire gige_tx_gmii_n_14;
  wire gige_tx_gmii_n_7;
  wire gige_tx_gmii_n_8;
  wire gige_tx_gmii_n_9;
  wire gmii_tx_en;
  wire [7:0]gmii_txd;
  wire in0;
  wire [15:0]ipcs_fifo_dout;
  wire lclk;
  wire mode_1G;
  wire [13:0]nbytes;
  wire [12:0]nbytes0;
  wire \new_crc_reg[0] ;
  wire [63:0]p_2_in;
  wire [63:0]pkt_data;
  wire pkt_end;
  wire pkt_start;
  wire pkt_we;
  wire pre_eof0;
  wire pre_sof0;
  wire ram_empty_i_reg;
  wire ram_full_i_reg;
  wire [15:0]rbytes;
  wire [2:2]rbytes_reg;
  wire rst_;
  wire rts;
  wire rx_mac_empty;
  wire rx_mac_rd;
  wire [63:0]rxfifo_dout;
  wire sof;
  wire sof_reg;
  wire st_read1;
  wire tx_mac_wr;
  wire tx_rd_state26_out;
  wire [63:0]txfifo_din;
  wire [61:0]txfifo_dout;
  wire txfifo_empty;
  wire txfifo_n_41;
  wire txfifo_n_42;
  wire txfifo_n_43;
  wire txfifo_n_44;
  wire txfifo_n_45;
  wire txfifo_n_46;
  wire txfifo_n_47;
  wire txfifo_n_48;
  wire txfifo_n_49;
  wire txfifo_n_50;
  wire txfifo_n_51;
  wire txfifo_rd_en;
  wire type_reject;
  wire wr_nbyte;

  assign fmac_speed_0_sn_1 = fmac_speed_0_sp_1;
  assign fmac_speed_1_sn_1 = fmac_speed_1_sp_1;
  FDSE cs_fifo_rst_reg
       (.C(lclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(cs_fifo_rst),
        .S(\new_crc_reg[0] ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gige_tx_encap gige_tx_encap
       (.D({p_2_in[63:62],p_2_in[60],p_2_in[58],p_2_in[56],p_2_in[54],p_2_in[52],p_2_in[50],p_2_in[48],p_2_in[46],p_2_in[44],p_2_in[42],p_2_in[40],p_2_in[38],p_2_in[36],p_2_in[34],p_2_in[32],p_2_in[30],p_2_in[28],p_2_in[26],p_2_in[24],p_2_in[22],p_2_in[20],p_2_in[18],p_2_in[16],p_2_in[14],p_2_in[12],p_2_in[10],p_2_in[8],p_2_in[6],p_2_in[4],p_2_in[2],p_2_in[0]}),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (txfifo_n_51),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (txfifo_n_50),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 (txfifo_n_49),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_2 (txfifo_n_48),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_3 (txfifo_n_43),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_4 (txfifo_n_47),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_5 (txfifo_n_46),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_6 (txfifo_n_45),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_7 (txfifo_n_44),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_8 (txfifo_n_42),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_9 (txfifo_n_41),
        .Q(st_read1),
        .SR(\new_crc_reg[0] ),
        .\bcnt_reg[10] (gige_tx_encap_n_145),
        .\bcnt_reg[11] (gige_tx_encap_n_140),
        .\bcnt_reg[12] (gige_tx_encap_n_143),
        .\bcnt_reg[13] (gige_tx_encap_n_142),
        .\bcnt_reg[14] (gige_tx_encap_n_141),
        .\bcnt_reg[15] (gige_tx_encap_n_139),
        .\bcnt_reg[2] (gige_tx_encap_n_152),
        .\bcnt_reg[3] (gige_tx_encap_n_151),
        .\bcnt_reg[4] (gige_tx_encap_n_150),
        .\bcnt_reg[5] (gige_tx_encap_n_149),
        .\bcnt_reg[6] (gige_tx_encap_n_144),
        .\bcnt_reg[7] (gige_tx_encap_n_148),
        .\bcnt_reg[8] (gige_tx_encap_n_147),
        .\bcnt_reg[9] (gige_tx_encap_n_146),
        .\bdata1_reg[63] (entx2ram_wdata),
        .\bdin_reg[32] (gige_tx_encap_n_137),
        .\bdin_reg[32]_0 (gige_tx_encap_n_138),
        .\bdin_reg[33] (gige_tx_encap_n_135),
        .\bdin_reg[33]_0 (gige_tx_encap_n_136),
        .\bdin_reg[34] (gige_tx_encap_n_133),
        .\bdin_reg[34]_0 (gige_tx_encap_n_134),
        .\bdin_reg[35] (gige_tx_encap_n_131),
        .\bdin_reg[35]_0 (gige_tx_encap_n_132),
        .\bdin_reg[36] (gige_tx_encap_n_129),
        .\bdin_reg[36]_0 (gige_tx_encap_n_130),
        .\bdin_reg[37] (gige_tx_encap_n_127),
        .\bdin_reg[37]_0 (gige_tx_encap_n_128),
        .\bdin_reg[38] (gige_tx_encap_n_125),
        .\bdin_reg[38]_0 (gige_tx_encap_n_126),
        .\bdin_reg[39] (gige_tx_encap_n_123),
        .\bdin_reg[39]_0 (gige_tx_encap_n_124),
        .\bdin_reg[40] (gige_tx_encap_n_121),
        .\bdin_reg[40]_0 (gige_tx_encap_n_122),
        .\bdin_reg[41] (gige_tx_encap_n_119),
        .\bdin_reg[41]_0 (gige_tx_encap_n_120),
        .\bdin_reg[42] (gige_tx_encap_n_117),
        .\bdin_reg[42]_0 (gige_tx_encap_n_118),
        .\bdin_reg[43] (gige_tx_encap_n_115),
        .\bdin_reg[43]_0 (gige_tx_encap_n_116),
        .\bdin_reg[44] (gige_tx_encap_n_113),
        .\bdin_reg[44]_0 (gige_tx_encap_n_114),
        .\bdin_reg[45] (gige_tx_encap_n_111),
        .\bdin_reg[45]_0 (gige_tx_encap_n_112),
        .\bdin_reg[46] (gige_tx_encap_n_109),
        .\bdin_reg[46]_0 (gige_tx_encap_n_110),
        .\bdin_reg[47] (gige_tx_encap_n_99),
        .\bdin_reg[47]_0 (gige_tx_encap_n_108),
        .\bdin_reg[48] (gige_tx_encap_n_107),
        .\bdin_reg[49] (gige_tx_encap_n_106),
        .\bdin_reg[50] (gige_tx_encap_n_105),
        .\bdin_reg[51] (gige_tx_encap_n_104),
        .\bdin_reg[52] (gige_tx_encap_n_103),
        .\bdin_reg[53] (gige_tx_encap_n_102),
        .\bdin_reg[54] (gige_tx_encap_n_101),
        .\bdin_reg[55] (gige_tx_encap_n_100),
        .\bdin_reg[63] (\gige_crc32x64/bdin ),
        .\bytes_remain_reg[15]_0 (gige_tx_encap_n_4),
        .\count8_reg[1]_0 (gige_tx_encap_n_5),
        .crc_cnt20_in(crc_cnt20_in),
        .\crc_cnt_reg[10] (gige_tx_encap_n_169),
        .\crc_cnt_reg[10]_0 (gige_tx_gmii_n_13),
        .\crc_cnt_reg[12] ({gige_tx_encap_n_6,gige_tx_encap_n_7,gige_tx_encap_n_8}),
        .\crc_cnt_reg[12]_0 (gige_tx_encap_n_26),
        .\crc_cnt_reg[12]_1 ({crc_cnt[12],crc_cnt[7],crc_cnt[3]}),
        .\crc_cnt_reg[13] (gige_tx_encap_n_168),
        .\crc_cnt_reg[14] (gige_tx_encap_n_167),
        .\crc_cnt_reg[4] (gige_tx_encap_n_173),
        .\crc_cnt_reg[5] (gige_tx_encap_n_172),
        .\crc_cnt_reg[5]_0 (gige_tx_gmii_n_14),
        .\crc_cnt_reg[7] (gige_tx_encap_n_25),
        .\crc_cnt_reg[8] (gige_tx_encap_n_171),
        .\crc_cnt_reg[9] (gige_tx_encap_n_170),
        .cts_1g(cts_1g),
        .dout({txfifo_dout[61],txfifo_dout[59],txfifo_dout[57],txfifo_dout[55],txfifo_dout[53],txfifo_dout[51],txfifo_dout[49],txfifo_dout[47],txfifo_dout[45],txfifo_dout[43],txfifo_dout[41],txfifo_dout[39],txfifo_dout[37],txfifo_dout[35],txfifo_dout[33],txfifo_dout[31],txfifo_dout[29],txfifo_dout[27],txfifo_dout[25],txfifo_dout[23],txfifo_dout[21],txfifo_dout[19],txfifo_dout[17],txfifo_dout[15:0]}),
        .empty(txfifo_empty),
        .fmac_speed(fmac_speed),
        .fmac_speed_0_sp_1(fmac_speed_0_sn_1),
        .fmac_speed_1_sp_1(fmac_speed_1_sn_1),
        .lclk(lclk),
        .mode_1G(mode_1G),
        .\nbytes_reg_reg[15] (rbytes),
        .\nbytes_reg_reg[15]_0 (nbytes0),
        .pulse_0_reg_0(gige_tx_gmii_n_7),
        .\rbytes_reg_reg[0]_rep (gige_tx_gmii_n_12),
        .\rbytes_reg_reg[0]_rep__0 (gige_tx_gmii_n_8),
        .\rbytes_reg_reg[1]_rep (gige_tx_gmii_n_11),
        .\rbytes_reg_reg[1]_rep__0 (gige_tx_gmii_n_9),
        .\rbytes_reg_reg[2] (rbytes_reg),
        .rd_en(txfifo_rd_en),
        .rst_(rst_),
        .rts(rts),
        .wsel_reg_0(gige_tx_encap_n_2));
  ps_emio_eth_1g_AXIS_LMAC_0_1_gige_tx_gmii gige_tx_gmii
       (.D(\gige_crc32x64/bdin ),
        .Q({crc_cnt[12],crc_cnt[7],crc_cnt[3]}),
        .SR(\new_crc_reg[0] ),
        .\bdin_reg[24] (gige_tx_gmii_n_12),
        .\bdin_reg[47] (gige_tx_gmii_n_11),
        .crc_cnt20_in(crc_cnt20_in),
        .\crc_cnt_reg[12]_0 (gige_tx_gmii_n_13),
        .\crc_cnt_reg[4]_0 (gige_tx_gmii_n_7),
        .\crc_cnt_reg[7]_0 (gige_tx_gmii_n_14),
        .cts_1g(cts_1g),
        .fmac_speed(fmac_speed),
        .fmac_speed_0_sp_1(fmac_speed_0_sn_1),
        .gmii_tx_en(gmii_tx_en),
        .gmii_txd(gmii_txd),
        .in0(in0),
        .lclk(lclk),
        .mode_1G(mode_1G),
        .\new_crc_reg[21] (gige_tx_gmii_n_8),
        .\rbytes_reg[0] (gige_tx_encap_n_151),
        .\rbytes_reg[10] (gige_tx_encap_n_140),
        .\rbytes_reg[10]_0 (gige_tx_encap_n_26),
        .\rbytes_reg[11] (gige_tx_encap_n_143),
        .\rbytes_reg[11]_0 ({gige_tx_encap_n_6,gige_tx_encap_n_7,gige_tx_encap_n_8}),
        .\rbytes_reg[12] (gige_tx_encap_n_142),
        .\rbytes_reg[12]_0 (gige_tx_encap_n_168),
        .\rbytes_reg[13] (gige_tx_encap_n_141),
        .\rbytes_reg[13]_0 (gige_tx_encap_n_167),
        .\rbytes_reg[13]_1 (nbytes0),
        .\rbytes_reg[14] (gige_tx_encap_n_139),
        .\rbytes_reg[15] (rbytes),
        .\rbytes_reg[1] (gige_tx_encap_n_152),
        .\rbytes_reg[2] (gige_tx_encap_n_150),
        .\rbytes_reg[3] (gige_tx_encap_n_173),
        .\rbytes_reg[4] (gige_tx_encap_n_149),
        .\rbytes_reg[4]_0 (gige_tx_encap_n_172),
        .\rbytes_reg[5] (gige_tx_encap_n_144),
        .\rbytes_reg[5]_0 (gige_tx_encap_n_25),
        .\rbytes_reg[6] (gige_tx_encap_n_148),
        .\rbytes_reg[7] (gige_tx_encap_n_147),
        .\rbytes_reg[7]_0 (gige_tx_encap_n_171),
        .\rbytes_reg[8] (gige_tx_encap_n_146),
        .\rbytes_reg[8]_0 (gige_tx_encap_n_170),
        .\rbytes_reg[9] (gige_tx_encap_n_145),
        .\rbytes_reg[9]_0 (gige_tx_encap_n_169),
        .rst_(rst_),
        .rts(rts),
        .\txd_reg[27]_0 (gige_tx_gmii_n_9),
        .\txd_reg[48]_0 (rbytes_reg),
        .\wdata_reg[10] (gige_tx_encap_n_133),
        .\wdata_reg[11] (gige_tx_encap_n_131),
        .\wdata_reg[12] (gige_tx_encap_n_129),
        .\wdata_reg[13] (gige_tx_encap_n_127),
        .\wdata_reg[14] (gige_tx_encap_n_125),
        .\wdata_reg[15] (gige_tx_encap_n_123),
        .\wdata_reg[16] (gige_tx_encap_n_121),
        .\wdata_reg[16]_0 (gige_tx_encap_n_107),
        .\wdata_reg[17] (gige_tx_encap_n_119),
        .\wdata_reg[17]_0 (gige_tx_encap_n_106),
        .\wdata_reg[18] (gige_tx_encap_n_117),
        .\wdata_reg[18]_0 (gige_tx_encap_n_105),
        .\wdata_reg[19] (gige_tx_encap_n_115),
        .\wdata_reg[19]_0 (gige_tx_encap_n_104),
        .\wdata_reg[20] (gige_tx_encap_n_113),
        .\wdata_reg[20]_0 (gige_tx_encap_n_103),
        .\wdata_reg[21] (gige_tx_encap_n_111),
        .\wdata_reg[21]_0 (gige_tx_encap_n_102),
        .\wdata_reg[22] (gige_tx_encap_n_109),
        .\wdata_reg[22]_0 (gige_tx_encap_n_101),
        .\wdata_reg[23] (gige_tx_encap_n_99),
        .\wdata_reg[23]_0 (gige_tx_encap_n_100),
        .\wdata_reg[24] (gige_tx_encap_n_138),
        .\wdata_reg[25] (gige_tx_encap_n_136),
        .\wdata_reg[26] (gige_tx_encap_n_134),
        .\wdata_reg[27] (gige_tx_encap_n_132),
        .\wdata_reg[28] (gige_tx_encap_n_130),
        .\wdata_reg[29] (gige_tx_encap_n_128),
        .\wdata_reg[30] (gige_tx_encap_n_126),
        .\wdata_reg[31] (gige_tx_encap_n_124),
        .\wdata_reg[32] (gige_tx_encap_n_122),
        .\wdata_reg[33] (gige_tx_encap_n_120),
        .\wdata_reg[34] (gige_tx_encap_n_118),
        .\wdata_reg[35] (gige_tx_encap_n_116),
        .\wdata_reg[36] (gige_tx_encap_n_114),
        .\wdata_reg[37] (gige_tx_encap_n_112),
        .\wdata_reg[38] (gige_tx_encap_n_110),
        .\wdata_reg[39] (gige_tx_encap_n_108),
        .\wdata_reg[63] (entx2ram_wdata),
        .\wdata_reg[8] (gige_tx_encap_n_137),
        .\wdata_reg[9] (gige_tx_encap_n_135));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fmac_fifo512x64_2clk ipcs_fifo
       (.Q(nbytes),
        .cs_fifo_empty(cs_fifo_empty),
        .cs_fifo_rd_en(cs_fifo_rd_en),
        .ipcs_fifo_dout(ipcs_fifo_dout),
        .lclk(lclk),
        .srst(cs_fifo_rst),
        .wr_en(wr_nbyte));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fmac_fifo4Kx8 pktctrl_fifo
       (.SR(\new_crc_reg[0] ),
        .din({pkt_end,pkt_start}),
        .lclk(lclk),
        .rx_mac_rd(rx_mac_rd),
        .wr_en(pkt_we));
  ps_emio_eth_1g_AXIS_LMAC_0_1_tcore_rx_xgmii rx_xgmii
       (.D(D),
        .\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (nbytes),
        .Q(pkt_data),
        .SR(\new_crc_reg[0] ),
        .\ctrl_out_reg[7] (\ctrl_out_reg[7] ),
        .din({pkt_end,pkt_start}),
        .lclk(lclk),
        .pkt_we_reg_0(pkt_we),
        .pre_eof0(pre_eof0),
        .pre_pkt_start_reg_0(sof),
        .pre_sof0(pre_sof0),
        .rst_(rst_),
        .sof_reg_0(sof_reg),
        .wr_en(wr_nbyte),
        .wr_nbyte_reg_0(type_reject));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fmac_fifo4Kx64 rxfifo
       (.Q(pkt_data),
        .SR(\new_crc_reg[0] ),
        .lclk(lclk),
        .pkt_we_reg(pkt_we),
        .rx_mac_empty(rx_mac_empty),
        .rx_mac_rd(rx_mac_rd),
        .rxfifo_dout(rxfifo_dout));
  ps_emio_eth_1g_AXIS_LMAC_0_1_txfifo_1024x64 txfifo
       (.D({p_2_in[63:62],p_2_in[60],p_2_in[58],p_2_in[56],p_2_in[54],p_2_in[52],p_2_in[50],p_2_in[48],p_2_in[46],p_2_in[44],p_2_in[42],p_2_in[40],p_2_in[38],p_2_in[36],p_2_in[34],p_2_in[32],p_2_in[30],p_2_in[28],p_2_in[26],p_2_in[24],p_2_in[22],p_2_in[20],p_2_in[18],p_2_in[16],p_2_in[14],p_2_in[12],p_2_in[10],p_2_in[8],p_2_in[6],p_2_in[4],p_2_in[2],p_2_in[0]}),
        .Q(st_read1),
        .SR(\new_crc_reg[0] ),
        .\bytes_remain_reg[10] (txfifo_n_47),
        .\bytes_remain_reg[11] (txfifo_n_46),
        .\bytes_remain_reg[12] (txfifo_n_45),
        .\bytes_remain_reg[13] (txfifo_n_44),
        .\bytes_remain_reg[14] (gige_tx_encap_n_4),
        .\bytes_remain_reg[15] (txfifo_n_41),
        .\bytes_remain_reg[15]_0 (txfifo_n_42),
        .\bytes_remain_reg[15]_1 (gige_tx_encap_n_5),
        .\bytes_remain_reg[5] (txfifo_n_51),
        .\bytes_remain_reg[6] (txfifo_n_50),
        .\bytes_remain_reg[7] (txfifo_n_49),
        .\bytes_remain_reg[8] (txfifo_n_48),
        .\bytes_remain_reg[9] (txfifo_n_43),
        .dout({txfifo_dout[61],txfifo_dout[59],txfifo_dout[57],txfifo_dout[55],txfifo_dout[53],txfifo_dout[51],txfifo_dout[49],txfifo_dout[47],txfifo_dout[45],txfifo_dout[43],txfifo_dout[41],txfifo_dout[39],txfifo_dout[37],txfifo_dout[35],txfifo_dout[33],txfifo_dout[31],txfifo_dout[29],txfifo_dout[27],txfifo_dout[25],txfifo_dout[23],txfifo_dout[21],txfifo_dout[19],txfifo_dout[17],txfifo_dout[15:0]}),
        .empty(txfifo_empty),
        .fmac_speed(fmac_speed),
        .lclk(lclk),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_i_reg(ram_full_i_reg),
        .rd_en(txfifo_rd_en),
        .tx_mac_wr(tx_mac_wr),
        .tx_rd_state26_out(tx_rd_state26_out),
        .txfifo_din(txfifo_din),
        .wsel_reg(gige_tx_encap_n_2));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_tcore_rx_xgmii
   (pre_pkt_start_reg_0,
    din,
    wr_en,
    wr_nbyte_reg_0,
    pkt_we_reg_0,
    Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    SR,
    pre_sof0,
    lclk,
    pre_eof0,
    sof_reg_0,
    rst_,
    D,
    \ctrl_out_reg[7] );
  output pre_pkt_start_reg_0;
  output [1:0]din;
  output wr_en;
  output wr_nbyte_reg_0;
  output pkt_we_reg_0;
  output [63:0]Q;
  output [13:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  input [0:0]SR;
  input pre_sof0;
  input lclk;
  input pre_eof0;
  input sof_reg_0;
  input rst_;
  input [63:0]D;
  input [7:0]\ctrl_out_reg[7] ;

  wire [63:0]D;
  wire [13:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [63:0]Q;
  wire [0:0]SR;
  wire [3:0]bcnt;
  wire \bcnt[0]_i_2_n_0 ;
  wire \bcnt[1]_i_2_n_0 ;
  wire \bcnt_reg_n_0_[0] ;
  wire \bcnt_reg_n_0_[1] ;
  wire \bcnt_reg_n_0_[2] ;
  wire \bcnt_reg_n_0_[3] ;
  wire \bdata1_reg_n_0_[0] ;
  wire \bdata1_reg_n_0_[1] ;
  wire \bdata1_reg_n_0_[24] ;
  wire \bdata1_reg_n_0_[25] ;
  wire \bdata1_reg_n_0_[26] ;
  wire \bdata1_reg_n_0_[27] ;
  wire \bdata1_reg_n_0_[28] ;
  wire \bdata1_reg_n_0_[29] ;
  wire \bdata1_reg_n_0_[2] ;
  wire \bdata1_reg_n_0_[30] ;
  wire \bdata1_reg_n_0_[31] ;
  wire \bdata1_reg_n_0_[32] ;
  wire \bdata1_reg_n_0_[33] ;
  wire \bdata1_reg_n_0_[34] ;
  wire \bdata1_reg_n_0_[35] ;
  wire \bdata1_reg_n_0_[36] ;
  wire \bdata1_reg_n_0_[37] ;
  wire \bdata1_reg_n_0_[38] ;
  wire \bdata1_reg_n_0_[39] ;
  wire \bdata1_reg_n_0_[3] ;
  wire \bdata1_reg_n_0_[40] ;
  wire \bdata1_reg_n_0_[41] ;
  wire \bdata1_reg_n_0_[42] ;
  wire \bdata1_reg_n_0_[43] ;
  wire \bdata1_reg_n_0_[44] ;
  wire \bdata1_reg_n_0_[45] ;
  wire \bdata1_reg_n_0_[46] ;
  wire \bdata1_reg_n_0_[47] ;
  wire \bdata1_reg_n_0_[48] ;
  wire \bdata1_reg_n_0_[49] ;
  wire \bdata1_reg_n_0_[4] ;
  wire \bdata1_reg_n_0_[50] ;
  wire \bdata1_reg_n_0_[51] ;
  wire \bdata1_reg_n_0_[52] ;
  wire \bdata1_reg_n_0_[53] ;
  wire \bdata1_reg_n_0_[54] ;
  wire \bdata1_reg_n_0_[55] ;
  wire \bdata1_reg_n_0_[56] ;
  wire \bdata1_reg_n_0_[57] ;
  wire \bdata1_reg_n_0_[58] ;
  wire \bdata1_reg_n_0_[59] ;
  wire \bdata1_reg_n_0_[5] ;
  wire \bdata1_reg_n_0_[60] ;
  wire \bdata1_reg_n_0_[61] ;
  wire \bdata1_reg_n_0_[62] ;
  wire \bdata1_reg_n_0_[63] ;
  wire \bdata1_reg_n_0_[6] ;
  wire \bdata1_reg_n_0_[7] ;
  wire \brxc1_reg_n_0_[0] ;
  wire [7:0]\ctrl_out_reg[7] ;
  wire [1:0]din;
  wire eof;
  wire eof0;
  wire eof00;
  wire eof0_i_3_n_0;
  wire eof0_i_4_n_0;
  wire eof0_i_5_n_0;
  wire eof0_i_6_n_0;
  wire eof0_i_7_n_0;
  wire eof1;
  wire eof10;
  wire eof1_i_2_n_0;
  wire eof1_i_3_n_0;
  wire eof1_i_4_n_0;
  wire eof1_i_5_n_0;
  wire eof1_i_6_n_0;
  wire eof_dly;
  wire eof_dqwd;
  wire eof_dqwd0;
  wire eof_dqwd_dly1;
  wire eof_dqwd_dly1_i_2_n_0;
  wire eof_dqwd_dly1_i_3_n_0;
  wire eof_dqwd_dly1_i_4_n_0;
  wire eof_qwd;
  wire eof_qwd385_out;
  wire eof_qwd486_out;
  wire eof_qwd690_out;
  wire err;
  wire err_i_1_n_0;
  wire has_pre_sof;
  wire has_pre_sof_i_1_n_0;
  wire has_sof;
  wire has_sof_dly1;
  wire has_sof_i_1_n_0;
  wire lclk;
  wire my_mac_hit;
  wire my_mac_hit05_out;
  wire my_mac_hit273_in;
  wire my_mac_hit3;
  wire my_mac_hit_i_10_n_0;
  wire my_mac_hit_i_11_n_0;
  wire my_mac_hit_i_12_n_0;
  wire my_mac_hit_i_14_n_0;
  wire my_mac_hit_i_15_n_0;
  wire my_mac_hit_i_16_n_0;
  wire my_mac_hit_i_17_n_0;
  wire my_mac_hit_i_18_n_0;
  wire my_mac_hit_i_19_n_0;
  wire my_mac_hit_i_1_n_0;
  wire my_mac_hit_i_20_n_0;
  wire my_mac_hit_i_21_n_0;
  wire my_mac_hit_i_22_n_0;
  wire my_mac_hit_i_23_n_0;
  wire my_mac_hit_i_24_n_0;
  wire my_mac_hit_i_25_n_0;
  wire my_mac_hit_i_27_n_0;
  wire my_mac_hit_i_28_n_0;
  wire my_mac_hit_i_29_n_0;
  wire my_mac_hit_i_30_n_0;
  wire my_mac_hit_i_31_n_0;
  wire my_mac_hit_i_32_n_0;
  wire my_mac_hit_i_33_n_0;
  wire my_mac_hit_i_34_n_0;
  wire my_mac_hit_i_35_n_0;
  wire my_mac_hit_i_36_n_0;
  wire my_mac_hit_i_37_n_0;
  wire my_mac_hit_i_38_n_0;
  wire my_mac_hit_i_39_n_0;
  wire my_mac_hit_i_40_n_0;
  wire my_mac_hit_i_41_n_0;
  wire my_mac_hit_i_42_n_0;
  wire my_mac_hit_i_43_n_0;
  wire my_mac_hit_i_44_n_0;
  wire my_mac_hit_i_45_n_0;
  wire my_mac_hit_i_46_n_0;
  wire my_mac_hit_i_47_n_0;
  wire my_mac_hit_i_48_n_0;
  wire my_mac_hit_i_49_n_0;
  wire my_mac_hit_i_50_n_0;
  wire my_mac_hit_i_51_n_0;
  wire my_mac_hit_i_52_n_0;
  wire my_mac_hit_i_53_n_0;
  wire my_mac_hit_i_54_n_0;
  wire my_mac_hit_i_55_n_0;
  wire my_mac_hit_i_56_n_0;
  wire my_mac_hit_i_5_n_0;
  wire my_mac_hit_i_6_n_0;
  wire my_mac_hit_i_7_n_0;
  wire my_mac_hit_i_8_n_0;
  wire my_mac_hit_i_9_n_0;
  wire my_mac_hit_reg_i_13_n_1;
  wire my_mac_hit_reg_i_13_n_2;
  wire my_mac_hit_reg_i_13_n_3;
  wire my_mac_hit_reg_i_13_n_5;
  wire my_mac_hit_reg_i_13_n_6;
  wire my_mac_hit_reg_i_13_n_7;
  wire my_mac_hit_reg_i_26_n_0;
  wire my_mac_hit_reg_i_26_n_1;
  wire my_mac_hit_reg_i_26_n_2;
  wire my_mac_hit_reg_i_26_n_3;
  wire my_mac_hit_reg_i_26_n_5;
  wire my_mac_hit_reg_i_26_n_6;
  wire my_mac_hit_reg_i_26_n_7;
  wire my_mac_hit_reg_i_2_n_1;
  wire my_mac_hit_reg_i_2_n_2;
  wire my_mac_hit_reg_i_2_n_3;
  wire my_mac_hit_reg_i_2_n_5;
  wire my_mac_hit_reg_i_2_n_6;
  wire my_mac_hit_reg_i_2_n_7;
  wire my_mac_hit_reg_i_4_n_0;
  wire my_mac_hit_reg_i_4_n_1;
  wire my_mac_hit_reg_i_4_n_2;
  wire my_mac_hit_reg_i_4_n_3;
  wire my_mac_hit_reg_i_4_n_5;
  wire my_mac_hit_reg_i_4_n_6;
  wire my_mac_hit_reg_i_4_n_7;
  wire [13:0]nbytes;
  wire nbytes0;
  wire \nbytes[10]_i_1_n_0 ;
  wire \nbytes[11]_i_1_n_0 ;
  wire \nbytes[12]_i_1_n_0 ;
  wire \nbytes[13]_i_1_n_0 ;
  wire \nbytes[13]_i_2_n_0 ;
  wire \nbytes[1]_i_1_n_0 ;
  wire \nbytes[1]_i_4_n_0 ;
  wire \nbytes[1]_i_5_n_0 ;
  wire \nbytes[1]_i_6_n_0 ;
  wire \nbytes[1]_i_7_n_0 ;
  wire \nbytes[2]_i_1_n_0 ;
  wire \nbytes[3]_i_1_n_0 ;
  wire \nbytes[4]_i_1_n_0 ;
  wire \nbytes[5]_i_1_n_0 ;
  wire \nbytes[6]_i_1_n_0 ;
  wire \nbytes[7]_i_1_n_0 ;
  wire \nbytes[8]_i_1_n_0 ;
  wire \nbytes[9]_i_1_n_0 ;
  wire \nbytes_reg[13]_i_3_n_10 ;
  wire \nbytes_reg[13]_i_3_n_11 ;
  wire \nbytes_reg[13]_i_3_n_12 ;
  wire \nbytes_reg[13]_i_3_n_13 ;
  wire \nbytes_reg[13]_i_3_n_14 ;
  wire \nbytes_reg[13]_i_3_n_15 ;
  wire \nbytes_reg[13]_i_3_n_3 ;
  wire \nbytes_reg[13]_i_3_n_5 ;
  wire \nbytes_reg[13]_i_3_n_6 ;
  wire \nbytes_reg[13]_i_3_n_7 ;
  wire \nbytes_reg[1]_i_3_n_0 ;
  wire \nbytes_reg[1]_i_3_n_1 ;
  wire \nbytes_reg[1]_i_3_n_10 ;
  wire \nbytes_reg[1]_i_3_n_11 ;
  wire \nbytes_reg[1]_i_3_n_12 ;
  wire \nbytes_reg[1]_i_3_n_13 ;
  wire \nbytes_reg[1]_i_3_n_14 ;
  wire \nbytes_reg[1]_i_3_n_15 ;
  wire \nbytes_reg[1]_i_3_n_2 ;
  wire \nbytes_reg[1]_i_3_n_3 ;
  wire \nbytes_reg[1]_i_3_n_5 ;
  wire \nbytes_reg[1]_i_3_n_6 ;
  wire \nbytes_reg[1]_i_3_n_7 ;
  wire \nbytes_reg[1]_i_3_n_8 ;
  wire \nbytes_reg[1]_i_3_n_9 ;
  wire [7:0]p_0_in;
  wire [7:0]p_1_in;
  wire p_4_in42_in;
  wire p_4_in50_in;
  wire p_5_in43_in;
  wire p_5_in51_in;
  wire p_6_in45_in;
  wire p_6_in53_in;
  wire p_7_in48_in;
  wire pkt_end0;
  wire pkt_start0;
  wire pkt_we_i_1_n_0;
  wire pkt_we_reg_0;
  wire pre_eof;
  wire pre_eof0;
  wire [63:0]pre_pkt_data;
  wire pre_pkt_start;
  wire pre_pkt_start_reg_0;
  wire pre_sof;
  wire pre_sof0;
  wire [22:0]qchk_daddr_order;
  wire [47:23]qchk_daddr_order__0;
  wire rst_;
  wire rx_err0;
  wire rx_err00;
  wire rx_err0_i_2_n_0;
  wire rx_err0_i_3_n_0;
  wire rx_err0_i_4_n_0;
  wire rx_err0_i_5_n_0;
  wire rx_err1;
  wire rx_err10;
  wire rx_err1_i_2_n_0;
  wire rx_err1_i_3_n_0;
  wire rx_err1_i_4_n_0;
  wire rx_err1_i_5_n_0;
  wire rx_err1_i_6_n_0;
  wire sof_n_eof;
  wire sof_n_eof_dly1;
  wire sof_reg_0;
  wire wen1;
  wire wen10;
  wire wen1_i_2_n_0;
  wire wen1_i_4_n_0;
  wire wr_en;
  wire wr_nbyte0;
  wire wr_nbyte_i_2_n_0;
  wire wr_nbyte_reg_0;
  wire [3:3]NLW_my_mac_hit_reg_i_13_CO_UNCONNECTED;
  wire [7:0]NLW_my_mac_hit_reg_i_13_O_UNCONNECTED;
  wire [3:3]NLW_my_mac_hit_reg_i_2_CO_UNCONNECTED;
  wire [7:0]NLW_my_mac_hit_reg_i_2_O_UNCONNECTED;
  wire [3:3]NLW_my_mac_hit_reg_i_26_CO_UNCONNECTED;
  wire [7:0]NLW_my_mac_hit_reg_i_26_O_UNCONNECTED;
  wire [3:3]NLW_my_mac_hit_reg_i_4_CO_UNCONNECTED;
  wire [7:0]NLW_my_mac_hit_reg_i_4_O_UNCONNECTED;
  wire [7:3]\NLW_nbytes_reg[13]_i_3_CO_UNCONNECTED ;
  wire [7:6]\NLW_nbytes_reg[13]_i_3_O_UNCONNECTED ;
  wire [3:3]\NLW_nbytes_reg[1]_i_3_CO_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT5 #(
    .INIT(32'h00002002)) 
    \bcnt[0]_i_1 
       (.I0(p_4_in42_in),
        .I1(\brxc1_reg_n_0_[0] ),
        .I2(p_6_in45_in),
        .I3(p_5_in43_in),
        .I4(\bcnt[0]_i_2_n_0 ),
        .O(bcnt[0]));
  LUT5 #(
    .INIT(32'h6FFEFFFE)) 
    \bcnt[0]_i_2 
       (.I0(p_6_in53_in),
        .I1(p_5_in51_in),
        .I2(p_4_in50_in),
        .I3(p_7_in48_in),
        .I4(p_6_in45_in),
        .O(\bcnt[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT5 #(
    .INIT(32'h08020002)) 
    \bcnt[1]_i_1 
       (.I0(\bcnt[1]_i_2_n_0 ),
        .I1(p_7_in48_in),
        .I2(p_6_in53_in),
        .I3(p_6_in45_in),
        .I4(p_5_in43_in),
        .O(bcnt[1]));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT5 #(
    .INIT(32'h00A10000)) 
    \bcnt[1]_i_2 
       (.I0(p_4_in50_in),
        .I1(p_5_in51_in),
        .I2(p_7_in48_in),
        .I3(\brxc1_reg_n_0_[0] ),
        .I4(p_4_in42_in),
        .O(\bcnt[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0088000800000008)) 
    \bcnt[2]_i_1 
       (.I0(eof_dqwd_dly1_i_4_n_0),
        .I1(eof_dqwd_dly1_i_2_n_0),
        .I2(p_7_in48_in),
        .I3(p_6_in53_in),
        .I4(p_6_in45_in),
        .I5(p_5_in43_in),
        .O(bcnt[2]));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \bcnt[3]_i_1 
       (.I0(eof_dqwd_dly1_i_3_n_0),
        .I1(eof_dqwd_dly1_i_2_n_0),
        .I2(p_5_in43_in),
        .I3(p_4_in42_in),
        .I4(\brxc1_reg_n_0_[0] ),
        .I5(p_6_in45_in),
        .O(bcnt[3]));
  FDRE \bcnt_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(bcnt[0]),
        .Q(\bcnt_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \bcnt_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(bcnt[1]),
        .Q(\bcnt_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \bcnt_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(bcnt[2]),
        .Q(\bcnt_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \bcnt_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(bcnt[3]),
        .Q(\bcnt_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \bdata1_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\bdata1_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \bdata1_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(p_0_in[2]),
        .R(1'b0));
  FDRE \bdata1_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[11]),
        .Q(p_0_in[3]),
        .R(1'b0));
  FDRE \bdata1_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[12]),
        .Q(p_0_in[4]),
        .R(1'b0));
  FDRE \bdata1_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[13]),
        .Q(p_0_in[5]),
        .R(1'b0));
  FDRE \bdata1_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[14]),
        .Q(p_0_in[6]),
        .R(1'b0));
  FDRE \bdata1_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[15]),
        .Q(p_0_in[7]),
        .R(1'b0));
  FDRE \bdata1_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[16]),
        .Q(p_1_in[0]),
        .R(1'b0));
  FDRE \bdata1_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[17]),
        .Q(p_1_in[1]),
        .R(1'b0));
  FDRE \bdata1_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[18]),
        .Q(p_1_in[2]),
        .R(1'b0));
  FDRE \bdata1_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[19]),
        .Q(p_1_in[3]),
        .R(1'b0));
  FDRE \bdata1_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\bdata1_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \bdata1_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[20]),
        .Q(p_1_in[4]),
        .R(1'b0));
  FDRE \bdata1_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[21]),
        .Q(p_1_in[5]),
        .R(1'b0));
  FDRE \bdata1_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[22]),
        .Q(p_1_in[6]),
        .R(1'b0));
  FDRE \bdata1_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[23]),
        .Q(p_1_in[7]),
        .R(1'b0));
  FDRE \bdata1_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[24]),
        .Q(\bdata1_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \bdata1_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[25]),
        .Q(\bdata1_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \bdata1_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[26]),
        .Q(\bdata1_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \bdata1_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[27]),
        .Q(\bdata1_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \bdata1_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[28]),
        .Q(\bdata1_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \bdata1_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[29]),
        .Q(\bdata1_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \bdata1_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\bdata1_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \bdata1_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[30]),
        .Q(\bdata1_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \bdata1_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[31]),
        .Q(\bdata1_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \bdata1_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[32]),
        .Q(\bdata1_reg_n_0_[32] ),
        .R(1'b0));
  FDRE \bdata1_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[33]),
        .Q(\bdata1_reg_n_0_[33] ),
        .R(1'b0));
  FDRE \bdata1_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[34]),
        .Q(\bdata1_reg_n_0_[34] ),
        .R(1'b0));
  FDRE \bdata1_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[35]),
        .Q(\bdata1_reg_n_0_[35] ),
        .R(1'b0));
  FDRE \bdata1_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[36]),
        .Q(\bdata1_reg_n_0_[36] ),
        .R(1'b0));
  FDRE \bdata1_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[37]),
        .Q(\bdata1_reg_n_0_[37] ),
        .R(1'b0));
  FDRE \bdata1_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[38]),
        .Q(\bdata1_reg_n_0_[38] ),
        .R(1'b0));
  FDRE \bdata1_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[39]),
        .Q(\bdata1_reg_n_0_[39] ),
        .R(1'b0));
  FDRE \bdata1_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\bdata1_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \bdata1_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[40]),
        .Q(\bdata1_reg_n_0_[40] ),
        .R(1'b0));
  FDRE \bdata1_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[41]),
        .Q(\bdata1_reg_n_0_[41] ),
        .R(1'b0));
  FDRE \bdata1_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[42]),
        .Q(\bdata1_reg_n_0_[42] ),
        .R(1'b0));
  FDRE \bdata1_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[43]),
        .Q(\bdata1_reg_n_0_[43] ),
        .R(1'b0));
  FDRE \bdata1_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[44]),
        .Q(\bdata1_reg_n_0_[44] ),
        .R(1'b0));
  FDRE \bdata1_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[45]),
        .Q(\bdata1_reg_n_0_[45] ),
        .R(1'b0));
  FDRE \bdata1_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[46]),
        .Q(\bdata1_reg_n_0_[46] ),
        .R(1'b0));
  FDRE \bdata1_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[47]),
        .Q(\bdata1_reg_n_0_[47] ),
        .R(1'b0));
  FDRE \bdata1_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[48]),
        .Q(\bdata1_reg_n_0_[48] ),
        .R(1'b0));
  FDRE \bdata1_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[49]),
        .Q(\bdata1_reg_n_0_[49] ),
        .R(1'b0));
  FDRE \bdata1_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\bdata1_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \bdata1_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[50]),
        .Q(\bdata1_reg_n_0_[50] ),
        .R(1'b0));
  FDRE \bdata1_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[51]),
        .Q(\bdata1_reg_n_0_[51] ),
        .R(1'b0));
  FDRE \bdata1_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[52]),
        .Q(\bdata1_reg_n_0_[52] ),
        .R(1'b0));
  FDRE \bdata1_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[53]),
        .Q(\bdata1_reg_n_0_[53] ),
        .R(1'b0));
  FDRE \bdata1_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[54]),
        .Q(\bdata1_reg_n_0_[54] ),
        .R(1'b0));
  FDRE \bdata1_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[55]),
        .Q(\bdata1_reg_n_0_[55] ),
        .R(1'b0));
  FDRE \bdata1_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[56]),
        .Q(\bdata1_reg_n_0_[56] ),
        .R(1'b0));
  FDRE \bdata1_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[57]),
        .Q(\bdata1_reg_n_0_[57] ),
        .R(1'b0));
  FDRE \bdata1_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[58]),
        .Q(\bdata1_reg_n_0_[58] ),
        .R(1'b0));
  FDRE \bdata1_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[59]),
        .Q(\bdata1_reg_n_0_[59] ),
        .R(1'b0));
  FDRE \bdata1_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\bdata1_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \bdata1_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[60]),
        .Q(\bdata1_reg_n_0_[60] ),
        .R(1'b0));
  FDRE \bdata1_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[61]),
        .Q(\bdata1_reg_n_0_[61] ),
        .R(1'b0));
  FDRE \bdata1_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[62]),
        .Q(\bdata1_reg_n_0_[62] ),
        .R(1'b0));
  FDRE \bdata1_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[63]),
        .Q(\bdata1_reg_n_0_[63] ),
        .R(1'b0));
  FDRE \bdata1_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\bdata1_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \bdata1_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\bdata1_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \bdata1_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(p_0_in[0]),
        .R(1'b0));
  FDRE \bdata1_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(p_0_in[1]),
        .R(1'b0));
  FDRE \brxc1_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [0]),
        .Q(\brxc1_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \brxc1_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [1]),
        .Q(p_6_in53_in),
        .R(1'b0));
  FDRE \brxc1_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [2]),
        .Q(p_5_in51_in),
        .R(1'b0));
  FDRE \brxc1_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [3]),
        .Q(p_4_in50_in),
        .R(1'b0));
  FDRE \brxc1_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [4]),
        .Q(p_7_in48_in),
        .R(1'b0));
  FDRE \brxc1_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [5]),
        .Q(p_6_in45_in),
        .R(1'b0));
  FDRE \brxc1_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [6]),
        .Q(p_5_in43_in),
        .R(1'b0));
  FDRE \brxc1_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(\ctrl_out_reg[7] [7]),
        .Q(p_4_in42_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAEAAA)) 
    eof0_i_1
       (.I0(eof_qwd486_out),
        .I1(eof0_i_3_n_0),
        .I2(\brxc1_reg_n_0_[0] ),
        .I3(\bdata1_reg_n_0_[0] ),
        .I4(\bdata1_reg_n_0_[1] ),
        .I5(eof0_i_4_n_0),
        .O(eof00));
  LUT4 #(
    .INIT(16'h0080)) 
    eof0_i_2
       (.I0(eof0_i_5_n_0),
        .I1(p_4_in50_in),
        .I2(\bdata1_reg_n_0_[24] ),
        .I3(\bdata1_reg_n_0_[25] ),
        .O(eof_qwd486_out));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    eof0_i_3
       (.I0(\bdata1_reg_n_0_[2] ),
        .I1(\bdata1_reg_n_0_[3] ),
        .I2(\bdata1_reg_n_0_[4] ),
        .I3(\bdata1_reg_n_0_[5] ),
        .I4(\bdata1_reg_n_0_[7] ),
        .I5(\bdata1_reg_n_0_[6] ),
        .O(eof0_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    eof0_i_4
       (.I0(p_0_in[1]),
        .I1(p_0_in[0]),
        .I2(p_6_in53_in),
        .I3(eof0_i_6_n_0),
        .I4(eof0_i_7_n_0),
        .I5(rx_err0_i_3_n_0),
        .O(eof0_i_4_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    eof0_i_5
       (.I0(\bdata1_reg_n_0_[26] ),
        .I1(\bdata1_reg_n_0_[27] ),
        .I2(\bdata1_reg_n_0_[28] ),
        .I3(\bdata1_reg_n_0_[29] ),
        .I4(\bdata1_reg_n_0_[31] ),
        .I5(\bdata1_reg_n_0_[30] ),
        .O(eof0_i_5_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    eof0_i_6
       (.I0(p_0_in[2]),
        .I1(p_0_in[3]),
        .I2(p_0_in[4]),
        .I3(p_0_in[5]),
        .I4(p_0_in[7]),
        .I5(p_0_in[6]),
        .O(eof0_i_6_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    eof0_i_7
       (.I0(p_1_in[1]),
        .I1(p_1_in[0]),
        .I2(p_5_in51_in),
        .O(eof0_i_7_n_0));
  FDRE eof0_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof00),
        .Q(eof0),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    eof1_i_1
       (.I0(eof1_i_2_n_0),
        .I1(\bdata1_reg_n_0_[33] ),
        .I2(\bdata1_reg_n_0_[32] ),
        .I3(p_7_in48_in),
        .I4(eof1_i_3_n_0),
        .O(eof10));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    eof1_i_2
       (.I0(\bdata1_reg_n_0_[57] ),
        .I1(\bdata1_reg_n_0_[56] ),
        .I2(p_4_in42_in),
        .I3(eof1_i_4_n_0),
        .I4(eof1_i_5_n_0),
        .O(eof1_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    eof1_i_3
       (.I0(\bdata1_reg_n_0_[34] ),
        .I1(\bdata1_reg_n_0_[35] ),
        .I2(\bdata1_reg_n_0_[36] ),
        .I3(\bdata1_reg_n_0_[37] ),
        .I4(\bdata1_reg_n_0_[39] ),
        .I5(\bdata1_reg_n_0_[38] ),
        .O(eof1_i_3_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    eof1_i_4
       (.I0(\bdata1_reg_n_0_[58] ),
        .I1(\bdata1_reg_n_0_[59] ),
        .I2(\bdata1_reg_n_0_[60] ),
        .I3(\bdata1_reg_n_0_[61] ),
        .I4(\bdata1_reg_n_0_[63] ),
        .I5(\bdata1_reg_n_0_[62] ),
        .O(eof1_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    eof1_i_5
       (.I0(\bdata1_reg_n_0_[41] ),
        .I1(\bdata1_reg_n_0_[40] ),
        .I2(p_6_in45_in),
        .I3(rx_err1_i_6_n_0),
        .I4(eof1_i_6_n_0),
        .I5(rx_err1_i_3_n_0),
        .O(eof1_i_5_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    eof1_i_6
       (.I0(\bdata1_reg_n_0_[49] ),
        .I1(\bdata1_reg_n_0_[48] ),
        .I2(p_5_in43_in),
        .O(eof1_i_6_n_0));
  FDRE eof1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof10),
        .Q(eof1),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT2 #(
    .INIT(4'hE)) 
    eof_dly_i_1
       (.I0(eof0),
        .I1(eof1),
        .O(eof));
  FDRE eof_dly_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof),
        .Q(eof_dly),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000808800000000)) 
    eof_dqwd_dly1_i_1
       (.I0(eof_qwd),
        .I1(eof_dqwd_dly1_i_2_n_0),
        .I2(p_5_in43_in),
        .I3(p_6_in45_in),
        .I4(eof_dqwd_dly1_i_3_n_0),
        .I5(eof_dqwd_dly1_i_4_n_0),
        .O(eof_dqwd));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT2 #(
    .INIT(4'h1)) 
    eof_dqwd_dly1_i_2
       (.I0(p_5_in51_in),
        .I1(p_4_in50_in),
        .O(eof_dqwd_dly1_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT2 #(
    .INIT(4'hE)) 
    eof_dqwd_dly1_i_3
       (.I0(p_6_in53_in),
        .I1(p_7_in48_in),
        .O(eof_dqwd_dly1_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT2 #(
    .INIT(4'h2)) 
    eof_dqwd_dly1_i_4
       (.I0(p_4_in42_in),
        .I1(\brxc1_reg_n_0_[0] ),
        .O(eof_dqwd_dly1_i_4_n_0));
  FDRE eof_dqwd_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(eof_dqwd),
        .Q(eof_dqwd_dly1),
        .R(SR));
  LUT5 #(
    .INIT(32'h44444440)) 
    err_i_1
       (.I0(pre_sof),
        .I1(rst_),
        .I2(err),
        .I3(rx_err1),
        .I4(rx_err0),
        .O(err_i_1_n_0));
  FDRE err_reg
       (.C(lclk),
        .CE(1'b1),
        .D(err_i_1_n_0),
        .Q(err),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT5 #(
    .INIT(32'hFFABFF00)) 
    has_pre_sof_i_1
       (.I0(pre_pkt_start_reg_0),
        .I1(eof0),
        .I2(eof1),
        .I3(pre_sof),
        .I4(has_pre_sof),
        .O(has_pre_sof_i_1_n_0));
  FDRE has_pre_sof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(has_pre_sof_i_1_n_0),
        .Q(has_pre_sof),
        .R(SR));
  FDRE has_sof_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(has_sof),
        .Q(has_sof_dly1),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    has_sof_i_1
       (.I0(pre_pkt_start_reg_0),
        .I1(eof1),
        .I2(eof0),
        .I3(has_sof),
        .O(has_sof_i_1_n_0));
  FDRE has_sof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(has_sof_i_1_n_0),
        .Q(has_sof),
        .R(SR));
  LUT4 #(
    .INIT(16'hF7F0)) 
    my_mac_hit_i_1
       (.I0(pre_pkt_start_reg_0),
        .I1(my_mac_hit273_in),
        .I2(my_mac_hit05_out),
        .I3(my_mac_hit),
        .O(my_mac_hit_i_1_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_10
       (.I0(qchk_daddr_order__0[31]),
        .I1(qchk_daddr_order__0[30]),
        .I2(qchk_daddr_order__0[32]),
        .O(my_mac_hit_i_10_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    my_mac_hit_i_11
       (.I0(qchk_daddr_order__0[29]),
        .I1(qchk_daddr_order__0[28]),
        .I2(qchk_daddr_order__0[27]),
        .O(my_mac_hit_i_11_n_0));
  LUT3 #(
    .INIT(8'h04)) 
    my_mac_hit_i_12
       (.I0(qchk_daddr_order__0[26]),
        .I1(qchk_daddr_order__0[25]),
        .I2(qchk_daddr_order__0[24]),
        .O(my_mac_hit_i_12_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFBFFFFFFF)) 
    my_mac_hit_i_14
       (.I0(my_mac_hit_i_35_n_0),
        .I1(qchk_daddr_order__0[31]),
        .I2(qchk_daddr_order__0[30]),
        .I3(qchk_daddr_order__0[29]),
        .I4(qchk_daddr_order__0[28]),
        .I5(my_mac_hit_i_36_n_0),
        .O(my_mac_hit_i_14_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFBFFFFFFF)) 
    my_mac_hit_i_15
       (.I0(my_mac_hit_i_37_n_0),
        .I1(qchk_daddr_order[15]),
        .I2(qchk_daddr_order[14]),
        .I3(qchk_daddr_order[13]),
        .I4(qchk_daddr_order[12]),
        .I5(my_mac_hit_i_38_n_0),
        .O(my_mac_hit_i_15_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    my_mac_hit_i_16
       (.I0(qchk_daddr_order__0[42]),
        .I1(qchk_daddr_order__0[41]),
        .I2(qchk_daddr_order__0[40]),
        .I3(my_mac_hit_i_39_n_0),
        .I4(my_mac_hit_i_40_n_0),
        .I5(my_mac_hit_i_41_n_0),
        .O(my_mac_hit_i_16_n_0));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    my_mac_hit_i_17
       (.I0(my_mac_hit_i_42_n_0),
        .I1(my_mac_hit_i_43_n_0),
        .I2(qchk_daddr_order__0[40]),
        .I3(qchk_daddr_order__0[32]),
        .I4(qchk_daddr_order__0[33]),
        .I5(my_mac_hit_i_44_n_0),
        .O(my_mac_hit_i_17_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_18
       (.I0(qchk_daddr_order[21]),
        .I1(qchk_daddr_order__0[23]),
        .I2(qchk_daddr_order[22]),
        .O(my_mac_hit_i_18_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_19
       (.I0(qchk_daddr_order[20]),
        .I1(qchk_daddr_order[19]),
        .I2(qchk_daddr_order[18]),
        .O(my_mac_hit_i_19_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_20
       (.I0(qchk_daddr_order[15]),
        .I1(qchk_daddr_order[17]),
        .I2(qchk_daddr_order[16]),
        .O(my_mac_hit_i_20_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_21
       (.I0(qchk_daddr_order[14]),
        .I1(qchk_daddr_order[13]),
        .I2(qchk_daddr_order[12]),
        .O(my_mac_hit_i_21_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_22
       (.I0(qchk_daddr_order[9]),
        .I1(qchk_daddr_order[11]),
        .I2(qchk_daddr_order[10]),
        .O(my_mac_hit_i_22_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_23
       (.I0(qchk_daddr_order[8]),
        .I1(qchk_daddr_order[7]),
        .I2(qchk_daddr_order[6]),
        .O(my_mac_hit_i_23_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_24
       (.I0(qchk_daddr_order[3]),
        .I1(qchk_daddr_order[5]),
        .I2(qchk_daddr_order[4]),
        .O(my_mac_hit_i_24_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_25
       (.I0(qchk_daddr_order[2]),
        .I1(qchk_daddr_order[1]),
        .I2(qchk_daddr_order[0]),
        .O(my_mac_hit_i_25_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_27
       (.I0(qchk_daddr_order__0[47]),
        .I1(qchk_daddr_order__0[46]),
        .I2(qchk_daddr_order__0[45]),
        .O(my_mac_hit_i_27_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_28
       (.I0(qchk_daddr_order__0[44]),
        .I1(qchk_daddr_order__0[43]),
        .I2(qchk_daddr_order__0[42]),
        .O(my_mac_hit_i_28_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_29
       (.I0(qchk_daddr_order__0[39]),
        .I1(qchk_daddr_order__0[41]),
        .I2(qchk_daddr_order__0[40]),
        .O(my_mac_hit_i_29_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF888F8888)) 
    my_mac_hit_i_3
       (.I0(pre_pkt_start_reg_0),
        .I1(my_mac_hit3),
        .I2(my_mac_hit_i_14_n_0),
        .I3(my_mac_hit_i_15_n_0),
        .I4(my_mac_hit_i_16_n_0),
        .I5(my_mac_hit_i_17_n_0),
        .O(my_mac_hit05_out));
  LUT3 #(
    .INIT(8'h10)) 
    my_mac_hit_i_30
       (.I0(qchk_daddr_order__0[38]),
        .I1(qchk_daddr_order__0[37]),
        .I2(qchk_daddr_order__0[36]),
        .O(my_mac_hit_i_30_n_0));
  LUT3 #(
    .INIT(8'h10)) 
    my_mac_hit_i_31
       (.I0(qchk_daddr_order__0[35]),
        .I1(qchk_daddr_order__0[34]),
        .I2(qchk_daddr_order__0[33]),
        .O(my_mac_hit_i_31_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_32
       (.I0(qchk_daddr_order__0[31]),
        .I1(qchk_daddr_order__0[30]),
        .I2(qchk_daddr_order__0[32]),
        .O(my_mac_hit_i_32_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    my_mac_hit_i_33
       (.I0(qchk_daddr_order__0[29]),
        .I1(qchk_daddr_order__0[28]),
        .I2(qchk_daddr_order__0[27]),
        .O(my_mac_hit_i_33_n_0));
  LUT3 #(
    .INIT(8'h04)) 
    my_mac_hit_i_34
       (.I0(qchk_daddr_order__0[26]),
        .I1(qchk_daddr_order__0[25]),
        .I2(qchk_daddr_order__0[24]),
        .O(my_mac_hit_i_34_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    my_mac_hit_i_35
       (.I0(qchk_daddr_order__0[27]),
        .I1(qchk_daddr_order__0[26]),
        .I2(qchk_daddr_order__0[25]),
        .I3(qchk_daddr_order__0[24]),
        .O(my_mac_hit_i_35_n_0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    my_mac_hit_i_36
       (.I0(qchk_daddr_order[20]),
        .I1(qchk_daddr_order[21]),
        .I2(qchk_daddr_order[22]),
        .I3(qchk_daddr_order__0[23]),
        .I4(my_mac_hit_i_53_n_0),
        .O(my_mac_hit_i_36_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    my_mac_hit_i_37
       (.I0(qchk_daddr_order[11]),
        .I1(qchk_daddr_order[10]),
        .I2(qchk_daddr_order[9]),
        .I3(qchk_daddr_order[8]),
        .O(my_mac_hit_i_37_n_0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    my_mac_hit_i_38
       (.I0(qchk_daddr_order[4]),
        .I1(qchk_daddr_order[5]),
        .I2(qchk_daddr_order[6]),
        .I3(qchk_daddr_order[7]),
        .I4(my_mac_hit_i_54_n_0),
        .O(my_mac_hit_i_38_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    my_mac_hit_i_39
       (.I0(qchk_daddr_order__0[46]),
        .I1(qchk_daddr_order__0[45]),
        .I2(qchk_daddr_order__0[44]),
        .I3(qchk_daddr_order__0[43]),
        .O(my_mac_hit_i_39_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    my_mac_hit_i_40
       (.I0(qchk_daddr_order__0[34]),
        .I1(qchk_daddr_order__0[33]),
        .I2(qchk_daddr_order__0[32]),
        .I3(qchk_daddr_order__0[47]),
        .O(my_mac_hit_i_40_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    my_mac_hit_i_41
       (.I0(qchk_daddr_order__0[35]),
        .I1(qchk_daddr_order__0[36]),
        .I2(qchk_daddr_order__0[37]),
        .I3(qchk_daddr_order__0[38]),
        .I4(pre_pkt_start_reg_0),
        .I5(qchk_daddr_order__0[39]),
        .O(my_mac_hit_i_41_n_0));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    my_mac_hit_i_42
       (.I0(qchk_daddr_order__0[27]),
        .I1(qchk_daddr_order__0[28]),
        .I2(qchk_daddr_order__0[29]),
        .I3(qchk_daddr_order__0[31]),
        .I4(qchk_daddr_order__0[23]),
        .I5(pre_pkt_start_reg_0),
        .O(my_mac_hit_i_42_n_0));
  LUT5 #(
    .INIT(32'h00010000)) 
    my_mac_hit_i_43
       (.I0(qchk_daddr_order__0[34]),
        .I1(qchk_daddr_order__0[35]),
        .I2(qchk_daddr_order__0[36]),
        .I3(qchk_daddr_order__0[37]),
        .I4(my_mac_hit_i_55_n_0),
        .O(my_mac_hit_i_43_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    my_mac_hit_i_44
       (.I0(my_mac_hit_i_56_n_0),
        .I1(qchk_daddr_order__0[45]),
        .I2(qchk_daddr_order__0[44]),
        .I3(qchk_daddr_order__0[43]),
        .I4(qchk_daddr_order__0[42]),
        .O(my_mac_hit_i_44_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_45
       (.I0(qchk_daddr_order[21]),
        .I1(qchk_daddr_order__0[23]),
        .I2(qchk_daddr_order[22]),
        .O(my_mac_hit_i_45_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_46
       (.I0(qchk_daddr_order[20]),
        .I1(qchk_daddr_order[19]),
        .I2(qchk_daddr_order[18]),
        .O(my_mac_hit_i_46_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_47
       (.I0(qchk_daddr_order[15]),
        .I1(qchk_daddr_order[17]),
        .I2(qchk_daddr_order[16]),
        .O(my_mac_hit_i_47_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_48
       (.I0(qchk_daddr_order[14]),
        .I1(qchk_daddr_order[13]),
        .I2(qchk_daddr_order[12]),
        .O(my_mac_hit_i_48_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_49
       (.I0(qchk_daddr_order[9]),
        .I1(qchk_daddr_order[11]),
        .I2(qchk_daddr_order[10]),
        .O(my_mac_hit_i_49_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_5
       (.I0(qchk_daddr_order__0[47]),
        .I1(qchk_daddr_order__0[46]),
        .I2(qchk_daddr_order__0[45]),
        .O(my_mac_hit_i_5_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_50
       (.I0(qchk_daddr_order[8]),
        .I1(qchk_daddr_order[7]),
        .I2(qchk_daddr_order[6]),
        .O(my_mac_hit_i_50_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_51
       (.I0(qchk_daddr_order[3]),
        .I1(qchk_daddr_order[5]),
        .I2(qchk_daddr_order[4]),
        .O(my_mac_hit_i_51_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    my_mac_hit_i_52
       (.I0(qchk_daddr_order[2]),
        .I1(qchk_daddr_order[1]),
        .I2(qchk_daddr_order[0]),
        .O(my_mac_hit_i_52_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    my_mac_hit_i_53
       (.I0(qchk_daddr_order[19]),
        .I1(qchk_daddr_order[18]),
        .I2(qchk_daddr_order[17]),
        .I3(qchk_daddr_order[16]),
        .O(my_mac_hit_i_53_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    my_mac_hit_i_54
       (.I0(qchk_daddr_order[3]),
        .I1(qchk_daddr_order[2]),
        .I2(qchk_daddr_order[1]),
        .I3(qchk_daddr_order[0]),
        .O(my_mac_hit_i_54_n_0));
  LUT4 #(
    .INIT(16'h0008)) 
    my_mac_hit_i_55
       (.I0(qchk_daddr_order__0[26]),
        .I1(qchk_daddr_order__0[25]),
        .I2(qchk_daddr_order__0[39]),
        .I3(qchk_daddr_order__0[38]),
        .O(my_mac_hit_i_55_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    my_mac_hit_i_56
       (.I0(qchk_daddr_order__0[30]),
        .I1(qchk_daddr_order__0[46]),
        .I2(qchk_daddr_order__0[47]),
        .I3(qchk_daddr_order__0[24]),
        .I4(qchk_daddr_order__0[41]),
        .O(my_mac_hit_i_56_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_6
       (.I0(qchk_daddr_order__0[44]),
        .I1(qchk_daddr_order__0[43]),
        .I2(qchk_daddr_order__0[42]),
        .O(my_mac_hit_i_6_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    my_mac_hit_i_7
       (.I0(qchk_daddr_order__0[39]),
        .I1(qchk_daddr_order__0[41]),
        .I2(qchk_daddr_order__0[40]),
        .O(my_mac_hit_i_7_n_0));
  LUT3 #(
    .INIT(8'h10)) 
    my_mac_hit_i_8
       (.I0(qchk_daddr_order__0[38]),
        .I1(qchk_daddr_order__0[37]),
        .I2(qchk_daddr_order__0[36]),
        .O(my_mac_hit_i_8_n_0));
  LUT3 #(
    .INIT(8'h10)) 
    my_mac_hit_i_9
       (.I0(qchk_daddr_order__0[35]),
        .I1(qchk_daddr_order__0[34]),
        .I2(qchk_daddr_order__0[33]),
        .O(my_mac_hit_i_9_n_0));
  FDRE my_mac_hit_reg
       (.C(lclk),
        .CE(1'b1),
        .D(my_mac_hit_i_1_n_0),
        .Q(my_mac_hit),
        .R(SR));
  CARRY8 my_mac_hit_reg_i_13
       (.CI(my_mac_hit_reg_i_26_n_0),
        .CI_TOP(1'b0),
        .CO({my_mac_hit3,my_mac_hit_reg_i_13_n_1,my_mac_hit_reg_i_13_n_2,my_mac_hit_reg_i_13_n_3,NLW_my_mac_hit_reg_i_13_CO_UNCONNECTED[3],my_mac_hit_reg_i_13_n_5,my_mac_hit_reg_i_13_n_6,my_mac_hit_reg_i_13_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_my_mac_hit_reg_i_13_O_UNCONNECTED[7:0]),
        .S({my_mac_hit_i_27_n_0,my_mac_hit_i_28_n_0,my_mac_hit_i_29_n_0,my_mac_hit_i_30_n_0,my_mac_hit_i_31_n_0,my_mac_hit_i_32_n_0,my_mac_hit_i_33_n_0,my_mac_hit_i_34_n_0}));
  CARRY8 my_mac_hit_reg_i_2
       (.CI(my_mac_hit_reg_i_4_n_0),
        .CI_TOP(1'b0),
        .CO({my_mac_hit273_in,my_mac_hit_reg_i_2_n_1,my_mac_hit_reg_i_2_n_2,my_mac_hit_reg_i_2_n_3,NLW_my_mac_hit_reg_i_2_CO_UNCONNECTED[3],my_mac_hit_reg_i_2_n_5,my_mac_hit_reg_i_2_n_6,my_mac_hit_reg_i_2_n_7}),
        .DI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .O(NLW_my_mac_hit_reg_i_2_O_UNCONNECTED[7:0]),
        .S({my_mac_hit_i_5_n_0,my_mac_hit_i_6_n_0,my_mac_hit_i_7_n_0,my_mac_hit_i_8_n_0,my_mac_hit_i_9_n_0,my_mac_hit_i_10_n_0,my_mac_hit_i_11_n_0,my_mac_hit_i_12_n_0}));
  CARRY8 my_mac_hit_reg_i_26
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({my_mac_hit_reg_i_26_n_0,my_mac_hit_reg_i_26_n_1,my_mac_hit_reg_i_26_n_2,my_mac_hit_reg_i_26_n_3,NLW_my_mac_hit_reg_i_26_CO_UNCONNECTED[3],my_mac_hit_reg_i_26_n_5,my_mac_hit_reg_i_26_n_6,my_mac_hit_reg_i_26_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_my_mac_hit_reg_i_26_O_UNCONNECTED[7:0]),
        .S({my_mac_hit_i_45_n_0,my_mac_hit_i_46_n_0,my_mac_hit_i_47_n_0,my_mac_hit_i_48_n_0,my_mac_hit_i_49_n_0,my_mac_hit_i_50_n_0,my_mac_hit_i_51_n_0,my_mac_hit_i_52_n_0}));
  CARRY8 my_mac_hit_reg_i_4
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({my_mac_hit_reg_i_4_n_0,my_mac_hit_reg_i_4_n_1,my_mac_hit_reg_i_4_n_2,my_mac_hit_reg_i_4_n_3,NLW_my_mac_hit_reg_i_4_CO_UNCONNECTED[3],my_mac_hit_reg_i_4_n_5,my_mac_hit_reg_i_4_n_6,my_mac_hit_reg_i_4_n_7}),
        .DI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .O(NLW_my_mac_hit_reg_i_4_O_UNCONNECTED[7:0]),
        .S({my_mac_hit_i_18_n_0,my_mac_hit_i_19_n_0,my_mac_hit_i_20_n_0,my_mac_hit_i_21_n_0,my_mac_hit_i_22_n_0,my_mac_hit_i_23_n_0,my_mac_hit_i_24_n_0,my_mac_hit_i_25_n_0}));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[10]_i_1 
       (.I0(\nbytes_reg[13]_i_3_n_13 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[11]_i_1 
       (.I0(\nbytes_reg[13]_i_3_n_12 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[12]_i_1 
       (.I0(\nbytes_reg[13]_i_3_n_11 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFAAFE)) 
    \nbytes[13]_i_1 
       (.I0(wen1),
        .I1(eof1),
        .I2(eof0),
        .I3(\bcnt_reg_n_0_[3] ),
        .I4(pre_pkt_start_reg_0),
        .O(\nbytes[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[13]_i_2 
       (.I0(\nbytes_reg[13]_i_3_n_10 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[13]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \nbytes[1]_i_1 
       (.I0(pre_pkt_start_reg_0),
        .I1(rst_),
        .O(\nbytes[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF54)) 
    \nbytes[1]_i_2 
       (.I0(\bcnt_reg_n_0_[3] ),
        .I1(eof0),
        .I2(eof1),
        .I3(wen1),
        .O(nbytes0));
  LUT2 #(
    .INIT(4'h6)) 
    \nbytes[1]_i_4 
       (.I0(nbytes[3]),
        .I1(\bcnt_reg_n_0_[3] ),
        .O(\nbytes[1]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \nbytes[1]_i_5 
       (.I0(nbytes[2]),
        .I1(\bcnt_reg_n_0_[2] ),
        .O(\nbytes[1]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \nbytes[1]_i_6 
       (.I0(nbytes[1]),
        .I1(\bcnt_reg_n_0_[1] ),
        .O(\nbytes[1]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \nbytes[1]_i_7 
       (.I0(nbytes[0]),
        .I1(\bcnt_reg_n_0_[0] ),
        .O(\nbytes[1]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[2]_i_1 
       (.I0(\nbytes_reg[1]_i_3_n_13 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[3]_i_1 
       (.I0(\nbytes_reg[1]_i_3_n_12 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[4]_i_1 
       (.I0(\nbytes_reg[1]_i_3_n_11 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[5]_i_1 
       (.I0(\nbytes_reg[1]_i_3_n_10 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[6]_i_1 
       (.I0(\nbytes_reg[1]_i_3_n_9 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[7]_i_1 
       (.I0(\nbytes_reg[1]_i_3_n_8 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[8]_i_1 
       (.I0(\nbytes_reg[13]_i_3_n_15 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \nbytes[9]_i_1 
       (.I0(\nbytes_reg[13]_i_3_n_14 ),
        .I1(pre_pkt_start_reg_0),
        .O(\nbytes[9]_i_1_n_0 ));
  FDRE \nbytes_out_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [0]),
        .R(SR));
  FDRE \nbytes_out_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[10]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [10]),
        .R(SR));
  FDRE \nbytes_out_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[11]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [11]),
        .R(SR));
  FDRE \nbytes_out_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[12]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [12]),
        .R(SR));
  FDRE \nbytes_out_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[13]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [13]),
        .R(SR));
  FDRE \nbytes_out_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [1]),
        .R(SR));
  FDRE \nbytes_out_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [2]),
        .R(SR));
  FDRE \nbytes_out_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [3]),
        .R(SR));
  FDRE \nbytes_out_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [4]),
        .R(SR));
  FDRE \nbytes_out_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [5]),
        .R(SR));
  FDRE \nbytes_out_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [6]),
        .R(SR));
  FDRE \nbytes_out_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [7]),
        .R(SR));
  FDRE \nbytes_out_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [8]),
        .R(SR));
  FDRE \nbytes_out_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(nbytes[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [9]),
        .R(SR));
  FDRE \nbytes_reg[0] 
       (.C(lclk),
        .CE(nbytes0),
        .D(\nbytes_reg[1]_i_3_n_15 ),
        .Q(nbytes[0]),
        .R(\nbytes[1]_i_1_n_0 ));
  FDRE \nbytes_reg[10] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[10]_i_1_n_0 ),
        .Q(nbytes[10]),
        .R(SR));
  FDRE \nbytes_reg[11] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[11]_i_1_n_0 ),
        .Q(nbytes[11]),
        .R(SR));
  FDRE \nbytes_reg[12] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[12]_i_1_n_0 ),
        .Q(nbytes[12]),
        .R(SR));
  FDRE \nbytes_reg[13] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[13]_i_2_n_0 ),
        .Q(nbytes[13]),
        .R(SR));
  CARRY8 \nbytes_reg[13]_i_3 
       (.CI(\nbytes_reg[1]_i_3_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_nbytes_reg[13]_i_3_CO_UNCONNECTED [7:5],\nbytes_reg[13]_i_3_n_3 ,\NLW_nbytes_reg[13]_i_3_CO_UNCONNECTED [3],\nbytes_reg[13]_i_3_n_5 ,\nbytes_reg[13]_i_3_n_6 ,\nbytes_reg[13]_i_3_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_nbytes_reg[13]_i_3_O_UNCONNECTED [7:6],\nbytes_reg[13]_i_3_n_10 ,\nbytes_reg[13]_i_3_n_11 ,\nbytes_reg[13]_i_3_n_12 ,\nbytes_reg[13]_i_3_n_13 ,\nbytes_reg[13]_i_3_n_14 ,\nbytes_reg[13]_i_3_n_15 }),
        .S({1'b0,1'b0,nbytes[13:8]}));
  FDRE \nbytes_reg[1] 
       (.C(lclk),
        .CE(nbytes0),
        .D(\nbytes_reg[1]_i_3_n_14 ),
        .Q(nbytes[1]),
        .R(\nbytes[1]_i_1_n_0 ));
  CARRY8 \nbytes_reg[1]_i_3 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\nbytes_reg[1]_i_3_n_0 ,\nbytes_reg[1]_i_3_n_1 ,\nbytes_reg[1]_i_3_n_2 ,\nbytes_reg[1]_i_3_n_3 ,\NLW_nbytes_reg[1]_i_3_CO_UNCONNECTED [3],\nbytes_reg[1]_i_3_n_5 ,\nbytes_reg[1]_i_3_n_6 ,\nbytes_reg[1]_i_3_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,nbytes[3:0]}),
        .O({\nbytes_reg[1]_i_3_n_8 ,\nbytes_reg[1]_i_3_n_9 ,\nbytes_reg[1]_i_3_n_10 ,\nbytes_reg[1]_i_3_n_11 ,\nbytes_reg[1]_i_3_n_12 ,\nbytes_reg[1]_i_3_n_13 ,\nbytes_reg[1]_i_3_n_14 ,\nbytes_reg[1]_i_3_n_15 }),
        .S({nbytes[7:4],\nbytes[1]_i_4_n_0 ,\nbytes[1]_i_5_n_0 ,\nbytes[1]_i_6_n_0 ,\nbytes[1]_i_7_n_0 }));
  FDRE \nbytes_reg[2] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[2]_i_1_n_0 ),
        .Q(nbytes[2]),
        .R(SR));
  FDRE \nbytes_reg[3] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[3]_i_1_n_0 ),
        .Q(nbytes[3]),
        .R(SR));
  FDRE \nbytes_reg[4] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[4]_i_1_n_0 ),
        .Q(nbytes[4]),
        .R(SR));
  FDRE \nbytes_reg[5] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[5]_i_1_n_0 ),
        .Q(nbytes[5]),
        .R(SR));
  FDRE \nbytes_reg[6] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[6]_i_1_n_0 ),
        .Q(nbytes[6]),
        .R(SR));
  FDRE \nbytes_reg[7] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[7]_i_1_n_0 ),
        .Q(nbytes[7]),
        .R(SR));
  FDRE \nbytes_reg[8] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[8]_i_1_n_0 ),
        .Q(nbytes[8]),
        .R(SR));
  FDRE \nbytes_reg[9] 
       (.C(lclk),
        .CE(\nbytes[13]_i_1_n_0 ),
        .D(\nbytes[9]_i_1_n_0 ),
        .Q(nbytes[9]),
        .R(SR));
  FDRE \pkt_data_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \pkt_data_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \pkt_data_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \pkt_data_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \pkt_data_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \pkt_data_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \pkt_data_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \pkt_data_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[16]),
        .Q(Q[16]),
        .R(SR));
  FDRE \pkt_data_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[17]),
        .Q(Q[17]),
        .R(SR));
  FDRE \pkt_data_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[18]),
        .Q(Q[18]),
        .R(SR));
  FDRE \pkt_data_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[19]),
        .Q(Q[19]),
        .R(SR));
  FDRE \pkt_data_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \pkt_data_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[20]),
        .Q(Q[20]),
        .R(SR));
  FDRE \pkt_data_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[21]),
        .Q(Q[21]),
        .R(SR));
  FDRE \pkt_data_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[22]),
        .Q(Q[22]),
        .R(SR));
  FDRE \pkt_data_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[23]),
        .Q(Q[23]),
        .R(SR));
  FDRE \pkt_data_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[24]),
        .Q(Q[24]),
        .R(SR));
  FDRE \pkt_data_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[25]),
        .Q(Q[25]),
        .R(SR));
  FDRE \pkt_data_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[26]),
        .Q(Q[26]),
        .R(SR));
  FDRE \pkt_data_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[27]),
        .Q(Q[27]),
        .R(SR));
  FDRE \pkt_data_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[28]),
        .Q(Q[28]),
        .R(SR));
  FDRE \pkt_data_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[29]),
        .Q(Q[29]),
        .R(SR));
  FDRE \pkt_data_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \pkt_data_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[30]),
        .Q(Q[30]),
        .R(SR));
  FDRE \pkt_data_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[31]),
        .Q(Q[31]),
        .R(SR));
  FDRE \pkt_data_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[32]),
        .Q(Q[32]),
        .R(SR));
  FDRE \pkt_data_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[33]),
        .Q(Q[33]),
        .R(SR));
  FDRE \pkt_data_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[34]),
        .Q(Q[34]),
        .R(SR));
  FDRE \pkt_data_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[35]),
        .Q(Q[35]),
        .R(SR));
  FDRE \pkt_data_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[36]),
        .Q(Q[36]),
        .R(SR));
  FDRE \pkt_data_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[37]),
        .Q(Q[37]),
        .R(SR));
  FDRE \pkt_data_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[38]),
        .Q(Q[38]),
        .R(SR));
  FDRE \pkt_data_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[39]),
        .Q(Q[39]),
        .R(SR));
  FDRE \pkt_data_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \pkt_data_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[40]),
        .Q(Q[40]),
        .R(SR));
  FDRE \pkt_data_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[41]),
        .Q(Q[41]),
        .R(SR));
  FDRE \pkt_data_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[42]),
        .Q(Q[42]),
        .R(SR));
  FDRE \pkt_data_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[43]),
        .Q(Q[43]),
        .R(SR));
  FDRE \pkt_data_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[44]),
        .Q(Q[44]),
        .R(SR));
  FDRE \pkt_data_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[45]),
        .Q(Q[45]),
        .R(SR));
  FDRE \pkt_data_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[46]),
        .Q(Q[46]),
        .R(SR));
  FDRE \pkt_data_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[47]),
        .Q(Q[47]),
        .R(SR));
  FDRE \pkt_data_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[48]),
        .Q(Q[48]),
        .R(SR));
  FDRE \pkt_data_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[49]),
        .Q(Q[49]),
        .R(SR));
  FDRE \pkt_data_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \pkt_data_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[50]),
        .Q(Q[50]),
        .R(SR));
  FDRE \pkt_data_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[51]),
        .Q(Q[51]),
        .R(SR));
  FDRE \pkt_data_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[52]),
        .Q(Q[52]),
        .R(SR));
  FDRE \pkt_data_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[53]),
        .Q(Q[53]),
        .R(SR));
  FDRE \pkt_data_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[54]),
        .Q(Q[54]),
        .R(SR));
  FDRE \pkt_data_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[55]),
        .Q(Q[55]),
        .R(SR));
  FDRE \pkt_data_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[56]),
        .Q(Q[56]),
        .R(SR));
  FDRE \pkt_data_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[57]),
        .Q(Q[57]),
        .R(SR));
  FDRE \pkt_data_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[58]),
        .Q(Q[58]),
        .R(SR));
  FDRE \pkt_data_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[59]),
        .Q(Q[59]),
        .R(SR));
  FDRE \pkt_data_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \pkt_data_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[60]),
        .Q(Q[60]),
        .R(SR));
  FDRE \pkt_data_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[61]),
        .Q(Q[61]),
        .R(SR));
  FDRE \pkt_data_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[62]),
        .Q(Q[62]),
        .R(SR));
  FDRE \pkt_data_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[63]),
        .Q(Q[63]),
        .R(SR));
  FDRE \pkt_data_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \pkt_data_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \pkt_data_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \pkt_data_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_data[9]),
        .Q(Q[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'h000000E000E000E0)) 
    pkt_end_i_1
       (.I0(pre_eof),
        .I1(eof_dqwd_dly1),
        .I2(pkt_we_reg_0),
        .I3(din[1]),
        .I4(eof_qwd),
        .I5(eof_dqwd0),
        .O(pkt_end0));
  LUT6 #(
    .INIT(64'h0000101100000000)) 
    pkt_end_i_2
       (.I0(p_5_in51_in),
        .I1(p_4_in50_in),
        .I2(p_5_in43_in),
        .I3(p_6_in45_in),
        .I4(eof_dqwd_dly1_i_3_n_0),
        .I5(eof_dqwd_dly1_i_4_n_0),
        .O(eof_dqwd0));
  FDRE pkt_end_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pkt_end0),
        .Q(din[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT3 #(
    .INIT(8'h08)) 
    pkt_start_i_1
       (.I0(pre_pkt_start),
        .I1(my_mac_hit),
        .I2(wr_nbyte_reg_0),
        .O(pkt_start0));
  FDRE pkt_start_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pkt_start0),
        .Q(din[0]),
        .R(SR));
  LUT6 #(
    .INIT(64'h4040404044404040)) 
    pkt_we_i_1
       (.I0(din[1]),
        .I1(rst_),
        .I2(pkt_we_reg_0),
        .I3(pre_pkt_start),
        .I4(my_mac_hit),
        .I5(wr_nbyte_reg_0),
        .O(pkt_we_i_1_n_0));
  FDRE pkt_we_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pkt_we_i_1_n_0),
        .Q(pkt_we_reg_0),
        .R(1'b0));
  FDRE pre_eof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pre_eof0),
        .Q(pre_eof),
        .R(SR));
  FDRE \pre_pkt_data_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[0] ),
        .Q(pre_pkt_data[0]),
        .R(SR));
  FDRE \pre_pkt_data_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[2]),
        .Q(pre_pkt_data[10]),
        .R(SR));
  FDRE \pre_pkt_data_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(pre_pkt_data[11]),
        .R(SR));
  FDRE \pre_pkt_data_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[4]),
        .Q(pre_pkt_data[12]),
        .R(SR));
  FDRE \pre_pkt_data_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[5]),
        .Q(pre_pkt_data[13]),
        .R(SR));
  FDRE \pre_pkt_data_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[6]),
        .Q(pre_pkt_data[14]),
        .R(SR));
  FDRE \pre_pkt_data_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[7]),
        .Q(pre_pkt_data[15]),
        .R(SR));
  FDRE \pre_pkt_data_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[0]),
        .Q(pre_pkt_data[16]),
        .R(SR));
  FDRE \pre_pkt_data_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[1]),
        .Q(pre_pkt_data[17]),
        .R(SR));
  FDRE \pre_pkt_data_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[2]),
        .Q(pre_pkt_data[18]),
        .R(SR));
  FDRE \pre_pkt_data_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[3]),
        .Q(pre_pkt_data[19]),
        .R(SR));
  FDRE \pre_pkt_data_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[1] ),
        .Q(pre_pkt_data[1]),
        .R(SR));
  FDRE \pre_pkt_data_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[4]),
        .Q(pre_pkt_data[20]),
        .R(SR));
  FDRE \pre_pkt_data_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[5]),
        .Q(pre_pkt_data[21]),
        .R(SR));
  FDRE \pre_pkt_data_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[6]),
        .Q(pre_pkt_data[22]),
        .R(SR));
  FDRE \pre_pkt_data_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_1_in[7]),
        .Q(pre_pkt_data[23]),
        .R(SR));
  FDRE \pre_pkt_data_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[24] ),
        .Q(pre_pkt_data[24]),
        .R(SR));
  FDRE \pre_pkt_data_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[25] ),
        .Q(pre_pkt_data[25]),
        .R(SR));
  FDRE \pre_pkt_data_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[26] ),
        .Q(pre_pkt_data[26]),
        .R(SR));
  FDRE \pre_pkt_data_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[27] ),
        .Q(pre_pkt_data[27]),
        .R(SR));
  FDRE \pre_pkt_data_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[28] ),
        .Q(pre_pkt_data[28]),
        .R(SR));
  FDRE \pre_pkt_data_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[29] ),
        .Q(pre_pkt_data[29]),
        .R(SR));
  FDRE \pre_pkt_data_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[2] ),
        .Q(pre_pkt_data[2]),
        .R(SR));
  FDRE \pre_pkt_data_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[30] ),
        .Q(pre_pkt_data[30]),
        .R(SR));
  FDRE \pre_pkt_data_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[31] ),
        .Q(pre_pkt_data[31]),
        .R(SR));
  FDRE \pre_pkt_data_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[32] ),
        .Q(pre_pkt_data[32]),
        .R(SR));
  FDRE \pre_pkt_data_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[33] ),
        .Q(pre_pkt_data[33]),
        .R(SR));
  FDRE \pre_pkt_data_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[34] ),
        .Q(pre_pkt_data[34]),
        .R(SR));
  FDRE \pre_pkt_data_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[35] ),
        .Q(pre_pkt_data[35]),
        .R(SR));
  FDRE \pre_pkt_data_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[36] ),
        .Q(pre_pkt_data[36]),
        .R(SR));
  FDRE \pre_pkt_data_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[37] ),
        .Q(pre_pkt_data[37]),
        .R(SR));
  FDRE \pre_pkt_data_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[38] ),
        .Q(pre_pkt_data[38]),
        .R(SR));
  FDRE \pre_pkt_data_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[39] ),
        .Q(pre_pkt_data[39]),
        .R(SR));
  FDRE \pre_pkt_data_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[3] ),
        .Q(pre_pkt_data[3]),
        .R(SR));
  FDRE \pre_pkt_data_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[40] ),
        .Q(pre_pkt_data[40]),
        .R(SR));
  FDRE \pre_pkt_data_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[41] ),
        .Q(pre_pkt_data[41]),
        .R(SR));
  FDRE \pre_pkt_data_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[42] ),
        .Q(pre_pkt_data[42]),
        .R(SR));
  FDRE \pre_pkt_data_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[43] ),
        .Q(pre_pkt_data[43]),
        .R(SR));
  FDRE \pre_pkt_data_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[44] ),
        .Q(pre_pkt_data[44]),
        .R(SR));
  FDRE \pre_pkt_data_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[45] ),
        .Q(pre_pkt_data[45]),
        .R(SR));
  FDRE \pre_pkt_data_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[46] ),
        .Q(pre_pkt_data[46]),
        .R(SR));
  FDRE \pre_pkt_data_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[47] ),
        .Q(pre_pkt_data[47]),
        .R(SR));
  FDRE \pre_pkt_data_reg[48] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[48] ),
        .Q(pre_pkt_data[48]),
        .R(SR));
  FDRE \pre_pkt_data_reg[49] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[49] ),
        .Q(pre_pkt_data[49]),
        .R(SR));
  FDRE \pre_pkt_data_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[4] ),
        .Q(pre_pkt_data[4]),
        .R(SR));
  FDRE \pre_pkt_data_reg[50] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[50] ),
        .Q(pre_pkt_data[50]),
        .R(SR));
  FDRE \pre_pkt_data_reg[51] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[51] ),
        .Q(pre_pkt_data[51]),
        .R(SR));
  FDRE \pre_pkt_data_reg[52] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[52] ),
        .Q(pre_pkt_data[52]),
        .R(SR));
  FDRE \pre_pkt_data_reg[53] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[53] ),
        .Q(pre_pkt_data[53]),
        .R(SR));
  FDRE \pre_pkt_data_reg[54] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[54] ),
        .Q(pre_pkt_data[54]),
        .R(SR));
  FDRE \pre_pkt_data_reg[55] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[55] ),
        .Q(pre_pkt_data[55]),
        .R(SR));
  FDRE \pre_pkt_data_reg[56] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[56] ),
        .Q(pre_pkt_data[56]),
        .R(SR));
  FDRE \pre_pkt_data_reg[57] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[57] ),
        .Q(pre_pkt_data[57]),
        .R(SR));
  FDRE \pre_pkt_data_reg[58] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[58] ),
        .Q(pre_pkt_data[58]),
        .R(SR));
  FDRE \pre_pkt_data_reg[59] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[59] ),
        .Q(pre_pkt_data[59]),
        .R(SR));
  FDRE \pre_pkt_data_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[5] ),
        .Q(pre_pkt_data[5]),
        .R(SR));
  FDRE \pre_pkt_data_reg[60] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[60] ),
        .Q(pre_pkt_data[60]),
        .R(SR));
  FDRE \pre_pkt_data_reg[61] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[61] ),
        .Q(pre_pkt_data[61]),
        .R(SR));
  FDRE \pre_pkt_data_reg[62] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[62] ),
        .Q(pre_pkt_data[62]),
        .R(SR));
  FDRE \pre_pkt_data_reg[63] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[63] ),
        .Q(pre_pkt_data[63]),
        .R(SR));
  FDRE \pre_pkt_data_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[6] ),
        .Q(pre_pkt_data[6]),
        .R(SR));
  FDRE \pre_pkt_data_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(\bdata1_reg_n_0_[7] ),
        .Q(pre_pkt_data[7]),
        .R(SR));
  FDRE \pre_pkt_data_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(pre_pkt_data[8]),
        .R(SR));
  FDRE \pre_pkt_data_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(pre_pkt_data[9]),
        .R(SR));
  FDRE pre_pkt_start_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pre_pkt_start_reg_0),
        .Q(pre_pkt_start),
        .R(SR));
  FDRE pre_sof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pre_sof0),
        .Q(pre_sof),
        .R(SR));
  FDRE \qchk_daddr_reg[0] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(qchk_daddr_order__0[40]),
        .R(SR));
  FDRE \qchk_daddr_reg[10] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(qchk_daddr_order__0[34]),
        .R(SR));
  FDRE \qchk_daddr_reg[11] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[11]),
        .Q(qchk_daddr_order__0[35]),
        .R(SR));
  FDRE \qchk_daddr_reg[12] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[12]),
        .Q(qchk_daddr_order__0[36]),
        .R(SR));
  FDRE \qchk_daddr_reg[13] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[13]),
        .Q(qchk_daddr_order__0[37]),
        .R(SR));
  FDRE \qchk_daddr_reg[14] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[14]),
        .Q(qchk_daddr_order__0[38]),
        .R(SR));
  FDRE \qchk_daddr_reg[15] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[15]),
        .Q(qchk_daddr_order__0[39]),
        .R(SR));
  FDRE \qchk_daddr_reg[16] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[16]),
        .Q(qchk_daddr_order__0[24]),
        .R(SR));
  FDRE \qchk_daddr_reg[17] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[17]),
        .Q(qchk_daddr_order__0[25]),
        .R(SR));
  FDRE \qchk_daddr_reg[18] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[18]),
        .Q(qchk_daddr_order__0[26]),
        .R(SR));
  FDRE \qchk_daddr_reg[19] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[19]),
        .Q(qchk_daddr_order__0[27]),
        .R(SR));
  FDRE \qchk_daddr_reg[1] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(qchk_daddr_order__0[41]),
        .R(SR));
  FDRE \qchk_daddr_reg[20] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[20]),
        .Q(qchk_daddr_order__0[28]),
        .R(SR));
  FDRE \qchk_daddr_reg[21] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[21]),
        .Q(qchk_daddr_order__0[29]),
        .R(SR));
  FDRE \qchk_daddr_reg[22] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[22]),
        .Q(qchk_daddr_order__0[30]),
        .R(SR));
  FDRE \qchk_daddr_reg[23] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[23]),
        .Q(qchk_daddr_order__0[31]),
        .R(SR));
  FDRE \qchk_daddr_reg[24] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[24]),
        .Q(qchk_daddr_order[16]),
        .R(SR));
  FDRE \qchk_daddr_reg[25] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[25]),
        .Q(qchk_daddr_order[17]),
        .R(SR));
  FDRE \qchk_daddr_reg[26] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[26]),
        .Q(qchk_daddr_order[18]),
        .R(SR));
  FDRE \qchk_daddr_reg[27] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[27]),
        .Q(qchk_daddr_order[19]),
        .R(SR));
  FDRE \qchk_daddr_reg[28] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[28]),
        .Q(qchk_daddr_order[20]),
        .R(SR));
  FDRE \qchk_daddr_reg[29] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[29]),
        .Q(qchk_daddr_order[21]),
        .R(SR));
  FDRE \qchk_daddr_reg[2] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(qchk_daddr_order__0[42]),
        .R(SR));
  FDRE \qchk_daddr_reg[30] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[30]),
        .Q(qchk_daddr_order[22]),
        .R(SR));
  FDRE \qchk_daddr_reg[31] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[31]),
        .Q(qchk_daddr_order__0[23]),
        .R(SR));
  FDRE \qchk_daddr_reg[32] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[32]),
        .Q(qchk_daddr_order[8]),
        .R(SR));
  FDRE \qchk_daddr_reg[33] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[33]),
        .Q(qchk_daddr_order[9]),
        .R(SR));
  FDRE \qchk_daddr_reg[34] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[34]),
        .Q(qchk_daddr_order[10]),
        .R(SR));
  FDRE \qchk_daddr_reg[35] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[35]),
        .Q(qchk_daddr_order[11]),
        .R(SR));
  FDRE \qchk_daddr_reg[36] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[36]),
        .Q(qchk_daddr_order[12]),
        .R(SR));
  FDRE \qchk_daddr_reg[37] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[37]),
        .Q(qchk_daddr_order[13]),
        .R(SR));
  FDRE \qchk_daddr_reg[38] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[38]),
        .Q(qchk_daddr_order[14]),
        .R(SR));
  FDRE \qchk_daddr_reg[39] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[39]),
        .Q(qchk_daddr_order[15]),
        .R(SR));
  FDRE \qchk_daddr_reg[3] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(qchk_daddr_order__0[43]),
        .R(SR));
  FDRE \qchk_daddr_reg[40] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[40]),
        .Q(qchk_daddr_order[0]),
        .R(SR));
  FDRE \qchk_daddr_reg[41] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[41]),
        .Q(qchk_daddr_order[1]),
        .R(SR));
  FDRE \qchk_daddr_reg[42] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[42]),
        .Q(qchk_daddr_order[2]),
        .R(SR));
  FDRE \qchk_daddr_reg[43] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[43]),
        .Q(qchk_daddr_order[3]),
        .R(SR));
  FDRE \qchk_daddr_reg[44] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[44]),
        .Q(qchk_daddr_order[4]),
        .R(SR));
  FDRE \qchk_daddr_reg[45] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[45]),
        .Q(qchk_daddr_order[5]),
        .R(SR));
  FDRE \qchk_daddr_reg[46] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[46]),
        .Q(qchk_daddr_order[6]),
        .R(SR));
  FDRE \qchk_daddr_reg[47] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[47]),
        .Q(qchk_daddr_order[7]),
        .R(SR));
  FDRE \qchk_daddr_reg[4] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(qchk_daddr_order__0[44]),
        .R(SR));
  FDRE \qchk_daddr_reg[5] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(qchk_daddr_order__0[45]),
        .R(SR));
  FDRE \qchk_daddr_reg[6] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(qchk_daddr_order__0[46]),
        .R(SR));
  FDRE \qchk_daddr_reg[7] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(qchk_daddr_order__0[47]),
        .R(SR));
  FDRE \qchk_daddr_reg[8] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(qchk_daddr_order__0[32]),
        .R(SR));
  FDRE \qchk_daddr_reg[9] 
       (.C(lclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(qchk_daddr_order__0[33]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAEAAA)) 
    rx_err0_i_1
       (.I0(rx_err0_i_2_n_0),
        .I1(rx_err0_i_3_n_0),
        .I2(p_5_in51_in),
        .I3(p_1_in[1]),
        .I4(p_1_in[0]),
        .I5(rx_err0_i_4_n_0),
        .O(rx_err00));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    rx_err0_i_2
       (.I0(\bdata1_reg_n_0_[24] ),
        .I1(\bdata1_reg_n_0_[25] ),
        .I2(p_4_in50_in),
        .I3(eof0_i_5_n_0),
        .I4(rx_err0_i_5_n_0),
        .I5(eof0_i_3_n_0),
        .O(rx_err0_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    rx_err0_i_3
       (.I0(p_1_in[2]),
        .I1(p_1_in[3]),
        .I2(p_1_in[4]),
        .I3(p_1_in[5]),
        .I4(p_1_in[7]),
        .I5(p_1_in[6]),
        .O(rx_err0_i_3_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    rx_err0_i_4
       (.I0(eof0_i_6_n_0),
        .I1(p_6_in53_in),
        .I2(p_0_in[1]),
        .I3(p_0_in[0]),
        .O(rx_err0_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT3 #(
    .INIT(8'h40)) 
    rx_err0_i_5
       (.I0(\bdata1_reg_n_0_[0] ),
        .I1(\bdata1_reg_n_0_[1] ),
        .I2(\brxc1_reg_n_0_[0] ),
        .O(rx_err0_i_5_n_0));
  FDRE rx_err0_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rx_err00),
        .Q(rx_err0),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAEAAA)) 
    rx_err1_i_1
       (.I0(rx_err1_i_2_n_0),
        .I1(rx_err1_i_3_n_0),
        .I2(p_5_in43_in),
        .I3(\bdata1_reg_n_0_[49] ),
        .I4(\bdata1_reg_n_0_[48] ),
        .I5(rx_err1_i_4_n_0),
        .O(rx_err10));
  LUT6 #(
    .INIT(64'hFFFF400040004000)) 
    rx_err1_i_2
       (.I0(\bdata1_reg_n_0_[56] ),
        .I1(\bdata1_reg_n_0_[57] ),
        .I2(p_4_in42_in),
        .I3(eof1_i_4_n_0),
        .I4(rx_err1_i_5_n_0),
        .I5(eof1_i_3_n_0),
        .O(rx_err1_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    rx_err1_i_3
       (.I0(\bdata1_reg_n_0_[50] ),
        .I1(\bdata1_reg_n_0_[51] ),
        .I2(\bdata1_reg_n_0_[52] ),
        .I3(\bdata1_reg_n_0_[53] ),
        .I4(\bdata1_reg_n_0_[55] ),
        .I5(\bdata1_reg_n_0_[54] ),
        .O(rx_err1_i_3_n_0));
  LUT4 #(
    .INIT(16'h0080)) 
    rx_err1_i_4
       (.I0(rx_err1_i_6_n_0),
        .I1(p_6_in45_in),
        .I2(\bdata1_reg_n_0_[41] ),
        .I3(\bdata1_reg_n_0_[40] ),
        .O(rx_err1_i_4_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    rx_err1_i_5
       (.I0(\bdata1_reg_n_0_[32] ),
        .I1(\bdata1_reg_n_0_[33] ),
        .I2(p_7_in48_in),
        .O(rx_err1_i_5_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    rx_err1_i_6
       (.I0(\bdata1_reg_n_0_[42] ),
        .I1(\bdata1_reg_n_0_[43] ),
        .I2(\bdata1_reg_n_0_[44] ),
        .I3(\bdata1_reg_n_0_[45] ),
        .I4(\bdata1_reg_n_0_[47] ),
        .I5(\bdata1_reg_n_0_[46] ),
        .O(rx_err1_i_6_n_0));
  FDRE rx_err1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(rx_err10),
        .Q(rx_err1),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT4 #(
    .INIT(16'h8880)) 
    sof_n_eof_dly1_i_1
       (.I0(pre_pkt_start_reg_0),
        .I1(has_sof),
        .I2(eof1),
        .I3(eof0),
        .O(sof_n_eof));
  FDRE sof_n_eof_dly1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof_n_eof),
        .Q(sof_n_eof_dly1),
        .R(SR));
  FDRE sof_reg
       (.C(lclk),
        .CE(1'b1),
        .D(pre_sof),
        .Q(pre_pkt_start_reg_0),
        .R(SR));
  FDRE type_reject_reg
       (.C(lclk),
        .CE(1'b1),
        .D(sof_reg_0),
        .Q(wr_nbyte_reg_0),
        .R(SR));
  LUT4 #(
    .INIT(16'h0004)) 
    wen1_i_1
       (.I0(wen1_i_2_n_0),
        .I1(has_pre_sof),
        .I2(err),
        .I3(eof_qwd),
        .O(wen10));
  LUT5 #(
    .INIT(32'h80000000)) 
    wen1_i_2
       (.I0(p_7_in48_in),
        .I1(p_6_in45_in),
        .I2(p_5_in43_in),
        .I3(p_4_in42_in),
        .I4(wen1_i_4_n_0),
        .O(wen1_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    wen1_i_3
       (.I0(eof0_i_4_n_0),
        .I1(eof_qwd486_out),
        .I2(eof_qwd690_out),
        .I3(eof1_i_2_n_0),
        .I4(eof_qwd385_out),
        .O(eof_qwd));
  LUT4 #(
    .INIT(16'h8000)) 
    wen1_i_4
       (.I0(p_6_in53_in),
        .I1(\brxc1_reg_n_0_[0] ),
        .I2(p_4_in50_in),
        .I3(p_5_in51_in),
        .O(wen1_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    wen1_i_5
       (.I0(eof0_i_3_n_0),
        .I1(\brxc1_reg_n_0_[0] ),
        .I2(\bdata1_reg_n_0_[0] ),
        .I3(\bdata1_reg_n_0_[1] ),
        .O(eof_qwd690_out));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    wen1_i_6
       (.I0(eof1_i_3_n_0),
        .I1(p_7_in48_in),
        .I2(\bdata1_reg_n_0_[32] ),
        .I3(\bdata1_reg_n_0_[33] ),
        .O(eof_qwd385_out));
  FDRE wen1_reg
       (.C(lclk),
        .CE(1'b1),
        .D(wen10),
        .Q(wen1),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    wr_nbyte_i_1
       (.I0(wr_en),
        .I1(my_mac_hit),
        .I2(wr_nbyte_reg_0),
        .I3(wr_nbyte_i_2_n_0),
        .O(wr_nbyte0));
  LUT6 #(
    .INIT(64'hFF08080808080808)) 
    wr_nbyte_i_2
       (.I0(has_sof_dly1),
        .I1(eof_dly),
        .I2(sof_n_eof_dly1),
        .I3(eof),
        .I4(has_sof),
        .I5(pre_pkt_start_reg_0),
        .O(wr_nbyte_i_2_n_0));
  FDRE wr_nbyte_reg
       (.C(lclk),
        .CE(1'b1),
        .D(wr_nbyte0),
        .Q(wr_en),
        .R(SR));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_txfifo_1024x64
   (dout,
    empty,
    tx_rd_state26_out,
    \bytes_remain_reg[15] ,
    \bytes_remain_reg[15]_0 ,
    \bytes_remain_reg[9] ,
    \bytes_remain_reg[13] ,
    \bytes_remain_reg[12] ,
    \bytes_remain_reg[11] ,
    \bytes_remain_reg[10] ,
    \bytes_remain_reg[8] ,
    \bytes_remain_reg[7] ,
    \bytes_remain_reg[6] ,
    \bytes_remain_reg[5] ,
    D,
    lclk,
    SR,
    txfifo_din,
    tx_mac_wr,
    rd_en,
    ram_full_i_reg,
    ram_empty_i_reg,
    \bytes_remain_reg[15]_1 ,
    Q,
    \bytes_remain_reg[14] ,
    wsel_reg,
    fmac_speed);
  output [38:0]dout;
  output empty;
  output tx_rd_state26_out;
  output [0:0]\bytes_remain_reg[15] ;
  output \bytes_remain_reg[15]_0 ;
  output \bytes_remain_reg[9] ;
  output \bytes_remain_reg[13] ;
  output \bytes_remain_reg[12] ;
  output \bytes_remain_reg[11] ;
  output \bytes_remain_reg[10] ;
  output \bytes_remain_reg[8] ;
  output \bytes_remain_reg[7] ;
  output \bytes_remain_reg[6] ;
  output \bytes_remain_reg[5] ;
  output [32:0]D;
  input lclk;
  input [0:0]SR;
  input [63:0]txfifo_din;
  input tx_mac_wr;
  input rd_en;
  input ram_full_i_reg;
  input ram_empty_i_reg;
  input [0:0]\bytes_remain_reg[15]_1 ;
  input [0:0]Q;
  input \bytes_remain_reg[14] ;
  input wsel_reg;
  input [1:0]fmac_speed;

  wire [32:0]D;
  wire [0:0]Q;
  wire [0:0]SR;
  wire \bytes_remain_reg[10] ;
  wire \bytes_remain_reg[11] ;
  wire \bytes_remain_reg[12] ;
  wire \bytes_remain_reg[13] ;
  wire \bytes_remain_reg[14] ;
  wire [0:0]\bytes_remain_reg[15] ;
  wire \bytes_remain_reg[15]_0 ;
  wire [0:0]\bytes_remain_reg[15]_1 ;
  wire \bytes_remain_reg[5] ;
  wire \bytes_remain_reg[6] ;
  wire \bytes_remain_reg[7] ;
  wire \bytes_remain_reg[8] ;
  wire \bytes_remain_reg[9] ;
  wire [38:0]dout;
  wire empty;
  wire [1:0]fmac_speed;
  wire lclk;
  wire ram_empty_i_reg;
  wire ram_full_i_reg;
  wire rd_en;
  wire [9:0]tx_mac_usedw;
  wire tx_mac_wr;
  wire tx_rd_state26_out;
  wire \tx_rd_state[1]_i_3_n_0 ;
  wire \tx_rd_state[1]_i_4_n_0 ;
  wire [63:0]txfifo_din;
  wire [63:16]txfifo_dout;
  wire txfifo_ip_1024x64_n_64;
  wire wsel_reg;
  wire NLW_txfifo_ip_1024x64_rd_rst_busy_UNCONNECTED;
  wire NLW_txfifo_ip_1024x64_wr_rst_busy_UNCONNECTED;

  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \bytes_remain[10]_i_3 
       (.I0(\bytes_remain_reg[9] ),
        .I1(dout[9]),
        .O(\bytes_remain_reg[10] ));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \bytes_remain[11]_i_3 
       (.I0(dout[9]),
        .I1(\bytes_remain_reg[9] ),
        .I2(dout[10]),
        .O(\bytes_remain_reg[11] ));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bytes_remain[12]_i_3 
       (.I0(dout[10]),
        .I1(\bytes_remain_reg[9] ),
        .I2(dout[9]),
        .I3(dout[11]),
        .O(\bytes_remain_reg[12] ));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bytes_remain[13]_i_3 
       (.I0(dout[11]),
        .I1(dout[9]),
        .I2(\bytes_remain_reg[9] ),
        .I3(dout[10]),
        .I4(dout[12]),
        .O(\bytes_remain_reg[13] ));
  LUT6 #(
    .INIT(64'hA9A9FF00A9A900FF)) 
    \bytes_remain[15]_i_2 
       (.I0(dout[15]),
        .I1(dout[14]),
        .I2(\bytes_remain_reg[15]_0 ),
        .I3(\bytes_remain_reg[15]_1 ),
        .I4(Q),
        .I5(\bytes_remain_reg[14] ),
        .O(\bytes_remain_reg[15] ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bytes_remain[15]_i_3 
       (.I0(dout[12]),
        .I1(dout[10]),
        .I2(\bytes_remain_reg[9] ),
        .I3(dout[9]),
        .I4(dout[11]),
        .I5(dout[13]),
        .O(\bytes_remain_reg[15]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \bytes_remain[5]_i_2 
       (.I0(dout[3]),
        .I1(dout[4]),
        .O(\bytes_remain_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \bytes_remain[6]_i_3 
       (.I0(dout[4]),
        .I1(dout[3]),
        .I2(dout[5]),
        .O(\bytes_remain_reg[6] ));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \bytes_remain[7]_i_3 
       (.I0(dout[5]),
        .I1(dout[3]),
        .I2(dout[4]),
        .I3(dout[6]),
        .O(\bytes_remain_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \bytes_remain[8]_i_3 
       (.I0(dout[6]),
        .I1(dout[4]),
        .I2(dout[3]),
        .I3(dout[5]),
        .I4(dout[7]),
        .O(\bytes_remain_reg[8] ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \bytes_remain[9]_i_2 
       (.I0(dout[7]),
        .I1(dout[5]),
        .I2(dout[3]),
        .I3(dout[4]),
        .I4(dout[6]),
        .I5(dout[8]),
        .O(\bytes_remain_reg[9] ));
  LUT6 #(
    .INIT(64'h1000111111111111)) 
    \tx_rd_state[1]_i_2 
       (.I0(ram_full_i_reg),
        .I1(ram_empty_i_reg),
        .I2(\tx_rd_state[1]_i_3_n_0 ),
        .I3(\tx_rd_state[1]_i_4_n_0 ),
        .I4(tx_mac_usedw[8]),
        .I5(tx_mac_usedw[9]),
        .O(tx_rd_state26_out));
  LUT4 #(
    .INIT(16'h0001)) 
    \tx_rd_state[1]_i_3 
       (.I0(tx_mac_usedw[7]),
        .I1(tx_mac_usedw[6]),
        .I2(tx_mac_usedw[5]),
        .I3(tx_mac_usedw[4]),
        .O(\tx_rd_state[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \tx_rd_state[1]_i_4 
       (.I0(tx_mac_usedw[1]),
        .I1(tx_mac_usedw[0]),
        .I2(tx_mac_usedw[3]),
        .I3(tx_mac_usedw[2]),
        .O(\tx_rd_state[1]_i_4_n_0 ));
  (* CHECK_LICENSE_TYPE = "txfifo_ip_1024x64,fifo_generator_v13_2_2,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_txfifo_ip_1024x64 txfifo_ip_1024x64
       (.clk(lclk),
        .data_count(tx_mac_usedw),
        .din(txfifo_din),
        .dout({txfifo_dout[63:62],dout[38],txfifo_dout[60],dout[37],txfifo_dout[58],dout[36],txfifo_dout[56],dout[35],txfifo_dout[54],dout[34],txfifo_dout[52],dout[33],txfifo_dout[50],dout[32],txfifo_dout[48],dout[31],txfifo_dout[46],dout[30],txfifo_dout[44],dout[29],txfifo_dout[42],dout[28],txfifo_dout[40],dout[27],txfifo_dout[38],dout[26],txfifo_dout[36],dout[25],txfifo_dout[34],dout[24],txfifo_dout[32],dout[23],txfifo_dout[30],dout[22],txfifo_dout[28],dout[21],txfifo_dout[26],dout[20],txfifo_dout[24],dout[19],txfifo_dout[22],dout[18],txfifo_dout[20],dout[17],txfifo_dout[18],dout[16],txfifo_dout[16],dout[15:0]}),
        .empty(empty),
        .full(txfifo_ip_1024x64_n_64),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_txfifo_ip_1024x64_rd_rst_busy_UNCONNECTED),
        .srst(SR),
        .wr_en(tx_mac_wr),
        .wr_rst_busy(NLW_txfifo_ip_1024x64_wr_rst_busy_UNCONNECTED));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[0]_i_1 
       (.I0(dout[0]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[10]_i_1 
       (.I0(dout[10]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[12]_i_1 
       (.I0(dout[12]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[14]_i_1 
       (.I0(dout[14]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[16]_i_1 
       (.I0(txfifo_dout[16]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[18]_i_1 
       (.I0(txfifo_dout[18]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[9]));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[20]_i_1 
       (.I0(txfifo_dout[20]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[22]_i_1 
       (.I0(txfifo_dout[22]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[24]_i_1 
       (.I0(txfifo_dout[24]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[12]));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[26]_i_1 
       (.I0(txfifo_dout[26]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[13]));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[28]_i_1 
       (.I0(txfifo_dout[28]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[2]_i_1 
       (.I0(dout[2]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[30]_i_1 
       (.I0(txfifo_dout[30]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[32]_i_1 
       (.I0(txfifo_dout[32]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[16]));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[34]_i_1 
       (.I0(txfifo_dout[34]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[17]));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[36]_i_1 
       (.I0(txfifo_dout[36]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[18]));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[38]_i_1 
       (.I0(txfifo_dout[38]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[19]));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[40]_i_1 
       (.I0(txfifo_dout[40]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[20]));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[42]_i_1 
       (.I0(txfifo_dout[42]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[21]));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[44]_i_1 
       (.I0(txfifo_dout[44]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[22]));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[46]_i_1 
       (.I0(txfifo_dout[46]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[23]));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[48]_i_1 
       (.I0(txfifo_dout[48]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[24]));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[4]_i_1 
       (.I0(dout[4]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[50]_i_1 
       (.I0(txfifo_dout[50]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[25]));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[52]_i_1 
       (.I0(txfifo_dout[52]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[26]));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[54]_i_1 
       (.I0(txfifo_dout[54]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[27]));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[56]_i_1 
       (.I0(txfifo_dout[56]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[28]));
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[58]_i_1 
       (.I0(txfifo_dout[58]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[29]));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[60]_i_1 
       (.I0(txfifo_dout[60]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[30]));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[62]_i_1 
       (.I0(txfifo_dout[62]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[31]));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[63]_i_3 
       (.I0(txfifo_dout[63]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[32]));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[6]_i_1 
       (.I0(dout[6]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    \wdata[8]_i_1 
       (.I0(dout[8]),
        .I1(wsel_reg),
        .I2(fmac_speed[1]),
        .I3(fmac_speed[0]),
        .O(D[4]));
endmodule

(* CHECK_LICENSE_TYPE = "txfifo_ip_1024x64,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_txfifo_ip_1024x64
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    data_count,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [63:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [63:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [9:0]data_count;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [9:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "64" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "64" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized5 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* REG_OUTPUT = "1" *) 
(* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) (* VERSION = "0" *) 
(* WIDTH = "8" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [7:0]src_in_bin;
  input dest_clk;
  output [7:0]dest_out_bin;

  wire [7:0]async_path;
  wire [6:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[1] ;
  wire [7:0]dest_out_bin;
  wire [6:0]gray_enc;
  wire src_clk;
  wire [7:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(binval[2]),
        .I2(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(binval[2]),
        .O(binval[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [6]),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [5]),
        .I5(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [7]),
        .I3(\dest_graysync_ff[1] [6]),
        .I4(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [6]),
        .I2(\dest_graysync_ff[1] [7]),
        .I3(\dest_graysync_ff[1] [5]),
        .O(binval[4]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[5]_i_1 
       (.I0(\dest_graysync_ff[1] [5]),
        .I1(\dest_graysync_ff[1] [7]),
        .I2(\dest_graysync_ff[1] [6]),
        .O(binval[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[6]_i_1 
       (.I0(\dest_graysync_ff[1] [6]),
        .I1(\dest_graysync_ff[1] [7]),
        .O(binval[6]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[6]),
        .Q(dest_out_bin[6]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(dest_out_bin[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[7]),
        .Q(async_path[7]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "8" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [7:0]src_in_bin;
  input dest_clk;
  output [7:0]dest_out_bin;

  wire [7:0]async_path;
  wire [6:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[1] ;
  wire [7:0]dest_out_bin;
  wire [6:0]gray_enc;
  wire src_clk;
  wire [7:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(binval[2]),
        .I2(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(binval[2]),
        .O(binval[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [6]),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [5]),
        .I5(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [7]),
        .I3(\dest_graysync_ff[1] [6]),
        .I4(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [6]),
        .I2(\dest_graysync_ff[1] [7]),
        .I3(\dest_graysync_ff[1] [5]),
        .O(binval[4]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[5]_i_1 
       (.I0(\dest_graysync_ff[1] [5]),
        .I1(\dest_graysync_ff[1] [7]),
        .I2(\dest_graysync_ff[1] [6]),
        .O(binval[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[6]_i_1 
       (.I0(\dest_graysync_ff[1] [6]),
        .I1(\dest_graysync_ff[1] [7]),
        .O(binval[6]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[6]),
        .Q(dest_out_bin[6]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(dest_out_bin[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[7]),
        .Q(async_path[7]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "4" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [3:0]src_in_bin;
  input dest_clk;
  output [3:0]dest_out_bin;

  wire [3:0]async_path;
  wire [2:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[1] ;
  wire [3:0]dest_out_bin;
  wire [2:0]gray_enc;
  wire src_clk;
  wire [3:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .I3(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[3]),
        .Q(async_path[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "4" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0__2
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [3:0]src_in_bin;
  input dest_clk;
  output [3:0]dest_out_bin;

  wire [3:0]async_path;
  wire [2:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[1] ;
  wire [3:0]dest_out_bin;
  wire [2:0]gray_enc;
  wire src_clk;
  wire [3:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .I3(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[3]),
        .Q(async_path[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "4" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0__3
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [3:0]src_in_bin;
  input dest_clk;
  output [3:0]dest_out_bin;

  wire [3:0]async_path;
  wire [2:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[1] ;
  wire [3:0]dest_out_bin;
  wire [2:0]gray_enc;
  wire src_clk;
  wire [3:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .I3(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[3]),
        .Q(async_path[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "4" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0__4
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [3:0]src_in_bin;
  input dest_clk;
  output [3:0]dest_out_bin;

  wire [3:0]async_path;
  wire [2:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[1] ;
  wire [3:0]dest_out_bin;
  wire [2:0]gray_enc;
  wire src_clk;
  wire [3:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .I3(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[3]),
        .Q(async_path[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "6" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [5:0]src_in_bin;
  input dest_clk;
  output [5:0]dest_out_bin;

  wire [5:0]async_path;
  wire [4:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [5:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [5:0]\dest_graysync_ff[1] ;
  wire [5:0]dest_out_bin;
  wire [4:0]gray_enc;
  wire src_clk;
  wire [5:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [5]),
        .I4(\dest_graysync_ff[1] [3]),
        .I5(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [4]),
        .I4(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [5]),
        .O(binval[4]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[5]),
        .Q(async_path[5]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "6" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized1__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [5:0]src_in_bin;
  input dest_clk;
  output [5:0]dest_out_bin;

  wire [5:0]async_path;
  wire [4:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [5:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [5:0]\dest_graysync_ff[1] ;
  wire [5:0]dest_out_bin;
  wire [4:0]gray_enc;
  wire src_clk;
  wire [5:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [5]),
        .I4(\dest_graysync_ff[1] [3]),
        .I5(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [4]),
        .I4(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [5]),
        .O(binval[4]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[5]),
        .Q(async_path[5]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* SIM_ASSERT_CHK = "0" *) 
(* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__10
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__4
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__5
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__6
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__7
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__8
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__9
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* SIM_ASSERT_CHK = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__10
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__4
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__5
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__6
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__7
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__8
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__9
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output ENA_dly_D;
  output [63:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [7:0]Q;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized0
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized0 \ramloop[0].ram.r 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized0_79
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized0_80 \ramloop[0].ram.r 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized1
   (dout,
    POR_B,
    wr_clk,
    rd_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    SS,
    out,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  output POR_B;
  input wr_clk;
  input rd_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input [0:0]SS;
  input out;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire [0:0]E;
  wire POR_B;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized1 \ramloop[0].ram.r 
       (.E(E),
        .POR_B(POR_B),
        .Q(Q),
        .SS(SS),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (\gic0.gc0.count_d2_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized2
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [63:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized2 \ramloop[0].ram.r 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din[35:0]),
        .dout(dout[35:0]),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized3 \ramloop[1].ram.r 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din[63:36]),
        .dout(dout[63:36]),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized3
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [63:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized4 \ramloop[0].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[3:0]),
        .dout(dout[3:0]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized5 \ramloop[1].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[12:4]),
        .dout(dout[12:4]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized6 \ramloop[2].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[21:13]),
        .dout(dout[21:13]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized7 \ramloop[3].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[30:22]),
        .dout(dout[30:22]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized8 \ramloop[4].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[39:31]),
        .dout(dout[39:31]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized9 \ramloop[5].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[48:40]),
        .dout(dout[48:40]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized10 \ramloop[6].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[57:49]),
        .dout(dout[57:49]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized11 \ramloop[7].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din[63:58]),
        .dout(dout[63:58]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized4
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized12 \ramloop[0].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized5
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized13 \ramloop[0].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized6
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized14 \ramloop[0].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized6_62
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized14_63 \ramloop[0].ram.r 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized7
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized15 \ramloop[0].ram.r 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized8
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized16 \ramloop[0].ram.r 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized9
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized17 \ramloop[0].ram.r 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(x_bcnt_we_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output ENA_dly_D;
  output [63:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_B;
  wire [7:0]Q;
  wire [4:0]RSTA_SHFT_REG;
  wire [4:0]RSTB_SHFT_REG;
  wire \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire p_1_out;
  wire p_3_out;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ),
        .Q(ENA_dly_D),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_256x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_256x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(p_3_out),
        .Q(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_i_1 
       (.I0(RSTA_SHFT_REG[0]),
        .I1(RSTA_SHFT_REG[4]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_rstram_b),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(RSTB_SHFT_REG[0]),
        .I1(RSTB_SHFT_REG[4]),
        .O(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_256x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_256x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTB_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_256x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_256x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(rd_clk),
        .D(RSTB_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTB_SHFT_REG[4]),
        .R(1'b0));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.E(E),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized0
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_B;
  wire [4:0]RSTA_SHFT_REG;
  wire [4:0]RSTB_SHFT_REG;
  wire \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire p_1_out;
  wire p_3_out;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ),
        .Q(ENA_dly_D),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(p_3_out),
        .Q(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_i_1 
       (.I0(RSTA_SHFT_REG[0]),
        .I1(RSTA_SHFT_REG[4]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_rstram_b),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(RSTB_SHFT_REG[0]),
        .I1(RSTB_SHFT_REG[4]),
        .O(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTB_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_TX/TX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(rd_clk),
        .D(RSTB_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTB_SHFT_REG[4]),
        .R(1'b0));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized0 \prim_noinit.ram 
       (.E(E),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized0_80
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_B;
  wire [4:0]RSTA_SHFT_REG;
  wire [4:0]RSTB_SHFT_REG;
  wire \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire p_1_out;
  wire p_3_out;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ),
        .Q(ENA_dly_D),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(p_3_out),
        .Q(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_i_1 
       (.I0(RSTA_SHFT_REG[0]),
        .I1(RSTA_SHFT_REG[4]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_rstram_b),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(RSTB_SHFT_REG[0]),
        .I1(RSTB_SHFT_REG[4]),
        .O(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTB_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_BCNT_16x16 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(rd_clk),
        .D(RSTB_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTB_SHFT_REG[4]),
        .R(1'b0));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized0_81 \prim_noinit.ram 
       (.E(E),
        .ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized1
   (dout,
    POR_B,
    wr_clk,
    rd_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    SS,
    out,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  output POR_B;
  input wr_clk;
  input rd_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input [0:0]SS;
  input out;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_B;
  wire [5:0]Q;
  wire [4:0]RSTA_SHFT_REG;
  wire [4:0]RSTB_SHFT_REG;
  wire \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire p_1_out;
  wire p_3_out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ),
        .Q(ENA_dly_D),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_32x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_32x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(p_3_out),
        .Q(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_i_1 
       (.I0(RSTA_SHFT_REG[0]),
        .I1(RSTA_SHFT_REG[4]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(POR_B),
        .Q(ENB_dly),
        .S(SS));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(RSTB_SHFT_REG[0]),
        .I1(RSTB_SHFT_REG[4]),
        .O(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_32x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_32x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(wr_clk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTB_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_32x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "\inst/DFIFO_BRIDGE_RX/RX_DFIFO_32x64 /U0/\inst_fifo_gen/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(rd_clk),
        .D(RSTB_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTB_SHFT_REG[4]),
        .R(1'b0));
  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized1 \prim_noinit.ram 
       (.E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .SS(SS),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (\gic0.gc0.count_d2_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized10
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized10 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized11
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [5:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [5:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [5:0]din;
  wire [5:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized11 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized12
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized12 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized13
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized13 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized14
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized14 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized14_63
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized14_64 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized15
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized15 \prim_noinit.ram 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized16
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized16 \prim_noinit.ram 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized17
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized17 \prim_noinit.ram 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(x_bcnt_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized2
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [35:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [35:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [35:0]din;
  wire [35:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized2 \prim_noinit.ram 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized3
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [27:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [27:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [27:0]din;
  wire [27:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized3 \prim_noinit.ram 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized4
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [3:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [3:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [3:0]din;
  wire [3:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized4 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized5
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized5 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized6
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized6 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized7
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized7 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized8
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized8 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_width__parameterized9
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized9 \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper
   (dout,
    rd_clk,
    wr_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output [63:0]dout;
  input rd_clk;
  input wr_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_140 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_141 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_142 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_143 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_144 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_145 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_146 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_147 ;
  wire [0:0]E;
  wire ENA_I;
  wire ENB_I;
  wire [7:0]Q;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPB_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("INDEPENDENT"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram 
       (.ADDRARDADDR({1'b0,\gc0.count_d1_reg[7] ,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ),
        .DINADIN(din[31:0]),
        .DINBDIN(din[63:32]),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(dout[31:0]),
        .DOUTBDOUT(dout[63:32]),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_140 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_141 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_142 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_143 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_144 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_145 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_146 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(ENB_I),
        .ENBWREN(ENA_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_b),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({E,E,E,E,E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized0
   (dout,
    rd_clk,
    wr_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output [15:0]dout;
  input rd_clk;
  input wr_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [0:0]E;
  wire ENA_I;
  wire ENB_I;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("INDEPENDENT"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\gc0.count_d1_reg[3] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[3] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,din[7:4],1'b0,1'b0,1'b0,1'b0,din[3:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,din[15:12],1'b0,1'b0,1'b0,1'b0,din[11:8]}),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ,dout[7:4],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ,dout[3:0]}),
        .DOUTBDOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ,dout[15:12],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ,dout[11:8]}),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(ENB_I),
        .ENBWREN(ENA_I),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_b),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized0_81
   (dout,
    rd_clk,
    wr_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output [15:0]dout;
  input rd_clk;
  input wr_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [0:0]E;
  wire ENA_I;
  wire ENB_I;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("INDEPENDENT"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\gc0.count_d1_reg[3] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[3] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,din[7:4],1'b0,1'b0,1'b0,1'b0,din[3:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,din[15:12],1'b0,1'b0,1'b0,1'b0,din[11:8]}),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ,dout[7:4],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ,dout[3:0]}),
        .DOUTBDOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ,dout[15:12],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ,dout[11:8]}),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(ENB_I),
        .ENBWREN(ENA_I),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_b),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized1
   (dout,
    rd_clk,
    wr_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    ENA_dly_D,
    out,
    wr_en,
    ENB_dly_D,
    SS,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input ENA_dly_D;
  input out;
  input wr_en;
  input ENB_dly_D;
  input [0:0]SS;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("INDEPENDENT"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[5] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DINADIN(din[15:0]),
        .DINBDIN(din[31:16]),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT(dout[15:0]),
        .DOUTBDOUT(dout[31:16]),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(ENB_I),
        .ENBWREN(ENA_I),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_b),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
  LUT4 #(
    .INIT(16'hEEFE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(ENB_dly_D),
        .I1(SS),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg),
        .O(ENB_I));
  LUT3 #(
    .INIT(8'hBA)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(ENA_dly_D),
        .I1(out),
        .I2(wr_en),
        .O(ENA_I));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized10
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized11
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [5:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [5:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_124 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_125 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 ;
  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [5:0]din;
  wire [5:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_124 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_125 ,dout}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized12
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 ;
  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized13
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_140 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_141 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_142 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_143 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_144 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_145 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_146 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_147 ;
  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPB_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram 
       (.ADDRARDADDR({\gc0.count_d1_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({Q,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ),
        .DINADIN(din[31:0]),
        .DINBDIN(din[63:32]),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(dout[31:0]),
        .DOUTBDOUT(dout[63:32]),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_140 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_141 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_142 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_143 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_144 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_145 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_146 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SS),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({E,E,E,E,E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized14
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\gc0.count_d1_reg[3] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,1'b0,1'b0,1'b0,1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DINADIN(din[15:0]),
        .DINBDIN(din[31:16]),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT(dout[15:0]),
        .DOUTBDOUT(dout[31:16]),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SS),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized14_64
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\gc0.count_d1_reg[3] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,1'b0,1'b0,1'b0,1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DINADIN(din[15:0]),
        .DINBDIN(din[31:16]),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT(dout[15:0]),
        .DOUTBDOUT(dout[31:16]),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SS),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized15
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_140 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_141 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_142 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_143 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_144 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_145 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_146 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_147 ;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPB_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram 
       (.ADDRARDADDR({1'b0,\gc0.count_d1_reg[7] ,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ),
        .DINADIN(din[31:0]),
        .DINBDIN(din[63:32]),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(dout[31:0]),
        .DOUTBDOUT(dout[63:32]),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_140 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_141 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_142 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_143 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_144 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_145 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_146 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(x_we_reg),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SS),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({x_we_reg,x_we_reg,x_we_reg,x_we_reg,x_we_reg,x_we_reg,x_we_reg,x_we_reg}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized16
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_36 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_37 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_44 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_45 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_52 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_53 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_60 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_61 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,\gc0.count_d1_reg[7] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[3:2],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[1:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[5:4]}),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_36 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_37 ,dout[3:2],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_44 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_45 ,dout[1:0]}),
        .DOUTBDOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_52 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_53 ,dout[7:6],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_60 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_61 ,dout[5:4]}),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(x_we_reg),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SS),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({x_we_reg,x_we_reg,x_we_reg,x_we_reg}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized17
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 ;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,\gc0.count_d1_reg[7] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,din[7:4],1'b0,1'b0,1'b0,1'b0,din[3:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,din[15:12],1'b0,1'b0,1'b0,1'b0,din[11:8]}),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ,dout[7:4],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_40 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_41 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_42 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_43 ,dout[3:0]}),
        .DOUTBDOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_48 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_49 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_50 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_51 ,dout[15:12],\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_56 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_57 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_58 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_59 ,dout[11:8]}),
        .DOUTPADOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_68 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_69 }),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_70 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_71 }),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(x_bcnt_we_reg),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SS),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({x_bcnt_we_reg,x_bcnt_we_reg,x_bcnt_we_reg,x_bcnt_we_reg}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized2
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [35:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [35:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [35:0]din;
  wire [35:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({\gcc0.gc0.count_d1_reg[9] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[9] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({din[34:27],din[25:18],din[16:9],din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({din[35],din[26],din[17],din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({dout[34:27],dout[25:18],dout[16:9],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({dout[35],dout[26],dout[17],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({E,E,E,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized3
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [27:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [27:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_100 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_108 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_116 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_124 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_144 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_145 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_146 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 ;
  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [27:0]din;
  wire [27:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({\gcc0.gc0.count_d1_reg[9] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[9] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,din[27:21],1'b0,din[20:14],1'b0,din[13:7],1'b0,din[6:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_100 ,dout[27:21],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_108 ,dout[20:14],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_116 ,dout[13:7],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_124 ,dout[6:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_144 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_145 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_146 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({E,E,E,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized4
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [3:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [3:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [3:0]din;
  wire [3:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTPB_UNCONNECTED ;
  wire [15:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTADOUT_UNCONNECTED ;
  wire [15:4]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTBDOUT_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [1:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTPBDOUTP_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(4),
    .READ_WIDTH_B(4),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(4),
    .WRITE_WIDTH_B(4)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTADOUT_UNCONNECTED [15:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTBDOUT_UNCONNECTED [15:4],dout}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTPADOUTP_UNCONNECTED [1:0]),
        .DOUTPBDOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM18.ram_DOUTPBDOUTP_UNCONNECTED [1:0]),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized5
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized6
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized7
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized8
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_prim_wrapper__parameterized9
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(E),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(SS),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output ENA_dly_D;
  output [63:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [7:0]Q;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr \valid.cstr 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized0
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized0 \valid.cstr 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized0_78
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized0_79 \valid.cstr 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized1
   (dout,
    POR_B,
    wr_clk,
    rd_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    SS,
    out,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  output POR_B;
  input wr_clk;
  input rd_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input [0:0]SS;
  input out;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire [0:0]E;
  wire POR_B;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized1 \valid.cstr 
       (.E(E),
        .POR_B(POR_B),
        .Q(Q),
        .SS(SS),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (\gic0.gc0.count_d2_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized2
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [63:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized2 \valid.cstr 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized3
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [63:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized3 \valid.cstr 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized4
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized4 \valid.cstr 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized5
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized5 \valid.cstr 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized6
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized6 \valid.cstr 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized6_61
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized6_62 \valid.cstr 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized7
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized7 \valid.cstr 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized8
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized8 \valid.cstr 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized9
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_generic_cstr__parameterized9 \valid.cstr 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(x_bcnt_we_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output ENA_dly_D;
  output [63:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [7:0]Q;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth inst_blk_mem_gen
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized1
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized0 inst_blk_mem_gen
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized11
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized5 inst_blk_mem_gen
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized13
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized6 inst_blk_mem_gen
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized13_59
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized6_60 inst_blk_mem_gen
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized15
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized7 inst_blk_mem_gen
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized17
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized8 inst_blk_mem_gen
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized19
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized9 inst_blk_mem_gen
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(x_bcnt_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized1_76
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized0_77 inst_blk_mem_gen
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized3
   (dout,
    POR_B,
    wr_clk,
    rd_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    SS,
    out,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  output POR_B;
  input wr_clk;
  input rd_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input [0:0]SS;
  input out;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire [0:0]E;
  wire POR_B;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized1 inst_blk_mem_gen
       (.E(E),
        .POR_B(POR_B),
        .Q(Q),
        .SS(SS),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (\gic0.gc0.count_d2_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized5
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [63:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized2 inst_blk_mem_gen
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized7
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [63:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized3 inst_blk_mem_gen
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized9
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized4 inst_blk_mem_gen
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output ENA_dly_D;
  output [63:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [7:0]Q;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized0
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized0 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized0_77
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized0_78 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized1
   (dout,
    POR_B,
    wr_clk,
    rd_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    SS,
    out,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  output POR_B;
  input wr_clk;
  input rd_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input [0:0]SS;
  input out;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire [0:0]E;
  wire POR_B;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized1 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .POR_B(POR_B),
        .Q(Q),
        .SS(SS),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (\gic0.gc0.count_d2_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized2
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [63:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized2 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized3
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [63:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized3 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized4
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized4 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized5
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized5 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized6
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized6 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized6_60
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized6_61 \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized7
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized7 \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized8
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized8 \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1_synth__parameterized9
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_top__parameterized9 \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(x_bcnt_we_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic
   (wr_rst_reg_reg_0,
    tmp_ram_rd_en,
    SS,
    srst,
    clk,
    rd_en,
    out);
  output wr_rst_reg_reg_0;
  output tmp_ram_rd_en;
  output [0:0]SS;
  input srst;
  input clk;
  input rd_en;
  input out;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  wire out;
  wire rd_en;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  (* SOFT_HLUTNM = "soft_lutpair523" *) 
  LUT4 #(
    .INIT(16'hEEFE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(wr_rst_reg_reg_0),
        .I1(srst),
        .I2(rd_en),
        .I3(out),
        .O(tmp_ram_rd_en));
  (* SOFT_HLUTNM = "soft_lutpair523" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_13
   (wr_rst_reg_reg_0,
    tmp_ram_rd_en,
    SS,
    srst,
    clk,
    rd_en,
    out);
  output wr_rst_reg_reg_0;
  output tmp_ram_rd_en;
  output [0:0]SS;
  input srst;
  input clk;
  input rd_en;
  input out;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  wire out;
  wire rd_en;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  (* SOFT_HLUTNM = "soft_lutpair502" *) 
  LUT4 #(
    .INIT(16'hEEFE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(wr_rst_reg_reg_0),
        .I1(srst),
        .I2(rd_en),
        .I3(out),
        .O(tmp_ram_rd_en));
  (* SOFT_HLUTNM = "soft_lutpair502" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_21
   (wr_rst_reg_reg_0,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_26
   (wr_rst_reg_reg_0,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_3
   (wr_rst_reg_reg_0,
    tmp_ram_rd_en,
    SS,
    srst,
    clk,
    rd_en,
    out);
  output wr_rst_reg_reg_0;
  output tmp_ram_rd_en;
  output [0:0]SS;
  input srst;
  input clk;
  input rd_en;
  input out;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  wire out;
  wire rd_en;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  (* SOFT_HLUTNM = "soft_lutpair515" *) 
  LUT4 #(
    .INIT(16'hEEFE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_1 
       (.I0(wr_rst_reg_reg_0),
        .I1(srst),
        .I2(rd_en),
        .I3(out),
        .O(tmp_ram_rd_en));
  (* SOFT_HLUTNM = "soft_lutpair515" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_33
   (wr_rst_reg_reg_0,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_45
   (wr_rst_reg_reg_0,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_50
   (wr_rst_reg_reg_0,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_58
   (wr_rst_reg_reg_0,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(SS));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs
   (S,
    WR_PNTR_RD,
    ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_empty_fb_i_reg,
    Q,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    \gic0.gc0.count_reg[6] ,
    out,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d1_reg[7] ,
    SS,
    \dest_out_bin_ff_reg[1] ,
    \gc0.count_reg[7] ,
    rd_en,
    ram_empty_fb_i_reg_0,
    wr_clk,
    \gic0.gc0.count_d2_reg[7] ,
    rd_clk);
  output [6:0]S;
  output [7:0]WR_PNTR_RD;
  output ram_full_fb_i_reg;
  output [7:0]RD_PNTR_WR;
  output ram_empty_fb_i_reg;
  input [7:0]Q;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input [6:0]\gic0.gc0.count_reg[6] ;
  input out;
  input ram_full_fb_i_reg_0;
  input [5:0]\gic0.gc0.count_d1_reg[7] ;
  input [0:0]SS;
  input \dest_out_bin_ff_reg[1] ;
  input [3:0]\gc0.count_reg[7] ;
  input rd_en;
  input ram_empty_fb_i_reg_0;
  input wr_clk;
  input [7:0]\gic0.gc0.count_d2_reg[7] ;
  input rd_clk;

  wire [7:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire [6:0]S;
  wire [0:0]SS;
  wire [7:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[1] ;
  wire [3:0]\gc0.count_reg[7] ;
  wire [5:0]\gic0.gc0.count_d1_reg[7] ;
  wire [7:0]\gic0.gc0.count_d2_reg[7] ;
  wire [6:0]\gic0.gc0.count_reg[6] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_i_5_n_0;
  wire ram_empty_i_i_6_n_0;
  wire ram_empty_i_i_7_n_0;
  wire ram_empty_i_i_9_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_3_n_0;
  wire ram_full_i_i_5_n_0;
  wire ram_full_i_i_7_n_0;
  wire ram_full_i_i_8_n_0;
  wire ram_full_i_i_9_n_0;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;

  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2__0
       (.I0(WR_PNTR_RD[6]),
        .I1(Q[6]),
        .O(S[6]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3__0
       (.I0(WR_PNTR_RD[5]),
        .I1(Q[5]),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4__0
       (.I0(WR_PNTR_RD[4]),
        .I1(Q[4]),
        .O(S[4]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_5__0
       (.I0(WR_PNTR_RD[3]),
        .I1(Q[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_6__0
       (.I0(WR_PNTR_RD[2]),
        .I1(Q[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_7__0
       (.I0(WR_PNTR_RD[1]),
        .I1(Q[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_8__0
       (.I0(WR_PNTR_RD[0]),
        .I1(Q[0]),
        .O(S[0]));
  LUT5 #(
    .INIT(32'hFFF8F8F8)) 
    ram_empty_i_i_1
       (.I0(ram_empty_i_i_2_n_0),
        .I1(ram_empty_i_i_3_n_0),
        .I2(SS),
        .I3(\dest_out_bin_ff_reg[1] ),
        .I4(ram_empty_i_i_5_n_0),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h8200008200000000)) 
    ram_empty_i_i_2
       (.I0(ram_empty_i_i_6_n_0),
        .I1(WR_PNTR_RD[2]),
        .I2(Q[2]),
        .I3(WR_PNTR_RD[3]),
        .I4(Q[3]),
        .I5(ram_empty_i_i_7_n_0),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(WR_PNTR_RD[0]),
        .I1(Q[0]),
        .I2(WR_PNTR_RD[1]),
        .I3(Q[1]),
        .O(ram_empty_i_i_3_n_0));
  LUT5 #(
    .INIT(32'h00008200)) 
    ram_empty_i_i_5
       (.I0(ram_empty_i_i_9_n_0),
        .I1(WR_PNTR_RD[7]),
        .I2(\gc0.count_reg[7] [3]),
        .I3(rd_en),
        .I4(ram_empty_fb_i_reg_0),
        .O(ram_empty_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_6
       (.I0(WR_PNTR_RD[4]),
        .I1(Q[4]),
        .I2(WR_PNTR_RD[5]),
        .I3(Q[5]),
        .O(ram_empty_i_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_7
       (.I0(WR_PNTR_RD[6]),
        .I1(Q[6]),
        .I2(WR_PNTR_RD[7]),
        .I3(Q[7]),
        .O(ram_empty_i_i_7_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_9
       (.I0(WR_PNTR_RD[6]),
        .I1(\gc0.count_reg[7] [2]),
        .I2(WR_PNTR_RD[5]),
        .I3(\gc0.count_reg[7] [1]),
        .I4(\gc0.count_reg[7] [0]),
        .I5(WR_PNTR_RD[4]),
        .O(ram_empty_i_i_9_n_0));
  LUT4 #(
    .INIT(16'hFEEE)) 
    ram_full_i_i_1
       (.I0(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .I1(ram_full_i_i_2_n_0),
        .I2(ram_full_i_i_3_n_0),
        .I3(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .O(ram_full_fb_i_reg));
  LUT6 #(
    .INIT(64'h0900000000000000)) 
    ram_full_i_i_2
       (.I0(\gic0.gc0.count_reg[6] [3]),
        .I1(RD_PNTR_WR[3]),
        .I2(out),
        .I3(ram_full_i_i_5_n_0),
        .I4(ram_full_fb_i_reg_0),
        .I5(ram_full_i_i_7_n_0),
        .O(ram_full_i_i_2_n_0));
  LUT6 #(
    .INIT(64'h8200008200000000)) 
    ram_full_i_i_3
       (.I0(ram_full_i_i_8_n_0),
        .I1(RD_PNTR_WR[2]),
        .I2(\gic0.gc0.count_d1_reg[7] [0]),
        .I3(RD_PNTR_WR[3]),
        .I4(\gic0.gc0.count_d1_reg[7] [1]),
        .I5(ram_full_i_i_9_n_0),
        .O(ram_full_i_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_5
       (.I0(RD_PNTR_WR[2]),
        .I1(\gic0.gc0.count_reg[6] [2]),
        .I2(RD_PNTR_WR[0]),
        .I3(\gic0.gc0.count_reg[6] [0]),
        .I4(\gic0.gc0.count_reg[6] [1]),
        .I5(RD_PNTR_WR[1]),
        .O(ram_full_i_i_5_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_7
       (.I0(RD_PNTR_WR[6]),
        .I1(\gic0.gc0.count_reg[6] [6]),
        .I2(RD_PNTR_WR[5]),
        .I3(\gic0.gc0.count_reg[6] [5]),
        .I4(\gic0.gc0.count_reg[6] [4]),
        .I5(RD_PNTR_WR[4]),
        .O(ram_full_i_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_8
       (.I0(RD_PNTR_WR[4]),
        .I1(\gic0.gc0.count_d1_reg[7] [2]),
        .I2(RD_PNTR_WR[5]),
        .I3(\gic0.gc0.count_d1_reg[7] [3]),
        .O(ram_full_i_i_8_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_9
       (.I0(RD_PNTR_WR[6]),
        .I1(\gic0.gc0.count_d1_reg[7] [4]),
        .I2(RD_PNTR_WR[7]),
        .I3(\gic0.gc0.count_d1_reg[7] [5]),
        .O(ram_full_i_i_9_n_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "8" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin(RD_PNTR_WR),
        .src_clk(rd_clk),
        .src_in_bin(Q));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "8" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__1 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin(WR_PNTR_RD),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[7] ));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs__parameterized0
   (ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_full_fb_i_reg_0,
    ram_empty_i_reg,
    WR_PNTR_RD,
    Q,
    out,
    \gic0.gc0.count_reg[2] ,
    \gc0.count_reg[2] ,
    wr_clk,
    \gic0.gc0.count_d2_reg[3] ,
    rd_clk,
    \gc0.count_d1_reg[3] );
  output ram_full_fb_i_reg;
  output [3:0]RD_PNTR_WR;
  output ram_full_fb_i_reg_0;
  output ram_empty_i_reg;
  output [3:0]WR_PNTR_RD;
  input [0:0]Q;
  input out;
  input [2:0]\gic0.gc0.count_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input wr_clk;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input rd_clk;
  input [3:0]\gc0.count_d1_reg[3] ;

  wire [0:0]Q;
  wire [3:0]RD_PNTR_WR;
  wire [3:0]WR_PNTR_RD;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire [2:0]\gic0.gc0.count_reg[2] ;
  wire out;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire rd_clk;
  wire wr_clk;

  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_5
       (.I0(WR_PNTR_RD[2]),
        .I1(\gc0.count_reg[2] [2]),
        .I2(WR_PNTR_RD[1]),
        .I3(\gc0.count_reg[2] [1]),
        .I4(\gc0.count_reg[2] [0]),
        .I5(WR_PNTR_RD[0]),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_2
       (.I0(RD_PNTR_WR[2]),
        .I1(\gic0.gc0.count_reg[2] [2]),
        .I2(RD_PNTR_WR[1]),
        .I3(\gic0.gc0.count_reg[2] [1]),
        .I4(\gic0.gc0.count_reg[2] [0]),
        .I5(RD_PNTR_WR[0]),
        .O(ram_full_fb_i_reg_0));
  LUT3 #(
    .INIT(8'h09)) 
    ram_full_i_i_5
       (.I0(RD_PNTR_WR[3]),
        .I1(Q),
        .I2(out),
        .O(ram_full_fb_i_reg));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "4" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0 rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin(RD_PNTR_WR),
        .src_clk(rd_clk),
        .src_in_bin(\gc0.count_d1_reg[3] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "4" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0__4 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin(WR_PNTR_RD),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[3] ));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs__parameterized0__xdcDup__1
   (ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_full_fb_i_reg_0,
    ram_empty_i_reg,
    WR_PNTR_RD,
    Q,
    out,
    \gic0.gc0.count_reg[2] ,
    \gc0.count_reg[2] ,
    wr_clk,
    \gic0.gc0.count_d2_reg[3] ,
    rd_clk,
    \gc0.count_d1_reg[3] );
  output ram_full_fb_i_reg;
  output [3:0]RD_PNTR_WR;
  output ram_full_fb_i_reg_0;
  output ram_empty_i_reg;
  output [3:0]WR_PNTR_RD;
  input [0:0]Q;
  input out;
  input [2:0]\gic0.gc0.count_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input wr_clk;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input rd_clk;
  input [3:0]\gc0.count_d1_reg[3] ;

  wire [0:0]Q;
  wire [3:0]RD_PNTR_WR;
  wire [3:0]WR_PNTR_RD;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire [2:0]\gic0.gc0.count_reg[2] ;
  wire out;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire rd_clk;
  wire wr_clk;

  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_5
       (.I0(WR_PNTR_RD[2]),
        .I1(\gc0.count_reg[2] [2]),
        .I2(WR_PNTR_RD[1]),
        .I3(\gc0.count_reg[2] [1]),
        .I4(\gc0.count_reg[2] [0]),
        .I5(WR_PNTR_RD[0]),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_2
       (.I0(RD_PNTR_WR[2]),
        .I1(\gic0.gc0.count_reg[2] [2]),
        .I2(RD_PNTR_WR[1]),
        .I3(\gic0.gc0.count_reg[2] [1]),
        .I4(\gic0.gc0.count_reg[2] [0]),
        .I5(RD_PNTR_WR[0]),
        .O(ram_full_fb_i_reg_0));
  LUT3 #(
    .INIT(8'h09)) 
    ram_full_i_i_5
       (.I0(RD_PNTR_WR[3]),
        .I1(Q),
        .I2(out),
        .O(ram_full_fb_i_reg));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "4" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0__3 rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin(RD_PNTR_WR),
        .src_clk(rd_clk),
        .src_in_bin(\gc0.count_d1_reg[3] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "4" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized0__2 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin(WR_PNTR_RD),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[3] ));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs__parameterized1
   (S,
    WR_PNTR_RD,
    ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_empty_fb_i_reg,
    Q,
    out,
    wr_en,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    \gic0.gc0.count_d1_reg[5] ,
    \gic0.gc0.count_reg[5] ,
    E,
    comp1,
    wr_clk,
    \gic0.gc0.count_d2_reg[5] ,
    rd_clk);
  output [5:0]S;
  output [5:0]WR_PNTR_RD;
  output ram_full_fb_i_reg;
  output [5:0]RD_PNTR_WR;
  output ram_empty_fb_i_reg;
  input [5:0]Q;
  input out;
  input wr_en;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input [5:0]\gic0.gc0.count_d1_reg[5] ;
  input [5:0]\gic0.gc0.count_reg[5] ;
  input [0:0]E;
  input comp1;
  input wr_clk;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input rd_clk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [5:0]RD_PNTR_WR;
  wire [5:0]S;
  wire [5:0]WR_PNTR_RD;
  wire comp1;
  wire [5:0]\gic0.gc0.count_d1_reg[5] ;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire [5:0]\gic0.gc0.count_reg[5] ;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_i_5_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_i_i_4_n_0;
  wire ram_full_i_i_5_n_0;
  wire ram_full_i_i_6_n_0;
  wire ram_full_i_i_7_n_0;
  wire rd_clk;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1__0
       (.I0(WR_PNTR_RD[5]),
        .I1(Q[5]),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2__0
       (.I0(WR_PNTR_RD[4]),
        .I1(Q[4]),
        .O(S[4]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3__0
       (.I0(WR_PNTR_RD[3]),
        .I1(Q[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4__0
       (.I0(WR_PNTR_RD[2]),
        .I1(Q[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_5__0
       (.I0(WR_PNTR_RD[1]),
        .I1(Q[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_6__0
       (.I0(WR_PNTR_RD[0]),
        .I1(Q[0]),
        .O(S[0]));
  LUT6 #(
    .INIT(64'hFFFF820082008200)) 
    ram_empty_i_i_1
       (.I0(ram_empty_i_i_2_n_0),
        .I1(WR_PNTR_RD[0]),
        .I2(Q[0]),
        .I3(ram_empty_i_i_3_n_0),
        .I4(E),
        .I5(comp1),
        .O(ram_empty_fb_i_reg));
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_empty_i_i_2
       (.I0(Q[3]),
        .I1(WR_PNTR_RD[3]),
        .I2(Q[2]),
        .I3(WR_PNTR_RD[2]),
        .I4(ram_empty_i_i_5_n_0),
        .O(ram_empty_i_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    ram_empty_i_i_3
       (.I0(WR_PNTR_RD[1]),
        .I1(Q[1]),
        .O(ram_empty_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_5
       (.I0(WR_PNTR_RD[4]),
        .I1(Q[4]),
        .I2(WR_PNTR_RD[5]),
        .I3(Q[5]),
        .O(ram_empty_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h0000FF20)) 
    ram_full_i_i_1
       (.I0(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ),
        .I1(out),
        .I2(wr_en),
        .I3(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ),
        .I4(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .O(ram_full_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    ram_full_i_i_2
       (.I0(\gic0.gc0.count_reg[5] [1]),
        .I1(RD_PNTR_WR[1]),
        .I2(\gic0.gc0.count_reg[5] [0]),
        .I3(RD_PNTR_WR[0]),
        .I4(ram_full_i_i_4_n_0),
        .I5(ram_full_i_i_5_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    ram_full_i_i_3
       (.I0(\gic0.gc0.count_d1_reg[5] [1]),
        .I1(RD_PNTR_WR[1]),
        .I2(\gic0.gc0.count_d1_reg[5] [0]),
        .I3(RD_PNTR_WR[0]),
        .I4(ram_full_i_i_6_n_0),
        .I5(ram_full_i_i_7_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(RD_PNTR_WR[4]),
        .I1(\gic0.gc0.count_reg[5] [4]),
        .I2(RD_PNTR_WR[5]),
        .I3(\gic0.gc0.count_reg[5] [5]),
        .O(ram_full_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_5
       (.I0(RD_PNTR_WR[2]),
        .I1(\gic0.gc0.count_reg[5] [2]),
        .I2(RD_PNTR_WR[3]),
        .I3(\gic0.gc0.count_reg[5] [3]),
        .O(ram_full_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_6
       (.I0(RD_PNTR_WR[4]),
        .I1(\gic0.gc0.count_d1_reg[5] [4]),
        .I2(RD_PNTR_WR[5]),
        .I3(\gic0.gc0.count_d1_reg[5] [5]),
        .O(ram_full_i_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_7
       (.I0(RD_PNTR_WR[2]),
        .I1(\gic0.gc0.count_d1_reg[5] [2]),
        .I2(RD_PNTR_WR[3]),
        .I3(\gic0.gc0.count_d1_reg[5] [3]),
        .O(ram_full_i_i_7_n_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "6" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized1 rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin(RD_PNTR_WR),
        .src_clk(rd_clk),
        .src_in_bin(Q));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "6" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_gray__parameterized1__1 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin(WR_PNTR_RD),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[5] ));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2
   (ram_full_i_reg,
    v1_reg,
    out,
    txfifo_rd_en_reg,
    comp1,
    wr_en,
    SS);
  output ram_full_i_reg;
  input [4:0]v1_reg;
  input out;
  input [0:0]txfifo_rd_en_reg;
  input comp1;
  input wr_en;
  input [0:0]SS;

  wire [0:0]SS;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp0;
  wire comp1;
  wire out;
  wire ram_full_i_reg;
  wire [0:0]txfifo_rd_en_reg;
  wire [4:0]v1_reg;
  wire wr_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp0,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],v1_reg}));
  LUT6 #(
    .INIT(64'h000000003B2A2A2A)) 
    ram_full_fb_i_i_1
       (.I0(out),
        .I1(txfifo_rd_en_reg),
        .I2(comp0),
        .I3(comp1),
        .I4(wr_en),
        .I5(SS),
        .O(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2_22
   (comp1,
    v1_reg_0);
  output comp1;
  input [4:0]v1_reg_0;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp1;
  wire [4:0]v1_reg_0;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp1,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],v1_reg_0}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2_23
   (ram_empty_i_reg,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[6] ,
    \gc0.count_d1_reg[8] ,
    SR,
    out,
    E,
    comp1,
    rd_en);
  output ram_empty_i_reg;
  input \gc0.count_d1_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input \gc0.count_d1_reg[4] ;
  input \gc0.count_d1_reg[6] ;
  input \gc0.count_d1_reg[8] ;
  input [0:0]SR;
  input out;
  input [0:0]E;
  input comp1;
  input rd_en;

  wire [0:0]E;
  wire [0:0]SR;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp0;
  wire comp1;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[6] ;
  wire \gc0.count_d1_reg[8] ;
  wire out;
  wire ram_empty_i_reg;
  wire rd_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp0,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],\gc0.count_d1_reg[8] ,\gc0.count_d1_reg[6] ,\gc0.count_d1_reg[4] ,\gc0.count_d1_reg[2] ,\gc0.count_d1_reg[0] }));
  LUT6 #(
    .INIT(64'hAFEFAEEEAEEEAEEE)) 
    ram_empty_fb_i_i_1
       (.I0(SR),
        .I1(out),
        .I2(E),
        .I3(comp0),
        .I4(comp1),
        .I5(rd_en),
        .O(ram_empty_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2_24
   (comp1,
    v1_reg);
  output comp1;
  input [4:0]v1_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp1;
  wire [4:0]v1_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp1,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],v1_reg}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3
   (comp0,
    v1_reg);
  output comp0;
  input [5:0]v1_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire [5:0]v1_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp0,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_27
   (ram_full_i_reg,
    v1_reg_0,
    srst,
    wr_rst_reg_reg,
    wr_en,
    ram_empty_fb_i_reg,
    comp0,
    rd_en,
    out);
  output ram_full_i_reg;
  input [5:0]v1_reg_0;
  input srst;
  input wr_rst_reg_reg;
  input wr_en;
  input ram_empty_fb_i_reg;
  input comp0;
  input rd_en;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg_0;
  wire wr_en;
  wire wr_rst_reg_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp1,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg_0}));
  LUT3 #(
    .INIT(8'h04)) 
    ram_full_fb_i_i_1
       (.I0(srst),
        .I1(ram_full_fb_i_i_2_n_0),
        .I2(wr_rst_reg_reg),
        .O(ram_full_i_reg));
  LUT6 #(
    .INIT(64'hF0FFFFFF80808888)) 
    ram_full_fb_i_i_2
       (.I0(wr_en),
        .I1(comp1),
        .I2(ram_empty_fb_i_reg),
        .I3(comp0),
        .I4(rd_en),
        .I5(out),
        .O(ram_full_fb_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_28
   (comp0,
    \gcc0.gc0.count_d1_reg[1] ,
    \gcc0.gc0.count_d1_reg[3] ,
    \gcc0.gc0.count_d1_reg[5] ,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_d1_reg[11] );
  output comp0;
  input \gcc0.gc0.count_d1_reg[1] ;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gcc0.gc0.count_d1_reg[5] ;
  input \gcc0.gc0.count_d1_reg[7] ;
  input \gcc0.gc0.count_d1_reg[9] ;
  input \gcc0.gc0.count_d1_reg[11] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire \gcc0.gc0.count_d1_reg[11] ;
  wire \gcc0.gc0.count_d1_reg[1] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[5] ;
  wire \gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[9] ;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp0,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],\gcc0.gc0.count_d1_reg[11] ,\gcc0.gc0.count_d1_reg[9] ,\gcc0.gc0.count_d1_reg[7] ,\gcc0.gc0.count_d1_reg[5] ,\gcc0.gc0.count_d1_reg[3] ,\gcc0.gc0.count_d1_reg[1] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_29
   (ram_empty_i_reg,
    v1_reg,
    srst,
    wr_rst_reg_reg,
    rd_en,
    comp0,
    ram_full_fb_i_reg,
    wr_en,
    out);
  output ram_empty_i_reg;
  input [5:0]v1_reg;
  input srst;
  input wr_rst_reg_reg;
  input rd_en;
  input comp0;
  input ram_full_fb_i_reg;
  input wr_en;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg;
  wire wr_en;
  wire wr_rst_reg_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp1,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg}));
  LUT3 #(
    .INIT(8'hFE)) 
    ram_empty_fb_i_i_1
       (.I0(srst),
        .I1(ram_empty_fb_i_i_2_n_0),
        .I2(wr_rst_reg_reg),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'hFF0FFFFF88008888)) 
    ram_empty_fb_i_i_2
       (.I0(rd_en),
        .I1(comp1),
        .I2(comp0),
        .I3(ram_full_fb_i_reg),
        .I4(wr_en),
        .I5(out),
        .O(ram_empty_fb_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_36
   (comp0,
    v1_reg);
  output comp0;
  input [5:0]v1_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire [5:0]v1_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp0,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_37
   (ram_full_i_reg,
    v1_reg_0,
    srst,
    wr_rst_reg_reg,
    wr_en,
    ram_empty_fb_i_reg,
    comp0,
    rd_en,
    out);
  output ram_full_i_reg;
  input [5:0]v1_reg_0;
  input srst;
  input wr_rst_reg_reg;
  input wr_en;
  input ram_empty_fb_i_reg;
  input comp0;
  input rd_en;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg_0;
  wire wr_en;
  wire wr_rst_reg_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp1,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg_0}));
  LUT3 #(
    .INIT(8'h04)) 
    ram_full_fb_i_i_1
       (.I0(srst),
        .I1(ram_full_fb_i_i_2_n_0),
        .I2(wr_rst_reg_reg),
        .O(ram_full_i_reg));
  LUT6 #(
    .INIT(64'hF0FFFFFF80808888)) 
    ram_full_fb_i_i_2
       (.I0(wr_en),
        .I1(comp1),
        .I2(ram_empty_fb_i_reg),
        .I3(comp0),
        .I4(rd_en),
        .I5(out),
        .O(ram_full_fb_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_41
   (comp0,
    \gcc0.gc0.count_d1_reg[1] ,
    \gcc0.gc0.count_d1_reg[3] ,
    \gcc0.gc0.count_d1_reg[5] ,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_d1_reg[11] );
  output comp0;
  input \gcc0.gc0.count_d1_reg[1] ;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gcc0.gc0.count_d1_reg[5] ;
  input \gcc0.gc0.count_d1_reg[7] ;
  input \gcc0.gc0.count_d1_reg[9] ;
  input \gcc0.gc0.count_d1_reg[11] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire \gcc0.gc0.count_d1_reg[11] ;
  wire \gcc0.gc0.count_d1_reg[1] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[5] ;
  wire \gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[9] ;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp0,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],\gcc0.gc0.count_d1_reg[11] ,\gcc0.gc0.count_d1_reg[9] ,\gcc0.gc0.count_d1_reg[7] ,\gcc0.gc0.count_d1_reg[5] ,\gcc0.gc0.count_d1_reg[3] ,\gcc0.gc0.count_d1_reg[1] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_42
   (ram_empty_i_reg,
    v1_reg,
    srst,
    wr_rst_reg_reg,
    rd_en,
    comp0,
    ram_full_fb_i_reg,
    wr_en,
    out);
  output ram_empty_i_reg;
  input [5:0]v1_reg;
  input srst;
  input wr_rst_reg_reg;
  input rd_en;
  input comp0;
  input ram_full_fb_i_reg;
  input wr_en;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg;
  wire wr_en;
  wire wr_rst_reg_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp1,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg}));
  LUT3 #(
    .INIT(8'hFE)) 
    ram_empty_fb_i_i_1
       (.I0(srst),
        .I1(ram_empty_fb_i_i_2_n_0),
        .I2(wr_rst_reg_reg),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'hFF0FFFFF88008888)) 
    ram_empty_fb_i_i_2
       (.I0(rd_en),
        .I1(comp1),
        .I2(comp0),
        .I3(ram_full_fb_i_reg),
        .I4(wr_en),
        .I5(out),
        .O(ram_empty_fb_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4
   (ram_full_i_reg,
    v1_reg,
    \gcc0.gc0.count_d1_reg[8] ,
    out,
    cs_fifo_rd_en_reg,
    comp1,
    wr_en,
    SS);
  output ram_full_i_reg;
  input [3:0]v1_reg;
  input \gcc0.gc0.count_d1_reg[8] ;
  input out;
  input [0:0]cs_fifo_rd_en_reg;
  input comp1;
  input wr_en;
  input [0:0]SS;

  wire [0:0]SS;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp0;
  wire comp1;
  wire [0:0]cs_fifo_rd_en_reg;
  wire \gcc0.gc0.count_d1_reg[8] ;
  wire out;
  wire ram_full_i_reg;
  wire [3:0]v1_reg;
  wire wr_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp0,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],\gcc0.gc0.count_d1_reg[8] ,v1_reg}));
  LUT6 #(
    .INIT(64'h000000003B2A2A2A)) 
    ram_full_fb_i_i_1
       (.I0(out),
        .I1(cs_fifo_rd_en_reg),
        .I2(comp0),
        .I3(comp1),
        .I4(wr_en),
        .I5(SS),
        .O(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4_46
   (comp1,
    v1_reg_0,
    \gcc0.gc0.count_reg[8] );
  output comp1;
  input [3:0]v1_reg_0;
  input \gcc0.gc0.count_reg[8] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp1;
  wire \gcc0.gc0.count_reg[8] ;
  wire [3:0]v1_reg_0;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp1,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],\gcc0.gc0.count_reg[8] ,v1_reg_0}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4_47
   (ram_empty_i_reg,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[6] ,
    \gcc0.gc0.count_d1_reg[8] ,
    SR,
    out,
    E,
    comp1,
    rd_en);
  output ram_empty_i_reg;
  input \gc0.count_d1_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input \gc0.count_d1_reg[4] ;
  input \gc0.count_d1_reg[6] ;
  input \gcc0.gc0.count_d1_reg[8] ;
  input [0:0]SR;
  input out;
  input [0:0]E;
  input comp1;
  input rd_en;

  wire [0:0]E;
  wire [0:0]SR;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp0;
  wire comp1;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[6] ;
  wire \gcc0.gc0.count_d1_reg[8] ;
  wire out;
  wire ram_empty_i_reg;
  wire rd_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp0,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],\gcc0.gc0.count_d1_reg[8] ,\gc0.count_d1_reg[6] ,\gc0.count_d1_reg[4] ,\gc0.count_d1_reg[2] ,\gc0.count_d1_reg[0] }));
  LUT6 #(
    .INIT(64'hAFEFAEEEAEEEAEEE)) 
    ram_empty_fb_i_i_1
       (.I0(SR),
        .I1(out),
        .I2(E),
        .I3(comp0),
        .I4(comp1),
        .I5(rd_en),
        .O(ram_empty_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4_48
   (comp1,
    v1_reg,
    \gcc0.gc0.count_d1_reg[8] );
  output comp1;
  input [3:0]v1_reg;
  input \gcc0.gc0.count_d1_reg[8] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire comp1;
  wire \gcc0.gc0.count_d1_reg[8] ;
  wire [3:0]v1_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:5],comp1,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:5],\gcc0.gc0.count_d1_reg[8] ,v1_reg}));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss
   (Q,
    out,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    clk);
  output [9:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]ram_full_fb_i_reg;
  input clk;

  wire [9:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire [0:0]ram_full_fb_i_reg;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr \gsym_dc.dc 
       (.Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized0
   (Q,
    rd_en,
    out,
    SR,
    E,
    clk);
  output [11:0]Q;
  input rd_en;
  input out;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized0 \gsym_dc.dc 
       (.E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized0_38
   (Q,
    rd_en,
    out,
    SR,
    E,
    clk);
  output [11:0]Q;
  input rd_en;
  input out;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized0_43 \gsym_dc.dc 
       (.E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized1
   (Q,
    out,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    clk);
  output [8:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]ram_full_fb_i_reg;
  input clk;

  wire [8:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire [0:0]ram_full_fb_i_reg;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized1 \gsym_dc.dc 
       (.Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized2
   (Q,
    out,
    rd_en,
    SR,
    E,
    clk);
  output [3:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized2 \gsym_dc.dc 
       (.E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized2_67
   (Q,
    out,
    rd_en,
    SR,
    E,
    clk);
  output [3:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized2_70 \gsym_dc.dc 
       (.E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized3
   (Q,
    rd_en,
    out,
    DI,
    SR,
    E,
    clk);
  output [7:0]Q;
  input rd_en;
  input out;
  input [0:0]DI;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]DI;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized3 \gsym_dc.dc 
       (.DI(DI),
        .E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized3_16
   (Q,
    rd_en,
    out,
    DI,
    SR,
    E,
    clk);
  output [7:0]Q;
  input rd_en;
  input out;
  input [0:0]DI;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]DI;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized3_19 \gsym_dc.dc 
       (.DI(DI),
        .E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

(* ORIG_REF_NAME = "dc_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized3_6
   (Q,
    rd_en,
    out,
    DI,
    SR,
    E,
    clk);
  output [7:0]Q;
  input rd_en;
  input out;
  input [0:0]DI;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]DI;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire out;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized3_9 \gsym_dc.dc 
       (.DI(DI),
        .E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    rd_data_count,
    wr_data_count,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [63:0]dout;
  output empty;
  output full;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  input wr_clk;
  input rd_clk;
  input rst;
  input [63:0]din;
  input wr_en;
  input rd_en;

  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_1 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_15 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_2 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_24 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_3 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_4 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_6 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_10 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire [7:0]p_0_out;
  wire [7:0]p_13_out;
  wire [7:2]p_14_out;
  wire p_20_out;
  wire [7:0]p_24_out;
  wire [7:0]p_25_out;
  wire p_2_out;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire rd_en;
  wire [7:4]rd_pntr_plus1;
  wire rst;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire wr_en;
  wire [6:0]wr_pntr_plus2;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.Q(p_0_out),
        .RD_PNTR_WR(p_25_out),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 ,\gntv_or_sync_fifo.gcx.clkx_n_4 ,\gntv_or_sync_fifo.gcx.clkx_n_5 ,\gntv_or_sync_fifo.gcx.clkx_n_6 }),
        .SS(\syncstages_ff_reg[0] ),
        .WR_PNTR_RD(p_24_out),
        .\dest_out_bin_ff_reg[1] (\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .\gc0.count_reg[7] (rd_pntr_plus1),
        .\gic0.gc0.count_d1_reg[7] (p_14_out),
        .\gic0.gc0.count_d2_reg[7] (p_13_out),
        .\gic0.gc0.count_reg[6] (wr_pntr_plus2),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (rstblk_n_0),
        .out(rst_full_gen_i),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .ram_empty_fb_i_reg_0(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_15 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (p_0_out),
        .Q(rd_pntr_plus1),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 ,\gntv_or_sync_fifo.gcx.clkx_n_4 ,\gntv_or_sync_fifo.gcx.clkx_n_5 ,\gntv_or_sync_fifo.gcx.clkx_n_6 }),
        .SS(\syncstages_ff_reg[0] ),
        .WR_PNTR_RD(p_24_out),
        .empty(empty),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .out(p_2_out),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.E(p_20_out),
        .ENA_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .Q(p_13_out),
        .RD_PNTR_WR(p_25_out),
        .full(full),
        .\gic0.gc0.count_d1_reg[6] (wr_pntr_plus2),
        .\gic0.gc0.count_d2_reg[7] (p_14_out),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\gntv_or_sync_fifo.gcx.clkx_n_15 ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg_0 (rstblk_n_0),
        .out(rst_full_gen_i),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory \gntv_or_sync_fifo.mem 
       (.E(p_20_out),
        .ENA_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .Q(p_13_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (p_0_out),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__xdcDup__1 rstblk
       (.ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .SS(\syncstages_ff_reg[0] ),
        .out(rst_full_gen_i),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rstblk_n_0),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized0
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [15:0]dout;
  output empty;
  output full;
  input wr_clk;
  input rd_clk;
  input rst;
  input [15:0]din;
  input wr_en;
  input rd_en;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_7 ;
  wire [3:0]p_0_out;
  wire [3:0]p_13_out;
  wire [3:3]p_14_out;
  wire p_20_out;
  wire [3:0]p_24_out;
  wire [3:0]p_25_out;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire [2:0]rd_pntr_plus1;
  wire rst;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire rstblk_n_4;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_en;
  wire [2:0]wr_pntr_plus2;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs__parameterized0 \gntv_or_sync_fifo.gcx.clkx 
       (.Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .\gc0.count_d1_reg[3] (p_0_out),
        .\gc0.count_reg[2] (rd_pntr_plus1),
        .\gic0.gc0.count_d2_reg[3] (p_13_out),
        .\gic0.gc0.count_reg[2] (wr_pntr_plus2),
        .out(rst_full_gen_i),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_6 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized0_73 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .Q(rd_pntr_plus1),
        .SS(\syncstages_ff_reg[0] ),
        .WR_PNTR_RD(p_24_out),
        .\dest_out_bin_ff_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_6 ),
        .empty(empty),
        .out(p_2_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized0_74 \gntv_or_sync_fifo.gl0.wr 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_13_out),
        .E(p_20_out),
        .ENA_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_25_out),
        .full(full),
        .\gic0.gc0.count_d2_reg[3] (p_14_out),
        .\grstd1.grst_full.grst_f.rst_d3_reg (rstblk_n_4),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (rstblk_n_0),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized0_75 \gntv_or_sync_fifo.mem 
       (.E(p_20_out),
        .ENA_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out),
        .\gic0.gc0.count_d2_reg[3] (p_13_out),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo rstblk
       (.ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .SS(\syncstages_ff_reg[0] ),
        .\dest_out_bin_ff_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .\dest_out_bin_ff_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\gic0.gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .out(rst_full_gen_i),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_full_fb_i_reg(rstblk_n_4),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rstblk_n_0),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized0__xdcDup__1
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [15:0]dout;
  output empty;
  output full;
  input wr_clk;
  input rd_clk;
  input rst;
  input [15:0]din;
  input wr_en;
  input rd_en;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_7 ;
  wire [3:0]p_0_out;
  wire [3:0]p_13_out;
  wire [3:3]p_14_out;
  wire p_20_out;
  wire [3:0]p_24_out;
  wire [3:0]p_25_out;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire [2:0]rd_pntr_plus1;
  wire rst;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire rstblk_n_4;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_en;
  wire [2:0]wr_pntr_plus2;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs__parameterized0__xdcDup__1 \gntv_or_sync_fifo.gcx.clkx 
       (.Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .\gc0.count_d1_reg[3] (p_0_out),
        .\gc0.count_reg[2] (rd_pntr_plus1),
        .\gic0.gc0.count_d2_reg[3] (p_13_out),
        .\gic0.gc0.count_reg[2] (wr_pntr_plus2),
        .out(rst_full_gen_i),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_6 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized0 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .Q(rd_pntr_plus1),
        .SS(\syncstages_ff_reg[0] ),
        .WR_PNTR_RD(p_24_out),
        .\dest_out_bin_ff_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_6 ),
        .empty(empty),
        .out(p_2_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized0 \gntv_or_sync_fifo.gl0.wr 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_13_out),
        .E(p_20_out),
        .ENA_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_25_out),
        .full(full),
        .\gic0.gc0.count_d2_reg[3] (p_14_out),
        .\grstd1.grst_full.grst_f.rst_d3_reg (rstblk_n_4),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (rstblk_n_0),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized0 \gntv_or_sync_fifo.mem 
       (.E(p_20_out),
        .ENA_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_I ),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out),
        .\gic0.gc0.count_d2_reg[3] (p_13_out),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__xdcDup__2 rstblk
       (.ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .SS(\syncstages_ff_reg[0] ),
        .\dest_out_bin_ff_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .\dest_out_bin_ff_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\gic0.gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .out(rst_full_gen_i),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_full_fb_i_reg(rstblk_n_4),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rstblk_n_0),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized1
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    rd_data_count,
    wr_data_count,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [31:0]dout;
  output empty;
  output full;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  input wr_clk;
  input rd_clk;
  input rst;
  input [31:0]din;
  input wr_en;
  input rd_en;

  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_1 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_12 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_19 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_2 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_3 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_4 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire \gras.rsts/comp1 ;
  wire [5:0]p_0_out;
  wire [5:0]p_13_out;
  wire [5:0]p_14_out;
  wire p_20_out;
  wire [5:0]p_24_out;
  wire [5:0]p_25_out;
  wire p_2_out;
  wire p_8_out;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire wr_en;
  wire [5:0]wr_pntr_plus2;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_clk_x_pntrs__parameterized1 \gntv_or_sync_fifo.gcx.clkx 
       (.E(p_8_out),
        .Q(p_0_out),
        .RD_PNTR_WR(p_25_out),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 ,\gntv_or_sync_fifo.gcx.clkx_n_4 ,\gntv_or_sync_fifo.gcx.clkx_n_5 }),
        .WR_PNTR_RD(p_24_out),
        .comp1(\gras.rsts/comp1 ),
        .\gic0.gc0.count_d1_reg[5] (p_14_out),
        .\gic0.gc0.count_d2_reg[5] (p_13_out),
        .\gic0.gc0.count_reg[5] (wr_pntr_plus2),
        .\grstd1.grst_full.grst_f.rst_d3_reg (rst_full_gen_i),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_19 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_12 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized1 \gntv_or_sync_fifo.gl0.rd 
       (.E(p_8_out),
        .Q(p_0_out),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 ,\gntv_or_sync_fifo.gcx.clkx_n_4 ,\gntv_or_sync_fifo.gcx.clkx_n_5 }),
        .SS(\syncstages_ff_reg[0] ),
        .WR_PNTR_RD(p_24_out),
        .comp1(\gras.rsts/comp1 ),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_19 ),
        .empty(empty),
        .out(p_2_out),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized1 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_20_out),
        .Q(p_13_out),
        .RD_PNTR_WR(p_25_out),
        .full(full),
        .\gic0.gc0.count_d1_reg[5] (wr_pntr_plus2),
        .\gic0.gc0.count_d2_reg[5] (p_14_out),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (rstblk_n_0),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_12 ),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized1 \gntv_or_sync_fifo.mem 
       (.E(p_20_out),
        .POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .Q(p_0_out),
        .SS(\syncstages_ff_reg[0] ),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (p_13_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__xdcDup__3 rstblk
       (.POR_B(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/POR_B ),
        .SS(\syncstages_ff_reg[0] ),
        .out(rst_full_gen_i),
        .ram_rstram_b(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ram_rstram_b ),
        .rd_clk(rd_clk),
        .rst(rst),
        .\syncstages_ff_reg[0] (rstblk_n_0),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized2
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [9:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire clk;
  wire [9:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire \grss.gdc.dc/cntr_en ;
  wire [4:0]\gwss.wsts/c0/v1_reg ;
  wire [4:0]\gwss.wsts/c1/v1_reg ;
  wire [9:0]p_0_out;
  wire [9:0]p_11_out;
  wire [9:0]p_12_out;
  wire p_17_out;
  wire p_2_out;
  wire p_7_out;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized2 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_0_out),
        .E(p_17_out),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[9] (p_7_out),
        .\gcc0.gc0.count_d1_reg[9] (p_11_out),
        .\gcc0.gc0.count_reg[9] (p_12_out),
        .out(p_2_out),
        .ram_full_fb_i_reg(\grss.gdc.dc/cntr_en ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\gwss.wsts/c0/v1_reg ),
        .v1_reg_0(\gwss.wsts/c1/v1_reg ),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized2 \gntv_or_sync_fifo.gl0.wr 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_11_out),
        .E(p_17_out),
        .Q(p_12_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .\count_reg[9] (\grss.gdc.dc/cntr_en ),
        .full(full),
        .out(p_2_out),
        .rd_en(rd_en),
        .txfifo_rd_en_reg(p_7_out),
        .v1_reg(\gwss.wsts/c0/v1_reg ),
        .v1_reg_0(\gwss.wsts/c1/v1_reg ),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized2 \gntv_or_sync_fifo.mem 
       (.E(p_17_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (p_0_out),
        .\gcc0.gc0.count_d1_reg[9] (p_11_out),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_20 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized3
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [11:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire clk;
  wire [11:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_15 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_16 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_17 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_18 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_20 ;
  wire [11:0]p_0_out;
  wire [11:0]p_11_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized3 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_0_out),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[11] (\gntv_or_sync_fifo.gl0.wr_n_20 ),
        .\gcc0.gc0.count_d1_reg[11]_0 (p_11_out),
        .\gcc0.gc0.count_d1_reg[1] (\gntv_or_sync_fifo.gl0.wr_n_15 ),
        .\gcc0.gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.wr_n_16 ),
        .\gcc0.gc0.count_d1_reg[5] (\gntv_or_sync_fifo.gl0.wr_n_17 ),
        .\gcc0.gc0.count_d1_reg[7] (\gntv_or_sync_fifo.gl0.wr_n_18 ),
        .\gcc0.gc0.count_d1_reg[9] (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized3 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[11] (p_0_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_15 ),
        .ram_empty_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_16 ),
        .ram_empty_i_reg_1(\gntv_or_sync_fifo.gl0.wr_n_17 ),
        .ram_empty_i_reg_2(\gntv_or_sync_fifo.gl0.wr_n_18 ),
        .ram_empty_i_reg_3(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .ram_empty_i_reg_4(\gntv_or_sync_fifo.gl0.wr_n_20 ),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized3 \gntv_or_sync_fifo.mem 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_25 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized4
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [11:0]data_count;
  output [7:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [7:0]din;
  input wr_en;

  wire clk;
  wire [11:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_15 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_16 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_17 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_18 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_20 ;
  wire [11:0]p_0_out;
  wire [11:0]p_11_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized3_30 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_0_out),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[11] (\gntv_or_sync_fifo.gl0.wr_n_20 ),
        .\gcc0.gc0.count_d1_reg[11]_0 (p_11_out),
        .\gcc0.gc0.count_d1_reg[1] (\gntv_or_sync_fifo.gl0.wr_n_15 ),
        .\gcc0.gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.wr_n_16 ),
        .\gcc0.gc0.count_d1_reg[5] (\gntv_or_sync_fifo.gl0.wr_n_17 ),
        .\gcc0.gc0.count_d1_reg[7] (\gntv_or_sync_fifo.gl0.wr_n_18 ),
        .\gcc0.gc0.count_d1_reg[9] (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized3_31 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[11] (p_0_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_15 ),
        .ram_empty_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_16 ),
        .ram_empty_i_reg_1(\gntv_or_sync_fifo.gl0.wr_n_17 ),
        .ram_empty_i_reg_2(\gntv_or_sync_fifo.gl0.wr_n_18 ),
        .ram_empty_i_reg_3(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .ram_empty_i_reg_4(\gntv_or_sync_fifo.gl0.wr_n_20 ),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized4 \gntv_or_sync_fifo.mem 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_32 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized5
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [8:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire clk;
  wire [8:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_10 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire \grss.gdc.dc/cntr_en ;
  wire [3:0]\gwss.wsts/c0/v1_reg ;
  wire [3:0]\gwss.wsts/c1/v1_reg ;
  wire [8:0]p_0_out;
  wire [8:0]p_11_out;
  wire [7:0]p_12_out;
  wire p_17_out;
  wire p_2_out;
  wire p_7_out;
  wire rd_en;
  wire [8:8]rd_pntr_plus1;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized4 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (p_0_out),
        .E(p_17_out),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[8] (rd_pntr_plus1),
        .\gc0.count_reg[8] (p_7_out),
        .\gcc0.gc0.count_d1_reg[7] (p_11_out[7:0]),
        .\gcc0.gc0.count_d1_reg[8] (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .\gcc0.gc0.count_d1_reg[8]_0 (\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .\gcc0.gc0.count_reg[7] (p_12_out),
        .out(p_2_out),
        .ram_full_fb_i_reg(\grss.gdc.dc/cntr_en ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\gwss.wsts/c0/v1_reg ),
        .v1_reg_0(\gwss.wsts/c1/v1_reg ),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized4 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .\count_reg[8] (\grss.gdc.dc/cntr_en ),
        .cs_fifo_rd_en_reg(p_7_out),
        .full(full),
        .\gc0.count_d1_reg[8] (p_0_out[8]),
        .\gc0.count_reg[8] (rd_pntr_plus1),
        .\gcc0.gc0.count_d1_reg[7] (p_12_out),
        .out(p_2_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .ram_empty_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .rd_en(rd_en),
        .v1_reg(\gwss.wsts/c0/v1_reg ),
        .v1_reg_0(\gwss.wsts/c1/v1_reg ),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized5 \gntv_or_sync_fifo.mem 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_44 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized6
   (dout,
    empty,
    full,
    data_count,
    wr_rst_reg_reg,
    srst,
    clk,
    din,
    rd_en,
    wr_en);
  output [31:0]dout;
  output empty;
  output full;
  output [3:0]data_count;
  output wr_rst_reg_reg;
  input srst;
  input clk;
  input [31:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_6 ;
  wire [3:0]p_0_out;
  wire [3:0]p_11_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized5 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .Q(p_11_out),
        .SR(srst_full_ff_i),
        .clk(clk),
        .\count_reg[3] (data_count),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.wr_n_6 ),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized5 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[3] (p_0_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_6 ),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized6 \gntv_or_sync_fifo.mem 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_49 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized6_53
   (dout,
    empty,
    full,
    data_count,
    wr_rst_reg_reg,
    srst,
    clk,
    din,
    rd_en,
    wr_en);
  output [31:0]dout;
  output empty;
  output full;
  output [3:0]data_count;
  output wr_rst_reg_reg;
  input srst;
  input clk;
  input [31:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_6 ;
  wire [3:0]p_0_out;
  wire [3:0]p_11_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized5_54 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .Q(p_11_out),
        .SR(srst_full_ff_i),
        .clk(clk),
        .\count_reg[3] (data_count),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.wr_n_6 ),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized5_55 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[3] (p_0_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_6 ),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized6_56 \gntv_or_sync_fifo.mem 
       (.E(p_17_out),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_57 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized7
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;

  wire clk;
  wire [7:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_10 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_4 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_5 ;
  wire [7:0]p_0_out;
  wire [7:0]p_11_out;
  wire [5:0]p_12_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire [7:4]rd_pntr_plus1;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized6_0 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (p_0_out),
        .E(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[7] ({rd_pntr_plus1[7:6],rd_pntr_plus1[4]}),
        .\gcc0.gc0.count_d1_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .\gcc0.gc0.count_d1_reg[7] (p_11_out),
        .\gcc0.gc0.count_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .\gcc0.gc0.count_reg[5] ({p_12_out[5],p_12_out[3:0]}),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_4 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.rd_n_10 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized6_1 \gntv_or_sync_fifo.gl0.wr 
       (.E(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[7] ({p_0_out[7:6],p_0_out[4]}),
        .\gc0.count_reg[7] ({rd_pntr_plus1[7:6],rd_pntr_plus1[4]}),
        .\gcc0.gc0.count_d1_reg[5] ({p_12_out[5],p_12_out[3:0]}),
        .\gcc0.gc0.count_reg[7] (p_17_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_4 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .ram_empty_fb_i_reg_1(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_10 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized7 \gntv_or_sync_fifo.mem 
       (.Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(p_17_out));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_2 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .out(p_2_out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized8
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]data_count;
  output [7:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [7:0]din;

  wire clk;
  wire [7:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_10 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_4 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_5 ;
  wire [7:0]p_0_out;
  wire [7:0]p_11_out;
  wire [5:0]p_12_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire [7:4]rd_pntr_plus1;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized6 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .E(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[7] ({rd_pntr_plus1[7:6],rd_pntr_plus1[4]}),
        .\gcc0.gc0.count_d1_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .\gcc0.gc0.count_d1_reg[7] (p_11_out),
        .\gcc0.gc0.count_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .\gcc0.gc0.count_reg[5] ({p_12_out[5],p_12_out[3:0]}),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_4 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.rd_n_10 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized6 \gntv_or_sync_fifo.gl0.wr 
       (.E(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[7] ({p_0_out[7:6],p_0_out[4]}),
        .\gc0.count_reg[7] ({rd_pntr_plus1[7:6],rd_pntr_plus1[4]}),
        .\gcc0.gc0.count_d1_reg[5] ({p_12_out[5],p_12_out[3:0]}),
        .\gcc0.gc0.count_reg[7] (p_17_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_4 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .ram_empty_fb_i_reg_1(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_10 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized8 \gntv_or_sync_fifo.mem 
       (.Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(p_17_out));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .out(p_2_out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized9
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]data_count;
  output [15:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [15:0]din;

  wire clk;
  wire [7:0]data_count;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_10 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_19 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_4 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_5 ;
  wire [7:0]p_0_out;
  wire [7:0]p_11_out;
  wire [5:0]p_12_out;
  wire p_17_out;
  wire p_2_out;
  wire rd_en;
  wire [7:4]rd_pntr_plus1;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized6_10 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .E(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .Q(data_count),
        .SR(srst_full_ff_i),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[7] ({rd_pntr_plus1[7:6],rd_pntr_plus1[4]}),
        .\gcc0.gc0.count_d1_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .\gcc0.gc0.count_d1_reg[7] (p_11_out),
        .\gcc0.gc0.count_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .\gcc0.gc0.count_reg[5] ({p_12_out[5],p_12_out[3:0]}),
        .out(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_4 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.rd_n_10 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized6_11 \gntv_or_sync_fifo.gl0.wr 
       (.E(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[7] ({p_0_out[7:6],p_0_out[4]}),
        .\gc0.count_reg[7] ({rd_pntr_plus1[7:6],rd_pntr_plus1[4]}),
        .\gcc0.gc0.count_d1_reg[5] ({p_12_out[5],p_12_out[3:0]}),
        .\gcc0.gc0.count_reg[7] (p_17_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_4 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .ram_empty_fb_i_reg_1(p_2_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_10 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.wr_n_19 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized9 \gntv_or_sync_fifo.mem 
       (.Q(p_11_out),
        .SS(srst_full_ff_i),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (p_0_out),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(p_17_out));
  ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_12 rstblk
       (.SS(srst_full_ff_i),
        .clk(clk),
        .out(p_2_out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top
   (SS,
    wr_rst_busy,
    dout,
    empty,
    full,
    rd_data_count,
    wr_data_count,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output [0:0]SS;
  output wr_rst_busy;
  output [63:0]dout;
  output empty;
  output full;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  input wr_clk;
  input rd_clk;
  input rst;
  input [63:0]din;
  input wr_en;
  input rd_en;

  wire [0:0]SS;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (SS),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized0
   (SS,
    wr_rst_busy,
    dout,
    empty,
    full,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output [0:0]SS;
  output wr_rst_busy;
  output [15:0]dout;
  output empty;
  output full;
  input wr_clk;
  input rd_clk;
  input rst;
  input [15:0]din;
  input wr_en;
  input rd_en;

  wire [0:0]SS;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized0 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (SS),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized0__xdcDup__1
   (SS,
    wr_rst_busy,
    dout,
    empty,
    full,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output [0:0]SS;
  output wr_rst_busy;
  output [15:0]dout;
  output empty;
  output full;
  input wr_clk;
  input rd_clk;
  input rst;
  input [15:0]din;
  input wr_en;
  input rd_en;

  wire [0:0]SS;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized0__xdcDup__1 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (SS),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized1
   (SS,
    wr_rst_busy,
    dout,
    empty,
    full,
    rd_data_count,
    wr_data_count,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output [0:0]SS;
  output wr_rst_busy;
  output [31:0]dout;
  output empty;
  output full;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  input wr_clk;
  input rd_clk;
  input rst;
  input [31:0]din;
  input wr_en;
  input rd_en;

  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized1 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (SS),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized2
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [9:0]DATA_COUNT;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire [9:0]DATA_COUNT;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized2 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized3
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [11:0]DATA_COUNT;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire [11:0]DATA_COUNT;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized3 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized4
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [11:0]DATA_COUNT;
  output [7:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [7:0]din;
  input wr_en;

  wire [11:0]DATA_COUNT;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized4 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized5
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [8:0]DATA_COUNT;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire [8:0]DATA_COUNT;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized5 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized6
   (dout,
    empty,
    full,
    data_count,
    wr_rst_reg_reg,
    srst,
    clk,
    din,
    rd_en,
    wr_en);
  output [31:0]dout;
  output empty;
  output full;
  output [3:0]data_count;
  output wr_rst_reg_reg;
  input srst;
  input clk;
  input [31:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized6 \grf.rf 
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized6_52
   (dout,
    empty,
    full,
    data_count,
    wr_rst_reg_reg,
    srst,
    clk,
    din,
    rd_en,
    wr_en);
  output [31:0]dout;
  output empty;
  output full;
  output [3:0]data_count;
  output wr_rst_reg_reg;
  input srst;
  input clk;
  input [31:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized6_53 \grf.rf 
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized7
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]DATA_COUNT;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;

  wire [7:0]DATA_COUNT;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized7 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized8
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]DATA_COUNT;
  output [7:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [7:0]din;

  wire [7:0]DATA_COUNT;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized8 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized9
   (DATA_COUNT,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]DATA_COUNT;
  output [15:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [15:0]din;

  wire [7:0]DATA_COUNT;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_ramfifo__parameterized9 \grf.rf 
       (.clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "8" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "64" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "64" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "1" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "1" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "1" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "253" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "252" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "8" *) 
(* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "8" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) 
(* C_WR_DEPTH = "256" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [63:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [63:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rd_rst_busy),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "16" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "16" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "1" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "13" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "12" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "4" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "4" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [15:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [15:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [3:0]data_count;
  output [3:0]rd_data_count;
  output [3:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized0 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rd_rst_busy),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "9" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "64" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "64" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "510" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "509" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "9" *) 
(* C_RD_DEPTH = "512" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "9" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "9" *) 
(* C_WR_DEPTH = "512" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "9" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized11
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [63:0]din;
  input wr_en;
  input rd_en;
  input [8:0]prog_empty_thresh;
  input [8:0]prog_empty_thresh_assert;
  input [8:0]prog_empty_thresh_negate;
  input [8:0]prog_full_thresh;
  input [8:0]prog_full_thresh_assert;
  input [8:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [63:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [8:0]data_count;
  output [8:0]rd_data_count;
  output [8:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [8:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized5 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "32" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "32" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "14" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "13" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "4" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "4" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized13
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [31:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [31:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [3:0]data_count;
  output [3:0]rd_data_count;
  output [3:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = rd_rst_busy;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized6_51 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(rd_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "32" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "32" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "14" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "13" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "4" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "4" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized13__2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [31:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [31:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [3:0]data_count;
  output [3:0]rd_data_count;
  output [3:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = rd_rst_busy;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized6 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(rd_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "8" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "64" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "64" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "254" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "253" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "8" *) 
(* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "8" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) 
(* C_WR_DEPTH = "256" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized15
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [63:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [63:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [7:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized7 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "8" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "8" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "8" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "254" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "253" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "8" *) 
(* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "8" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) 
(* C_WR_DEPTH = "256" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized17
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [7:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [7:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [7:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized8 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "8" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "16" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "16" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "254" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "253" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "8" *) 
(* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "8" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) 
(* C_WR_DEPTH = "256" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized19
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [15:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [15:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [7:0]data_count;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized9 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "16" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "16" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "1" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "13" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "12" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "4" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "4" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized1__xdcDup__1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [15:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [15:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [3:0]data_count;
  output [3:0]rd_data_count;
  output [3:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized0__xdcDup__1 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rd_rst_busy),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "6" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "32" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "32" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "1" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "1" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "1" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "61" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "60" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "6" *) 
(* C_RD_DEPTH = "64" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "6" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "6" *) 
(* C_WR_DEPTH = "64" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "6" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized3
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [31:0]din;
  input wr_en;
  input rd_en;
  input [5:0]prog_empty_thresh;
  input [5:0]prog_empty_thresh_assert;
  input [5:0]prog_empty_thresh_negate;
  input [5:0]prog_full_thresh;
  input [5:0]prog_full_thresh_assert;
  input [5:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [31:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [5:0]data_count;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized1 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .\syncstages_ff_reg[0] (rd_rst_busy),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "64" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "64" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized5
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [63:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [63:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [9:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized2 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "12" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "64" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "64" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "4094" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "4093" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "12" *) 
(* C_RD_DEPTH = "4096" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "12" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "12" *) 
(* C_WR_DEPTH = "4096" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "12" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized7
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [63:0]din;
  input wr_en;
  input rd_en;
  input [11:0]prog_empty_thresh;
  input [11:0]prog_empty_thresh_assert;
  input [11:0]prog_empty_thresh_negate;
  input [11:0]prog_full_thresh;
  input [11:0]prog_full_thresh_assert;
  input [11:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [63:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [11:0]data_count;
  output [11:0]rd_data_count;
  output [11:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[11] = \<const0> ;
  assign rd_data_count[10] = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[11] = \<const0> ;
  assign wr_data_count[10] = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized3 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "12" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "8" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "8" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "4kx9" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "4094" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "4093" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "12" *) 
(* C_RD_DEPTH = "4096" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "12" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "12" *) 
(* C_WR_DEPTH = "4096" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "12" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2__parameterized9
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [7:0]din;
  input wr_en;
  input rd_en;
  input [11:0]prog_empty_thresh;
  input [11:0]prog_empty_thresh_assert;
  input [11:0]prog_empty_thresh_negate;
  input [11:0]prog_full_thresh;
  input [11:0]prog_full_thresh_assert;
  input [11:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [7:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [11:0]data_count;
  output [11:0]rd_data_count;
  output [11:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[11] = \<const0> ;
  assign rd_data_count[10] = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[11] = \<const0> ;
  assign wr_data_count[10] = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized4 inst_fifo_gen
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    rd_data_count,
    wr_data_count,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [63:0]dout;
  output empty;
  output full;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  input wr_clk;
  input rd_clk;
  input rst;
  input [63:0]din;
  input wr_en;
  input rd_en;

  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top \gconvfifo.rf 
       (.SS(\syncstages_ff_reg[0] ),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized0
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [15:0]dout;
  output empty;
  output full;
  input wr_clk;
  input rd_clk;
  input rst;
  input [15:0]din;
  input wr_en;
  input rd_en;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized0 \gconvfifo.rf 
       (.SS(\syncstages_ff_reg[0] ),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized0__xdcDup__1
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [15:0]dout;
  output empty;
  output full;
  input wr_clk;
  input rd_clk;
  input rst;
  input [15:0]din;
  input wr_en;
  input rd_en;

  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized0__xdcDup__1 \gconvfifo.rf 
       (.SS(\syncstages_ff_reg[0] ),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized1
   (\syncstages_ff_reg[0] ,
    wr_rst_busy,
    dout,
    empty,
    full,
    rd_data_count,
    wr_data_count,
    wr_clk,
    rd_clk,
    rst,
    din,
    wr_en,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output wr_rst_busy;
  output [31:0]dout;
  output empty;
  output full;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  input wr_clk;
  input rd_clk;
  input rst;
  input [31:0]din;
  input wr_en;
  input rd_en;

  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized1 \gconvfifo.rf 
       (.SS(\syncstages_ff_reg[0] ),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized2
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [9:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire clk;
  wire [9:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized2 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized3
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [11:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire clk;
  wire [11:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized3 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized4
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [11:0]data_count;
  output [7:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [7:0]din;
  input wr_en;

  wire clk;
  wire [11:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized4 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized5
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    rd_en,
    srst,
    clk,
    din,
    wr_en);
  output [8:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;
  input wr_en;

  wire clk;
  wire [8:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized5 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized6
   (dout,
    empty,
    full,
    data_count,
    wr_rst_reg_reg,
    srst,
    clk,
    din,
    rd_en,
    wr_en);
  output [31:0]dout;
  output empty;
  output full;
  output [3:0]data_count;
  output wr_rst_reg_reg;
  input srst;
  input clk;
  input [31:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized6 \gconvfifo.rf 
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized6_51
   (dout,
    empty,
    full,
    data_count,
    wr_rst_reg_reg,
    srst,
    clk,
    din,
    rd_en,
    wr_en);
  output [31:0]dout;
  output empty;
  output full;
  output [3:0]data_count;
  output wr_rst_reg_reg;
  input srst;
  input clk;
  input [31:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [3:0]data_count;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized6_52 \gconvfifo.rf 
       (.clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized7
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]data_count;
  output [63:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [63:0]din;

  wire clk;
  wire [7:0]data_count;
  wire [63:0]din;
  wire [63:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized7 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized8
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]data_count;
  output [7:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [7:0]din;

  wire clk;
  wire [7:0]data_count;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized8 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_v13_2_2_synth__parameterized9
   (data_count,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    wr_en,
    rd_en,
    srst,
    clk,
    din);
  output [7:0]data_count;
  output [15:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  input wr_en;
  input rd_en;
  input srst;
  input clk;
  input [15:0]din;

  wire clk;
  wire [7:0]data_count;
  wire [15:0]din;
  wire [15:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_fifo_generator_top__parameterized9 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_memory
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[7] ,
    Q,
    din,
    E);
  output ENA_dly_D;
  output [63:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [7:0]Q;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized0
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized1 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized0_75
   (ENA_dly_D,
    dout,
    POR_B,
    ENB_dly_D,
    wr_clk,
    rd_clk,
    ENB_I,
    ENA_I,
    ram_rstram_b,
    \gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d2_reg[3] ,
    din,
    E);
  output ENA_dly_D;
  output [15:0]dout;
  output POR_B;
  output ENB_dly_D;
  input wr_clk;
  input rd_clk;
  input ENB_I;
  input ENA_I;
  input ram_rstram_b;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gic0.gc0.count_d2_reg[3] ;
  input [15:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [15:0]din;
  wire [15:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gic0.gc0.count_d2_reg[3] ;
  wire ram_rstram_b;
  wire rd_clk;
  wire wr_clk;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized1_76 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_B(POR_B),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gic0.gc0.count_d2_reg[3] (\gic0.gc0.count_d2_reg[3] ),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized1
   (dout,
    POR_B,
    wr_clk,
    rd_clk,
    ram_rstram_b,
    Q,
    \gic0.gc0.count_d2_reg[5] ,
    din,
    E,
    SS,
    out,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg);
  output [31:0]dout;
  output POR_B;
  input wr_clk;
  input rd_clk;
  input ram_rstram_b;
  input [5:0]Q;
  input [5:0]\gic0.gc0.count_d2_reg[5] ;
  input [31:0]din;
  input [0:0]E;
  input [0:0]SS;
  input out;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;

  wire [0:0]E;
  wire POR_B;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [31:0]din;
  wire [31:0]dout;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized3 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .POR_B(POR_B),
        .Q(Q),
        .SS(SS),
        .din(din),
        .dout(dout),
        .\gic0.gc0.count_d2_reg[5] (\gic0.gc0.count_d2_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_rstram_b(ram_rstram_b),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized2
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    \gcc0.gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gc0.count_d1_reg[9] ;
  input [63:0]din;

  wire [0:0]E;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [9:0]\gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized5 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[9] (\gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized3
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [63:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [63:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized7 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized4
   (dout,
    clk,
    E,
    tmp_ram_rd_en,
    SS,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [7:0]dout;
  input clk;
  input [0:0]E;
  input tmp_ram_rd_en;
  input [0:0]SS;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [7:0]din;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized9 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized5
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[8] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [63:0]din;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized11 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized6
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized13 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized6_56
   (dout,
    clk,
    tmp_ram_rd_en,
    E,
    SS,
    \gc0.count_d1_reg[3] ,
    Q,
    din);
  output [31:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SS;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [31:0]din;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [31:0]din;
  wire [31:0]dout;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire tmp_ram_rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized13_59 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .tmp_ram_rd_en(tmp_ram_rd_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized7
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [63:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [63:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [63:0]din;
  wire [63:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized15 \gbm.gbmg.gbmga.ngecc.bmg 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized8
   (dout,
    clk,
    tmp_ram_rd_en,
    x_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [7:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [7:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized17 \gbm.gbmg.gbmga.ngecc.bmg 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_we_reg(x_we_reg));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_memory__parameterized9
   (dout,
    clk,
    tmp_ram_rd_en,
    x_bcnt_we_reg,
    SS,
    \gc0.count_d1_reg[7] ,
    Q,
    din);
  output [15:0]dout;
  input clk;
  input tmp_ram_rd_en;
  input [0:0]x_bcnt_we_reg;
  input [0:0]SS;
  input [7:0]\gc0.count_d1_reg[7] ;
  input [7:0]Q;
  input [15:0]din;

  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [15:0]din;
  wire [15:0]dout;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire tmp_ram_rd_en;
  wire [0:0]x_bcnt_we_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_blk_mem_gen_v8_4_1__parameterized19 \gbm.gbmg.gbmga.ngecc.bmg 
       (.Q(Q),
        .SS(SS),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .x_bcnt_we_reg(x_bcnt_we_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr
   (ram_empty_fb_i_reg,
    ram_full_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    Q,
    SR,
    ram_full_fb_i_reg,
    \gcc0.gc0.count_d1_reg[4] ,
    out,
    ram_empty_fb_i_reg_0,
    \gcc0.gc0.count_reg[4] ,
    ram_full_fb_i_reg_0,
    \gcc0.gc0.count_d1_reg[7] ,
    rd_en,
    \gcc0.gc0.count_reg[5] ,
    wr_en,
    E,
    clk);
  output ram_empty_fb_i_reg;
  output ram_full_i_reg;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [2:0]Q;
  input [0:0]SR;
  input ram_full_fb_i_reg;
  input \gcc0.gc0.count_d1_reg[4] ;
  input out;
  input ram_empty_fb_i_reg_0;
  input \gcc0.gc0.count_reg[4] ;
  input ram_full_fb_i_reg_0;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input rd_en;
  input [4:0]\gcc0.gc0.count_reg[5] ;
  input wr_en;
  input [0:0]E;
  input clk;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [2:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \gc0.count[7]_i_2_n_0 ;
  wire \gcc0.gc0.count_d1_reg[4] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_reg[4] ;
  wire [4:0]\gcc0.gc0.count_reg[5] ;
  wire out;
  wire [7:0]plusOp;
  wire ram_empty_fb_i_i_10_n_0;
  wire ram_empty_fb_i_i_11_n_0;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_fb_i_i_6_n_0;
  wire ram_empty_fb_i_i_7_n_0;
  wire ram_empty_fb_i_i_8_n_0;
  wire ram_empty_fb_i_i_9_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_i_5_n_0;
  wire ram_full_fb_i_i_6_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire [5:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair518" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair519" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair519" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair516" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(Q[0]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair517" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[0]),
        .I2(rd_pntr_plus1[5]),
        .I3(Q[1]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair517" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[1]),
        .I2(rd_pntr_plus1[5]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair516" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gc0.count[7]_i_2 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(\gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(Q[2]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFEFEFEFEFAAAAAAA)) 
    ram_empty_fb_i_i_1
       (.I0(SR),
        .I1(ram_empty_fb_i_i_2_n_0),
        .I2(ram_full_fb_i_reg),
        .I3(\gcc0.gc0.count_d1_reg[4] ),
        .I4(ram_empty_fb_i_i_5_n_0),
        .I5(out),
        .O(ram_empty_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair518" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_10
       (.I0(rd_pntr_plus1[3]),
        .I1(\gcc0.gc0.count_d1_reg[7] [3]),
        .I2(rd_pntr_plus1[0]),
        .I3(\gcc0.gc0.count_d1_reg[7] [0]),
        .O(ram_empty_fb_i_i_10_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_11
       (.I0(rd_pntr_plus1[5]),
        .I1(\gcc0.gc0.count_d1_reg[7] [5]),
        .I2(rd_pntr_plus1[2]),
        .I3(\gcc0.gc0.count_d1_reg[7] [2]),
        .O(ram_empty_fb_i_i_11_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    ram_empty_fb_i_i_2
       (.I0(ram_empty_fb_i_i_6_n_0),
        .I1(ram_empty_fb_i_i_7_n_0),
        .I2(ram_empty_fb_i_i_8_n_0),
        .I3(ram_empty_fb_i_i_9_n_0),
        .O(ram_empty_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'h80080000)) 
    ram_empty_fb_i_i_5
       (.I0(ram_empty_fb_i_i_10_n_0),
        .I1(ram_empty_fb_i_i_11_n_0),
        .I2(\gcc0.gc0.count_d1_reg[7] [1]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_en),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_6
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(\gcc0.gc0.count_d1_reg[7] [2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I3(\gcc0.gc0.count_d1_reg[7] [3]),
        .O(ram_empty_fb_i_i_6_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_7
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(\gcc0.gc0.count_d1_reg[7] [0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I3(\gcc0.gc0.count_d1_reg[7] [1]),
        .O(ram_empty_fb_i_i_7_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_8
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .I1(\gcc0.gc0.count_d1_reg[7] [6]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I3(\gcc0.gc0.count_d1_reg[7] [7]),
        .O(ram_empty_fb_i_i_8_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_9
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(\gcc0.gc0.count_d1_reg[7] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I3(\gcc0.gc0.count_d1_reg[7] [5]),
        .O(ram_empty_fb_i_i_9_n_0));
  LUT6 #(
    .INIT(64'h0000FF800000AA80)) 
    ram_full_fb_i_i_1
       (.I0(ram_empty_fb_i_reg_0),
        .I1(\gcc0.gc0.count_reg[4] ),
        .I2(ram_full_fb_i_i_4_n_0),
        .I3(ram_full_fb_i_reg_0),
        .I4(SR),
        .I5(ram_empty_fb_i_i_2_n_0),
        .O(ram_full_i_reg));
  LUT5 #(
    .INIT(32'h80080000)) 
    ram_full_fb_i_i_4
       (.I0(ram_full_fb_i_i_5_n_0),
        .I1(ram_full_fb_i_i_6_n_0),
        .I2(\gcc0.gc0.count_reg[5] [1]),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I4(wr_en),
        .O(ram_full_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_5
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I1(\gcc0.gc0.count_reg[5] [3]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I3(\gcc0.gc0.count_reg[5] [0]),
        .O(ram_full_fb_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_6
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I1(\gcc0.gc0.count_reg[5] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I3(\gcc0.gc0.count_reg[5] [2]),
        .O(ram_full_fb_i_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr_18
   (ram_empty_fb_i_reg,
    ram_full_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    Q,
    SR,
    ram_full_fb_i_reg,
    \gcc0.gc0.count_d1_reg[4] ,
    out,
    ram_empty_fb_i_reg_0,
    \gcc0.gc0.count_reg[4] ,
    ram_full_fb_i_reg_0,
    \gcc0.gc0.count_d1_reg[7] ,
    rd_en,
    \gcc0.gc0.count_reg[5] ,
    wr_en,
    E,
    clk);
  output ram_empty_fb_i_reg;
  output ram_full_i_reg;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [2:0]Q;
  input [0:0]SR;
  input ram_full_fb_i_reg;
  input \gcc0.gc0.count_d1_reg[4] ;
  input out;
  input ram_empty_fb_i_reg_0;
  input \gcc0.gc0.count_reg[4] ;
  input ram_full_fb_i_reg_0;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input rd_en;
  input [4:0]\gcc0.gc0.count_reg[5] ;
  input wr_en;
  input [0:0]E;
  input clk;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [2:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \gc0.count[7]_i_2_n_0 ;
  wire \gcc0.gc0.count_d1_reg[4] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_reg[4] ;
  wire [4:0]\gcc0.gc0.count_reg[5] ;
  wire out;
  wire [7:0]plusOp;
  wire ram_empty_fb_i_i_10_n_0;
  wire ram_empty_fb_i_i_11_n_0;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_fb_i_i_6_n_0;
  wire ram_empty_fb_i_i_7_n_0;
  wire ram_empty_fb_i_i_8_n_0;
  wire ram_empty_fb_i_i_9_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_i_5_n_0;
  wire ram_full_fb_i_i_6_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire [5:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair497" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair498" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair498" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair495" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(Q[0]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair496" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[0]),
        .I2(rd_pntr_plus1[5]),
        .I3(Q[1]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair496" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[1]),
        .I2(rd_pntr_plus1[5]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair495" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gc0.count[7]_i_2 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(\gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(Q[2]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFEFEFEFEFAAAAAAA)) 
    ram_empty_fb_i_i_1
       (.I0(SR),
        .I1(ram_empty_fb_i_i_2_n_0),
        .I2(ram_full_fb_i_reg),
        .I3(\gcc0.gc0.count_d1_reg[4] ),
        .I4(ram_empty_fb_i_i_5_n_0),
        .I5(out),
        .O(ram_empty_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair497" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_10
       (.I0(rd_pntr_plus1[3]),
        .I1(\gcc0.gc0.count_d1_reg[7] [3]),
        .I2(rd_pntr_plus1[0]),
        .I3(\gcc0.gc0.count_d1_reg[7] [0]),
        .O(ram_empty_fb_i_i_10_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_11
       (.I0(rd_pntr_plus1[5]),
        .I1(\gcc0.gc0.count_d1_reg[7] [5]),
        .I2(rd_pntr_plus1[2]),
        .I3(\gcc0.gc0.count_d1_reg[7] [2]),
        .O(ram_empty_fb_i_i_11_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    ram_empty_fb_i_i_2
       (.I0(ram_empty_fb_i_i_6_n_0),
        .I1(ram_empty_fb_i_i_7_n_0),
        .I2(ram_empty_fb_i_i_8_n_0),
        .I3(ram_empty_fb_i_i_9_n_0),
        .O(ram_empty_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'h80080000)) 
    ram_empty_fb_i_i_5
       (.I0(ram_empty_fb_i_i_10_n_0),
        .I1(ram_empty_fb_i_i_11_n_0),
        .I2(\gcc0.gc0.count_d1_reg[7] [1]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_en),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_6
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(\gcc0.gc0.count_d1_reg[7] [2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I3(\gcc0.gc0.count_d1_reg[7] [3]),
        .O(ram_empty_fb_i_i_6_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_7
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(\gcc0.gc0.count_d1_reg[7] [0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I3(\gcc0.gc0.count_d1_reg[7] [1]),
        .O(ram_empty_fb_i_i_7_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_8
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .I1(\gcc0.gc0.count_d1_reg[7] [6]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I3(\gcc0.gc0.count_d1_reg[7] [7]),
        .O(ram_empty_fb_i_i_8_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_9
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(\gcc0.gc0.count_d1_reg[7] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I3(\gcc0.gc0.count_d1_reg[7] [5]),
        .O(ram_empty_fb_i_i_9_n_0));
  LUT6 #(
    .INIT(64'h0000FF800000AA80)) 
    ram_full_fb_i_i_1
       (.I0(ram_empty_fb_i_reg_0),
        .I1(\gcc0.gc0.count_reg[4] ),
        .I2(ram_full_fb_i_i_4_n_0),
        .I3(ram_full_fb_i_reg_0),
        .I4(SR),
        .I5(ram_empty_fb_i_i_2_n_0),
        .O(ram_full_i_reg));
  LUT5 #(
    .INIT(32'h80080000)) 
    ram_full_fb_i_i_4
       (.I0(ram_full_fb_i_i_5_n_0),
        .I1(ram_full_fb_i_i_6_n_0),
        .I2(\gcc0.gc0.count_reg[5] [1]),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I4(wr_en),
        .O(ram_full_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_5
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I1(\gcc0.gc0.count_reg[5] [3]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I3(\gcc0.gc0.count_reg[5] [0]),
        .O(ram_full_fb_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_6
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I1(\gcc0.gc0.count_reg[5] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I3(\gcc0.gc0.count_reg[5] [2]),
        .O(ram_full_fb_i_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr_72
   (ram_empty_fb_i_reg,
    S,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    Q,
    WR_PNTR_RD,
    SS,
    E,
    rd_clk);
  output ram_empty_fb_i_reg;
  output [0:0]S;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  output [3:0]Q;
  input [4:0]WR_PNTR_RD;
  input [0:0]SS;
  input [0:0]E;
  input rd_clk;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]S;
  wire [0:0]SS;
  wire [4:0]WR_PNTR_RD;
  wire \gc0.count[7]_i_2_n_0 ;
  wire [7:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_i_8_n_0;
  wire rd_clk;
  wire [3:0]rd_pntr_plus1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp__0[1]));
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(Q[0]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(Q[1]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[2]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \gc0.count[7]_i_1 
       (.I0(Q[2]),
        .I1(\gc0.count[7]_i_2_n_0 ),
        .I2(Q[3]),
        .O(plusOp__0[7]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gc0.count[7]_i_2 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(Q[1]),
        .O(\gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [7]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(Q[3]),
        .R(SS));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [7]),
        .I1(WR_PNTR_RD[4]),
        .O(S));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_empty_i_i_4
       (.I0(WR_PNTR_RD[1]),
        .I1(rd_pntr_plus1[1]),
        .I2(WR_PNTR_RD[0]),
        .I3(rd_pntr_plus1[0]),
        .I4(ram_empty_i_i_8_n_0),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_8
       (.I0(rd_pntr_plus1[2]),
        .I1(WR_PNTR_RD[2]),
        .I2(rd_pntr_plus1[3]),
        .I3(WR_PNTR_RD[3]),
        .O(ram_empty_i_i_8_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr_8
   (ram_empty_fb_i_reg,
    ram_full_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    Q,
    SR,
    ram_full_fb_i_reg,
    \gcc0.gc0.count_d1_reg[4] ,
    out,
    ram_empty_fb_i_reg_0,
    \gcc0.gc0.count_reg[4] ,
    ram_full_fb_i_reg_0,
    \gcc0.gc0.count_d1_reg[7] ,
    rd_en,
    \gcc0.gc0.count_reg[5] ,
    wr_en,
    E,
    clk);
  output ram_empty_fb_i_reg;
  output ram_full_i_reg;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  output [2:0]Q;
  input [0:0]SR;
  input ram_full_fb_i_reg;
  input \gcc0.gc0.count_d1_reg[4] ;
  input out;
  input ram_empty_fb_i_reg_0;
  input \gcc0.gc0.count_reg[4] ;
  input ram_full_fb_i_reg_0;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input rd_en;
  input [4:0]\gcc0.gc0.count_reg[5] ;
  input wr_en;
  input [0:0]E;
  input clk;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [0:0]E;
  wire [2:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \gc0.count[7]_i_2_n_0 ;
  wire \gcc0.gc0.count_d1_reg[4] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_reg[4] ;
  wire [4:0]\gcc0.gc0.count_reg[5] ;
  wire out;
  wire [7:0]plusOp;
  wire ram_empty_fb_i_i_10_n_0;
  wire ram_empty_fb_i_i_11_n_0;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_fb_i_i_6_n_0;
  wire ram_empty_fb_i_i_7_n_0;
  wire ram_empty_fb_i_i_8_n_0;
  wire ram_empty_fb_i_i_9_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_i_5_n_0;
  wire ram_full_fb_i_i_6_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire [5:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair510" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair511" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair511" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair508" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(Q[0]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair509" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[0]),
        .I2(rd_pntr_plus1[5]),
        .I3(Q[1]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair509" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[7]_i_2_n_0 ),
        .I1(Q[1]),
        .I2(rd_pntr_plus1[5]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair508" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gc0.count[7]_i_2 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(\gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [7]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(Q[2]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFEFEFEFEFAAAAAAA)) 
    ram_empty_fb_i_i_1
       (.I0(SR),
        .I1(ram_empty_fb_i_i_2_n_0),
        .I2(ram_full_fb_i_reg),
        .I3(\gcc0.gc0.count_d1_reg[4] ),
        .I4(ram_empty_fb_i_i_5_n_0),
        .I5(out),
        .O(ram_empty_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair510" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_10
       (.I0(rd_pntr_plus1[3]),
        .I1(\gcc0.gc0.count_d1_reg[7] [3]),
        .I2(rd_pntr_plus1[0]),
        .I3(\gcc0.gc0.count_d1_reg[7] [0]),
        .O(ram_empty_fb_i_i_10_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_11
       (.I0(rd_pntr_plus1[5]),
        .I1(\gcc0.gc0.count_d1_reg[7] [5]),
        .I2(rd_pntr_plus1[2]),
        .I3(\gcc0.gc0.count_d1_reg[7] [2]),
        .O(ram_empty_fb_i_i_11_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    ram_empty_fb_i_i_2
       (.I0(ram_empty_fb_i_i_6_n_0),
        .I1(ram_empty_fb_i_i_7_n_0),
        .I2(ram_empty_fb_i_i_8_n_0),
        .I3(ram_empty_fb_i_i_9_n_0),
        .O(ram_empty_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'h80080000)) 
    ram_empty_fb_i_i_5
       (.I0(ram_empty_fb_i_i_10_n_0),
        .I1(ram_empty_fb_i_i_11_n_0),
        .I2(\gcc0.gc0.count_d1_reg[7] [1]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_en),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_6
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [2]),
        .I1(\gcc0.gc0.count_d1_reg[7] [2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [3]),
        .I3(\gcc0.gc0.count_d1_reg[7] [3]),
        .O(ram_empty_fb_i_i_6_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_7
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [0]),
        .I1(\gcc0.gc0.count_d1_reg[7] [0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [1]),
        .I3(\gcc0.gc0.count_d1_reg[7] [1]),
        .O(ram_empty_fb_i_i_7_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_8
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [6]),
        .I1(\gcc0.gc0.count_d1_reg[7] [6]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [7]),
        .I3(\gcc0.gc0.count_d1_reg[7] [7]),
        .O(ram_empty_fb_i_i_8_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_9
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [4]),
        .I1(\gcc0.gc0.count_d1_reg[7] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [5]),
        .I3(\gcc0.gc0.count_d1_reg[7] [5]),
        .O(ram_empty_fb_i_i_9_n_0));
  LUT6 #(
    .INIT(64'h0000FF800000AA80)) 
    ram_full_fb_i_i_1
       (.I0(ram_empty_fb_i_reg_0),
        .I1(\gcc0.gc0.count_reg[4] ),
        .I2(ram_full_fb_i_i_4_n_0),
        .I3(ram_full_fb_i_reg_0),
        .I4(SR),
        .I5(ram_empty_fb_i_i_2_n_0),
        .O(ram_full_i_reg));
  LUT5 #(
    .INIT(32'h80080000)) 
    ram_full_fb_i_i_4
       (.I0(ram_full_fb_i_i_5_n_0),
        .I1(ram_full_fb_i_i_6_n_0),
        .I2(\gcc0.gc0.count_reg[5] [1]),
        .I3(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [1]),
        .I4(wr_en),
        .O(ram_full_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_5
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [3]),
        .I1(\gcc0.gc0.count_reg[5] [3]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [0]),
        .I3(\gcc0.gc0.count_reg[5] [0]),
        .O(ram_full_fb_i_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_6
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [5]),
        .I1(\gcc0.gc0.count_reg[5] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram [2]),
        .I3(\gcc0.gc0.count_reg[5] [2]),
        .O(ram_full_fb_i_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0
   (ram_empty_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    wr_en,
    Q,
    ram_full_fb_i_reg,
    rd_en,
    SR,
    E,
    clk);
  output ram_empty_i_reg;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input wr_en;
  input [3:0]Q;
  input ram_full_fb_i_reg;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire [3:0]plusOp;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .O(plusOp[3]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  LUT6 #(
    .INIT(64'hC030401000000000)) 
    ram_empty_fb_i_i_3
       (.I0(wr_en),
        .I1(rd_pntr_plus1[3]),
        .I2(ram_empty_fb_i_i_5_n_0),
        .I3(Q[3]),
        .I4(ram_full_fb_i_reg),
        .I5(rd_en),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h8020080240100401)) 
    ram_empty_fb_i_i_5
       (.I0(rd_pntr_plus1[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[0]),
        .I4(rd_pntr_plus1[1]),
        .I5(Q[2]),
        .O(ram_empty_fb_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0_69
   (ram_empty_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    wr_en,
    Q,
    ram_full_fb_i_reg,
    rd_en,
    SR,
    E,
    clk);
  output ram_empty_i_reg;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input wr_en;
  input [3:0]Q;
  input ram_full_fb_i_reg;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire [3:0]plusOp;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .O(plusOp[3]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  LUT6 #(
    .INIT(64'hC030401000000000)) 
    ram_empty_fb_i_i_3
       (.I0(wr_en),
        .I1(rd_pntr_plus1[3]),
        .I2(ram_empty_fb_i_i_5_n_0),
        .I3(Q[3]),
        .I4(ram_full_fb_i_reg),
        .I5(rd_en),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h8020080240100401)) 
    ram_empty_fb_i_i_5
       (.I0(rd_pntr_plus1[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[0]),
        .I4(rd_pntr_plus1[1]),
        .I5(Q[2]),
        .O(ram_empty_fb_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0_71
   (ram_empty_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    Q,
    SS,
    ram_empty_fb_i_reg,
    \dest_out_bin_ff_reg[2] ,
    WR_PNTR_RD,
    E,
    rd_clk);
  output ram_empty_i_reg;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [3:0]Q;
  input [0:0]SS;
  input ram_empty_fb_i_reg;
  input \dest_out_bin_ff_reg[2] ;
  input [3:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire [3:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[2] ;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_reg;
  wire rd_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    ram_empty_i_i_1
       (.I0(SS),
        .I1(ram_empty_i_i_2_n_0),
        .I2(ram_empty_i_i_3_n_0),
        .I3(ram_empty_fb_i_reg),
        .I4(\dest_out_bin_ff_reg[2] ),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_2
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(WR_PNTR_RD[0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I3(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(WR_PNTR_RD[2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I3(WR_PNTR_RD[3]),
        .O(ram_empty_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0_85
   (ram_empty_i_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    Q,
    SS,
    ram_empty_fb_i_reg,
    \dest_out_bin_ff_reg[2] ,
    WR_PNTR_RD,
    E,
    rd_clk);
  output ram_empty_i_reg;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [3:0]Q;
  input [0:0]SS;
  input ram_empty_fb_i_reg;
  input \dest_out_bin_ff_reg[2] ;
  input [3:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire [3:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[2] ;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_reg;
  wire rd_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    ram_empty_i_i_1
       (.I0(SS),
        .I1(ram_empty_i_i_2_n_0),
        .I2(ram_empty_i_i_3_n_0),
        .I3(ram_empty_fb_i_reg),
        .I4(\dest_out_bin_ff_reg[2] ),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_2
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(WR_PNTR_RD[0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I3(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(WR_PNTR_RD[2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I3(WR_PNTR_RD[3]),
        .O(ram_empty_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized1
   (comp1,
    Q,
    WR_PNTR_RD,
    SS,
    E,
    rd_clk);
  output comp1;
  output [5:0]Q;
  input [5:0]WR_PNTR_RD;
  input [0:0]SS;
  input [0:0]E;
  input rd_clk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SS;
  wire [5:0]WR_PNTR_RD;
  wire comp1;
  wire [5:0]plusOp__0;
  wire ram_empty_i_i_6_n_0;
  wire ram_empty_i_i_7_n_0;
  wire rd_clk;
  wire [5:0]rd_pntr_plus1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(rd_pntr_plus1[4]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp__0[5]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(Q[5]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(rd_pntr_plus1[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SS));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    ram_empty_i_i_4
       (.I0(WR_PNTR_RD[1]),
        .I1(rd_pntr_plus1[1]),
        .I2(WR_PNTR_RD[0]),
        .I3(rd_pntr_plus1[0]),
        .I4(ram_empty_i_i_6_n_0),
        .I5(ram_empty_i_i_7_n_0),
        .O(comp1));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_6
       (.I0(rd_pntr_plus1[4]),
        .I1(WR_PNTR_RD[4]),
        .I2(rd_pntr_plus1[5]),
        .I3(WR_PNTR_RD[5]),
        .O(ram_empty_i_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_7
       (.I0(rd_pntr_plus1[2]),
        .I1(WR_PNTR_RD[2]),
        .I2(rd_pntr_plus1[3]),
        .I3(WR_PNTR_RD[3]),
        .O(ram_empty_i_i_7_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized2
   (v1_reg,
    Q,
    v1_reg_1,
    v1_reg_0,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_reg[9] ,
    SR,
    E,
    clk);
  output [4:0]v1_reg;
  output [9:0]Q;
  output [4:0]v1_reg_1;
  output [4:0]v1_reg_0;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gcc0.gc0.count_reg[9] ;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [9:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \gc0.count[9]_i_2_n_0 ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_reg[9] ;
  wire [9:0]plusOp;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire [9:0]rd_pntr_plus1;
  wire [4:0]v1_reg;
  wire [4:0]v1_reg_0;
  wire [4:0]v1_reg_1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(rd_pntr_plus1[4]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[9]_i_2_n_0 ),
        .I1(rd_pntr_plus1[6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[9]_i_2_n_0 ),
        .I1(rd_pntr_plus1[6]),
        .I2(rd_pntr_plus1[7]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[8]_i_1 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gc0.count[9]_i_2_n_0 ),
        .I2(rd_pntr_plus1[7]),
        .I3(rd_pntr_plus1[8]),
        .O(plusOp[8]));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[9]_i_1 
       (.I0(rd_pntr_plus1[7]),
        .I1(\gc0.count[9]_i_2_n_0 ),
        .I2(rd_pntr_plus1[6]),
        .I3(rd_pntr_plus1[8]),
        .I4(rd_pntr_plus1[9]),
        .O(plusOp[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gc0.count[9]_i_2 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[3]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[0]),
        .I4(rd_pntr_plus1[2]),
        .I5(rd_pntr_plus1[4]),
        .O(\gc0.count[9]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[9]),
        .Q(Q[9]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(rd_pntr_plus1[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(rd_pntr_plus1[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp[8]),
        .Q(rd_pntr_plus1[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp[9]),
        .Q(rd_pntr_plus1[9]),
        .R(SR));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(Q[0]),
        .I1(\gcc0.gc0.count_d1_reg[9] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc0.count_d1_reg[9] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(rd_pntr_plus1[0]),
        .I1(\gcc0.gc0.count_d1_reg[9] [0]),
        .I2(rd_pntr_plus1[1]),
        .I3(\gcc0.gc0.count_d1_reg[9] [1]),
        .O(v1_reg_1[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[0]),
        .I1(\gcc0.gc0.count_reg[9] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc0.count_reg[9] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[0]),
        .I1(\gcc0.gc0.count_d1_reg[9] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc0.count_d1_reg[9] [1]),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[2]),
        .I1(\gcc0.gc0.count_d1_reg[9] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc0.count_d1_reg[9] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[2]),
        .I1(\gcc0.gc0.count_d1_reg[9] [2]),
        .I2(rd_pntr_plus1[3]),
        .I3(\gcc0.gc0.count_d1_reg[9] [3]),
        .O(v1_reg_1[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gcc0.gc0.count_reg[9] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc0.count_reg[9] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[2]),
        .I1(\gcc0.gc0.count_d1_reg[9] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc0.count_d1_reg[9] [3]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[4]),
        .I1(\gcc0.gc0.count_d1_reg[9] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc0.count_d1_reg[9] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[4]),
        .I1(\gcc0.gc0.count_d1_reg[9] [4]),
        .I2(rd_pntr_plus1[5]),
        .I3(\gcc0.gc0.count_d1_reg[9] [5]),
        .O(v1_reg_1[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gcc0.gc0.count_reg[9] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc0.count_reg[9] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[4]),
        .I1(\gcc0.gc0.count_d1_reg[9] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc0.count_d1_reg[9] [5]),
        .O(ram_empty_i_reg_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count_d1_reg[9] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc0.count_d1_reg[9] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gcc0.gc0.count_d1_reg[9] [6]),
        .I2(rd_pntr_plus1[7]),
        .I3(\gcc0.gc0.count_d1_reg[9] [7]),
        .O(v1_reg_1[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count_reg[9] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc0.count_reg[9] [7]),
        .O(v1_reg_0[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count_d1_reg[9] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc0.count_d1_reg[9] [7]),
        .O(ram_empty_i_reg_2));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(Q[8]),
        .I1(\gcc0.gc0.count_d1_reg[9] [8]),
        .I2(Q[9]),
        .I3(\gcc0.gc0.count_d1_reg[9] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[8]),
        .I1(\gcc0.gc0.count_d1_reg[9] [8]),
        .I2(rd_pntr_plus1[9]),
        .I3(\gcc0.gc0.count_d1_reg[9] [9]),
        .O(v1_reg_1[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(Q[8]),
        .I1(\gcc0.gc0.count_reg[9] [8]),
        .I2(Q[9]),
        .I3(\gcc0.gc0.count_reg[9] [9]),
        .O(v1_reg_0[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(Q[8]),
        .I1(\gcc0.gc0.count_d1_reg[9] [8]),
        .I2(Q[9]),
        .I3(\gcc0.gc0.count_d1_reg[9] [9]),
        .O(ram_empty_i_reg_3));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized3
   (v1_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \gcc0.gc0.count_d1_reg[11] ,
    SR,
    E,
    clk);
  output [5:0]v1_reg;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [11:0]\gcc0.gc0.count_d1_reg[11] ;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [0:0]SR;
  wire clk;
  wire [11:0]\gcc0.gc0.count_d1_reg[11] ;
  wire [11:0]plusOp;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire [11:0]rd_pntr_plus1;
  wire [5:0]v1_reg;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:2]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_O_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[10]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[11]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(plusOp[10]),
        .Q(rd_pntr_plus1[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(plusOp[11]),
        .Q(rd_pntr_plus1[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(rd_pntr_plus1[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(rd_pntr_plus1[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp[8]),
        .Q(rd_pntr_plus1[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp[9]),
        .Q(rd_pntr_plus1[9]),
        .R(SR));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(\gcc0.gc0.count_d1_reg[11] [0]),
        .I3(\gcc0.gc0.count_d1_reg[11] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[2]),
        .I2(\gcc0.gc0.count_d1_reg[11] [2]),
        .I3(\gcc0.gc0.count_d1_reg[11] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[4]),
        .I2(\gcc0.gc0.count_d1_reg[11] [4]),
        .I3(\gcc0.gc0.count_d1_reg[11] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[7]),
        .I1(rd_pntr_plus1[6]),
        .I2(\gcc0.gc0.count_d1_reg[11] [6]),
        .I3(\gcc0.gc0.count_d1_reg[11] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[9]),
        .I1(rd_pntr_plus1[8]),
        .I2(\gcc0.gc0.count_d1_reg[11] [8]),
        .I3(\gcc0.gc0.count_d1_reg[11] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[11]),
        .I1(rd_pntr_plus1[10]),
        .I2(\gcc0.gc0.count_d1_reg[11] [10]),
        .I3(\gcc0.gc0.count_d1_reg[11] [11]),
        .O(v1_reg[5]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(rd_pntr_plus1[0]),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:1]),
        .S(rd_pntr_plus1[8:1]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:2],plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:3],plusOp[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,rd_pntr_plus1[11:9]}));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized3_40
   (v1_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \gcc0.gc0.count_d1_reg[11] ,
    SR,
    E,
    clk);
  output [5:0]v1_reg;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [11:0]\gcc0.gc0.count_d1_reg[11] ;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [0:0]SR;
  wire clk;
  wire [11:0]\gcc0.gc0.count_d1_reg[11] ;
  wire [11:0]plusOp;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire [11:0]rd_pntr_plus1;
  wire [5:0]v1_reg;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:2]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_O_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[10]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[11]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(plusOp[10]),
        .Q(rd_pntr_plus1[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(plusOp[11]),
        .Q(rd_pntr_plus1[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(rd_pntr_plus1[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(rd_pntr_plus1[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp[8]),
        .Q(rd_pntr_plus1[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp[9]),
        .Q(rd_pntr_plus1[9]),
        .R(SR));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(\gcc0.gc0.count_d1_reg[11] [0]),
        .I3(\gcc0.gc0.count_d1_reg[11] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[2]),
        .I2(\gcc0.gc0.count_d1_reg[11] [2]),
        .I3(\gcc0.gc0.count_d1_reg[11] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[4]),
        .I2(\gcc0.gc0.count_d1_reg[11] [4]),
        .I3(\gcc0.gc0.count_d1_reg[11] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[7]),
        .I1(rd_pntr_plus1[6]),
        .I2(\gcc0.gc0.count_d1_reg[11] [6]),
        .I3(\gcc0.gc0.count_d1_reg[11] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(rd_pntr_plus1[9]),
        .I1(rd_pntr_plus1[8]),
        .I2(\gcc0.gc0.count_d1_reg[11] [8]),
        .I3(\gcc0.gc0.count_d1_reg[11] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[11]),
        .I1(rd_pntr_plus1[10]),
        .I2(\gcc0.gc0.count_d1_reg[11] [10]),
        .I3(\gcc0.gc0.count_d1_reg[11] [11]),
        .O(v1_reg[5]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(rd_pntr_plus1[0]),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp[8:1]),
        .S(rd_pntr_plus1[8:1]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:2],plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:3],plusOp[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,rd_pntr_plus1[11:9]}));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized4
   (\gc0.count_d1_reg[8]_0 ,
    v1_reg,
    Q,
    v1_reg_1,
    v1_reg_0,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_reg[7] ,
    SR,
    E,
    clk);
  output [0:0]\gc0.count_d1_reg[8]_0 ;
  output [3:0]v1_reg;
  output [8:0]Q;
  output [3:0]v1_reg_1;
  output [3:0]v1_reg_0;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input [7:0]\gcc0.gc0.count_reg[7] ;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \gc0.count[8]_i_2_n_0 ;
  wire [0:0]\gc0.count_d1_reg[8]_0 ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire [7:0]\gcc0.gc0.count_reg[7] ;
  wire [8:0]plusOp;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire [7:0]rd_pntr_plus1;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire [3:0]v1_reg_1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(rd_pntr_plus1[4]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(rd_pntr_plus1[6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(rd_pntr_plus1[6]),
        .I2(rd_pntr_plus1[7]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[8]_i_1 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gc0.count[8]_i_2_n_0 ),
        .I2(rd_pntr_plus1[7]),
        .I3(\gc0.count_d1_reg[8]_0 ),
        .O(plusOp[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gc0.count[8]_i_2 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[3]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[0]),
        .I4(rd_pntr_plus1[2]),
        .I5(rd_pntr_plus1[4]),
        .O(\gc0.count[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_d1_reg[8]_0 ),
        .Q(Q[8]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(rd_pntr_plus1[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(rd_pntr_plus1[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp[8]),
        .Q(\gc0.count_d1_reg[8]_0 ),
        .R(SR));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(Q[0]),
        .I1(\gcc0.gc0.count_d1_reg[7] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc0.count_d1_reg[7] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(rd_pntr_plus1[0]),
        .I1(\gcc0.gc0.count_d1_reg[7] [0]),
        .I2(rd_pntr_plus1[1]),
        .I3(\gcc0.gc0.count_d1_reg[7] [1]),
        .O(v1_reg_1[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[0]),
        .I1(\gcc0.gc0.count_reg[7] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc0.count_reg[7] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[0]),
        .I1(\gcc0.gc0.count_d1_reg[7] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc0.count_d1_reg[7] [1]),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[2]),
        .I1(\gcc0.gc0.count_d1_reg[7] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc0.count_d1_reg[7] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[2]),
        .I1(\gcc0.gc0.count_d1_reg[7] [2]),
        .I2(rd_pntr_plus1[3]),
        .I3(\gcc0.gc0.count_d1_reg[7] [3]),
        .O(v1_reg_1[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gcc0.gc0.count_reg[7] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc0.count_reg[7] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[2]),
        .I1(\gcc0.gc0.count_d1_reg[7] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc0.count_d1_reg[7] [3]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[4]),
        .I1(\gcc0.gc0.count_d1_reg[7] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc0.count_d1_reg[7] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[4]),
        .I1(\gcc0.gc0.count_d1_reg[7] [4]),
        .I2(rd_pntr_plus1[5]),
        .I3(\gcc0.gc0.count_d1_reg[7] [5]),
        .O(v1_reg_1[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gcc0.gc0.count_reg[7] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc0.count_reg[7] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[4]),
        .I1(\gcc0.gc0.count_d1_reg[7] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc0.count_d1_reg[7] [5]),
        .O(ram_empty_i_reg_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count_d1_reg[7] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc0.count_d1_reg[7] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gcc0.gc0.count_d1_reg[7] [6]),
        .I2(rd_pntr_plus1[7]),
        .I3(\gcc0.gc0.count_d1_reg[7] [7]),
        .O(v1_reg_1[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count_reg[7] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc0.count_reg[7] [7]),
        .O(v1_reg_0[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count_d1_reg[7] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc0.count_d1_reg[7] [7]),
        .O(ram_empty_i_reg_2));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_dc_as
   (rd_data_count,
    WR_PNTR_RD,
    S,
    SS,
    rd_clk);
  output [7:0]rd_data_count;
  input [6:0]WR_PNTR_RD;
  input [7:0]S;
  input [0:0]SS;
  input rd_clk;

  wire [7:0]S;
  wire [0:0]SS;
  wire [6:0]WR_PNTR_RD;
  wire [7:0]minusOp;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_5;
  wire minusOp_carry_n_6;
  wire minusOp_carry_n_7;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire [7:3]NLW_minusOp_carry_CO_UNCONNECTED;

  CARRY8 minusOp_carry
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({NLW_minusOp_carry_CO_UNCONNECTED[7],minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3,NLW_minusOp_carry_CO_UNCONNECTED[3],minusOp_carry_n_5,minusOp_carry_n_6,minusOp_carry_n_7}),
        .DI({1'b0,WR_PNTR_RD}),
        .O(minusOp),
        .S(S));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[0]),
        .Q(rd_data_count[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[1]),
        .Q(rd_data_count[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[2]),
        .Q(rd_data_count[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[3]),
        .Q(rd_data_count[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[4]),
        .Q(rd_data_count[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[5]),
        .Q(rd_data_count[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[6]),
        .Q(rd_data_count[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[7]),
        .Q(rd_data_count[7]),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "rd_dc_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_dc_as__parameterized0
   (rd_data_count,
    WR_PNTR_RD,
    S,
    SS,
    rd_clk);
  output [5:0]rd_data_count;
  input [4:0]WR_PNTR_RD;
  input [5:0]S;
  input [0:0]SS;
  input rd_clk;

  wire [5:0]S;
  wire [0:0]SS;
  wire [4:0]WR_PNTR_RD;
  wire [5:0]minusOp;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_5;
  wire minusOp_carry_n_6;
  wire minusOp_carry_n_7;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire [7:3]NLW_minusOp_carry_CO_UNCONNECTED;
  wire [7:6]NLW_minusOp_carry_O_UNCONNECTED;

  CARRY8 minusOp_carry
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({NLW_minusOp_carry_CO_UNCONNECTED[7:5],minusOp_carry_n_3,NLW_minusOp_carry_CO_UNCONNECTED[3],minusOp_carry_n_5,minusOp_carry_n_6,minusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,WR_PNTR_RD}),
        .O({NLW_minusOp_carry_O_UNCONNECTED[7:6],minusOp}),
        .S({1'b0,1'b0,S}));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[0]),
        .Q(rd_data_count[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[1]),
        .Q(rd_data_count[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[2]),
        .Q(rd_data_count[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[3]),
        .Q(rd_data_count[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[4]),
        .Q(rd_data_count[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \rd_dc_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(minusOp[5]),
        .Q(rd_data_count[5]),
        .R(SS));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic
   (empty,
    out,
    ram_empty_fb_i_reg,
    Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    rd_data_count,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    rd_clk,
    WR_PNTR_RD,
    S,
    rd_en,
    SS);
  output empty;
  output out;
  output ram_empty_fb_i_reg;
  output [3:0]Q;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  output [7:0]rd_data_count;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input rd_clk;
  input [7:0]WR_PNTR_RD;
  input [6:0]S;
  input rd_en;
  input [0:0]SS;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [3:0]Q;
  wire [6:0]S;
  wire [0:0]SS;
  wire [7:0]WR_PNTR_RD;
  wire empty;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire out;
  wire p_8_out;
  wire ram_empty_fb_i_reg;
  wire rd_clk;
  wire [7:0]rd_data_count;
  wire rd_en;
  wire rpntr_n_1;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_dc_as \gras.grdc1.rdc 
       (.S({rpntr_n_1,S}),
        .SS(SS),
        .WR_PNTR_RD(WR_PNTR_RD[6:0]),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as \gras.rsts 
       (.E(p_8_out),
        .empty(empty),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(out),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr_72 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ),
        .E(p_8_out),
        .Q(Q),
        .S(rpntr_n_1),
        .SS(SS),
        .WR_PNTR_RD({WR_PNTR_RD[7],WR_PNTR_RD[3:0]}),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized0
   (empty,
    out,
    Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    rd_clk,
    SS,
    \dest_out_bin_ff_reg[2] ,
    rd_en,
    WR_PNTR_RD);
  output empty;
  output out;
  output [2:0]Q;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input rd_clk;
  input [0:0]SS;
  input \dest_out_bin_ff_reg[2] ;
  input rd_en;
  input [3:0]WR_PNTR_RD;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [2:0]Q;
  wire [0:0]SS;
  wire [3:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[2] ;
  wire empty;
  wire \gras.rsts_n_2 ;
  wire out;
  wire p_8_out;
  wire rd_clk;
  wire rd_en;
  wire [3:3]rd_pntr_plus1;
  wire rpntr_n_0;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as__parameterized0 \gras.rsts 
       (.E(p_8_out),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD(WR_PNTR_RD[3]),
        .empty(empty),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (rpntr_n_0),
        .out(out),
        .ram_empty_i_reg_0(\gras.rsts_n_2 ),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0_71 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(p_8_out),
        .Q({rd_pntr_plus1,Q}),
        .SS(SS),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\dest_out_bin_ff_reg[2] (\dest_out_bin_ff_reg[2] ),
        .ram_empty_fb_i_reg(\gras.rsts_n_2 ),
        .ram_empty_i_reg(rpntr_n_0),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized0_73
   (empty,
    out,
    Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    rd_clk,
    SS,
    \dest_out_bin_ff_reg[2] ,
    rd_en,
    WR_PNTR_RD);
  output empty;
  output out;
  output [2:0]Q;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input rd_clk;
  input [0:0]SS;
  input \dest_out_bin_ff_reg[2] ;
  input rd_en;
  input [3:0]WR_PNTR_RD;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [2:0]Q;
  wire [0:0]SS;
  wire [3:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[2] ;
  wire empty;
  wire \gras.rsts_n_2 ;
  wire out;
  wire p_8_out;
  wire rd_clk;
  wire rd_en;
  wire [3:3]rd_pntr_plus1;
  wire rpntr_n_0;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as__parameterized0_84 \gras.rsts 
       (.E(p_8_out),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD(WR_PNTR_RD[3]),
        .empty(empty),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (rpntr_n_0),
        .out(out),
        .ram_empty_i_reg_0(\gras.rsts_n_2 ),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0_85 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(p_8_out),
        .Q({rd_pntr_plus1,Q}),
        .SS(SS),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\dest_out_bin_ff_reg[2] (\dest_out_bin_ff_reg[2] ),
        .ram_empty_fb_i_reg(\gras.rsts_n_2 ),
        .ram_empty_i_reg(rpntr_n_0),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized1
   (empty,
    out,
    E,
    comp1,
    Q,
    rd_data_count,
    WR_PNTR_RD,
    S,
    SS,
    \dest_out_bin_ff_reg[0] ,
    rd_clk,
    rd_en);
  output empty;
  output out;
  output [0:0]E;
  output comp1;
  output [5:0]Q;
  output [5:0]rd_data_count;
  input [5:0]WR_PNTR_RD;
  input [5:0]S;
  input [0:0]SS;
  input \dest_out_bin_ff_reg[0] ;
  input rd_clk;
  input rd_en;

  wire [0:0]E;
  wire [5:0]Q;
  wire [5:0]S;
  wire [0:0]SS;
  wire [5:0]WR_PNTR_RD;
  wire comp1;
  wire \dest_out_bin_ff_reg[0] ;
  wire empty;
  wire out;
  wire rd_clk;
  wire [5:0]rd_data_count;
  wire rd_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_dc_as__parameterized0 \gras.grdc1.rdc 
       (.S(S),
        .SS(SS),
        .WR_PNTR_RD(WR_PNTR_RD[4:0]),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as__parameterized1 \gras.rsts 
       (.E(E),
        .SS(SS),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .empty(empty),
        .out(out),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized1 rpntr
       (.E(E),
        .Q(Q),
        .SS(SS),
        .WR_PNTR_RD(WR_PNTR_RD),
        .comp1(comp1),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized2
   (out,
    empty,
    Q,
    tmp_ram_rd_en,
    \gc0.count_reg[9] ,
    v1_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    v1_reg_0,
    clk,
    rd_en,
    SR,
    E,
    wr_rst_reg_reg,
    srst,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_reg[9] ,
    ram_full_fb_i_reg);
  output out;
  output empty;
  output [9:0]Q;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_reg[9] ;
  output [4:0]v1_reg;
  output [9:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  output [4:0]v1_reg_0;
  input clk;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input wr_rst_reg_reg;
  input srst;
  input [9:0]\gcc0.gc0.count_d1_reg[9] ;
  input [9:0]\gcc0.gc0.count_reg[9] ;
  input [0:0]ram_full_fb_i_reg;

  wire [9:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [9:0]Q;
  wire [0:0]SR;
  wire [4:0]\c2/v1_reg ;
  wire clk;
  wire empty;
  wire [0:0]\gc0.count_reg[9] ;
  wire [9:0]\gcc0.gc0.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc0.count_reg[9] ;
  wire out;
  wire [0:0]ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_25;
  wire rpntr_n_26;
  wire rpntr_n_27;
  wire rpntr_n_28;
  wire rpntr_n_29;
  wire srst;
  wire tmp_ram_rd_en;
  wire [4:0]v1_reg;
  wire [4:0]v1_reg_0;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss \grss.gdc.dc 
       (.Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss \grss.rsts 
       (.E(E),
        .SR(SR),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[0] (rpntr_n_25),
        .\gc0.count_d1_reg[2] (rpntr_n_26),
        .\gc0.count_d1_reg[4] (rpntr_n_27),
        .\gc0.count_d1_reg[6] (rpntr_n_28),
        .\gc0.count_d1_reg[8] (rpntr_n_29),
        .\gc0.count_reg[9] (\gc0.count_reg[9] ),
        .out(out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\c2/v1_reg ),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized2 rpntr
       (.E(\gc0.count_reg[9] ),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .SR(SR),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .\gcc0.gc0.count_reg[9] (\gcc0.gc0.count_reg[9] ),
        .ram_empty_i_reg(rpntr_n_25),
        .ram_empty_i_reg_0(rpntr_n_26),
        .ram_empty_i_reg_1(rpntr_n_27),
        .ram_empty_i_reg_2(rpntr_n_28),
        .ram_empty_i_reg_3(rpntr_n_29),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .v1_reg_1(\c2/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized3
   (out,
    empty,
    Q,
    tmp_ram_rd_en,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \gcc0.gc0.count_d1_reg[1] ,
    \gcc0.gc0.count_d1_reg[3] ,
    \gcc0.gc0.count_d1_reg[5] ,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_d1_reg[11] ,
    clk,
    rd_en,
    srst,
    wr_rst_reg_reg,
    ram_full_fb_i_reg,
    wr_en,
    \gcc0.gc0.count_d1_reg[11]_0 ,
    SR);
  output out;
  output empty;
  output [11:0]Q;
  output tmp_ram_rd_en;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input \gcc0.gc0.count_d1_reg[1] ;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gcc0.gc0.count_d1_reg[5] ;
  input \gcc0.gc0.count_d1_reg[7] ;
  input \gcc0.gc0.count_d1_reg[9] ;
  input \gcc0.gc0.count_d1_reg[11] ;
  input clk;
  input rd_en;
  input srst;
  input wr_rst_reg_reg;
  input ram_full_fb_i_reg;
  input wr_en;
  input [11:0]\gcc0.gc0.count_d1_reg[11]_0 ;
  input [0:0]SR;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [11:0]Q;
  wire [0:0]SR;
  wire [5:0]\c2/v1_reg ;
  wire clk;
  wire cntr_en;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[11] ;
  wire [11:0]\gcc0.gc0.count_d1_reg[11]_0 ;
  wire \gcc0.gc0.count_d1_reg[1] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[5] ;
  wire \gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[9] ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized0 \grss.gdc.dc 
       (.E(cntr_en),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized0 \grss.rsts 
       (.E(cntr_en),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[11] (p_7_out),
        .\gcc0.gc0.count_d1_reg[11] (\gcc0.gc0.count_d1_reg[11] ),
        .\gcc0.gc0.count_d1_reg[1] (\gcc0.gc0.count_d1_reg[1] ),
        .\gcc0.gc0.count_d1_reg[3] (\gcc0.gc0.count_d1_reg[3] ),
        .\gcc0.gc0.count_d1_reg[5] (\gcc0.gc0.count_d1_reg[5] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\c2/v1_reg ),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized3 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .E(p_7_out),
        .SR(SR),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[11] (\gcc0.gc0.count_d1_reg[11]_0 ),
        .v1_reg(\c2/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized3_30
   (out,
    empty,
    Q,
    tmp_ram_rd_en,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \gcc0.gc0.count_d1_reg[1] ,
    \gcc0.gc0.count_d1_reg[3] ,
    \gcc0.gc0.count_d1_reg[5] ,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_d1_reg[11] ,
    clk,
    rd_en,
    srst,
    wr_rst_reg_reg,
    ram_full_fb_i_reg,
    wr_en,
    \gcc0.gc0.count_d1_reg[11]_0 ,
    SR);
  output out;
  output empty;
  output [11:0]Q;
  output tmp_ram_rd_en;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input \gcc0.gc0.count_d1_reg[1] ;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gcc0.gc0.count_d1_reg[5] ;
  input \gcc0.gc0.count_d1_reg[7] ;
  input \gcc0.gc0.count_d1_reg[9] ;
  input \gcc0.gc0.count_d1_reg[11] ;
  input clk;
  input rd_en;
  input srst;
  input wr_rst_reg_reg;
  input ram_full_fb_i_reg;
  input wr_en;
  input [11:0]\gcc0.gc0.count_d1_reg[11]_0 ;
  input [0:0]SR;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [11:0]Q;
  wire [0:0]SR;
  wire [5:0]\c2/v1_reg ;
  wire clk;
  wire cntr_en;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[11] ;
  wire [11:0]\gcc0.gc0.count_d1_reg[11]_0 ;
  wire \gcc0.gc0.count_d1_reg[1] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[5] ;
  wire \gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[9] ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized0_38 \grss.gdc.dc 
       (.E(cntr_en),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized0_39 \grss.rsts 
       (.E(cntr_en),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[11] (p_7_out),
        .\gcc0.gc0.count_d1_reg[11] (\gcc0.gc0.count_d1_reg[11] ),
        .\gcc0.gc0.count_d1_reg[1] (\gcc0.gc0.count_d1_reg[1] ),
        .\gcc0.gc0.count_d1_reg[3] (\gcc0.gc0.count_d1_reg[3] ),
        .\gcc0.gc0.count_d1_reg[5] (\gcc0.gc0.count_d1_reg[5] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\c2/v1_reg ),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized3_40 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .E(p_7_out),
        .SR(SR),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[11] (\gcc0.gc0.count_d1_reg[11]_0 ),
        .v1_reg(\c2/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized4
   (out,
    empty,
    Q,
    tmp_ram_rd_en,
    \gc0.count_reg[8] ,
    \gc0.count_d1_reg[8] ,
    v1_reg,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    v1_reg_0,
    \gcc0.gc0.count_d1_reg[8] ,
    \gcc0.gc0.count_d1_reg[8]_0 ,
    clk,
    rd_en,
    SR,
    E,
    wr_rst_reg_reg,
    srst,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_reg[7] ,
    ram_full_fb_i_reg);
  output out;
  output empty;
  output [8:0]Q;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_reg[8] ;
  output [0:0]\gc0.count_d1_reg[8] ;
  output [3:0]v1_reg;
  output [8:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  output [3:0]v1_reg_0;
  input \gcc0.gc0.count_d1_reg[8] ;
  input \gcc0.gc0.count_d1_reg[8]_0 ;
  input clk;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input wr_rst_reg_reg;
  input srst;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input [7:0]\gcc0.gc0.count_reg[7] ;
  input [0:0]ram_full_fb_i_reg;

  wire [8:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SR;
  wire [3:0]\c2/v1_reg ;
  wire clk;
  wire empty;
  wire [0:0]\gc0.count_d1_reg[8] ;
  wire [0:0]\gc0.count_reg[8] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[8] ;
  wire \gcc0.gc0.count_d1_reg[8]_0 ;
  wire [7:0]\gcc0.gc0.count_reg[7] ;
  wire out;
  wire [0:0]ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_22;
  wire rpntr_n_23;
  wire rpntr_n_24;
  wire rpntr_n_25;
  wire srst;
  wire tmp_ram_rd_en;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized1 \grss.gdc.dc 
       (.Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized1 \grss.rsts 
       (.E(E),
        .SR(SR),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[0] (rpntr_n_22),
        .\gc0.count_d1_reg[2] (rpntr_n_23),
        .\gc0.count_d1_reg[4] (rpntr_n_24),
        .\gc0.count_d1_reg[6] (rpntr_n_25),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .\gcc0.gc0.count_d1_reg[8] (\gcc0.gc0.count_d1_reg[8] ),
        .\gcc0.gc0.count_d1_reg[8]_0 (\gcc0.gc0.count_d1_reg[8]_0 ),
        .out(out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\c2/v1_reg ),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized4 rpntr
       (.E(\gc0.count_reg[8] ),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ),
        .SR(SR),
        .clk(clk),
        .\gc0.count_d1_reg[8]_0 (\gc0.count_d1_reg[8] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_reg[7] (\gcc0.gc0.count_reg[7] ),
        .ram_empty_i_reg(rpntr_n_22),
        .ram_empty_i_reg_0(rpntr_n_23),
        .ram_empty_i_reg_1(rpntr_n_24),
        .ram_empty_i_reg_2(rpntr_n_25),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .v1_reg_1(\c2/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized5
   (out,
    empty,
    \count_reg[3] ,
    tmp_ram_rd_en,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    clk,
    srst,
    \gcc0.gc0.count_d1_reg[3] ,
    wr_rst_reg_reg,
    wr_en,
    Q,
    ram_full_fb_i_reg,
    rd_en,
    SR);
  output out;
  output empty;
  output [3:0]\count_reg[3] ;
  output tmp_ram_rd_en;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input clk;
  input srst;
  input \gcc0.gc0.count_d1_reg[3] ;
  input wr_rst_reg_reg;
  input wr_en;
  input [3:0]Q;
  input ram_full_fb_i_reg;
  input rd_en;
  input [0:0]SR;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire cntr_en__0;
  wire [3:0]\count_reg[3] ;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_0;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized2 \grss.gdc.dc 
       (.E(cntr_en__0),
        .Q(\count_reg[3] ),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized2 \grss.rsts 
       (.E(cntr_en__0),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[3] (p_7_out),
        .\gc0.count_reg[3] (rpntr_n_0),
        .\gcc0.gc0.count_d1_reg[3] (\gcc0.gc0.count_d1_reg[3] ),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(p_7_out),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .ram_empty_i_reg(rpntr_n_0),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized5_54
   (out,
    empty,
    \count_reg[3] ,
    tmp_ram_rd_en,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    clk,
    srst,
    \gcc0.gc0.count_d1_reg[3] ,
    wr_rst_reg_reg,
    wr_en,
    Q,
    ram_full_fb_i_reg,
    rd_en,
    SR);
  output out;
  output empty;
  output [3:0]\count_reg[3] ;
  output tmp_ram_rd_en;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input clk;
  input srst;
  input \gcc0.gc0.count_d1_reg[3] ;
  input wr_rst_reg_reg;
  input wr_en;
  input [3:0]Q;
  input ram_full_fb_i_reg;
  input rd_en;
  input [0:0]SR;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire cntr_en__0;
  wire [3:0]\count_reg[3] ;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_0;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized2_67 \grss.gdc.dc 
       (.E(cntr_en__0),
        .Q(\count_reg[3] ),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized2_68 \grss.rsts 
       (.E(cntr_en__0),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[3] (p_7_out),
        .\gc0.count_reg[3] (rpntr_n_0),
        .\gcc0.gc0.count_d1_reg[3] (\gcc0.gc0.count_d1_reg[3] ),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr__parameterized0_69 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(p_7_out),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .ram_empty_i_reg(rpntr_n_0),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized6
   (out,
    empty,
    Q,
    ram_full_i_reg,
    \gc0.count_d1_reg[7] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    clk,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    \gcc0.gc0.count_d1_reg[4] ,
    \gcc0.gc0.count_reg[4] ,
    ram_full_fb_i_reg_0,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_reg[5] ,
    wr_en,
    E);
  output out;
  output empty;
  output [7:0]Q;
  output ram_full_i_reg;
  output [2:0]\gc0.count_d1_reg[7] ;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input clk;
  input rd_en;
  input [0:0]SR;
  input ram_full_fb_i_reg;
  input \gcc0.gc0.count_d1_reg[4] ;
  input \gcc0.gc0.count_reg[4] ;
  input ram_full_fb_i_reg_0;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input [4:0]\gcc0.gc0.count_reg[5] ;
  input wr_en;
  input [0:0]E;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire empty;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[4] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_reg[4] ;
  wire [4:0]\gcc0.gc0.count_reg[5] ;
  wire \grss.rsts_n_3 ;
  wire \grss.rsts_n_4 ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire rpntr_n_0;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized3 \grss.gdc.dc 
       (.DI(\grss.rsts_n_4 ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized3 \grss.rsts 
       (.DI(\grss.rsts_n_4 ),
        .E(p_7_out),
        .clk(clk),
        .empty(empty),
        .out(out),
        .ram_empty_fb_i_reg_0(rpntr_n_0),
        .ram_full_i_reg(\grss.rsts_n_3 ),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(p_7_out),
        .Q(\gc0.count_d1_reg[7] ),
        .SR(SR),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[4] (\gcc0.gc0.count_d1_reg[4] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_reg[4] (\gcc0.gc0.count_reg[4] ),
        .\gcc0.gc0.count_reg[5] (\gcc0.gc0.count_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(\grss.rsts_n_3 ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg_0),
        .ram_full_i_reg(ram_full_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized6_0
   (out,
    empty,
    Q,
    ram_full_i_reg,
    \gc0.count_d1_reg[7] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,
    clk,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    \gcc0.gc0.count_d1_reg[4] ,
    \gcc0.gc0.count_reg[4] ,
    ram_full_fb_i_reg_0,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_reg[5] ,
    wr_en,
    E);
  output out;
  output empty;
  output [7:0]Q;
  output ram_full_i_reg;
  output [2:0]\gc0.count_d1_reg[7] ;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  input clk;
  input rd_en;
  input [0:0]SR;
  input ram_full_fb_i_reg;
  input \gcc0.gc0.count_d1_reg[4] ;
  input \gcc0.gc0.count_reg[4] ;
  input ram_full_fb_i_reg_0;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input [4:0]\gcc0.gc0.count_reg[5] ;
  input wr_en;
  input [0:0]E;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire empty;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[4] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_reg[4] ;
  wire [4:0]\gcc0.gc0.count_reg[5] ;
  wire \grss.rsts_n_3 ;
  wire \grss.rsts_n_4 ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire rpntr_n_0;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized3_6 \grss.gdc.dc 
       (.DI(\grss.rsts_n_4 ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized3_7 \grss.rsts 
       (.DI(\grss.rsts_n_4 ),
        .E(p_7_out),
        .clk(clk),
        .empty(empty),
        .out(out),
        .ram_empty_fb_i_reg_0(rpntr_n_0),
        .ram_full_i_reg(\grss.rsts_n_3 ),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr_8 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ),
        .E(p_7_out),
        .Q(\gc0.count_d1_reg[7] ),
        .SR(SR),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[4] (\gcc0.gc0.count_d1_reg[4] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_reg[4] (\gcc0.gc0.count_reg[4] ),
        .\gcc0.gc0.count_reg[5] (\gcc0.gc0.count_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(\grss.rsts_n_3 ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg_0),
        .ram_full_i_reg(ram_full_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_logic__parameterized6_10
   (out,
    empty,
    Q,
    ram_full_i_reg,
    \gc0.count_d1_reg[7] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    clk,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    \gcc0.gc0.count_d1_reg[4] ,
    \gcc0.gc0.count_reg[4] ,
    ram_full_fb_i_reg_0,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_reg[5] ,
    wr_en,
    E);
  output out;
  output empty;
  output [7:0]Q;
  output ram_full_i_reg;
  output [2:0]\gc0.count_d1_reg[7] ;
  output [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input clk;
  input rd_en;
  input [0:0]SR;
  input ram_full_fb_i_reg;
  input \gcc0.gc0.count_d1_reg[4] ;
  input \gcc0.gc0.count_reg[4] ;
  input ram_full_fb_i_reg_0;
  input [7:0]\gcc0.gc0.count_d1_reg[7] ;
  input [4:0]\gcc0.gc0.count_reg[5] ;
  input wr_en;
  input [0:0]E;

  wire [7:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire empty;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[4] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_reg[4] ;
  wire [4:0]\gcc0.gc0.count_reg[5] ;
  wire \grss.rsts_n_3 ;
  wire \grss.rsts_n_4 ;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_reg;
  wire rd_en;
  wire rpntr_n_0;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_dc_ss__parameterized3_16 \grss.gdc.dc 
       (.DI(\grss.rsts_n_4 ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .clk(clk),
        .out(out),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized3_17 \grss.rsts 
       (.DI(\grss.rsts_n_4 ),
        .E(p_7_out),
        .clk(clk),
        .empty(empty),
        .out(out),
        .ram_empty_fb_i_reg_0(rpntr_n_0),
        .ram_full_i_reg(\grss.rsts_n_3 ),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_rd_bin_cntr_18 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(p_7_out),
        .Q(\gc0.count_d1_reg[7] ),
        .SR(SR),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[4] (\gcc0.gc0.count_d1_reg[4] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_reg[4] (\gcc0.gc0.count_reg[4] ),
        .\gcc0.gc0.count_reg[5] (\gcc0.gc0.count_reg[5] ),
        .out(out),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(\grss.rsts_n_3 ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg_0),
        .ram_full_i_reg(ram_full_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as
   (empty,
    out,
    E,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    rd_clk,
    rd_en);
  output empty;
  output out;
  output [0:0]E;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input rd_clk;
  input rd_en;

  wire [0:0]E;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as__parameterized0
   (empty,
    out,
    ram_empty_i_reg_0,
    E,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    rd_clk,
    rd_en,
    Q,
    WR_PNTR_RD);
  output empty;
  output out;
  output ram_empty_i_reg_0;
  output [0:0]E;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input rd_clk;
  input rd_en;
  input [0:0]Q;
  input [0:0]WR_PNTR_RD;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_empty_i_reg_0;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[3]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_empty_i_i_4
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(Q),
        .I3(WR_PNTR_RD),
        .O(ram_empty_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as__parameterized0_84
   (empty,
    out,
    ram_empty_i_reg_0,
    E,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    rd_clk,
    rd_en,
    Q,
    WR_PNTR_RD);
  output empty;
  output out;
  output ram_empty_i_reg_0;
  output [0:0]E;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input rd_clk;
  input rd_en;
  input [0:0]Q;
  input [0:0]WR_PNTR_RD;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_empty_i_reg_0;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[3]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_empty_i_i_4
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(Q),
        .I3(WR_PNTR_RD),
        .O(ram_empty_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_as__parameterized1
   (empty,
    out,
    E,
    SS,
    \dest_out_bin_ff_reg[0] ,
    rd_clk,
    rd_en);
  output empty;
  output out;
  output [0:0]E;
  input [0:0]SS;
  input \dest_out_bin_ff_reg[0] ;
  input rd_clk;
  input rd_en;

  wire [0:0]E;
  wire [0:0]SS;
  wire \dest_out_bin_ff_reg[0] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[5]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[0] ),
        .Q(ram_empty_fb_i),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[0] ),
        .Q(ram_empty_i),
        .S(SS));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss
   (out,
    empty,
    tmp_ram_rd_en,
    \gc0.count_reg[9] ,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[6] ,
    \gc0.count_d1_reg[8] ,
    v1_reg,
    clk,
    SR,
    E,
    rd_en,
    wr_rst_reg_reg,
    srst);
  output out;
  output empty;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_reg[9] ;
  input \gc0.count_d1_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input \gc0.count_d1_reg[4] ;
  input \gc0.count_d1_reg[6] ;
  input \gc0.count_d1_reg[8] ;
  input [4:0]v1_reg;
  input clk;
  input [0:0]SR;
  input [0:0]E;
  input rd_en;
  input wr_rst_reg_reg;
  input srst;

  wire [0:0]E;
  wire [0:0]SR;
  wire c1_n_0;
  wire clk;
  wire comp1;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[6] ;
  wire \gc0.count_d1_reg[8] ;
  wire [0:0]\gc0.count_reg[9] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire [4:0]v1_reg;
  wire wr_rst_reg_reg;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hFFF4)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_2 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(wr_rst_reg_reg),
        .I3(srst),
        .O(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2_23 c1
       (.E(E),
        .SR(SR),
        .comp1(comp1),
        .\gc0.count_d1_reg[0] (\gc0.count_d1_reg[0] ),
        .\gc0.count_d1_reg[2] (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gc0.count_d1_reg[6] (\gc0.count_d1_reg[6] ),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .out(ram_empty_fb_i),
        .ram_empty_i_reg(c1_n_0),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2_24 c2
       (.comp1(comp1),
        .v1_reg(v1_reg));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[9]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(\gc0.count_reg[9] ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized0
   (out,
    empty,
    E,
    tmp_ram_rd_en,
    \gc0.count_d1_reg[11] ,
    \gcc0.gc0.count_d1_reg[1] ,
    \gcc0.gc0.count_d1_reg[3] ,
    \gcc0.gc0.count_d1_reg[5] ,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_d1_reg[11] ,
    v1_reg,
    clk,
    srst,
    wr_rst_reg_reg,
    rd_en,
    ram_full_fb_i_reg,
    wr_en);
  output out;
  output empty;
  output [0:0]E;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_d1_reg[11] ;
  input \gcc0.gc0.count_d1_reg[1] ;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gcc0.gc0.count_d1_reg[5] ;
  input \gcc0.gc0.count_d1_reg[7] ;
  input \gcc0.gc0.count_d1_reg[9] ;
  input \gcc0.gc0.count_d1_reg[11] ;
  input [5:0]v1_reg;
  input clk;
  input srst;
  input wr_rst_reg_reg;
  input rd_en;
  input ram_full_fb_i_reg;
  input wr_en;

  wire [0:0]E;
  wire c2_n_0;
  wire clk;
  wire comp0;
  wire [0:0]\gc0.count_d1_reg[11] ;
  wire \gcc0.gc0.count_d1_reg[11] ;
  wire \gcc0.gc0.count_d1_reg[1] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[5] ;
  wire \gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[9] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire [5:0]v1_reg;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hFFAE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_2 
       (.I0(srst),
        .I1(rd_en),
        .I2(ram_empty_fb_i),
        .I3(wr_rst_reg_reg),
        .O(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_28 c1
       (.comp0(comp0),
        .\gcc0.gc0.count_d1_reg[11] (\gcc0.gc0.count_d1_reg[11] ),
        .\gcc0.gc0.count_d1_reg[1] (\gcc0.gc0.count_d1_reg[1] ),
        .\gcc0.gc0.count_d1_reg[3] (\gcc0.gc0.count_d1_reg[3] ),
        .\gcc0.gc0.count_d1_reg[5] (\gcc0.gc0.count_d1_reg[5] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_29 c2
       (.comp0(comp0),
        .out(ram_empty_fb_i),
        .ram_empty_i_reg(c2_n_0),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg(v1_reg),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  LUT4 #(
    .INIT(16'h4B44)) 
    \count[11]_i_1 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(ram_full_fb_i_reg),
        .I3(wr_en),
        .O(E));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[11]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(\gc0.count_d1_reg[11] ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized0_39
   (out,
    empty,
    E,
    tmp_ram_rd_en,
    \gc0.count_d1_reg[11] ,
    \gcc0.gc0.count_d1_reg[1] ,
    \gcc0.gc0.count_d1_reg[3] ,
    \gcc0.gc0.count_d1_reg[5] ,
    \gcc0.gc0.count_d1_reg[7] ,
    \gcc0.gc0.count_d1_reg[9] ,
    \gcc0.gc0.count_d1_reg[11] ,
    v1_reg,
    clk,
    srst,
    wr_rst_reg_reg,
    rd_en,
    ram_full_fb_i_reg,
    wr_en);
  output out;
  output empty;
  output [0:0]E;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_d1_reg[11] ;
  input \gcc0.gc0.count_d1_reg[1] ;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gcc0.gc0.count_d1_reg[5] ;
  input \gcc0.gc0.count_d1_reg[7] ;
  input \gcc0.gc0.count_d1_reg[9] ;
  input \gcc0.gc0.count_d1_reg[11] ;
  input [5:0]v1_reg;
  input clk;
  input srst;
  input wr_rst_reg_reg;
  input rd_en;
  input ram_full_fb_i_reg;
  input wr_en;

  wire [0:0]E;
  wire c2_n_0;
  wire clk;
  wire comp0;
  wire [0:0]\gc0.count_d1_reg[11] ;
  wire \gcc0.gc0.count_d1_reg[11] ;
  wire \gcc0.gc0.count_d1_reg[1] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[5] ;
  wire \gcc0.gc0.count_d1_reg[7] ;
  wire \gcc0.gc0.count_d1_reg[9] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire [5:0]v1_reg;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hFFAE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_2 
       (.I0(srst),
        .I1(rd_en),
        .I2(ram_empty_fb_i),
        .I3(wr_rst_reg_reg),
        .O(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_41 c1
       (.comp0(comp0),
        .\gcc0.gc0.count_d1_reg[11] (\gcc0.gc0.count_d1_reg[11] ),
        .\gcc0.gc0.count_d1_reg[1] (\gcc0.gc0.count_d1_reg[1] ),
        .\gcc0.gc0.count_d1_reg[3] (\gcc0.gc0.count_d1_reg[3] ),
        .\gcc0.gc0.count_d1_reg[5] (\gcc0.gc0.count_d1_reg[5] ),
        .\gcc0.gc0.count_d1_reg[7] (\gcc0.gc0.count_d1_reg[7] ),
        .\gcc0.gc0.count_d1_reg[9] (\gcc0.gc0.count_d1_reg[9] ));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_42 c2
       (.comp0(comp0),
        .out(ram_empty_fb_i),
        .ram_empty_i_reg(c2_n_0),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg(v1_reg),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  LUT4 #(
    .INIT(16'h4B44)) 
    \count[11]_i_1 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(ram_full_fb_i_reg),
        .I3(wr_en),
        .O(E));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[11]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(\gc0.count_d1_reg[11] ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized1
   (out,
    empty,
    tmp_ram_rd_en,
    \gc0.count_reg[8] ,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[6] ,
    \gcc0.gc0.count_d1_reg[8] ,
    v1_reg,
    \gcc0.gc0.count_d1_reg[8]_0 ,
    clk,
    SR,
    E,
    rd_en,
    wr_rst_reg_reg,
    srst);
  output out;
  output empty;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_reg[8] ;
  input \gc0.count_d1_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input \gc0.count_d1_reg[4] ;
  input \gc0.count_d1_reg[6] ;
  input \gcc0.gc0.count_d1_reg[8] ;
  input [3:0]v1_reg;
  input \gcc0.gc0.count_d1_reg[8]_0 ;
  input clk;
  input [0:0]SR;
  input [0:0]E;
  input rd_en;
  input wr_rst_reg_reg;
  input srst;

  wire [0:0]E;
  wire [0:0]SR;
  wire c1_n_0;
  wire clk;
  wire comp1;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[6] ;
  wire [0:0]\gc0.count_reg[8] ;
  wire \gcc0.gc0.count_d1_reg[8] ;
  wire \gcc0.gc0.count_d1_reg[8]_0 ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire [3:0]v1_reg;
  wire wr_rst_reg_reg;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hFFF4)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_1 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(wr_rst_reg_reg),
        .I3(srst),
        .O(tmp_ram_rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4_47 c1
       (.E(E),
        .SR(SR),
        .comp1(comp1),
        .\gc0.count_d1_reg[0] (\gc0.count_d1_reg[0] ),
        .\gc0.count_d1_reg[2] (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gc0.count_d1_reg[6] (\gc0.count_d1_reg[6] ),
        .\gcc0.gc0.count_d1_reg[8] (\gcc0.gc0.count_d1_reg[8] ),
        .out(ram_empty_fb_i),
        .ram_empty_i_reg(c1_n_0),
        .rd_en(rd_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4_48 c2
       (.comp1(comp1),
        .\gcc0.gc0.count_d1_reg[8] (\gcc0.gc0.count_d1_reg[8]_0 ),
        .v1_reg(v1_reg));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[8]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(\gc0.count_reg[8] ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized2
   (out,
    empty,
    E,
    tmp_ram_rd_en,
    \gc0.count_d1_reg[3] ,
    clk,
    srst,
    \gcc0.gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] ,
    wr_rst_reg_reg,
    rd_en,
    ram_full_fb_i_reg,
    wr_en);
  output out;
  output empty;
  output [0:0]E;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_d1_reg[3] ;
  input clk;
  input srst;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gc0.count_reg[3] ;
  input wr_rst_reg_reg;
  input rd_en;
  input ram_full_fb_i_reg;
  input wr_en;

  wire [0:0]E;
  wire clk;
  wire [0:0]\gc0.count_d1_reg[3] ;
  wire \gc0.count_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_i_1_n_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hFFAE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(srst),
        .I1(rd_en),
        .I2(ram_empty_fb_i),
        .I3(wr_rst_reg_reg),
        .O(tmp_ram_rd_en));
  LUT4 #(
    .INIT(16'h4B44)) 
    \count[3]_i_1 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(ram_full_fb_i_reg),
        .I3(wr_en),
        .O(E));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[3]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(\gc0.count_d1_reg[3] ));
  LUT5 #(
    .INIT(32'hFFFFEFEA)) 
    ram_empty_fb_i_i_1
       (.I0(srst),
        .I1(\gcc0.gc0.count_d1_reg[3] ),
        .I2(ram_empty_fb_i),
        .I3(\gc0.count_reg[3] ),
        .I4(wr_rst_reg_reg),
        .O(ram_empty_fb_i_i_1_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_i_1_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_i_1_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized2_68
   (out,
    empty,
    E,
    tmp_ram_rd_en,
    \gc0.count_d1_reg[3] ,
    clk,
    srst,
    \gcc0.gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] ,
    wr_rst_reg_reg,
    rd_en,
    ram_full_fb_i_reg,
    wr_en);
  output out;
  output empty;
  output [0:0]E;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_d1_reg[3] ;
  input clk;
  input srst;
  input \gcc0.gc0.count_d1_reg[3] ;
  input \gc0.count_reg[3] ;
  input wr_rst_reg_reg;
  input rd_en;
  input ram_full_fb_i_reg;
  input wr_en;

  wire [0:0]E;
  wire clk;
  wire [0:0]\gc0.count_d1_reg[3] ;
  wire \gc0.count_reg[3] ;
  wire \gcc0.gc0.count_d1_reg[3] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_i_1_n_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hFFAE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(srst),
        .I1(rd_en),
        .I2(ram_empty_fb_i),
        .I3(wr_rst_reg_reg),
        .O(tmp_ram_rd_en));
  LUT4 #(
    .INIT(16'h4B44)) 
    \count[3]_i_1 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(ram_full_fb_i_reg),
        .I3(wr_en),
        .O(E));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[3]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(\gc0.count_d1_reg[3] ));
  LUT5 #(
    .INIT(32'hFFFFEFEA)) 
    ram_empty_fb_i_i_1
       (.I0(srst),
        .I1(\gcc0.gc0.count_d1_reg[3] ),
        .I2(ram_empty_fb_i),
        .I3(\gc0.count_reg[3] ),
        .I4(wr_rst_reg_reg),
        .O(ram_empty_fb_i_i_1_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_i_1_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_i_1_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized3
   (out,
    empty,
    E,
    ram_full_i_reg,
    DI,
    ram_empty_fb_i_reg_0,
    clk,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output ram_full_i_reg;
  output [0:0]DI;
  input ram_empty_fb_i_reg_0;
  input clk;
  input rd_en;

  wire [0:0]DI;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_i_reg;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'hB)) 
    \count[7]_i_3 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .O(DI));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .Q(ram_empty_i),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    ram_full_fb_i_i_2
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .O(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized3_17
   (out,
    empty,
    E,
    ram_full_i_reg,
    DI,
    ram_empty_fb_i_reg_0,
    clk,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output ram_full_i_reg;
  output [0:0]DI;
  input ram_empty_fb_i_reg_0;
  input clk;
  input rd_en;

  wire [0:0]DI;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_i_reg;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'hB)) 
    \count[7]_i_3 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .O(DI));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .Q(ram_empty_i),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    ram_full_fb_i_i_2
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .O(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_rd_status_flags_ss__parameterized3_7
   (out,
    empty,
    E,
    ram_full_i_reg,
    DI,
    ram_empty_fb_i_reg_0,
    clk,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output ram_full_i_reg;
  output [0:0]DI;
  input ram_empty_fb_i_reg_0;
  input clk;
  input rd_en;

  wire [0:0]DI;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_i_reg;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'hB)) 
    \count[7]_i_3 
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .O(DI));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .Q(ram_empty_i),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    ram_full_fb_i_i_2
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .O(ram_full_i_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo
   (\syncstages_ff_reg[0] ,
    SS,
    wr_rst_busy,
    out,
    ram_full_fb_i_reg,
    ram_rstram_b,
    ENB_I,
    rst,
    wr_clk,
    rd_clk,
    \dest_out_bin_ff_reg[2] ,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d1_reg[2] ,
    \dest_out_bin_ff_reg[3] ,
    POR_B,
    ENB_dly_D,
    ram_empty_fb_i_reg,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output [0:0]SS;
  output wr_rst_busy;
  output out;
  output ram_full_fb_i_reg;
  output ram_rstram_b;
  output ENB_I;
  input rst;
  input wr_clk;
  input rd_clk;
  input \dest_out_bin_ff_reg[2] ;
  input ram_full_fb_i_reg_0;
  input \gic0.gc0.count_d1_reg[2] ;
  input \dest_out_bin_ff_reg[3] ;
  input POR_B;
  input ENB_dly_D;
  input ram_empty_fb_i_reg;
  input rd_en;

  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [0:0]SS;
  wire arst_sync_rd_rst;
  wire dest_out;
  wire \dest_out_bin_ff_reg[2] ;
  wire \dest_out_bin_ff_reg[3] ;
  wire dest_rst;
  wire \gic0.gc0.count_d1_reg[2] ;
  wire \grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire sckt_rd_rst_wr;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy_i__0;
  wire wr_rst_busy_i_n_0;
  wire [1:0]wr_rst_rd_ext;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i__0;
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(SS),
        .I1(ENB_dly_D),
        .I2(ram_empty_fb_i_reg),
        .I3(rd_en),
        .O(ENB_I));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(SS),
        .I1(POR_B),
        .O(ram_rstram_b));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i__0),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \grstd1.grst_full.grst_f.rst_d3_i_1 
       (.I0(rst_d2),
        .I1(\syncstages_ff_reg[0] ),
        .O(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ),
        .Q(rst_d3),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF4)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(wr_rst_rd_ext[1]),
        .I1(SS),
        .I2(arst_sync_rd_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .Q(SS),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hD0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(\syncstages_ff_reg[0] ),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0] ),
        .S(dest_rst));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i_n_0),
        .Q(wr_rst_busy_i__0),
        .S(dest_rst));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]),
        .R(1'b0));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(SS));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__10 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(rd_clk),
        .dest_rst(arst_sync_rd_rst),
        .src_rst(rst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__10 \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(wr_clk),
        .dest_rst(dest_rst),
        .src_rst(rst));
  LUT6 #(
    .INIT(64'hFFFFFF40FF40FF40)) 
    ram_full_i_i_1
       (.I0(rst_d3),
        .I1(\dest_out_bin_ff_reg[2] ),
        .I2(ram_full_fb_i_reg_0),
        .I3(\syncstages_ff_reg[0] ),
        .I4(\gic0.gc0.count_d1_reg[2] ),
        .I5(\dest_out_bin_ff_reg[3] ),
        .O(ram_full_fb_i_reg));
  LUT5 #(
    .INIT(32'hF020F0F0)) 
    wr_rst_busy_i
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(wr_rst_busy_i__0),
        .I3(rd_rst_wr_ext[2]),
        .I4(rd_rst_wr_ext[3]),
        .O(wr_rst_busy_i_n_0));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0
   (wr_rst_reg_reg,
    tmp_ram_rd_en,
    SS,
    srst,
    clk,
    rd_en,
    out);
  output wr_rst_reg_reg;
  output tmp_ram_rd_en;
  output [0:0]SS;
  input srst;
  input clk;
  input rd_en;
  input out;

  wire [0:0]SS;
  wire clk;
  wire out;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .out(out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_12
   (wr_rst_reg_reg,
    tmp_ram_rd_en,
    SS,
    srst,
    clk,
    rd_en,
    out);
  output wr_rst_reg_reg;
  output tmp_ram_rd_en;
  output [0:0]SS;
  input srst;
  input clk;
  input rd_en;
  input out;

  wire [0:0]SS;
  wire clk;
  wire out;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_13 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .out(out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_2
   (wr_rst_reg_reg,
    tmp_ram_rd_en,
    SS,
    srst,
    clk,
    rd_en,
    out);
  output wr_rst_reg_reg;
  output tmp_ram_rd_en;
  output [0:0]SS;
  input srst;
  input clk;
  input rd_en;
  input out;

  wire [0:0]SS;
  wire clk;
  wire out;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_3 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .out(out),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_20
   (wr_rst_reg_reg,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  wire srst;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_21 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_25
   (wr_rst_reg_reg,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  wire srst;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_26 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_32
   (wr_rst_reg_reg,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  wire srst;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_33 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_44
   (wr_rst_reg_reg,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  wire srst;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_45 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_49
   (wr_rst_reg_reg,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  wire srst;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_50 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__parameterized0_57
   (wr_rst_reg_reg,
    SS,
    srst,
    clk);
  output wr_rst_reg_reg;
  output [0:0]SS;
  input srst;
  input clk;

  wire [0:0]SS;
  wire clk;
  wire srst;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_bram_fifo_rstlogic_58 \g8serrst.usrst_inst 
       (.SS(SS),
        .clk(clk),
        .srst(srst),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__xdcDup__1
   (\syncstages_ff_reg[0] ,
    SS,
    wr_rst_busy,
    out,
    ram_rstram_b,
    ENB_I,
    rst,
    wr_clk,
    rd_clk,
    POR_B,
    ENB_dly_D,
    ram_empty_fb_i_reg,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output [0:0]SS;
  output wr_rst_busy;
  output out;
  output ram_rstram_b;
  output ENB_I;
  input rst;
  input wr_clk;
  input rd_clk;
  input POR_B;
  input ENB_dly_D;
  input ram_empty_fb_i_reg;
  input rd_en;

  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [0:0]SS;
  wire arst_sync_rd_rst;
  wire dest_out;
  wire dest_rst;
  wire \grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire ram_empty_fb_i_reg;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire sckt_rd_rst_wr;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy_i__0;
  wire wr_rst_busy_i_n_0;
  wire [1:0]wr_rst_rd_ext;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i__0;
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_1 
       (.I0(SS),
        .I1(ENB_dly_D),
        .I2(ram_empty_fb_i_reg),
        .I3(rd_en),
        .O(ENB_I));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_3 
       (.I0(SS),
        .I1(POR_B),
        .O(ram_rstram_b));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i__0),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \grstd1.grst_full.grst_f.rst_d3_i_1 
       (.I0(rst_d2),
        .I1(\syncstages_ff_reg[0] ),
        .O(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ),
        .Q(rst_d3),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF4)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(wr_rst_rd_ext[1]),
        .I1(SS),
        .I2(arst_sync_rd_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .Q(SS),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hD0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(\syncstages_ff_reg[0] ),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0] ),
        .S(dest_rst));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i_n_0),
        .Q(wr_rst_busy_i__0),
        .S(dest_rst));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]),
        .R(1'b0));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__5 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(SS));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__4 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__5 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(rd_clk),
        .dest_rst(arst_sync_rd_rst),
        .src_rst(rst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__4 \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(wr_clk),
        .dest_rst(dest_rst),
        .src_rst(rst));
  LUT5 #(
    .INIT(32'hF020F0F0)) 
    wr_rst_busy_i
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(wr_rst_busy_i__0),
        .I3(rd_rst_wr_ext[2]),
        .I4(rd_rst_wr_ext[3]),
        .O(wr_rst_busy_i_n_0));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__xdcDup__2
   (\syncstages_ff_reg[0] ,
    SS,
    wr_rst_busy,
    out,
    ram_full_fb_i_reg,
    ram_rstram_b,
    ENB_I,
    rst,
    wr_clk,
    rd_clk,
    \dest_out_bin_ff_reg[2] ,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d1_reg[2] ,
    \dest_out_bin_ff_reg[3] ,
    POR_B,
    ENB_dly_D,
    ram_empty_fb_i_reg,
    rd_en);
  output \syncstages_ff_reg[0] ;
  output [0:0]SS;
  output wr_rst_busy;
  output out;
  output ram_full_fb_i_reg;
  output ram_rstram_b;
  output ENB_I;
  input rst;
  input wr_clk;
  input rd_clk;
  input \dest_out_bin_ff_reg[2] ;
  input ram_full_fb_i_reg_0;
  input \gic0.gc0.count_d1_reg[2] ;
  input \dest_out_bin_ff_reg[3] ;
  input POR_B;
  input ENB_dly_D;
  input ram_empty_fb_i_reg;
  input rd_en;

  wire ENB_I;
  wire ENB_dly_D;
  wire POR_B;
  wire [0:0]SS;
  wire arst_sync_rd_rst;
  wire dest_out;
  wire \dest_out_bin_ff_reg[2] ;
  wire \dest_out_bin_ff_reg[3] ;
  wire dest_rst;
  wire \gic0.gc0.count_d1_reg[2] ;
  wire \grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_rstram_b;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire sckt_rd_rst_wr;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy_i__0;
  wire wr_rst_busy_i_n_0;
  wire [1:0]wr_rst_rd_ext;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i__0;
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(SS),
        .I1(ENB_dly_D),
        .I2(ram_empty_fb_i_reg),
        .I3(rd_en),
        .O(ENB_I));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(SS),
        .I1(POR_B),
        .O(ram_rstram_b));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i__0),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \grstd1.grst_full.grst_f.rst_d3_i_1 
       (.I0(rst_d2),
        .I1(\syncstages_ff_reg[0] ),
        .O(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ),
        .Q(rst_d3),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF4)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(wr_rst_rd_ext[1]),
        .I1(SS),
        .I2(arst_sync_rd_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .Q(SS),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hD0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(\syncstages_ff_reg[0] ),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0] ),
        .S(dest_rst));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i_n_0),
        .Q(wr_rst_busy_i__0),
        .S(dest_rst));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]),
        .R(1'b0));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__7 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(SS));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__6 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__7 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(rd_clk),
        .dest_rst(arst_sync_rd_rst),
        .src_rst(rst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__6 \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(wr_clk),
        .dest_rst(dest_rst),
        .src_rst(rst));
  LUT6 #(
    .INIT(64'hFFFFFF40FF40FF40)) 
    ram_full_i_i_1
       (.I0(rst_d3),
        .I1(\dest_out_bin_ff_reg[2] ),
        .I2(ram_full_fb_i_reg_0),
        .I3(\syncstages_ff_reg[0] ),
        .I4(\gic0.gc0.count_d1_reg[2] ),
        .I5(\dest_out_bin_ff_reg[3] ),
        .O(ram_full_fb_i_reg));
  LUT5 #(
    .INIT(32'hF020F0F0)) 
    wr_rst_busy_i
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(wr_rst_busy_i__0),
        .I3(rd_rst_wr_ext[2]),
        .I4(rd_rst_wr_ext[3]),
        .O(wr_rst_busy_i_n_0));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_reset_blk_ramfifo__xdcDup__3
   (\syncstages_ff_reg[0] ,
    SS,
    wr_rst_busy,
    out,
    ram_rstram_b,
    rst,
    wr_clk,
    rd_clk,
    POR_B);
  output \syncstages_ff_reg[0] ;
  output [0:0]SS;
  output wr_rst_busy;
  output out;
  output ram_rstram_b;
  input rst;
  input wr_clk;
  input rd_clk;
  input POR_B;

  wire POR_B;
  wire [0:0]SS;
  wire arst_sync_rd_rst;
  wire dest_out;
  wire dest_rst;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire ram_rstram_b;
  wire rd_clk;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire sckt_rd_rst_wr;
  wire \syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy_i__0;
  wire wr_rst_busy_i_n_0;
  wire [1:0]wr_rst_rd_ext;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i__0;
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(SS),
        .I1(POR_B),
        .O(ram_rstram_b));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i__0),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDSE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .Q(rst_d3),
        .S(\syncstages_ff_reg[0] ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(wr_rst_rd_ext[1]),
        .I1(SS),
        .I2(arst_sync_rd_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .Q(SS),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hD0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(\syncstages_ff_reg[0] ),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0] ),
        .S(dest_rst));
  FDSE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy_i_n_0),
        .Q(wr_rst_busy_i__0),
        .S(dest_rst));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]),
        .R(1'b0));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__9 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(SS));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_single__8 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__9 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(rd_clk),
        .dest_rst(arst_sync_rd_rst),
        .src_rst(rst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  ps_emio_eth_1g_AXIS_LMAC_0_1_xpm_cdc_sync_rst__8 \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(wr_clk),
        .dest_rst(dest_rst),
        .src_rst(rst));
  LUT5 #(
    .INIT(32'hF020F0F0)) 
    wr_rst_busy_i
       (.I0(rd_rst_wr_ext[1]),
        .I1(rd_rst_wr_ext[0]),
        .I2(wr_rst_busy_i__0),
        .I3(rd_rst_wr_ext[2]),
        .I4(rd_rst_wr_ext[3]),
        .O(wr_rst_busy_i_n_0));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr
   (Q,
    out,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    clk);
  output [9:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]ram_full_fb_i_reg;
  input clk;

  wire [9:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[8]_i_10_n_0 ;
  wire \count[8]_i_2_n_0 ;
  wire \count[8]_i_3_n_0 ;
  wire \count[8]_i_4_n_0 ;
  wire \count[8]_i_5_n_0 ;
  wire \count[8]_i_6_n_0 ;
  wire \count[8]_i_7_n_0 ;
  wire \count[8]_i_8_n_0 ;
  wire \count[8]_i_9_n_0 ;
  wire \count[9]_i_3_n_0 ;
  wire \count_reg[8]_i_1_n_0 ;
  wire \count_reg[8]_i_1_n_1 ;
  wire \count_reg[8]_i_1_n_10 ;
  wire \count_reg[8]_i_1_n_11 ;
  wire \count_reg[8]_i_1_n_12 ;
  wire \count_reg[8]_i_1_n_13 ;
  wire \count_reg[8]_i_1_n_14 ;
  wire \count_reg[8]_i_1_n_15 ;
  wire \count_reg[8]_i_1_n_2 ;
  wire \count_reg[8]_i_1_n_3 ;
  wire \count_reg[8]_i_1_n_5 ;
  wire \count_reg[8]_i_1_n_6 ;
  wire \count_reg[8]_i_1_n_7 ;
  wire \count_reg[8]_i_1_n_8 ;
  wire \count_reg[8]_i_1_n_9 ;
  wire \count_reg[9]_i_2_n_15 ;
  wire out;
  wire [0:0]ram_full_fb_i_reg;
  wire rd_en;
  wire [3:3]\NLW_count_reg[8]_i_1_CO_UNCONNECTED ;
  wire [7:0]\NLW_count_reg[9]_i_2_CO_UNCONNECTED ;
  wire [7:1]\NLW_count_reg[9]_i_2_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \count[8]_i_10 
       (.I0(Q[1]),
        .I1(out),
        .I2(rd_en),
        .O(\count[8]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \count[8]_i_2 
       (.I0(Q[1]),
        .O(\count[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_3 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\count[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_4 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_6 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_8 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_9 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[8]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[9]_i_3 
       (.I0(Q[8]),
        .I1(Q[9]),
        .O(\count[9]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_9 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[8] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_1_n_8 ),
        .Q(Q[8]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[8]_i_1 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\count_reg[8]_i_1_n_0 ,\count_reg[8]_i_1_n_1 ,\count_reg[8]_i_1_n_2 ,\count_reg[8]_i_1_n_3 ,\NLW_count_reg[8]_i_1_CO_UNCONNECTED [3],\count_reg[8]_i_1_n_5 ,\count_reg[8]_i_1_n_6 ,\count_reg[8]_i_1_n_7 }),
        .DI({Q[7:1],\count[8]_i_2_n_0 }),
        .O({\count_reg[8]_i_1_n_8 ,\count_reg[8]_i_1_n_9 ,\count_reg[8]_i_1_n_10 ,\count_reg[8]_i_1_n_11 ,\count_reg[8]_i_1_n_12 ,\count_reg[8]_i_1_n_13 ,\count_reg[8]_i_1_n_14 ,\count_reg[8]_i_1_n_15 }),
        .S({\count[8]_i_3_n_0 ,\count[8]_i_4_n_0 ,\count[8]_i_5_n_0 ,\count[8]_i_6_n_0 ,\count[8]_i_7_n_0 ,\count[8]_i_8_n_0 ,\count[8]_i_9_n_0 ,\count[8]_i_10_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[9] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[9]_i_2_n_15 ),
        .Q(Q[9]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[9]_i_2 
       (.CI(\count_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO(\NLW_count_reg[9]_i_2_CO_UNCONNECTED [7:0]),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_count_reg[9]_i_2_O_UNCONNECTED [7:1],\count_reg[9]_i_2_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\count[9]_i_3_n_0 }));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized0
   (Q,
    rd_en,
    out,
    SR,
    E,
    clk);
  output [11:0]Q;
  input rd_en;
  input out;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[11]_i_3_n_0 ;
  wire \count[11]_i_4_n_0 ;
  wire \count[11]_i_5_n_0 ;
  wire \count[8]_i_10_n_0 ;
  wire \count[8]_i_2_n_0 ;
  wire \count[8]_i_3_n_0 ;
  wire \count[8]_i_4_n_0 ;
  wire \count[8]_i_5_n_0 ;
  wire \count[8]_i_6_n_0 ;
  wire \count[8]_i_7_n_0 ;
  wire \count[8]_i_8_n_0 ;
  wire \count[8]_i_9_n_0 ;
  wire \count_reg[11]_i_2_n_13 ;
  wire \count_reg[11]_i_2_n_14 ;
  wire \count_reg[11]_i_2_n_15 ;
  wire \count_reg[11]_i_2_n_6 ;
  wire \count_reg[11]_i_2_n_7 ;
  wire \count_reg[8]_i_1_n_0 ;
  wire \count_reg[8]_i_1_n_1 ;
  wire \count_reg[8]_i_1_n_10 ;
  wire \count_reg[8]_i_1_n_11 ;
  wire \count_reg[8]_i_1_n_12 ;
  wire \count_reg[8]_i_1_n_13 ;
  wire \count_reg[8]_i_1_n_14 ;
  wire \count_reg[8]_i_1_n_15 ;
  wire \count_reg[8]_i_1_n_2 ;
  wire \count_reg[8]_i_1_n_3 ;
  wire \count_reg[8]_i_1_n_5 ;
  wire \count_reg[8]_i_1_n_6 ;
  wire \count_reg[8]_i_1_n_7 ;
  wire \count_reg[8]_i_1_n_8 ;
  wire \count_reg[8]_i_1_n_9 ;
  wire out;
  wire rd_en;
  wire [7:2]\NLW_count_reg[11]_i_2_CO_UNCONNECTED ;
  wire [7:3]\NLW_count_reg[11]_i_2_O_UNCONNECTED ;
  wire [3:3]\NLW_count_reg[8]_i_1_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[11]_i_3 
       (.I0(Q[10]),
        .I1(Q[11]),
        .O(\count[11]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[11]_i_4 
       (.I0(Q[9]),
        .I1(Q[10]),
        .O(\count[11]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[11]_i_5 
       (.I0(Q[8]),
        .I1(Q[9]),
        .O(\count[11]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hA6)) 
    \count[8]_i_10 
       (.I0(Q[1]),
        .I1(rd_en),
        .I2(out),
        .O(\count[8]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \count[8]_i_2 
       (.I0(Q[1]),
        .O(\count[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_3 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\count[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_4 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_6 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_8 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_9 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[8]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[11]_i_2_n_14 ),
        .Q(Q[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[11]_i_2_n_13 ),
        .Q(Q[11]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[11]_i_2 
       (.CI(\count_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[11]_i_2_CO_UNCONNECTED [7:2],\count_reg[11]_i_2_n_6 ,\count_reg[11]_i_2_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,Q[9:8]}),
        .O({\NLW_count_reg[11]_i_2_O_UNCONNECTED [7:3],\count_reg[11]_i_2_n_13 ,\count_reg[11]_i_2_n_14 ,\count_reg[11]_i_2_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,\count[11]_i_3_n_0 ,\count[11]_i_4_n_0 ,\count[11]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_9 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_8 ),
        .Q(Q[8]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[8]_i_1 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\count_reg[8]_i_1_n_0 ,\count_reg[8]_i_1_n_1 ,\count_reg[8]_i_1_n_2 ,\count_reg[8]_i_1_n_3 ,\NLW_count_reg[8]_i_1_CO_UNCONNECTED [3],\count_reg[8]_i_1_n_5 ,\count_reg[8]_i_1_n_6 ,\count_reg[8]_i_1_n_7 }),
        .DI({Q[7:1],\count[8]_i_2_n_0 }),
        .O({\count_reg[8]_i_1_n_8 ,\count_reg[8]_i_1_n_9 ,\count_reg[8]_i_1_n_10 ,\count_reg[8]_i_1_n_11 ,\count_reg[8]_i_1_n_12 ,\count_reg[8]_i_1_n_13 ,\count_reg[8]_i_1_n_14 ,\count_reg[8]_i_1_n_15 }),
        .S({\count[8]_i_3_n_0 ,\count[8]_i_4_n_0 ,\count[8]_i_5_n_0 ,\count[8]_i_6_n_0 ,\count[8]_i_7_n_0 ,\count[8]_i_8_n_0 ,\count[8]_i_9_n_0 ,\count[8]_i_10_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[11]_i_2_n_15 ),
        .Q(Q[9]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized0_43
   (Q,
    rd_en,
    out,
    SR,
    E,
    clk);
  output [11:0]Q;
  input rd_en;
  input out;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[11]_i_3_n_0 ;
  wire \count[11]_i_4_n_0 ;
  wire \count[11]_i_5_n_0 ;
  wire \count[8]_i_10_n_0 ;
  wire \count[8]_i_2_n_0 ;
  wire \count[8]_i_3_n_0 ;
  wire \count[8]_i_4_n_0 ;
  wire \count[8]_i_5_n_0 ;
  wire \count[8]_i_6_n_0 ;
  wire \count[8]_i_7_n_0 ;
  wire \count[8]_i_8_n_0 ;
  wire \count[8]_i_9_n_0 ;
  wire \count_reg[11]_i_2_n_13 ;
  wire \count_reg[11]_i_2_n_14 ;
  wire \count_reg[11]_i_2_n_15 ;
  wire \count_reg[11]_i_2_n_6 ;
  wire \count_reg[11]_i_2_n_7 ;
  wire \count_reg[8]_i_1_n_0 ;
  wire \count_reg[8]_i_1_n_1 ;
  wire \count_reg[8]_i_1_n_10 ;
  wire \count_reg[8]_i_1_n_11 ;
  wire \count_reg[8]_i_1_n_12 ;
  wire \count_reg[8]_i_1_n_13 ;
  wire \count_reg[8]_i_1_n_14 ;
  wire \count_reg[8]_i_1_n_15 ;
  wire \count_reg[8]_i_1_n_2 ;
  wire \count_reg[8]_i_1_n_3 ;
  wire \count_reg[8]_i_1_n_5 ;
  wire \count_reg[8]_i_1_n_6 ;
  wire \count_reg[8]_i_1_n_7 ;
  wire \count_reg[8]_i_1_n_8 ;
  wire \count_reg[8]_i_1_n_9 ;
  wire out;
  wire rd_en;
  wire [7:2]\NLW_count_reg[11]_i_2_CO_UNCONNECTED ;
  wire [7:3]\NLW_count_reg[11]_i_2_O_UNCONNECTED ;
  wire [3:3]\NLW_count_reg[8]_i_1_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[11]_i_3 
       (.I0(Q[10]),
        .I1(Q[11]),
        .O(\count[11]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[11]_i_4 
       (.I0(Q[9]),
        .I1(Q[10]),
        .O(\count[11]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[11]_i_5 
       (.I0(Q[8]),
        .I1(Q[9]),
        .O(\count[11]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hA6)) 
    \count[8]_i_10 
       (.I0(Q[1]),
        .I1(rd_en),
        .I2(out),
        .O(\count[8]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \count[8]_i_2 
       (.I0(Q[1]),
        .O(\count[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_3 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\count[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_4 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_6 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_8 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_9 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[8]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[11]_i_2_n_14 ),
        .Q(Q[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[11]_i_2_n_13 ),
        .Q(Q[11]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[11]_i_2 
       (.CI(\count_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[11]_i_2_CO_UNCONNECTED [7:2],\count_reg[11]_i_2_n_6 ,\count_reg[11]_i_2_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,Q[9:8]}),
        .O({\NLW_count_reg[11]_i_2_O_UNCONNECTED [7:3],\count_reg[11]_i_2_n_13 ,\count_reg[11]_i_2_n_14 ,\count_reg[11]_i_2_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,\count[11]_i_3_n_0 ,\count[11]_i_4_n_0 ,\count[11]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_9 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_8 ),
        .Q(Q[8]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[8]_i_1 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\count_reg[8]_i_1_n_0 ,\count_reg[8]_i_1_n_1 ,\count_reg[8]_i_1_n_2 ,\count_reg[8]_i_1_n_3 ,\NLW_count_reg[8]_i_1_CO_UNCONNECTED [3],\count_reg[8]_i_1_n_5 ,\count_reg[8]_i_1_n_6 ,\count_reg[8]_i_1_n_7 }),
        .DI({Q[7:1],\count[8]_i_2_n_0 }),
        .O({\count_reg[8]_i_1_n_8 ,\count_reg[8]_i_1_n_9 ,\count_reg[8]_i_1_n_10 ,\count_reg[8]_i_1_n_11 ,\count_reg[8]_i_1_n_12 ,\count_reg[8]_i_1_n_13 ,\count_reg[8]_i_1_n_14 ,\count_reg[8]_i_1_n_15 }),
        .S({\count[8]_i_3_n_0 ,\count[8]_i_4_n_0 ,\count[8]_i_5_n_0 ,\count[8]_i_6_n_0 ,\count[8]_i_7_n_0 ,\count[8]_i_8_n_0 ,\count[8]_i_9_n_0 ,\count[8]_i_10_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[11]_i_2_n_15 ),
        .Q(Q[9]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized1
   (Q,
    out,
    rd_en,
    SR,
    ram_full_fb_i_reg,
    clk);
  output [8:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]ram_full_fb_i_reg;
  input clk;

  wire [8:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[8]_i_10_n_0 ;
  wire \count[8]_i_11_n_0 ;
  wire \count[8]_i_3_n_0 ;
  wire \count[8]_i_4_n_0 ;
  wire \count[8]_i_5_n_0 ;
  wire \count[8]_i_6_n_0 ;
  wire \count[8]_i_7_n_0 ;
  wire \count[8]_i_8_n_0 ;
  wire \count[8]_i_9_n_0 ;
  wire \count_reg[8]_i_2_n_1 ;
  wire \count_reg[8]_i_2_n_10 ;
  wire \count_reg[8]_i_2_n_11 ;
  wire \count_reg[8]_i_2_n_12 ;
  wire \count_reg[8]_i_2_n_13 ;
  wire \count_reg[8]_i_2_n_14 ;
  wire \count_reg[8]_i_2_n_15 ;
  wire \count_reg[8]_i_2_n_2 ;
  wire \count_reg[8]_i_2_n_3 ;
  wire \count_reg[8]_i_2_n_5 ;
  wire \count_reg[8]_i_2_n_6 ;
  wire \count_reg[8]_i_2_n_7 ;
  wire \count_reg[8]_i_2_n_8 ;
  wire \count_reg[8]_i_2_n_9 ;
  wire out;
  wire [0:0]ram_full_fb_i_reg;
  wire rd_en;
  wire [7:3]\NLW_count_reg[8]_i_2_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_10 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[8]_i_10_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \count[8]_i_11 
       (.I0(Q[1]),
        .I1(out),
        .I2(rd_en),
        .O(\count[8]_i_11_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \count[8]_i_3 
       (.I0(Q[1]),
        .O(\count[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_4 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\count[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_5 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_6 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_7 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_8 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_9 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[8]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_9 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[8] 
       (.C(clk),
        .CE(ram_full_fb_i_reg),
        .D(\count_reg[8]_i_2_n_8 ),
        .Q(Q[8]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[8]_i_2 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[8]_i_2_CO_UNCONNECTED [7],\count_reg[8]_i_2_n_1 ,\count_reg[8]_i_2_n_2 ,\count_reg[8]_i_2_n_3 ,\NLW_count_reg[8]_i_2_CO_UNCONNECTED [3],\count_reg[8]_i_2_n_5 ,\count_reg[8]_i_2_n_6 ,\count_reg[8]_i_2_n_7 }),
        .DI({1'b0,Q[6:1],\count[8]_i_3_n_0 }),
        .O({\count_reg[8]_i_2_n_8 ,\count_reg[8]_i_2_n_9 ,\count_reg[8]_i_2_n_10 ,\count_reg[8]_i_2_n_11 ,\count_reg[8]_i_2_n_12 ,\count_reg[8]_i_2_n_13 ,\count_reg[8]_i_2_n_14 ,\count_reg[8]_i_2_n_15 }),
        .S({\count[8]_i_4_n_0 ,\count[8]_i_5_n_0 ,\count[8]_i_6_n_0 ,\count[8]_i_7_n_0 ,\count[8]_i_8_n_0 ,\count[8]_i_9_n_0 ,\count[8]_i_10_n_0 ,\count[8]_i_11_n_0 }));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized2
   (Q,
    out,
    rd_en,
    SR,
    E,
    clk);
  output [3:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[1]_i_1_n_0 ;
  wire \count[2]_i_1_n_0 ;
  wire \count[3]_i_2_n_0 ;
  wire out;
  wire rd_en;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT4 #(
    .INIT(16'h6966)) 
    \count[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(out),
        .I3(rd_en),
        .O(\count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT5 #(
    .INIT(32'h6A66A9AA)) 
    \count[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(out),
        .I3(rd_en),
        .I4(Q[0]),
        .O(\count[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6A6AAA6AAAAAA9AA)) 
    \count[3]_i_2 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(rd_en),
        .I4(out),
        .I5(Q[1]),
        .O(\count[3]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count[3]_i_2_n_0 ),
        .Q(Q[3]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized2_70
   (Q,
    out,
    rd_en,
    SR,
    E,
    clk);
  output [3:0]Q;
  input out;
  input rd_en;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[1]_i_1_n_0 ;
  wire \count[2]_i_1_n_0 ;
  wire \count[3]_i_2_n_0 ;
  wire out;
  wire rd_en;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h6966)) 
    \count[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(out),
        .I3(rd_en),
        .O(\count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT5 #(
    .INIT(32'h6A66A9AA)) 
    \count[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(out),
        .I3(rd_en),
        .I4(Q[0]),
        .O(\count[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6A6AAA6AAAAAA9AA)) 
    \count[3]_i_2 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(rd_en),
        .I4(out),
        .I5(Q[1]),
        .O(\count[3]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count[3]_i_2_n_0 ),
        .Q(Q[3]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized3
   (Q,
    rd_en,
    out,
    DI,
    SR,
    E,
    clk);
  output [7:0]Q;
  input rd_en;
  input out;
  input [0:0]DI;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]DI;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[7]_i_10_n_0 ;
  wire \count[7]_i_4_n_0 ;
  wire \count[7]_i_5_n_0 ;
  wire \count[7]_i_6_n_0 ;
  wire \count[7]_i_7_n_0 ;
  wire \count[7]_i_8_n_0 ;
  wire \count[7]_i_9_n_0 ;
  wire \count_reg[7]_i_2_n_10 ;
  wire \count_reg[7]_i_2_n_11 ;
  wire \count_reg[7]_i_2_n_12 ;
  wire \count_reg[7]_i_2_n_13 ;
  wire \count_reg[7]_i_2_n_14 ;
  wire \count_reg[7]_i_2_n_15 ;
  wire \count_reg[7]_i_2_n_2 ;
  wire \count_reg[7]_i_2_n_3 ;
  wire \count_reg[7]_i_2_n_5 ;
  wire \count_reg[7]_i_2_n_6 ;
  wire \count_reg[7]_i_2_n_7 ;
  wire \count_reg[7]_i_2_n_9 ;
  wire out;
  wire rd_en;
  wire [7:3]\NLW_count_reg[7]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_count_reg[7]_i_2_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hA6)) 
    \count[7]_i_10 
       (.I0(Q[1]),
        .I1(rd_en),
        .I2(out),
        .O(\count[7]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_4 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_6 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_8 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_9 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[7]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_9 ),
        .Q(Q[7]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[7]_i_2 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[7]_i_2_CO_UNCONNECTED [7:6],\count_reg[7]_i_2_n_2 ,\count_reg[7]_i_2_n_3 ,\NLW_count_reg[7]_i_2_CO_UNCONNECTED [3],\count_reg[7]_i_2_n_5 ,\count_reg[7]_i_2_n_6 ,\count_reg[7]_i_2_n_7 }),
        .DI({1'b0,1'b0,Q[5:1],DI}),
        .O({\NLW_count_reg[7]_i_2_O_UNCONNECTED [7],\count_reg[7]_i_2_n_9 ,\count_reg[7]_i_2_n_10 ,\count_reg[7]_i_2_n_11 ,\count_reg[7]_i_2_n_12 ,\count_reg[7]_i_2_n_13 ,\count_reg[7]_i_2_n_14 ,\count_reg[7]_i_2_n_15 }),
        .S({1'b0,\count[7]_i_4_n_0 ,\count[7]_i_5_n_0 ,\count[7]_i_6_n_0 ,\count[7]_i_7_n_0 ,\count[7]_i_8_n_0 ,\count[7]_i_9_n_0 ,\count[7]_i_10_n_0 }));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized3_19
   (Q,
    rd_en,
    out,
    DI,
    SR,
    E,
    clk);
  output [7:0]Q;
  input rd_en;
  input out;
  input [0:0]DI;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]DI;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[7]_i_10_n_0 ;
  wire \count[7]_i_4_n_0 ;
  wire \count[7]_i_5_n_0 ;
  wire \count[7]_i_6_n_0 ;
  wire \count[7]_i_7_n_0 ;
  wire \count[7]_i_8_n_0 ;
  wire \count[7]_i_9_n_0 ;
  wire \count_reg[7]_i_2_n_10 ;
  wire \count_reg[7]_i_2_n_11 ;
  wire \count_reg[7]_i_2_n_12 ;
  wire \count_reg[7]_i_2_n_13 ;
  wire \count_reg[7]_i_2_n_14 ;
  wire \count_reg[7]_i_2_n_15 ;
  wire \count_reg[7]_i_2_n_2 ;
  wire \count_reg[7]_i_2_n_3 ;
  wire \count_reg[7]_i_2_n_5 ;
  wire \count_reg[7]_i_2_n_6 ;
  wire \count_reg[7]_i_2_n_7 ;
  wire \count_reg[7]_i_2_n_9 ;
  wire out;
  wire rd_en;
  wire [7:3]\NLW_count_reg[7]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_count_reg[7]_i_2_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hA6)) 
    \count[7]_i_10 
       (.I0(Q[1]),
        .I1(rd_en),
        .I2(out),
        .O(\count[7]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_4 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_6 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_8 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_9 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[7]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_9 ),
        .Q(Q[7]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[7]_i_2 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[7]_i_2_CO_UNCONNECTED [7:6],\count_reg[7]_i_2_n_2 ,\count_reg[7]_i_2_n_3 ,\NLW_count_reg[7]_i_2_CO_UNCONNECTED [3],\count_reg[7]_i_2_n_5 ,\count_reg[7]_i_2_n_6 ,\count_reg[7]_i_2_n_7 }),
        .DI({1'b0,1'b0,Q[5:1],DI}),
        .O({\NLW_count_reg[7]_i_2_O_UNCONNECTED [7],\count_reg[7]_i_2_n_9 ,\count_reg[7]_i_2_n_10 ,\count_reg[7]_i_2_n_11 ,\count_reg[7]_i_2_n_12 ,\count_reg[7]_i_2_n_13 ,\count_reg[7]_i_2_n_14 ,\count_reg[7]_i_2_n_15 }),
        .S({1'b0,\count[7]_i_4_n_0 ,\count[7]_i_5_n_0 ,\count[7]_i_6_n_0 ,\count[7]_i_7_n_0 ,\count[7]_i_8_n_0 ,\count[7]_i_9_n_0 ,\count[7]_i_10_n_0 }));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_updn_cntr__parameterized3_9
   (Q,
    rd_en,
    out,
    DI,
    SR,
    E,
    clk);
  output [7:0]Q;
  input rd_en;
  input out;
  input [0:0]DI;
  input [0:0]SR;
  input [0:0]E;
  input clk;

  wire [0:0]DI;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[7]_i_10_n_0 ;
  wire \count[7]_i_4_n_0 ;
  wire \count[7]_i_5_n_0 ;
  wire \count[7]_i_6_n_0 ;
  wire \count[7]_i_7_n_0 ;
  wire \count[7]_i_8_n_0 ;
  wire \count[7]_i_9_n_0 ;
  wire \count_reg[7]_i_2_n_10 ;
  wire \count_reg[7]_i_2_n_11 ;
  wire \count_reg[7]_i_2_n_12 ;
  wire \count_reg[7]_i_2_n_13 ;
  wire \count_reg[7]_i_2_n_14 ;
  wire \count_reg[7]_i_2_n_15 ;
  wire \count_reg[7]_i_2_n_2 ;
  wire \count_reg[7]_i_2_n_3 ;
  wire \count_reg[7]_i_2_n_5 ;
  wire \count_reg[7]_i_2_n_6 ;
  wire \count_reg[7]_i_2_n_7 ;
  wire \count_reg[7]_i_2_n_9 ;
  wire out;
  wire rd_en;
  wire [7:3]\NLW_count_reg[7]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_count_reg[7]_i_2_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(Q[0]),
        .O(\count[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hA6)) 
    \count[7]_i_10 
       (.I0(Q[1]),
        .I1(rd_en),
        .I2(out),
        .O(\count[7]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_4 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_6 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_7 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_8 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[7]_i_9 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[7]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_15 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_14 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_13 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_12 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_11 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_10 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[7]_i_2_n_9 ),
        .Q(Q[7]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[7]_i_2 
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[7]_i_2_CO_UNCONNECTED [7:6],\count_reg[7]_i_2_n_2 ,\count_reg[7]_i_2_n_3 ,\NLW_count_reg[7]_i_2_CO_UNCONNECTED [3],\count_reg[7]_i_2_n_5 ,\count_reg[7]_i_2_n_6 ,\count_reg[7]_i_2_n_7 }),
        .DI({1'b0,1'b0,Q[5:1],DI}),
        .O({\NLW_count_reg[7]_i_2_O_UNCONNECTED [7],\count_reg[7]_i_2_n_9 ,\count_reg[7]_i_2_n_10 ,\count_reg[7]_i_2_n_11 ,\count_reg[7]_i_2_n_12 ,\count_reg[7]_i_2_n_13 ,\count_reg[7]_i_2_n_14 ,\count_reg[7]_i_2_n_15 }),
        .S({1'b0,\count[7]_i_4_n_0 ,\count[7]_i_5_n_0 ,\count[7]_i_6_n_0 ,\count[7]_i_7_n_0 ,\count[7]_i_8_n_0 ,\count[7]_i_9_n_0 ,\count[7]_i_10_n_0 }));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr
   (S,
    Q,
    ram_full_fb_i_reg,
    \gic0.gc0.count_d1_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[7]_0 ,
    RD_PNTR_WR,
    out,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    E,
    wr_clk);
  output [7:0]S;
  output [7:0]Q;
  output ram_full_fb_i_reg;
  output [7:0]\gic0.gc0.count_d1_reg[7]_0 ;
  output [5:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [7:0]RD_PNTR_WR;
  input out;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [7:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire [7:0]S;
  wire \gic0.gc0.count[7]_i_2_n_0 ;
  wire [7:0]\gic0.gc0.count_d1_reg[7]_0 ;
  wire [5:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire [1:0]p_14_out;
  wire [7:0]plusOp;
  wire ram_full_fb_i_reg;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .I2(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .I2(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .I3(\gic0.gc0.count_d1_reg[7]_0 [3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [3]),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .I2(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .I3(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .I4(\gic0.gc0.count_d1_reg[7]_0 [4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [4]),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .I2(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .I3(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .I4(\gic0.gc0.count_d1_reg[7]_0 [3]),
        .I5(\gic0.gc0.count_d1_reg[7]_0 [5]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \gic0.gc0.count[6]_i_1 
       (.I0(\gic0.gc0.count[7]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \gic0.gc0.count[7]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [6]),
        .I1(\gic0.gc0.count[7]_i_2_n_0 ),
        .I2(\gic0.gc0.count_d1_reg[7]_0 [7]),
        .O(plusOp[7]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gic0.gc0.count[7]_i_2 
       (.I0(\gic0.gc0.count_d1_reg[7]_0 [4]),
        .I1(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .I2(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .I3(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .I4(\gic0.gc0.count_d1_reg[7]_0 [3]),
        .I5(\gic0.gc0.count_d1_reg[7]_0 [5]),
        .O(\gic0.gc0.count[7]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .Q(p_14_out[0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .Q(p_14_out[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .Q(\gic0.gc0.count_d2_reg[7]_0 [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [3]),
        .Q(\gic0.gc0.count_d2_reg[7]_0 [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [4]),
        .Q(\gic0.gc0.count_d2_reg[7]_0 [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [5]),
        .Q(\gic0.gc0.count_d2_reg[7]_0 [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [6]),
        .Q(\gic0.gc0.count_d2_reg[7]_0 [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[7]_0 [7]),
        .Q(\gic0.gc0.count_d2_reg[7]_0 [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[0]),
        .Q(Q[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[1]),
        .Q(Q[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[7]_0 [0]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[7]_0 [1]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[7]_0 [2]),
        .Q(Q[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[7]_0 [3]),
        .Q(Q[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[7]_0 [4]),
        .Q(Q[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[7]_0 [5]),
        .Q(Q[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [1]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[6]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[7]),
        .Q(\gic0.gc0.count_d1_reg[7]_0 [7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1__0
       (.I0(Q[7]),
        .I1(RD_PNTR_WR[7]),
        .O(S[7]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .O(S[6]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3
       (.I0(Q[5]),
        .I1(RD_PNTR_WR[5]),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .O(S[4]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_5
       (.I0(Q[3]),
        .I1(RD_PNTR_WR[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_6
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_7
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_8
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
  LUT5 #(
    .INIT(32'h41000041)) 
    ram_full_i_i_4
       (.I0(out),
        .I1(p_14_out[1]),
        .I2(RD_PNTR_WR[1]),
        .I3(RD_PNTR_WR[0]),
        .I4(p_14_out[0]),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized0
   (ram_full_fb_i_reg,
    Q,
    \gic0.gc0.count_d2_reg[3]_0 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    RD_PNTR_WR,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    E,
    wr_clk);
  output ram_full_fb_i_reg;
  output [3:0]Q;
  output [0:0]\gic0.gc0.count_d2_reg[3]_0 ;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [2:0]RD_PNTR_WR;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [0:0]E;
  input wr_clk;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire [0:0]\gic0.gc0.count_d2_reg[3]_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire [2:0]p_14_out;
  wire [3:0]plusOp;
  wire ram_full_fb_i_reg;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .Q(p_14_out[0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[1]),
        .Q(p_14_out[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[2]),
        .Q(p_14_out[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[3]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[3]_0 ),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(Q[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(Q[1]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_4
       (.I0(p_14_out[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(p_14_out[1]),
        .I3(RD_PNTR_WR[1]),
        .I4(RD_PNTR_WR[0]),
        .I5(p_14_out[0]),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized0_83
   (ram_full_fb_i_reg,
    Q,
    \gic0.gc0.count_d2_reg[3]_0 ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    RD_PNTR_WR,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    E,
    wr_clk);
  output ram_full_fb_i_reg;
  output [3:0]Q;
  output [0:0]\gic0.gc0.count_d2_reg[3]_0 ;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [2:0]RD_PNTR_WR;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [0:0]E;
  input wr_clk;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire [0:0]\gic0.gc0.count_d2_reg[3]_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire [2:0]p_14_out;
  wire [3:0]plusOp;
  wire ram_full_fb_i_reg;
  wire wr_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .Q(p_14_out[0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[1]),
        .Q(p_14_out[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[2]),
        .Q(p_14_out[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[3]),
        .Q(\gic0.gc0.count_d2_reg[3]_0 ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(p_14_out[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[3]_0 ),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(Q[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(Q[1]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_4
       (.I0(p_14_out[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(p_14_out[1]),
        .I3(RD_PNTR_WR[1]),
        .I4(RD_PNTR_WR[0]),
        .I5(p_14_out[0]),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized1
   (S,
    Q,
    \gic0.gc0.count_d1_reg[5]_0 ,
    \gic0.gc0.count_d2_reg[5]_0 ,
    RD_PNTR_WR,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    E,
    wr_clk);
  output [5:0]S;
  output [5:0]Q;
  output [5:0]\gic0.gc0.count_d1_reg[5]_0 ;
  output [5:0]\gic0.gc0.count_d2_reg[5]_0 ;
  input [5:0]RD_PNTR_WR;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [5:0]RD_PNTR_WR;
  wire [5:0]S;
  wire [5:0]\gic0.gc0.count_d1_reg[5]_0 ;
  wire [5:0]\gic0.gc0.count_d2_reg[5]_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire [5:0]plusOp;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .I1(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .I1(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .I2(\gic0.gc0.count_d1_reg[5]_0 [2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .I1(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gic0.gc0.count_d1_reg[5]_0 [2]),
        .I3(\gic0.gc0.count_d1_reg[5]_0 [3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gic0.gc0.count_d1_reg[5]_0 [3]),
        .I4(\gic0.gc0.count_d1_reg[5]_0 [4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(\gic0.gc0.count_d1_reg[5]_0 [3]),
        .I1(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .I2(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gic0.gc0.count_d1_reg[5]_0 [2]),
        .I4(\gic0.gc0.count_d1_reg[5]_0 [4]),
        .I5(\gic0.gc0.count_d1_reg[5]_0 [5]),
        .O(plusOp[5]));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .Q(\gic0.gc0.count_d2_reg[5]_0 [0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .Q(\gic0.gc0.count_d2_reg[5]_0 [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[5]_0 [2]),
        .Q(\gic0.gc0.count_d2_reg[5]_0 [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[5]_0 [3]),
        .Q(\gic0.gc0.count_d2_reg[5]_0 [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[5]_0 [4]),
        .Q(\gic0.gc0.count_d2_reg[5]_0 [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[5]_0 [5]),
        .Q(\gic0.gc0.count_d2_reg[5]_0 [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[5]_0 [0]),
        .Q(Q[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[5]_0 [1]),
        .Q(Q[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[5]_0 [2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[5]_0 [3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[5]_0 [4]),
        .Q(Q[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[5]_0 [5]),
        .Q(Q[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[0]),
        .Q(\gic0.gc0.count_d1_reg[5]_0 [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[1]),
        .Q(\gic0.gc0.count_d1_reg[5]_0 [1]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[2]),
        .Q(\gic0.gc0.count_d1_reg[5]_0 [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[3]),
        .Q(\gic0.gc0.count_d1_reg[5]_0 [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[4]),
        .Q(\gic0.gc0.count_d1_reg[5]_0 [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[5]),
        .Q(\gic0.gc0.count_d1_reg[5]_0 [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1
       (.I0(Q[5]),
        .I1(RD_PNTR_WR[5]),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .O(S[4]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3
       (.I0(Q[3]),
        .I1(RD_PNTR_WR[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_5
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_6
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized2
   (Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    SS,
    E,
    clk);
  output [9:0]Q;
  output [9:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [9:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [9:0]Q;
  wire [0:0]SS;
  wire clk;
  wire \gcc0.gc0.count[9]_i_2_n_0 ;
  wire [9:0]plusOp__0;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gcc0.gc0.count[5]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[6]_i_1 
       (.I0(\gcc0.gc0.count[9]_i_2_n_0 ),
        .I1(Q[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[7]_i_1 
       (.I0(\gcc0.gc0.count[9]_i_2_n_0 ),
        .I1(Q[6]),
        .I2(Q[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[8]_i_1 
       (.I0(Q[6]),
        .I1(\gcc0.gc0.count[9]_i_2_n_0 ),
        .I2(Q[7]),
        .I3(Q[8]),
        .O(plusOp__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[9]_i_1 
       (.I0(Q[7]),
        .I1(\gcc0.gc0.count[9]_i_2_n_0 ),
        .I2(Q[6]),
        .I3(Q[8]),
        .I4(Q[9]),
        .O(plusOp__0[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gcc0.gc0.count[9]_i_2 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[4]),
        .O(\gcc0.gc0.count[9]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(Q[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(Q[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(Q[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[9]),
        .Q(Q[9]),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized3
   (v1_reg,
    Q,
    v1_reg_0,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    \gc0.count_d1_reg[11] ,
    SS,
    E,
    clk);
  output [5:0]v1_reg;
  output [11:0]Q;
  output [5:0]v1_reg_0;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire [11:0]p_12_out;
  wire [11:0]plusOp__0;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:2]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_O_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_12_out[0]),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[10]),
        .Q(Q[10]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[11]),
        .Q(Q[11]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[8]),
        .Q(Q[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[9]),
        .Q(Q[9]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(p_12_out[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[10]),
        .Q(p_12_out[10]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[11]),
        .Q(p_12_out[11]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(p_12_out[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(p_12_out[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(p_12_out[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(p_12_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(p_12_out[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(p_12_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(p_12_out[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(p_12_out[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[9]),
        .Q(p_12_out[9]),
        .R(SS));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(p_12_out[1]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(p_12_out[0]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(Q[2]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(p_12_out[3]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(p_12_out[2]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(Q[2]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(Q[4]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(p_12_out[5]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(p_12_out[4]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(Q[4]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(ram_empty_i_reg_1));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(Q[6]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(p_12_out[7]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(p_12_out[6]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg_0[3]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(Q[6]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(ram_empty_i_reg_2));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(Q[9]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(Q[8]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(p_12_out[9]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(p_12_out[8]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg_0[4]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(Q[9]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(Q[8]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(ram_empty_i_reg_3));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1 
       (.I0(Q[11]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(Q[10]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg[5]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1__1 
       (.I0(p_12_out[11]),
        .I1(p_12_out[10]),
        .I2(\gc0.count_d1_reg[11] [10]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg_0[5]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1__2 
       (.I0(Q[11]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(Q[10]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(ram_empty_i_reg_4));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(p_12_out[0]),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S(p_12_out[8:1]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:2],plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,p_12_out[11:9]}));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized3_35
   (v1_reg,
    Q,
    v1_reg_0,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    \gc0.count_d1_reg[11] ,
    SS,
    E,
    clk);
  output [5:0]v1_reg;
  output [11:0]Q;
  output [5:0]v1_reg_0;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire [11:0]p_12_out;
  wire [11:0]plusOp__0;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:2]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_O_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_12_out[0]),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[10]),
        .Q(Q[10]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[11]),
        .Q(Q[11]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[8]),
        .Q(Q[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[9]),
        .Q(Q[9]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(p_12_out[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[10]),
        .Q(p_12_out[10]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[11]),
        .Q(p_12_out[11]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(p_12_out[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(p_12_out[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(p_12_out[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(p_12_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(p_12_out[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(p_12_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(p_12_out[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(p_12_out[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[9]),
        .Q(p_12_out[9]),
        .R(SS));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(p_12_out[1]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(p_12_out[0]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(Q[2]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(p_12_out[3]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(p_12_out[2]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(Q[2]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(Q[4]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(p_12_out[5]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(p_12_out[4]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(Q[4]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(ram_empty_i_reg_1));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(Q[6]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(p_12_out[7]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(p_12_out[6]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg_0[3]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(Q[6]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(ram_empty_i_reg_2));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(Q[9]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(Q[8]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(p_12_out[9]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(p_12_out[8]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg_0[4]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(Q[9]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(Q[8]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(ram_empty_i_reg_3));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1 
       (.I0(Q[11]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(Q[10]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg[5]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1__1 
       (.I0(p_12_out[11]),
        .I1(p_12_out[10]),
        .I2(\gc0.count_d1_reg[11] [10]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg_0[5]));
  LUT4 #(
    .INIT(16'h8241)) 
    \gmux.gm[5].gms.ms_i_1__2 
       (.I0(Q[11]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(Q[10]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(ram_empty_i_reg_4));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(p_12_out[0]),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S(p_12_out[8:1]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:2],plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,p_12_out[11:9]}));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized4
   (ram_full_i_reg,
    Q,
    ram_empty_i_reg,
    ram_full_i_reg_0,
    ram_empty_i_reg_0,
    \gcc0.gc0.count_d1_reg[7]_0 ,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[8] ,
    SS,
    E,
    clk);
  output ram_full_i_reg;
  output [8:0]Q;
  output ram_empty_i_reg;
  output ram_full_i_reg_0;
  output ram_empty_i_reg_0;
  output [7:0]\gcc0.gc0.count_d1_reg[7]_0 ;
  input [0:0]\gc0.count_d1_reg[8] ;
  input [0:0]\gc0.count_reg[8] ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [0:0]\gc0.count_d1_reg[8] ;
  wire [0:0]\gc0.count_reg[8] ;
  wire \gcc0.gc0.count[8]_i_2_n_0 ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7]_0 ;
  wire [8:8]p_12_out;
  wire [8:0]plusOp__0;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_full_i_reg;
  wire ram_full_i_reg_0;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .I3(\gcc0.gc0.count_d1_reg[7]_0 [3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[7]_0 [3]),
        .I4(\gcc0.gc0.count_d1_reg[7]_0 [4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gcc0.gc0.count[5]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [3]),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .I4(\gcc0.gc0.count_d1_reg[7]_0 [4]),
        .I5(\gcc0.gc0.count_d1_reg[7]_0 [5]),
        .O(plusOp__0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[6]_i_1 
       (.I0(\gcc0.gc0.count[8]_i_2_n_0 ),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[7]_i_1 
       (.I0(\gcc0.gc0.count[8]_i_2_n_0 ),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [6]),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[8]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [6]),
        .I1(\gcc0.gc0.count[8]_i_2_n_0 ),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [7]),
        .I3(p_12_out),
        .O(plusOp__0[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gcc0.gc0.count[8]_i_2 
       (.I0(\gcc0.gc0.count_d1_reg[7]_0 [5]),
        .I1(\gcc0.gc0.count_d1_reg[7]_0 [3]),
        .I2(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .I4(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .I5(\gcc0.gc0.count_d1_reg[7]_0 [4]),
        .O(\gcc0.gc0.count[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[7]_0 [7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(p_12_out),
        .Q(Q[8]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(\gcc0.gc0.count_d1_reg[7]_0 [7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(p_12_out),
        .R(SS));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(Q[8]),
        .I1(\gc0.count_d1_reg[8] ),
        .O(ram_full_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(Q[8]),
        .I1(\gc0.count_reg[8] ),
        .O(ram_empty_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(p_12_out),
        .I1(\gc0.count_d1_reg[8] ),
        .O(ram_full_i_reg_0));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(Q[8]),
        .I1(\gc0.count_d1_reg[8] ),
        .O(ram_empty_i_reg_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized5
   (ram_full_fb_i_reg,
    Q,
    ram_empty_i_reg,
    srst,
    ram_empty_fb_i_reg,
    rd_en,
    wr_rst_reg_reg,
    \gc0.count_d1_reg[3] ,
    out,
    wr_en,
    SS,
    E,
    clk);
  output ram_full_fb_i_reg;
  output [3:0]Q;
  output ram_empty_i_reg;
  input srst;
  input ram_empty_fb_i_reg;
  input rd_en;
  input wr_rst_reg_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input out;
  input wr_en;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire out;
  wire [3:0]p_12_out;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_fb_i_i_3_n_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_12_out[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_12_out[0]),
        .I1(p_12_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_12_out[2]),
        .I1(p_12_out[0]),
        .I2(p_12_out[1]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_12_out[3]),
        .I1(p_12_out[0]),
        .I2(p_12_out[1]),
        .I3(p_12_out[2]),
        .O(plusOp__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[3]),
        .Q(Q[3]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(p_12_out[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(p_12_out[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(p_12_out[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(p_12_out[3]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT5 #(
    .INIT(32'hFFFFF7FD)) 
    ram_empty_fb_i_i_2
       (.I0(wr_en),
        .I1(Q[3]),
        .I2(ram_empty_fb_i_i_4_n_0),
        .I3(\gc0.count_d1_reg[3] [3]),
        .I4(out),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h7FF7DFFDBFFBEFFE)) 
    ram_empty_fb_i_i_4
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[3] [0]),
        .I2(\gc0.count_d1_reg[3] [1]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\gc0.count_d1_reg[3] [2]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000054551000)) 
    ram_full_fb_i_i_1
       (.I0(srst),
        .I1(ram_empty_fb_i_reg),
        .I2(ram_full_fb_i_i_2_n_0),
        .I3(rd_en),
        .I4(ram_full_fb_i_i_3_n_0),
        .I5(wr_rst_reg_reg),
        .O(ram_full_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT4 #(
    .INIT(16'hDE00)) 
    ram_full_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(ram_empty_fb_i_i_4_n_0),
        .I2(Q[3]),
        .I3(out),
        .O(ram_full_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFFF8020)) 
    ram_full_fb_i_i_3
       (.I0(wr_en),
        .I1(p_12_out[3]),
        .I2(ram_full_fb_i_i_4_n_0),
        .I3(\gc0.count_d1_reg[3] [3]),
        .I4(out),
        .O(ram_full_fb_i_i_3_n_0));
  LUT6 #(
    .INIT(64'h8008200240041001)) 
    ram_full_fb_i_i_4
       (.I0(p_12_out[2]),
        .I1(\gc0.count_d1_reg[3] [0]),
        .I2(p_12_out[1]),
        .I3(\gc0.count_d1_reg[3] [1]),
        .I4(p_12_out[0]),
        .I5(\gc0.count_d1_reg[3] [2]),
        .O(ram_full_fb_i_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized5_66
   (ram_full_fb_i_reg,
    Q,
    ram_empty_i_reg,
    srst,
    ram_empty_fb_i_reg,
    rd_en,
    wr_rst_reg_reg,
    \gc0.count_d1_reg[3] ,
    out,
    wr_en,
    SS,
    E,
    clk);
  output ram_full_fb_i_reg;
  output [3:0]Q;
  output ram_empty_i_reg;
  input srst;
  input ram_empty_fb_i_reg;
  input rd_en;
  input wr_rst_reg_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input out;
  input wr_en;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire out;
  wire [3:0]p_12_out;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_fb_i_i_3_n_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_12_out[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_12_out[0]),
        .I1(p_12_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_12_out[2]),
        .I1(p_12_out[0]),
        .I2(p_12_out[1]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_12_out[3]),
        .I1(p_12_out[0]),
        .I2(p_12_out[1]),
        .I3(p_12_out[2]),
        .O(plusOp__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[3]),
        .Q(Q[3]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(p_12_out[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(p_12_out[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(p_12_out[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(p_12_out[3]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT5 #(
    .INIT(32'hFFFFF7FD)) 
    ram_empty_fb_i_i_2
       (.I0(wr_en),
        .I1(Q[3]),
        .I2(ram_empty_fb_i_i_4_n_0),
        .I3(\gc0.count_d1_reg[3] [3]),
        .I4(out),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h7FF7DFFDBFFBEFFE)) 
    ram_empty_fb_i_i_4
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[3] [0]),
        .I2(\gc0.count_d1_reg[3] [1]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\gc0.count_d1_reg[3] [2]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000054551000)) 
    ram_full_fb_i_i_1
       (.I0(srst),
        .I1(ram_empty_fb_i_reg),
        .I2(ram_full_fb_i_i_2_n_0),
        .I3(rd_en),
        .I4(ram_full_fb_i_i_3_n_0),
        .I5(wr_rst_reg_reg),
        .O(ram_full_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'hDE00)) 
    ram_full_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(ram_empty_fb_i_i_4_n_0),
        .I2(Q[3]),
        .I3(out),
        .O(ram_full_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFFF8020)) 
    ram_full_fb_i_i_3
       (.I0(wr_en),
        .I1(p_12_out[3]),
        .I2(ram_full_fb_i_i_4_n_0),
        .I3(\gc0.count_d1_reg[3] [3]),
        .I4(out),
        .O(ram_full_fb_i_i_3_n_0));
  LUT6 #(
    .INIT(64'h8008200240041001)) 
    ram_full_fb_i_i_4
       (.I0(p_12_out[2]),
        .I1(\gc0.count_d1_reg[3] [0]),
        .I2(p_12_out[1]),
        .I3(\gc0.count_d1_reg[3] [1]),
        .I4(p_12_out[0]),
        .I5(\gc0.count_d1_reg[3] [2]),
        .O(ram_full_fb_i_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized6
   (ram_empty_fb_i_reg,
    Q,
    \gcc0.gc0.count_d1_reg[5]_0 ,
    ram_full_i_reg,
    \gc0.count_reg[7] ,
    \gc0.count_d1_reg[7] ,
    SS,
    E,
    clk);
  output ram_empty_fb_i_reg;
  output [7:0]Q;
  output [4:0]\gcc0.gc0.count_d1_reg[5]_0 ;
  output ram_full_i_reg;
  input [2:0]\gc0.count_reg[7] ;
  input [2:0]\gc0.count_d1_reg[7] ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire [2:0]\gc0.count_reg[7] ;
  wire \gcc0.gc0.count[7]_i_2_n_0 ;
  wire [4:0]\gcc0.gc0.count_d1_reg[5]_0 ;
  wire [7:4]p_12_out;
  wire [7:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_full_i_reg;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair522" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair522" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair521" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I4(p_12_out[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gcc0.gc0.count[5]_i_1 
       (.I0(p_12_out[4]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I4(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .I5(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair520" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[6]_i_1 
       (.I0(\gcc0.gc0.count[7]_i_2_n_0 ),
        .I1(p_12_out[4]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .I3(p_12_out[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair520" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[7]_i_1 
       (.I0(\gcc0.gc0.count[7]_i_2_n_0 ),
        .I1(p_12_out[6]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .I3(p_12_out[4]),
        .I4(p_12_out[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair521" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gcc0.gc0.count[7]_i_2 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .O(\gcc0.gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(p_12_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(p_12_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(p_12_out[7]),
        .R(SS));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_fb_i_i_4
       (.I0(Q[4]),
        .I1(\gc0.count_reg[7] [0]),
        .I2(Q[7]),
        .I3(\gc0.count_reg[7] [2]),
        .I4(\gc0.count_reg[7] [1]),
        .I5(Q[6]),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_fb_i_i_3
       (.I0(p_12_out[4]),
        .I1(\gc0.count_d1_reg[7] [0]),
        .I2(p_12_out[7]),
        .I3(\gc0.count_d1_reg[7] [2]),
        .I4(\gc0.count_d1_reg[7] [1]),
        .I5(p_12_out[6]),
        .O(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized6_15
   (ram_empty_fb_i_reg,
    Q,
    \gcc0.gc0.count_d1_reg[5]_0 ,
    ram_full_i_reg,
    \gc0.count_reg[7] ,
    \gc0.count_d1_reg[7] ,
    SS,
    E,
    clk);
  output ram_empty_fb_i_reg;
  output [7:0]Q;
  output [4:0]\gcc0.gc0.count_d1_reg[5]_0 ;
  output ram_full_i_reg;
  input [2:0]\gc0.count_reg[7] ;
  input [2:0]\gc0.count_d1_reg[7] ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire [2:0]\gc0.count_reg[7] ;
  wire \gcc0.gc0.count[7]_i_2_n_0 ;
  wire [4:0]\gcc0.gc0.count_d1_reg[5]_0 ;
  wire [7:4]p_12_out;
  wire [7:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_full_i_reg;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair501" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair501" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair500" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I4(p_12_out[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gcc0.gc0.count[5]_i_1 
       (.I0(p_12_out[4]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I4(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .I5(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair499" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[6]_i_1 
       (.I0(\gcc0.gc0.count[7]_i_2_n_0 ),
        .I1(p_12_out[4]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .I3(p_12_out[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair499" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[7]_i_1 
       (.I0(\gcc0.gc0.count[7]_i_2_n_0 ),
        .I1(p_12_out[6]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .I3(p_12_out[4]),
        .I4(p_12_out[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair500" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gcc0.gc0.count[7]_i_2 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .O(\gcc0.gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(p_12_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(p_12_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(p_12_out[7]),
        .R(SS));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_fb_i_i_4
       (.I0(Q[4]),
        .I1(\gc0.count_reg[7] [0]),
        .I2(Q[7]),
        .I3(\gc0.count_reg[7] [2]),
        .I4(\gc0.count_reg[7] [1]),
        .I5(Q[6]),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_fb_i_i_3
       (.I0(p_12_out[4]),
        .I1(\gc0.count_d1_reg[7] [0]),
        .I2(p_12_out[7]),
        .I3(\gc0.count_d1_reg[7] [2]),
        .I4(\gc0.count_d1_reg[7] [1]),
        .I5(p_12_out[6]),
        .O(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized6_5
   (ram_empty_fb_i_reg,
    Q,
    \gcc0.gc0.count_d1_reg[5]_0 ,
    ram_full_i_reg,
    \gc0.count_reg[7] ,
    \gc0.count_d1_reg[7] ,
    SS,
    E,
    clk);
  output ram_empty_fb_i_reg;
  output [7:0]Q;
  output [4:0]\gcc0.gc0.count_d1_reg[5]_0 ;
  output ram_full_i_reg;
  input [2:0]\gc0.count_reg[7] ;
  input [2:0]\gc0.count_d1_reg[7] ;
  input [0:0]SS;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire [2:0]\gc0.count_reg[7] ;
  wire \gcc0.gc0.count[7]_i_2_n_0 ;
  wire [4:0]\gcc0.gc0.count_d1_reg[5]_0 ;
  wire [7:4]p_12_out;
  wire [7:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_full_i_reg;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair514" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair514" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair513" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I4(p_12_out[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gcc0.gc0.count[5]_i_1 
       (.I0(p_12_out[4]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I4(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .I5(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair512" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[6]_i_1 
       (.I0(\gcc0.gc0.count[7]_i_2_n_0 ),
        .I1(p_12_out[4]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .I3(p_12_out[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair512" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[7]_i_1 
       (.I0(\gcc0.gc0.count[7]_i_2_n_0 ),
        .I1(p_12_out[6]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .I3(p_12_out[4]),
        .I4(p_12_out[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair513" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gcc0.gc0.count[7]_i_2 
       (.I0(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .I1(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .I2(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .I3(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .O(\gcc0.gc0.count[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(p_12_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(p_12_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(\gcc0.gc0.count_d1_reg[5]_0 [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(p_12_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(p_12_out[7]),
        .R(SS));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_fb_i_i_4
       (.I0(Q[4]),
        .I1(\gc0.count_reg[7] [0]),
        .I2(Q[7]),
        .I3(\gc0.count_reg[7] [2]),
        .I4(\gc0.count_reg[7] [1]),
        .I5(Q[6]),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_fb_i_i_3
       (.I0(p_12_out[4]),
        .I1(\gc0.count_d1_reg[7] [0]),
        .I2(p_12_out[7]),
        .I3(\gc0.count_d1_reg[7] [2]),
        .I4(\gc0.count_d1_reg[7] [1]),
        .I5(p_12_out[6]),
        .O(ram_full_i_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_dc_as
   (wr_data_count,
    Q,
    S,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    wr_clk);
  output [7:0]wr_data_count;
  input [6:0]Q;
  input [7:0]S;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input wr_clk;

  wire [6:0]Q;
  wire [7:0]S;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_10;
  wire minusOp_carry_n_11;
  wire minusOp_carry_n_12;
  wire minusOp_carry_n_13;
  wire minusOp_carry_n_14;
  wire minusOp_carry_n_15;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_5;
  wire minusOp_carry_n_6;
  wire minusOp_carry_n_7;
  wire minusOp_carry_n_8;
  wire minusOp_carry_n_9;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire [7:3]NLW_minusOp_carry_CO_UNCONNECTED;

  CARRY8 minusOp_carry
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({NLW_minusOp_carry_CO_UNCONNECTED[7],minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3,NLW_minusOp_carry_CO_UNCONNECTED[3],minusOp_carry_n_5,minusOp_carry_n_6,minusOp_carry_n_7}),
        .DI({1'b0,Q}),
        .O({minusOp_carry_n_8,minusOp_carry_n_9,minusOp_carry_n_10,minusOp_carry_n_11,minusOp_carry_n_12,minusOp_carry_n_13,minusOp_carry_n_14,minusOp_carry_n_15}),
        .S(S));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_15),
        .Q(wr_data_count[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_14),
        .Q(wr_data_count[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_13),
        .Q(wr_data_count[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_12),
        .Q(wr_data_count[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_11),
        .Q(wr_data_count[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_10),
        .Q(wr_data_count[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_9),
        .Q(wr_data_count[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_8),
        .Q(wr_data_count[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "wr_dc_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_dc_as__parameterized0
   (wr_data_count,
    Q,
    S,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    wr_clk);
  output [5:0]wr_data_count;
  input [4:0]Q;
  input [5:0]S;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input wr_clk;

  wire [4:0]Q;
  wire [5:0]S;
  wire minusOp_carry_n_10;
  wire minusOp_carry_n_11;
  wire minusOp_carry_n_12;
  wire minusOp_carry_n_13;
  wire minusOp_carry_n_14;
  wire minusOp_carry_n_15;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_5;
  wire minusOp_carry_n_6;
  wire minusOp_carry_n_7;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire [7:3]NLW_minusOp_carry_CO_UNCONNECTED;
  wire [7:6]NLW_minusOp_carry_O_UNCONNECTED;

  CARRY8 minusOp_carry
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({NLW_minusOp_carry_CO_UNCONNECTED[7:5],minusOp_carry_n_3,NLW_minusOp_carry_CO_UNCONNECTED[3],minusOp_carry_n_5,minusOp_carry_n_6,minusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,Q}),
        .O({NLW_minusOp_carry_O_UNCONNECTED[7:6],minusOp_carry_n_10,minusOp_carry_n_11,minusOp_carry_n_12,minusOp_carry_n_13,minusOp_carry_n_14,minusOp_carry_n_15}),
        .S({1'b0,1'b0,S}));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_15),
        .Q(wr_data_count[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_14),
        .Q(wr_data_count[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_13),
        .Q(wr_data_count[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_12),
        .Q(wr_data_count[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_11),
        .Q(wr_data_count[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(minusOp_carry_n_10),
        .Q(wr_data_count[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic
   (full,
    Q,
    ENA_I,
    ram_full_fb_i_reg,
    \gic0.gc0.count_d1_reg[6] ,
    E,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d2_reg[7] ,
    wr_data_count,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    wr_clk,
    RD_PNTR_WR,
    wr_en,
    ENA_dly_D,
    out,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg_0 );
  output full;
  output [7:0]Q;
  output ENA_I;
  output ram_full_fb_i_reg;
  output [6:0]\gic0.gc0.count_d1_reg[6] ;
  output [0:0]E;
  output ram_full_fb_i_reg_0;
  output [5:0]\gic0.gc0.count_d2_reg[7] ;
  output [7:0]wr_data_count;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input wr_clk;
  input [7:0]RD_PNTR_WR;
  input wr_en;
  input ENA_dly_D;
  input out;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg_0 ;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire [7:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire full;
  wire [6:0]\gic0.gc0.count_d1_reg[6] ;
  wire [5:0]\gic0.gc0.count_d2_reg[7] ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg_0 ;
  wire out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_2;
  wire wpntr_n_3;
  wire wpntr_n_4;
  wire wpntr_n_5;
  wire wpntr_n_6;
  wire wpntr_n_7;
  wire wr_clk;
  wire [7:0]wr_data_count;
  wire wr_en;
  wire [7:7]wr_pntr_plus2;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_dc_as \gwas.gwdc0.wdc 
       (.Q(Q[6:0]),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3,wpntr_n_4,wpntr_n_5,wpntr_n_6,wpntr_n_7}),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg_0 ),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as \gwas.wsts 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(RD_PNTR_WR[7]),
        .full(full),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr wpntr
       (.E(E),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3,wpntr_n_4,wpntr_n_5,wpntr_n_6,wpntr_n_7}),
        .\gic0.gc0.count_d1_reg[7]_0 ({wr_pntr_plus2,\gic0.gc0.count_d1_reg[6] }),
        .\gic0.gc0.count_d2_reg[7]_0 (\gic0.gc0.count_d2_reg[7] ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg_0 ),
        .out(out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg_0),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized0
   (full,
    ENA_I,
    ram_full_fb_i_reg,
    Q,
    E,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d2_reg[3] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    wr_clk,
    wr_en,
    ENA_dly_D,
    RD_PNTR_WR,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg );
  output full;
  output ENA_I;
  output ram_full_fb_i_reg;
  output [2:0]Q;
  output [0:0]E;
  output ram_full_fb_i_reg_0;
  output [0:0]\gic0.gc0.count_d2_reg[3] ;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input wr_clk;
  input wr_en;
  input ENA_dly_D;
  input [3:0]RD_PNTR_WR;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire [2:0]Q;
  wire [3:0]RD_PNTR_WR;
  wire full;
  wire [0:0]\gic0.gc0.count_d2_reg[3] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire wr_clk;
  wire wr_en;
  wire [3:3]wr_pntr_plus2;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as__parameterized0 \gwas.wsts 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(RD_PNTR_WR[3]),
        .full(full),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized0 wpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q({wr_pntr_plus2,Q}),
        .RD_PNTR_WR(RD_PNTR_WR[2:0]),
        .\gic0.gc0.count_d2_reg[3]_0 (\gic0.gc0.count_d2_reg[3] ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg_0),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized0_74
   (full,
    ENA_I,
    ram_full_fb_i_reg,
    Q,
    E,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d2_reg[3] ,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    wr_clk,
    wr_en,
    ENA_dly_D,
    RD_PNTR_WR,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg );
  output full;
  output ENA_I;
  output ram_full_fb_i_reg;
  output [2:0]Q;
  output [0:0]E;
  output ram_full_fb_i_reg_0;
  output [0:0]\gic0.gc0.count_d2_reg[3] ;
  output [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input wr_clk;
  input wr_en;
  input ENA_dly_D;
  input [3:0]RD_PNTR_WR;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;

  wire [3:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire [2:0]Q;
  wire [3:0]RD_PNTR_WR;
  wire full;
  wire [0:0]\gic0.gc0.count_d2_reg[3] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire wr_clk;
  wire wr_en;
  wire [3:3]wr_pntr_plus2;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as__parameterized0_82 \gwas.wsts 
       (.E(E),
        .ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(RD_PNTR_WR[3]),
        .full(full),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized0_83 wpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q({wr_pntr_plus2,Q}),
        .RD_PNTR_WR(RD_PNTR_WR[2:0]),
        .\gic0.gc0.count_d2_reg[3]_0 (\gic0.gc0.count_d2_reg[3] ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg_0),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized1
   (full,
    out,
    Q,
    E,
    \gic0.gc0.count_d1_reg[5] ,
    \gic0.gc0.count_d2_reg[5] ,
    wr_data_count,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    ram_full_fb_i_reg,
    wr_clk,
    RD_PNTR_WR,
    wr_en);
  output full;
  output out;
  output [5:0]Q;
  output [0:0]E;
  output [5:0]\gic0.gc0.count_d1_reg[5] ;
  output [5:0]\gic0.gc0.count_d2_reg[5] ;
  output [5:0]wr_data_count;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input ram_full_fb_i_reg;
  input wr_clk;
  input [5:0]RD_PNTR_WR;
  input wr_en;

  wire [0:0]E;
  wire [5:0]Q;
  wire [5:0]RD_PNTR_WR;
  wire full;
  wire [5:0]\gic0.gc0.count_d1_reg[5] ;
  wire [5:0]\gic0.gc0.count_d2_reg[5] ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire ram_full_fb_i_reg;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_2;
  wire wpntr_n_3;
  wire wpntr_n_4;
  wire wpntr_n_5;
  wire wr_clk;
  wire [5:0]wr_data_count;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_dc_as__parameterized0 \gwas.gwdc0.wdc 
       (.Q(Q[4:0]),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3,wpntr_n_4,wpntr_n_5}),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as__parameterized1 \gwas.wsts 
       (.E(E),
        .full(full),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .out(out),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized1 wpntr
       (.E(E),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3,wpntr_n_4,wpntr_n_5}),
        .\gic0.gc0.count_d1_reg[5]_0 (\gic0.gc0.count_d1_reg[5] ),
        .\gic0.gc0.count_d2_reg[5]_0 (\gic0.gc0.count_d2_reg[5] ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized2
   (full,
    \count_reg[9] ,
    E,
    Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    v1_reg,
    v1_reg_0,
    clk,
    txfifo_rd_en_reg,
    wr_en,
    SS,
    out,
    rd_en);
  output full;
  output [0:0]\count_reg[9] ;
  output [0:0]E;
  output [9:0]Q;
  output [9:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [4:0]v1_reg;
  input [4:0]v1_reg_0;
  input clk;
  input [0:0]txfifo_rd_en_reg;
  input wr_en;
  input [0:0]SS;
  input out;
  input rd_en;

  wire [9:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [9:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [0:0]\count_reg[9] ;
  wire full;
  wire out;
  wire rd_en;
  wire [0:0]txfifo_rd_en_reg;
  wire [4:0]v1_reg;
  wire [4:0]v1_reg_0;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss \gwss.wsts 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .\count_reg[9] (\count_reg[9] ),
        .full(full),
        .out(out),
        .rd_en(rd_en),
        .txfifo_rd_en_reg(txfifo_rd_en_reg),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized2 wpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized3
   (out,
    full,
    E,
    Q,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    clk,
    wr_en,
    \gc0.count_d1_reg[11] ,
    srst,
    wr_rst_reg_reg,
    ram_empty_fb_i_reg,
    rd_en,
    SS);
  output out;
  output full;
  output [0:0]E;
  output [11:0]Q;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input clk;
  input wr_en;
  input [11:0]\gc0.count_d1_reg[11] ;
  input srst;
  input wr_rst_reg_reg;
  input ram_empty_fb_i_reg;
  input rd_en;
  input [0:0]SS;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire [5:0]\c0/v1_reg ;
  wire [5:0]\c1/v1_reg ;
  wire clk;
  wire full;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized0 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg(\c0/v1_reg ),
        .v1_reg_0(\c1/v1_reg ),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized3 wpntr
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_empty_i_reg_0(ram_empty_i_reg_0),
        .ram_empty_i_reg_1(ram_empty_i_reg_1),
        .ram_empty_i_reg_2(ram_empty_i_reg_2),
        .ram_empty_i_reg_3(ram_empty_i_reg_3),
        .ram_empty_i_reg_4(ram_empty_i_reg_4),
        .v1_reg(\c0/v1_reg ),
        .v1_reg_0(\c1/v1_reg ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized3_31
   (out,
    full,
    E,
    Q,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    clk,
    wr_en,
    \gc0.count_d1_reg[11] ,
    srst,
    wr_rst_reg_reg,
    ram_empty_fb_i_reg,
    rd_en,
    SS);
  output out;
  output full;
  output [0:0]E;
  output [11:0]Q;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input clk;
  input wr_en;
  input [11:0]\gc0.count_d1_reg[11] ;
  input srst;
  input wr_rst_reg_reg;
  input ram_empty_fb_i_reg;
  input rd_en;
  input [0:0]SS;

  wire [0:0]E;
  wire [11:0]Q;
  wire [0:0]SS;
  wire [5:0]\c0/v1_reg ;
  wire [5:0]\c1/v1_reg ;
  wire clk;
  wire full;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized0_34 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg(\c0/v1_reg ),
        .v1_reg_0(\c1/v1_reg ),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized3_35 wpntr
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_empty_i_reg_0(ram_empty_i_reg_0),
        .ram_empty_i_reg_1(ram_empty_i_reg_1),
        .ram_empty_i_reg_2(ram_empty_i_reg_2),
        .ram_empty_i_reg_3(ram_empty_i_reg_3),
        .ram_empty_i_reg_4(ram_empty_i_reg_4),
        .v1_reg(\c0/v1_reg ),
        .v1_reg_0(\c1/v1_reg ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized4
   (full,
    Q,
    ram_empty_i_reg,
    \gcc0.gc0.count_d1_reg[7] ,
    ram_empty_i_reg_0,
    \count_reg[8] ,
    E,
    v1_reg,
    v1_reg_0,
    clk,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[8] ,
    cs_fifo_rd_en_reg,
    wr_en,
    SS,
    out,
    rd_en);
  output full;
  output [8:0]Q;
  output ram_empty_i_reg;
  output [7:0]\gcc0.gc0.count_d1_reg[7] ;
  output ram_empty_i_reg_0;
  output [0:0]\count_reg[8] ;
  output [0:0]E;
  input [3:0]v1_reg;
  input [3:0]v1_reg_0;
  input clk;
  input [0:0]\gc0.count_d1_reg[8] ;
  input [0:0]\gc0.count_reg[8] ;
  input [0:0]cs_fifo_rd_en_reg;
  input wr_en;
  input [0:0]SS;
  input out;
  input rd_en;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire clk;
  wire [0:0]\count_reg[8] ;
  wire [0:0]cs_fifo_rd_en_reg;
  wire full;
  wire [0:0]\gc0.count_d1_reg[8] ;
  wire [0:0]\gc0.count_reg[8] ;
  wire [7:0]\gcc0.gc0.count_d1_reg[7] ;
  wire out;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire rd_en;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wpntr_n_0;
  wire wpntr_n_11;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized1 \gwss.wsts 
       (.E(E),
        .SS(SS),
        .clk(clk),
        .\count_reg[8] (\count_reg[8] ),
        .cs_fifo_rd_en_reg(cs_fifo_rd_en_reg),
        .full(full),
        .\gcc0.gc0.count_d1_reg[8] (wpntr_n_0),
        .\gcc0.gc0.count_reg[8] (wpntr_n_11),
        .out(out),
        .rd_en(rd_en),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized4 wpntr
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .\gcc0.gc0.count_d1_reg[7]_0 (\gcc0.gc0.count_d1_reg[7] ),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_empty_i_reg_0(ram_empty_i_reg_0),
        .ram_full_i_reg(wpntr_n_0),
        .ram_full_i_reg_0(wpntr_n_11));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized5
   (out,
    full,
    Q,
    ram_empty_i_reg,
    E,
    clk,
    srst,
    ram_empty_fb_i_reg,
    rd_en,
    wr_rst_reg_reg,
    \gc0.count_d1_reg[3] ,
    wr_en,
    SS);
  output out;
  output full;
  output [3:0]Q;
  output ram_empty_i_reg;
  output [0:0]E;
  input clk;
  input srst;
  input ram_empty_fb_i_reg;
  input rd_en;
  input wr_rst_reg_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input wr_en;
  input [0:0]SS;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire full;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire rd_en;
  wire srst;
  wire wpntr_n_0;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized2 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .out(out),
        .ram_empty_fb_i_reg(wpntr_n_0),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized5 wpntr
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_fb_i_reg(wpntr_n_0),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized5_55
   (out,
    full,
    Q,
    ram_empty_i_reg,
    E,
    clk,
    srst,
    ram_empty_fb_i_reg,
    rd_en,
    wr_rst_reg_reg,
    \gc0.count_d1_reg[3] ,
    wr_en,
    SS);
  output out;
  output full;
  output [3:0]Q;
  output ram_empty_i_reg;
  output [0:0]E;
  input clk;
  input srst;
  input ram_empty_fb_i_reg;
  input rd_en;
  input wr_rst_reg_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input wr_en;
  input [0:0]SS;

  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SS;
  wire clk;
  wire full;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire rd_en;
  wire srst;
  wire wpntr_n_0;
  wire wr_en;
  wire wr_rst_reg_reg;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized2_65 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .out(out),
        .ram_empty_fb_i_reg(wpntr_n_0),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized5_66 wpntr
       (.E(E),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_fb_i_reg(wpntr_n_0),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized6
   (out,
    full,
    E,
    \gcc0.gc0.count_reg[7] ,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    Q,
    \gcc0.gc0.count_d1_reg[5] ,
    ram_full_i_reg,
    ram_full_fb_i_reg,
    clk,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg_1,
    \gc0.count_reg[7] ,
    \gc0.count_d1_reg[7] ,
    SS);
  output out;
  output full;
  output [0:0]E;
  output [0:0]\gcc0.gc0.count_reg[7] ;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [7:0]Q;
  output [4:0]\gcc0.gc0.count_d1_reg[5] ;
  output ram_full_i_reg;
  input ram_full_fb_i_reg;
  input clk;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg_1;
  input [2:0]\gc0.count_reg[7] ;
  input [2:0]\gc0.count_d1_reg[7] ;
  input [0:0]SS;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire full;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire [2:0]\gc0.count_reg[7] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[5] ;
  wire [0:0]\gcc0.gc0.count_reg[7] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_fb_i_reg_1;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire rd_en;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized3 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .\gcc0.gc0.count_reg[7] (\gcc0.gc0.count_reg[7] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg_1),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized6 wpntr
       (.E(\gcc0.gc0.count_reg[7] ),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .\gc0.count_reg[7] (\gc0.count_reg[7] ),
        .\gcc0.gc0.count_d1_reg[5]_0 (\gcc0.gc0.count_d1_reg[5] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg_0),
        .ram_full_i_reg(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized6_1
   (out,
    full,
    E,
    \gcc0.gc0.count_reg[7] ,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    Q,
    \gcc0.gc0.count_d1_reg[5] ,
    ram_full_i_reg,
    ram_full_fb_i_reg,
    clk,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg_1,
    \gc0.count_reg[7] ,
    \gc0.count_d1_reg[7] ,
    SS);
  output out;
  output full;
  output [0:0]E;
  output [0:0]\gcc0.gc0.count_reg[7] ;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [7:0]Q;
  output [4:0]\gcc0.gc0.count_d1_reg[5] ;
  output ram_full_i_reg;
  input ram_full_fb_i_reg;
  input clk;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg_1;
  input [2:0]\gc0.count_reg[7] ;
  input [2:0]\gc0.count_d1_reg[7] ;
  input [0:0]SS;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire full;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire [2:0]\gc0.count_reg[7] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[5] ;
  wire [0:0]\gcc0.gc0.count_reg[7] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_fb_i_reg_1;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire rd_en;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized3_4 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .\gcc0.gc0.count_reg[7] (\gcc0.gc0.count_reg[7] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg_1),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized6_5 wpntr
       (.E(\gcc0.gc0.count_reg[7] ),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .\gc0.count_reg[7] (\gc0.count_reg[7] ),
        .\gcc0.gc0.count_d1_reg[5]_0 (\gcc0.gc0.count_d1_reg[5] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg_0),
        .ram_full_i_reg(ram_full_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_logic__parameterized6_11
   (out,
    full,
    E,
    \gcc0.gc0.count_reg[7] ,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    Q,
    \gcc0.gc0.count_d1_reg[5] ,
    ram_full_i_reg,
    ram_full_fb_i_reg,
    clk,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg_1,
    \gc0.count_reg[7] ,
    \gc0.count_d1_reg[7] ,
    SS);
  output out;
  output full;
  output [0:0]E;
  output [0:0]\gcc0.gc0.count_reg[7] ;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [7:0]Q;
  output [4:0]\gcc0.gc0.count_d1_reg[5] ;
  output ram_full_i_reg;
  input ram_full_fb_i_reg;
  input clk;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg_1;
  input [2:0]\gc0.count_reg[7] ;
  input [2:0]\gc0.count_d1_reg[7] ;
  input [0:0]SS;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire clk;
  wire full;
  wire [2:0]\gc0.count_d1_reg[7] ;
  wire [2:0]\gc0.count_reg[7] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[5] ;
  wire [0:0]\gcc0.gc0.count_reg[7] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_fb_i_reg_1;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire rd_en;
  wire wr_en;

  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized3_14 \gwss.wsts 
       (.E(E),
        .clk(clk),
        .full(full),
        .\gcc0.gc0.count_reg[7] (\gcc0.gc0.count_reg[7] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg_1),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_wr_bin_cntr__parameterized6_15 wpntr
       (.E(\gcc0.gc0.count_reg[7] ),
        .Q(Q),
        .SS(SS),
        .clk(clk),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .\gc0.count_reg[7] (\gc0.count_reg[7] ),
        .\gcc0.gc0.count_d1_reg[5]_0 (\gcc0.gc0.count_d1_reg[5] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg_0),
        .ram_full_i_reg(ram_full_i_reg));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as
   (full,
    ENA_I,
    ram_full_fb_i_reg_0,
    E,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    wr_clk,
    wr_en,
    ENA_dly_D,
    Q,
    RD_PNTR_WR);
  output full;
  output ENA_I;
  output ram_full_fb_i_reg_0;
  output [0:0]E;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input wr_clk;
  input wr_en;
  input ENA_dly_D;
  input [0:0]Q;
  input [0:0]RD_PNTR_WR;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire [0:0]Q;
  wire [0:0]RD_PNTR_WR;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  LUT3 #(
    .INIT(8'hF4)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_2 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(ENA_dly_D),
        .O(ENA_I));
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_4 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .Q(ram_full_fb_i),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_full_i_i_6
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(Q),
        .I3(RD_PNTR_WR),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as__parameterized0
   (full,
    ENA_I,
    ram_full_fb_i_reg_0,
    E,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    wr_clk,
    wr_en,
    ENA_dly_D,
    Q,
    RD_PNTR_WR);
  output full;
  output ENA_I;
  output ram_full_fb_i_reg_0;
  output [0:0]E;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input wr_clk;
  input wr_en;
  input ENA_dly_D;
  input [0:0]Q;
  input [0:0]RD_PNTR_WR;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire [0:0]Q;
  wire [0:0]RD_PNTR_WR;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  LUT3 #(
    .INIT(8'hF4)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(ENA_dly_D),
        .O(ENA_I));
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_4 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .Q(ram_full_fb_i),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_full_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(Q),
        .I3(RD_PNTR_WR),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as__parameterized0_82
   (full,
    ENA_I,
    ram_full_fb_i_reg_0,
    E,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    wr_clk,
    wr_en,
    ENA_dly_D,
    Q,
    RD_PNTR_WR);
  output full;
  output ENA_I;
  output ram_full_fb_i_reg_0;
  output [0:0]E;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input wr_clk;
  input wr_en;
  input ENA_dly_D;
  input [0:0]Q;
  input [0:0]RD_PNTR_WR;

  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire [0:0]Q;
  wire [0:0]RD_PNTR_WR;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  LUT3 #(
    .INIT(8'hF4)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(ENA_dly_D),
        .O(ENA_I));
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_4 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .Q(ram_full_fb_i),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_full_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(Q),
        .I3(RD_PNTR_WR),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_as__parameterized1
   (full,
    out,
    E,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    ram_full_fb_i_reg_0,
    wr_clk,
    wr_en);
  output full;
  output out;
  output [0:0]E;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input ram_full_fb_i_reg_0;
  input wr_clk;
  input wr_en;

  wire [0:0]E;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_4 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
endmodule

module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss
   (full,
    \count_reg[9] ,
    E,
    v1_reg,
    v1_reg_0,
    clk,
    txfifo_rd_en_reg,
    wr_en,
    SS,
    out,
    rd_en);
  output full;
  output [0:0]\count_reg[9] ;
  output [0:0]E;
  input [4:0]v1_reg;
  input [4:0]v1_reg_0;
  input clk;
  input [0:0]txfifo_rd_en_reg;
  input wr_en;
  input [0:0]SS;
  input out;
  input rd_en;

  wire [0:0]E;
  wire [0:0]SS;
  wire c0_n_0;
  wire clk;
  wire comp1;
  wire [0:0]\count_reg[9] ;
  wire out;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire [0:0]txfifo_rd_en_reg;
  wire [4:0]v1_reg;
  wire [4:0]v1_reg_0;
  wire wr_en;

  assign full = ram_full_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2 c0
       (.SS(SS),
        .comp1(comp1),
        .out(ram_full_fb_i),
        .ram_full_i_reg(c0_n_0),
        .txfifo_rd_en_reg(txfifo_rd_en_reg),
        .v1_reg(v1_reg),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized2_22 c1
       (.comp1(comp1),
        .v1_reg_0(v1_reg_0));
  LUT4 #(
    .INIT(16'h4B44)) 
    \count[9]_i_1 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(out),
        .I3(rd_en),
        .O(\count_reg[9] ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized0
   (out,
    full,
    E,
    v1_reg,
    v1_reg_0,
    clk,
    wr_en,
    srst,
    wr_rst_reg_reg,
    ram_empty_fb_i_reg,
    rd_en);
  output out;
  output full;
  output [0:0]E;
  input [5:0]v1_reg;
  input [5:0]v1_reg_0;
  input clk;
  input wr_en;
  input srst;
  input wr_rst_reg_reg;
  input ram_empty_fb_i_reg;
  input rd_en;

  wire [0:0]E;
  wire c1_n_0;
  wire clk;
  wire comp0;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3 c0
       (.comp0(comp0),
        .v1_reg(v1_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_27 c1
       (.comp0(comp0),
        .out(ram_full_fb_i),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_full_i_reg(c1_n_0),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized0_34
   (out,
    full,
    E,
    v1_reg,
    v1_reg_0,
    clk,
    wr_en,
    srst,
    wr_rst_reg_reg,
    ram_empty_fb_i_reg,
    rd_en);
  output out;
  output full;
  output [0:0]E;
  input [5:0]v1_reg;
  input [5:0]v1_reg_0;
  input clk;
  input wr_en;
  input srst;
  input wr_rst_reg_reg;
  input ram_empty_fb_i_reg;
  input rd_en;

  wire [0:0]E;
  wire c1_n_0;
  wire clk;
  wire comp0;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_36 c0
       (.comp0(comp0),
        .v1_reg(v1_reg));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized3_37 c1
       (.comp0(comp0),
        .out(ram_full_fb_i),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_full_i_reg(c1_n_0),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized1
   (full,
    \count_reg[8] ,
    E,
    v1_reg,
    \gcc0.gc0.count_d1_reg[8] ,
    v1_reg_0,
    \gcc0.gc0.count_reg[8] ,
    clk,
    cs_fifo_rd_en_reg,
    wr_en,
    SS,
    out,
    rd_en);
  output full;
  output [0:0]\count_reg[8] ;
  output [0:0]E;
  input [3:0]v1_reg;
  input \gcc0.gc0.count_d1_reg[8] ;
  input [3:0]v1_reg_0;
  input \gcc0.gc0.count_reg[8] ;
  input clk;
  input [0:0]cs_fifo_rd_en_reg;
  input wr_en;
  input [0:0]SS;
  input out;
  input rd_en;

  wire [0:0]E;
  wire [0:0]SS;
  wire c0_n_0;
  wire clk;
  wire comp1;
  wire [0:0]\count_reg[8] ;
  wire [0:0]cs_fifo_rd_en_reg;
  wire \gcc0.gc0.count_d1_reg[8] ;
  wire \gcc0.gc0.count_reg[8] ;
  wire out;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_en;

  assign full = ram_full_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4 c0
       (.SS(SS),
        .comp1(comp1),
        .cs_fifo_rd_en_reg(cs_fifo_rd_en_reg),
        .\gcc0.gc0.count_d1_reg[8] (\gcc0.gc0.count_d1_reg[8] ),
        .out(ram_full_fb_i),
        .ram_full_i_reg(c0_n_0),
        .v1_reg(v1_reg),
        .wr_en(wr_en));
  ps_emio_eth_1g_AXIS_LMAC_0_1_compare__parameterized4_46 c1
       (.comp1(comp1),
        .\gcc0.gc0.count_reg[8] (\gcc0.gc0.count_reg[8] ),
        .v1_reg_0(v1_reg_0));
  LUT4 #(
    .INIT(16'h4B44)) 
    \count[8]_i_1 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(out),
        .I3(rd_en),
        .O(\count_reg[8] ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized2
   (out,
    full,
    E,
    ram_empty_fb_i_reg,
    clk,
    wr_en);
  output out;
  output full;
  output [0:0]E;
  input ram_empty_fb_i_reg;
  input clk;
  input wr_en;

  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized2_65
   (out,
    full,
    E,
    ram_empty_fb_i_reg,
    clk,
    wr_en);
  output out;
  output full;
  output [0:0]E;
  input ram_empty_fb_i_reg;
  input clk;
  input wr_en;

  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized3
   (out,
    full,
    E,
    \gcc0.gc0.count_reg[7] ,
    ram_empty_fb_i_reg,
    ram_full_fb_i_reg_0,
    clk,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg_0);
  output out;
  output full;
  output [0:0]E;
  output [0:0]\gcc0.gc0.count_reg[7] ;
  output ram_empty_fb_i_reg;
  input ram_full_fb_i_reg_0;
  input clk;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg_0;

  wire [0:0]E;
  wire clk;
  wire [0:0]\gcc0.gc0.count_reg[7] ;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(\gcc0.gc0.count_reg[7] ));
  LUT4 #(
    .INIT(16'h22D2)) 
    \count[7]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg_0),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  LUT2 #(
    .INIT(4'hB)) 
    ram_empty_fb_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .O(ram_empty_fb_i_reg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized3_14
   (out,
    full,
    E,
    \gcc0.gc0.count_reg[7] ,
    ram_empty_fb_i_reg,
    ram_full_fb_i_reg_0,
    clk,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg_0);
  output out;
  output full;
  output [0:0]E;
  output [0:0]\gcc0.gc0.count_reg[7] ;
  output ram_empty_fb_i_reg;
  input ram_full_fb_i_reg_0;
  input clk;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg_0;

  wire [0:0]E;
  wire clk;
  wire [0:0]\gcc0.gc0.count_reg[7] ;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(\gcc0.gc0.count_reg[7] ));
  LUT4 #(
    .INIT(16'h22D2)) 
    \count[7]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg_0),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  LUT2 #(
    .INIT(4'hB)) 
    ram_empty_fb_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .O(ram_empty_fb_i_reg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module ps_emio_eth_1g_AXIS_LMAC_0_1_wr_status_flags_ss__parameterized3_4
   (out,
    full,
    E,
    \gcc0.gc0.count_reg[7] ,
    ram_empty_fb_i_reg,
    ram_full_fb_i_reg_0,
    clk,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg_0);
  output out;
  output full;
  output [0:0]E;
  output [0:0]\gcc0.gc0.count_reg[7] ;
  output ram_empty_fb_i_reg;
  input ram_full_fb_i_reg_0;
  input clk;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg_0;

  wire [0:0]E;
  wire clk;
  wire [0:0]\gcc0.gc0.count_reg[7] ;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(\gcc0.gc0.count_reg[7] ));
  LUT4 #(
    .INIT(16'h22D2)) 
    \count[7]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg_0),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  LUT2 #(
    .INIT(4'hB)) 
    ram_empty_fb_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .O(ram_empty_fb_i_reg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_i),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
